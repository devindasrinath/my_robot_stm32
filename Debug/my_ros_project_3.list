
my_ros_project_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2c4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  0800e3d8  0800e3d8  0000f3d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb78  0800eb78  00010208  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb78  0800eb78  0000fb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb80  0800eb80  00010208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800eb80  0800eb80  0000fb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb88  0800eb88  0000fb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800eb8c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002570  20000208  0800ed94  00010208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002778  0800ed94  00010778  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000226d1  00000000  00000000  00010231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d27  00000000  00000000  00032902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00037630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000126e  00000000  00000000  00038e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000142e3  00000000  00000000  0003a086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000f127  00000000  00000000  0004e369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0005d490  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007774  00000000  00000000  0005d4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005a  00000000  00000000  00064c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e3bc 	.word	0x0800e3bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800e3bc 	.word	0x0800e3bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <MX_DMA_Init+0x48>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <MX_DMA_Init+0x48>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6153      	str	r3, [r2, #20]
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <MX_DMA_Init+0x48>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2105      	movs	r1, #5
 8000da6:	200e      	movs	r0, #14
 8000da8:	f003 fc59 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000dac:	200e      	movs	r0, #14
 8000dae:	f003 fc72 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2105      	movs	r1, #5
 8000db6:	200f      	movs	r0, #15
 8000db8:	f003 fc51 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000dbc:	200f      	movs	r0, #15
 8000dbe:	f003 fc6a 	bl	8004696 <HAL_NVIC_EnableIRQ>

}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <vApplicationGetIdleTaskMemory+0x28>)
 8000de0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <vApplicationGetIdleTaskMemory+0x2c>)
 8000de6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	20000230 	.word	0x20000230
 8000dfc:	20000284 	.word	0x20000284

08000e00 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <vApplicationGetTimerTaskMemory+0x2c>)
 8000e10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <vApplicationGetTimerTaskMemory+0x30>)
 8000e16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e1e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000484 	.word	0x20000484
 8000e30:	200004d8 	.word	0x200004d8

08000e34 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myPIDTimer01 */
  osTimerDef(myPIDTimer01, Callback01);
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <MX_FREERTOS_Init+0x68>)
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  myPIDTimer01Handle = osTimerCreate(osTimer(myPIDTimer01), osTimerPeriodic, NULL);
 8000e42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f007 f866 	bl	8007f1c <osTimerCreate>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a13      	ldr	r2, [pc, #76]	@ (8000ea0 <MX_FREERTOS_Init+0x6c>)
 8000e54:	6013      	str	r3, [r2, #0]

  /* definition and creation of myROSTimer02 */
  osTimerDef(myROSTimer02, Callback02);
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <MX_FREERTOS_Init+0x70>)
 8000e58:	623b      	str	r3, [r7, #32]
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  myROSTimer02Handle = osTimerCreate(osTimer(myROSTimer02), osTimerPeriodic, NULL);
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	2200      	movs	r2, #0
 8000e64:	2101      	movs	r1, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f007 f858 	bl	8007f1c <osTimerCreate>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <MX_FREERTOS_Init+0x74>)
 8000e70:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultROSTask */
  osThreadDef(defaultROSTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_FREERTOS_Init+0x78>)
 8000e74:	1d3c      	adds	r4, r7, #4
 8000e76:	461d      	mov	r5, r3
 8000e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultROSTaskHandle = osThreadCreate(osThread(defaultROSTask), NULL);
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 ffe7 	bl	8007e5c <osThreadCreate>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a07      	ldr	r2, [pc, #28]	@ (8000eb0 <MX_FREERTOS_Init+0x7c>)
 8000e92:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000e94:	bf00      	nop
 8000e96:	3730      	adds	r7, #48	@ 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9c:	08000ee5 	.word	0x08000ee5
 8000ea0:	20000228 	.word	0x20000228
 8000ea4:	08000ffd 	.word	0x08000ffd
 8000ea8:	2000022c 	.word	0x2000022c
 8000eac:	0800e3e8 	.word	0x0800e3e8
 8000eb0:	20000224 	.word	0x20000224

08000eb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	/* Start Timers for both loops */
	osTimerStart (myPIDTimer01Handle,PID_LOOP_PERIOD_MS );
 8000ebc:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <StartDefaultTask+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	210a      	movs	r1, #10
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f007 f85e 	bl	8007f84 <osTimerStart>
	osTimerStart (myROSTimer02Handle,ROS_LOOP_PERIOD_MS );
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <StartDefaultTask+0x2c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2164      	movs	r1, #100	@ 0x64
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f007 f858 	bl	8007f84 <osTimerStart>

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f007 f80d 	bl	8007ef4 <osDelay>
 8000eda:	e7fb      	b.n	8000ed4 <StartDefaultTask+0x20>
 8000edc:	20000228 	.word	0x20000228
 8000ee0:	2000022c 	.word	0x2000022c

08000ee4 <Callback01>:
  /* USER CODE END StartDefaultTask */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

	/* update encoder count */
	update_encoder_count_per_sampling_period(&left_motor_dynamics);
 8000eec:	4837      	ldr	r0, [pc, #220]	@ (8000fcc <Callback01+0xe8>)
 8000eee:	f006 fcef 	bl	80078d0 <update_encoder_count_per_sampling_period>
	update_encoder_count_per_sampling_period(&right_motor_dynamics);
 8000ef2:	4837      	ldr	r0, [pc, #220]	@ (8000fd0 <Callback01+0xec>)
 8000ef4:	f006 fcec 	bl	80078d0 <update_encoder_count_per_sampling_period>

	/* update target motor velocities count */
	pid_controller_left_motor.target_value = left_vel;
 8000ef8:	4b36      	ldr	r3, [pc, #216]	@ (8000fd4 <Callback01+0xf0>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	4936      	ldr	r1, [pc, #216]	@ (8000fd8 <Callback01+0xf4>)
 8000f00:	e9c1 2300 	strd	r2, r3, [r1]
	pid_controller_right_motor.target_value = right_vel;
 8000f04:	4b35      	ldr	r3, [pc, #212]	@ (8000fdc <Callback01+0xf8>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	4935      	ldr	r1, [pc, #212]	@ (8000fe0 <Callback01+0xfc>)
 8000f0c:	e9c1 2300 	strd	r2, r3, [r1]

	/* Update real time velocities */
	real_left_vel = get_speed_rpm(&left_motor_dynamics);
 8000f10:	482e      	ldr	r0, [pc, #184]	@ (8000fcc <Callback01+0xe8>)
 8000f12:	f006 fdb1 	bl	8007a78 <get_speed_rpm>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4932      	ldr	r1, [pc, #200]	@ (8000fe4 <Callback01+0x100>)
 8000f1c:	e9c1 2300 	strd	r2, r3, [r1]
	real_right_vel = get_speed_rpm(&right_motor_dynamics);
 8000f20:	482b      	ldr	r0, [pc, #172]	@ (8000fd0 <Callback01+0xec>)
 8000f22:	f006 fda9 	bl	8007a78 <get_speed_rpm>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	492f      	ldr	r1, [pc, #188]	@ (8000fe8 <Callback01+0x104>)
 8000f2c:	e9c1 2300 	strd	r2, r3, [r1]

	/* Robot moving command */
	if(command == ROBOT_MOVE)
 8000f30:	4b2e      	ldr	r3, [pc, #184]	@ (8000fec <Callback01+0x108>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d138      	bne.n	8000fac <Callback01+0xc8>
	{
		/* Calculate PID outputs and control motors */
		pid_controller_left_motor.current_value = get_speed_count(&left_motor_dynamics);
 8000f3a:	4824      	ldr	r0, [pc, #144]	@ (8000fcc <Callback01+0xe8>)
 8000f3c:	f006 fd78 	bl	8007a30 <get_speed_count>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fa5e 	bl	8000404 <__aeabi_i2d>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4922      	ldr	r1, [pc, #136]	@ (8000fd8 <Callback01+0xf4>)
 8000f4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		pid_controller_right_motor.current_value = get_speed_count(&right_motor_dynamics);
 8000f52:	481f      	ldr	r0, [pc, #124]	@ (8000fd0 <Callback01+0xec>)
 8000f54:	f006 fd6c 	bl	8007a30 <get_speed_count>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa52 	bl	8000404 <__aeabi_i2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	491e      	ldr	r1, [pc, #120]	@ (8000fe0 <Callback01+0xfc>)
 8000f66:	e9c1 2302 	strd	r2, r3, [r1, #8]

		PID_calculate(&pid_controller_left_motor);
 8000f6a:	481b      	ldr	r0, [pc, #108]	@ (8000fd8 <Callback01+0xf4>)
 8000f6c:	f006 fe8a 	bl	8007c84 <PID_calculate>
		PID_calculate(&pid_controller_right_motor);
 8000f70:	481b      	ldr	r0, [pc, #108]	@ (8000fe0 <Callback01+0xfc>)
 8000f72:	f006 fe87 	bl	8007c84 <PID_calculate>

		motor_run(&motor2,pid_controller_left_motor.output/1024.0); /* PWM is range from 0 - 1 ,PID output range from  0 -1024 */
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <Callback01+0xf4>)
 8000f78:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <Callback01+0x10c>)
 8000f82:	f7ff fbd3 	bl	800072c <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	481a      	ldr	r0, [pc, #104]	@ (8000ff4 <Callback01+0x110>)
 8000f8c:	f006 fb2a 	bl	80075e4 <motor_run>
		motor_run(&motor1,pid_controller_right_motor.output/1024.0); /* PWM is range from 0 - 1 ,PID output range from  0 -1024 */
 8000f90:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <Callback01+0xfc>)
 8000f92:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <Callback01+0x10c>)
 8000f9c:	f7ff fbc6 	bl	800072c <__aeabi_ddiv>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4814      	ldr	r0, [pc, #80]	@ (8000ff8 <Callback01+0x114>)
 8000fa6:	f006 fb1d 	bl	80075e4 <motor_run>
		PID_reset(&pid_controller_right_motor);
		PID_reset(&pid_controller_left_motor);
	}

  /* USER CODE END Callback01 */
}
 8000faa:	e00b      	b.n	8000fc4 <Callback01+0xe0>
		motor_stop(&motor2);
 8000fac:	4811      	ldr	r0, [pc, #68]	@ (8000ff4 <Callback01+0x110>)
 8000fae:	f006 fbc3 	bl	8007738 <motor_stop>
		motor_stop(&motor1);
 8000fb2:	4811      	ldr	r0, [pc, #68]	@ (8000ff8 <Callback01+0x114>)
 8000fb4:	f006 fbc0 	bl	8007738 <motor_stop>
		PID_reset(&pid_controller_right_motor);
 8000fb8:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <Callback01+0xfc>)
 8000fba:	f006 fefb 	bl	8007db4 <PID_reset>
		PID_reset(&pid_controller_left_motor);
 8000fbe:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <Callback01+0xf4>)
 8000fc0:	f006 fef8 	bl	8007db4 <PID_reset>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200008d8 	.word	0x200008d8
 8000fd0:	20000928 	.word	0x20000928
 8000fd4:	20000b28 	.word	0x20000b28
 8000fd8:	20000a50 	.word	0x20000a50
 8000fdc:	20000b30 	.word	0x20000b30
 8000fe0:	20000ab8 	.word	0x20000ab8
 8000fe4:	20000b40 	.word	0x20000b40
 8000fe8:	20000b48 	.word	0x20000b48
 8000fec:	20000b20 	.word	0x20000b20
 8000ff0:	40900000 	.word	0x40900000
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	20000000 	.word	0x20000000

08000ffc <Callback02>:

/* Callback02 function */
void Callback02(void const * argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
	loop();
 8001004:	f001 ff34 	bl	8002e70 <loop>
  /* USER CODE END Callback02 */
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	4b2e      	ldr	r3, [pc, #184]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a2d      	ldr	r2, [pc, #180]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103c:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 8001042:	f043 0320 	orr.w	r3, r3, #32
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a1b      	ldr	r2, [pc, #108]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 8001072:	f043 0308 	orr.w	r3, r3, #8
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <MX_GPIO_Init+0xd0>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800108a:	4816      	ldr	r0, [pc, #88]	@ (80010e4 <MX_GPIO_Init+0xd4>)
 800108c:	f003 ff38 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001096:	4814      	ldr	r0, [pc, #80]	@ (80010e8 <MX_GPIO_Init+0xd8>)
 8001098:	f003 ff32 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800109c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4619      	mov	r1, r3
 80010b4:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <MX_GPIO_Init+0xd4>)
 80010b6:	f003 fd9f 	bl	8004bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010ba:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_GPIO_Init+0xd8>)
 80010d4:	f003 fd90 	bl	8004bf8 <HAL_GPIO_Init>

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40011000 	.word	0x40011000
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	00000000 	.word	0x00000000

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f6:	f003 f9cb 	bl	8004490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fa:	f000 f8c1 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fe:	f7ff ff87 	bl	8001010 <MX_GPIO_Init>
  MX_DMA_Init();
 8001102:	f7ff fe3f 	bl	8000d84 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001106:	f003 f867 	bl	80041d8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800110a:	f002 fe65 	bl	8003dd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800110e:	f002 fed7 	bl	8003ec0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001112:	f002 ff29 	bl	8003f68 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001116:	f003 f889 	bl	800422c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize filters */
  init_filter(&leftMotorAverageFilter, FILTER_LENGTH);
 800111a:	2164      	movs	r1, #100	@ 0x64
 800111c:	4848      	ldr	r0, [pc, #288]	@ (8001240 <main+0x150>)
 800111e:	f006 fd47 	bl	8007bb0 <init_filter>
  init_filter(&rightMotorAverageFilter, FILTER_LENGTH);
 8001122:	2164      	movs	r1, #100	@ 0x64
 8001124:	4847      	ldr	r0, [pc, #284]	@ (8001244 <main+0x154>)
 8001126:	f006 fd43 	bl	8007bb0 <init_filter>

  /* Initialize PID loops */
  PID_Init(&pid_controller_left_motor,KP,KI,KD,DT,PWM_MIN,PWM_MAX);
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	4b46      	ldr	r3, [pc, #280]	@ (8001248 <main+0x158>)
 8001130:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b44      	ldr	r3, [pc, #272]	@ (800124c <main+0x15c>)
 800113a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800113e:	a33a      	add	r3, pc, #232	@ (adr r3, 8001228 <main+0x138>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001148:	a339      	add	r3, pc, #228	@ (adr r3, 8001230 <main+0x140>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b3e      	ldr	r3, [pc, #248]	@ (8001250 <main+0x160>)
 8001158:	e9cd 2300 	strd	r2, r3, [sp]
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b3c      	ldr	r3, [pc, #240]	@ (8001254 <main+0x164>)
 8001162:	483d      	ldr	r0, [pc, #244]	@ (8001258 <main+0x168>)
 8001164:	f006 fd49 	bl	8007bfa <PID_Init>
  PID_Init(&pid_controller_right_motor,KP,KI,KD,DT,PWM_MIN,PWM_MAX);
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b36      	ldr	r3, [pc, #216]	@ (8001248 <main+0x158>)
 800116e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b35      	ldr	r3, [pc, #212]	@ (800124c <main+0x15c>)
 8001178:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800117c:	a32a      	add	r3, pc, #168	@ (adr r3, 8001228 <main+0x138>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001186:	a32a      	add	r3, pc, #168	@ (adr r3, 8001230 <main+0x140>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b2e      	ldr	r3, [pc, #184]	@ (8001250 <main+0x160>)
 8001196:	e9cd 2300 	strd	r2, r3, [sp]
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b2d      	ldr	r3, [pc, #180]	@ (8001254 <main+0x164>)
 80011a0:	482e      	ldr	r0, [pc, #184]	@ (800125c <main+0x16c>)
 80011a2:	f006 fd2a 	bl	8007bfa <PID_Init>

  /* Initialize motor dynamics */
  init_motor_dynamics(&left_motor_dynamics, WHEEL_DIAMETER, MOTOR_GEAR_RATIO, ENCODER_RESOLUTION, &leftMotorAverageFilter, &htim3);
 80011a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001260 <main+0x170>)
 80011a8:	9305      	str	r3, [sp, #20]
 80011aa:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <main+0x150>)
 80011ac:	9304      	str	r3, [sp, #16]
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <main+0x174>)
 80011b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <main+0x178>)
 80011be:	e9cd 2300 	strd	r2, r3, [sp]
 80011c2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001238 <main+0x148>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	4828      	ldr	r0, [pc, #160]	@ (800126c <main+0x17c>)
 80011ca:	f006 fb3d 	bl	8007848 <init_motor_dynamics>
  init_motor_dynamics(&right_motor_dynamics, WHEEL_DIAMETER, MOTOR_GEAR_RATIO, ENCODER_RESOLUTION, &rightMotorAverageFilter, &htim4);
 80011ce:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <main+0x180>)
 80011d0:	9305      	str	r3, [sp, #20]
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <main+0x154>)
 80011d4:	9304      	str	r3, [sp, #16]
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <main+0x174>)
 80011dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <main+0x178>)
 80011e6:	e9cd 2300 	strd	r2, r3, [sp]
 80011ea:	a313      	add	r3, pc, #76	@ (adr r3, 8001238 <main+0x148>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	4820      	ldr	r0, [pc, #128]	@ (8001274 <main+0x184>)
 80011f2:	f006 fb29 	bl	8007848 <init_motor_dynamics>

  /* Enable motors */
  enable_motor(&motor1);
 80011f6:	4820      	ldr	r0, [pc, #128]	@ (8001278 <main+0x188>)
 80011f8:	f006 fada 	bl	80077b0 <enable_motor>
  enable_motor(&motor2);
 80011fc:	481f      	ldr	r0, [pc, #124]	@ (800127c <main+0x18c>)
 80011fe:	f006 fad7 	bl	80077b0 <enable_motor>

  /* Start encoders */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001202:	213c      	movs	r1, #60	@ 0x3c
 8001204:	4816      	ldr	r0, [pc, #88]	@ (8001260 <main+0x170>)
 8001206:	f004 fd11 	bl	8005c2c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800120a:	213c      	movs	r1, #60	@ 0x3c
 800120c:	4818      	ldr	r0, [pc, #96]	@ (8001270 <main+0x180>)
 800120e:	f004 fd0d 	bl	8005c2c <HAL_TIM_Encoder_Start>

  /* Setup ROS event loop */
  setup();
 8001212:	f001 fe15 	bl	8002e40 <setup>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001216:	f7ff fe0d 	bl	8000e34 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800121a:	f006 fe18 	bl	8007e4e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121e:	bf00      	nop
 8001220:	e7fd      	b.n	800121e <main+0x12e>
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	47ae147b 	.word	0x47ae147b
 800122c:	3f847ae1 	.word	0x3f847ae1
 8001230:	eb1c432d 	.word	0xeb1c432d
 8001234:	3f1a36e2 	.word	0x3f1a36e2
 8001238:	eb851eb8 	.word	0xeb851eb8
 800123c:	3faeb851 	.word	0x3faeb851
 8001240:	20000978 	.word	0x20000978
 8001244:	200009e4 	.word	0x200009e4
 8001248:	40900000 	.word	0x40900000
 800124c:	c0900000 	.word	0xc0900000
 8001250:	40080000 	.word	0x40080000
 8001254:	3ff00000 	.word	0x3ff00000
 8001258:	20000a50 	.word	0x20000a50
 800125c:	20000ab8 	.word	0x20000ab8
 8001260:	200015f4 	.word	0x200015f4
 8001264:	40260000 	.word	0x40260000
 8001268:	40468000 	.word	0x40468000
 800126c:	200008d8 	.word	0x200008d8
 8001270:	2000163c 	.word	0x2000163c
 8001274:	20000928 	.word	0x20000928
 8001278:	20000000 	.word	0x20000000
 800127c:	20000010 	.word	0x20000010

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b090      	sub	sp, #64	@ 0x40
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	2228      	movs	r2, #40	@ 0x28
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f00b f8ab 	bl	800c3ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b4:	2302      	movs	r3, #2
 80012b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80012c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 fe31 	bl	8004f30 <HAL_RCC_OscConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012d4:	f000 f82c 	bl	8001330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d8:	230f      	movs	r3, #15
 80012da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012dc:	2302      	movs	r3, #2
 80012de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2102      	movs	r1, #2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 f89e 	bl	8005434 <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012fe:	f000 f817 	bl	8001330 <Error_Handler>
  }
}
 8001302:	bf00      	nop
 8001304:	3740      	adds	r7, #64	@ 0x40
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a04      	ldr	r2, [pc, #16]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800131e:	f003 f8cd 	bl	80044bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40012c00 	.word	0x40012c00

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <Error_Handler+0x8>

0800133c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <_ZN3ros3MsgC1Ev+0x1c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	0800e79c 	.word	0x0800e79c

0800137c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
      data()
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ffe8 	bl	800135c <_ZN3ros3MsgC1Ev>
 800138c:	4a06      	ldr	r2, [pc, #24]	@ (80013a8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3304      	adds	r3, #4
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ffd0 	bl	800133c <_ZN3ros4TimeC1Ev>
    {
    }
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	0800e784 	.word	0x0800e784

080013ac <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6859      	ldr	r1, [r3, #4]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	b2ca      	uxtb	r2, r1
 80013c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	0a19      	lsrs	r1, r3, #8
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3301      	adds	r3, #1
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	b2ca      	uxtb	r2, r1
 80013d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	0c19      	lsrs	r1, r3, #16
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3302      	adds	r3, #2
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	b2ca      	uxtb	r2, r1
 80013ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	0e19      	lsrs	r1, r3, #24
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3303      	adds	r3, #3
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	b2ca      	uxtb	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3304      	adds	r3, #4
 8001402:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6899      	ldr	r1, [r3, #8]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	4413      	add	r3, r2
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	0a19      	lsrs	r1, r3, #8
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3301      	adds	r3, #1
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	4413      	add	r3, r2
 8001420:	b2ca      	uxtb	r2, r1
 8001422:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	0c19      	lsrs	r1, r3, #16
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3302      	adds	r3, #2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	0e19      	lsrs	r1, r3, #24
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3303      	adds	r3, #3
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	4413      	add	r3, r2
 8001444:	b2ca      	uxtb	r2, r1
 8001446:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3304      	adds	r3, #4
 800144c:	60fb      	str	r3, [r7, #12]
      return offset;
 800144e:	68fb      	ldr	r3, [r7, #12]
    }
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	440b      	add	r3, r1
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3302      	adds	r3, #2
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	440b      	add	r3, r1
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	041b      	lsls	r3, r3, #16
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3303      	adds	r3, #3
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	440b      	add	r3, r1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3304      	adds	r3, #4
 80014bc:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	6839      	ldr	r1, [r7, #0]
 80014d6:	440b      	add	r3, r1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3302      	adds	r3, #2
 80014ea:	6839      	ldr	r1, [r7, #0]
 80014ec:	440b      	add	r3, r1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	041b      	lsls	r3, r3, #16
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3303      	adds	r3, #3
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	440b      	add	r3, r1
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	061b      	lsls	r3, r3, #24
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3304      	adds	r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
     return offset;
 8001514:	68fb      	ldr	r3, [r7, #12]
    }
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	4b02      	ldr	r3, [pc, #8]	@ (8001534 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	0800e404 	.word	0x0800e404

08001538 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	4b02      	ldr	r3, [pc, #8]	@ (800154c <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	0800e414 	.word	0x0800e414

08001550 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fefe 	bl	800135c <_ZN3ros3MsgC1Ev>
 8001560:	4a0b      	ldr	r2, [pc, #44]	@ (8001590 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a09      	ldr	r2, [pc, #36]	@ (8001594 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001570:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a07      	ldr	r2, [pc, #28]	@ (8001594 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001576:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a06      	ldr	r2, [pc, #24]	@ (8001594 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800157c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	615a      	str	r2, [r3, #20]
    {
    }
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800e76c 	.word	0x0800e76c
 8001594:	0800e438 	.word	0x0800e438

08001598 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8899      	ldrh	r1, [r3, #4]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	b2ca      	uxtb	r2, r1
 80015b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	889b      	ldrh	r3, [r3, #4]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	b299      	uxth	r1, r3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	3301      	adds	r3, #1
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	b2ca      	uxtb	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	3302      	adds	r3, #2
 80015cc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe fdbc 	bl	8000150 <strlen>
 80015d8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	69b9      	ldr	r1, [r7, #24]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fca8 	bl	8002f38 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	3304      	adds	r3, #4
 80015ec:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	18d0      	adds	r0, r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4619      	mov	r1, r3
 80015fc:	f00a ffd7 	bl	800c5ae <memcpy>
      offset += length_topic_name;
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4413      	add	r3, r2
 8001606:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe fd9f 	bl	8000150 <strlen>
 8001612:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	6979      	ldr	r1, [r7, #20]
 800161c:	4618      	mov	r0, r3
 800161e:	f001 fc8b 	bl	8002f38 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4619      	mov	r1, r3
 8001636:	f00a ffba 	bl	800c5ae <memcpy>
      offset += length_message_type;
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	4413      	add	r3, r2
 8001640:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fd82 	bl	8000150 <strlen>
 800164c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	4413      	add	r3, r2
 8001654:	6939      	ldr	r1, [r7, #16]
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fc6e 	bl	8002f38 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	3304      	adds	r3, #4
 8001660:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	18d0      	adds	r0, r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4619      	mov	r1, r3
 8001670:	f00a ff9d 	bl	800c5ae <memcpy>
      offset += length_md5sum;
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4413      	add	r3, r2
 800167a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001682:	68f9      	ldr	r1, [r7, #12]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	4413      	add	r3, r2
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	0a19      	lsrs	r1, r3, #8
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3301      	adds	r3, #1
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	4413      	add	r3, r2
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	0c19      	lsrs	r1, r3, #16
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3302      	adds	r3, #2
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	0e19      	lsrs	r1, r3, #24
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3303      	adds	r3, #3
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	4413      	add	r3, r2
 80016ba:	b2ca      	uxtb	r2, r1
 80016bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	61fb      	str	r3, [r7, #28]
      return offset;
 80016c4:	69fb      	ldr	r3, [r7, #28]
    }
 80016c6:	4618      	mov	r0, r3
 80016c8:	3720      	adds	r7, #32
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b08a      	sub	sp, #40	@ 0x28
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	889b      	ldrh	r3, [r3, #4]
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	3301      	adds	r3, #1
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	440b      	add	r3, r1
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21b      	sxth	r3, r3
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	3302      	adds	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	441a      	add	r2, r3
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f001 fc2a 	bl	8002f74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	3304      	adds	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
 800172a:	e00b      	b.n	8001744 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	441a      	add	r2, r3
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	3b01      	subs	r3, #1
 8001736:	6839      	ldr	r1, [r7, #0]
 8001738:	440b      	add	r3, r1
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	3301      	adds	r3, #1
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	4413      	add	r3, r2
 800174a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174c:	429a      	cmp	r2, r3
 800174e:	d3ed      	bcc.n	800172c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	4413      	add	r3, r2
 8001756:	3b01      	subs	r3, #1
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	4413      	add	r3, r2
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	3b01      	subs	r3, #1
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	441a      	add	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	441a      	add	r2, r3
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f001 fbf7 	bl	8002f74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	3304      	adds	r3, #4
 800178a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	623b      	str	r3, [r7, #32]
 8001790:	e00b      	b.n	80017aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	441a      	add	r2, r3
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	3b01      	subs	r3, #1
 800179c:	6839      	ldr	r1, [r7, #0]
 800179e:	440b      	add	r3, r1
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	3301      	adds	r3, #1
 80017a8:	623b      	str	r3, [r7, #32]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4413      	add	r3, r2
 80017b0:	6a3a      	ldr	r2, [r7, #32]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3ed      	bcc.n	8001792 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4413      	add	r3, r2
 80017bc:	3b01      	subs	r3, #1
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	441a      	add	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4413      	add	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	441a      	add	r2, r3
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fbc4 	bl	8002f74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	3304      	adds	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	e00b      	b.n	8001810 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	441a      	add	r2, r3
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b01      	subs	r3, #1
 8001802:	6839      	ldr	r1, [r7, #0]
 8001804:	440b      	add	r3, r1
 8001806:	7812      	ldrb	r2, [r2, #0]
 8001808:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	429a      	cmp	r2, r3
 800181a:	d3ed      	bcc.n	80017f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	3b01      	subs	r3, #1
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	4413      	add	r3, r2
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	3b01      	subs	r3, #1
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	441a      	add	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	6839      	ldr	r1, [r7, #0]
 800184a:	440a      	add	r2, r1
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	3301      	adds	r3, #1
 8001858:	6839      	ldr	r1, [r7, #0]
 800185a:	440b      	add	r3, r1
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	4313      	orrs	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	3302      	adds	r3, #2
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	440b      	add	r3, r1
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	041b      	lsls	r3, r3, #16
 8001872:	4313      	orrs	r3, r2
 8001874:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	3303      	adds	r3, #3
 800187c:	6839      	ldr	r1, [r7, #0]
 800187e:	440b      	add	r3, r1
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	061b      	lsls	r3, r3, #24
 8001884:	4313      	orrs	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	3304      	adds	r3, #4
 8001892:	61bb      	str	r3, [r7, #24]
     return offset;
 8001894:	69bb      	ldr	r3, [r7, #24]
    }
 8001896:	4618      	mov	r0, r3
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	4b02      	ldr	r3, [pc, #8]	@ (80018b4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	0800e43c 	.word	0x0800e43c

080018b8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	4b02      	ldr	r3, [pc, #8]	@ (80018cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	0800e458 	.word	0x0800e458

080018d0 <_ZN14rosserial_msgs3LogC1Ev>:
	};
	enum {
		FATAL = 4
	};

	Log() :
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
			level(0), msg("") {
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fd3e 	bl	800135c <_ZN3ros3MsgC1Ev>
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	711a      	strb	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80018f0:	609a      	str	r2, [r3, #8]
	}
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	0800e754 	.word	0x0800e754
 8001900:	0800e438 	.word	0x0800e438

08001904 <_ZNK14rosserial_msgs3Log9serializeEPh>:

	virtual int serialize(unsigned char *outbuffer) const override
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
		*(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	7912      	ldrb	r2, [r2, #4]
 800191c:	701a      	strb	r2, [r3, #0]
		offset += sizeof(this->level);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
		uint32_t length_msg = strlen(this->msg);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fc11 	bl	8000150 <strlen>
 800192e:	60b8      	str	r0, [r7, #8]
		varToArr(outbuffer + offset, length_msg);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	4413      	add	r3, r2
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fafd 	bl	8002f38 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
		offset += 4;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3304      	adds	r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
		memcpy(outbuffer + offset, this->msg, length_msg);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	18d0      	adds	r0, r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	4619      	mov	r1, r3
 8001952:	f00a fe2c 	bl	800c5ae <memcpy>
		offset += length_msg;
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
		return offset;
 800195e:	68fb      	ldr	r3, [r7, #12]
	}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_ZN14rosserial_msgs3Log11deserializeEPh>:

	virtual int deserialize(unsigned char *inbuffer) override
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
		this->level = ((uint8_t) (*(inbuffer + offset)));
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	4413      	add	r3, r2
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	711a      	strb	r2, [r3, #4]
		offset += sizeof(this->level);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	3301      	adds	r3, #1
 8001986:	613b      	str	r3, [r7, #16]
		uint32_t length_msg;
		arrToVar(length_msg, (inbuffer + offset));
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	441a      	add	r2, r3
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f001 faed 	bl	8002f74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
		offset += 4;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	3304      	adds	r3, #4
 800199e:	613b      	str	r3, [r7, #16]
		for (unsigned int k = offset; k < offset + length_msg; ++k) {
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e00b      	b.n	80019be <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
			inbuffer[k - 1] = inbuffer[k];
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	441a      	add	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6839      	ldr	r1, [r7, #0]
 80019b2:	440b      	add	r3, r1
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	701a      	strb	r2, [r3, #0]
		for (unsigned int k = offset; k < offset + length_msg; ++k) {
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3ed      	bcc.n	80019a6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
		}
		inbuffer[offset + length_msg - 1] = 0;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	3b01      	subs	r3, #1
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
		this->msg = (char*) (inbuffer + offset - 1);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	3b01      	subs	r3, #1
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	441a      	add	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]
		offset += length_msg;
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
		return offset;
 80019ee:	693b      	ldr	r3, [r7, #16]
	}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_ZN14rosserial_msgs3Log7getTypeEv>:

	virtual const char* getType() override {
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
		return "rosserial_msgs/Log";
 8001a00:	4b02      	ldr	r3, [pc, #8]	@ (8001a0c <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
	}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	0800e47c 	.word	0x0800e47c

08001a10 <_ZN14rosserial_msgs3Log6getMD5Ev>:
	;
	virtual const char* getMD5() override {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
		return "11abd731c25933261cd6183bd12d6295";
 8001a18:	4b02      	ldr	r3, [pc, #8]	@ (8001a24 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
	}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	0800e490 	.word	0x0800e490

08001a28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fc92 	bl	800135c <_ZN3ros3MsgC1Ev>
 8001a38:	4a11      	ldr	r2, [pc, #68]	@ (8001a80 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	0800e73c 	.word	0x0800e73c

08001a84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6859      	ldr	r1, [r3, #4]
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b2ca      	uxtb	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	0a19      	lsrs	r1, r3, #8
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	0c19      	lsrs	r1, r3, #16
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	3302      	adds	r3, #2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b2ca      	uxtb	r2, r1
 8001ac2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	0e19      	lsrs	r1, r3, #24
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	3303      	adds	r3, #3
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b2ca      	uxtb	r2, r1
 8001ad4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	3304      	adds	r3, #4
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	e02a      	b.n	8001b38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001af0:	6939      	ldr	r1, [r7, #16]
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	b2ca      	uxtb	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	0a19      	lsrs	r1, r3, #8
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	3301      	adds	r3, #1
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	b2ca      	uxtb	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	0c19      	lsrs	r1, r3, #16
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	3302      	adds	r3, #2
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	b2ca      	uxtb	r2, r1
 8001b1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	0e19      	lsrs	r1, r3, #24
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	3303      	adds	r3, #3
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	b2ca      	uxtb	r2, r1
 8001b2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	3304      	adds	r3, #4
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	3301      	adds	r3, #1
 8001b36:	623b      	str	r3, [r7, #32]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	6a3a      	ldr	r2, [r7, #32]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d3cf      	bcc.n	8001ae2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6919      	ldr	r1, [r3, #16]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b2ca      	uxtb	r2, r1
 8001b4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	0a19      	lsrs	r1, r3, #8
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	3301      	adds	r3, #1
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	b2ca      	uxtb	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	0c19      	lsrs	r1, r3, #16
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b2ca      	uxtb	r2, r1
 8001b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	0e19      	lsrs	r1, r3, #24
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	3303      	adds	r3, #3
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	b2ca      	uxtb	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	3304      	adds	r3, #4
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	e02a      	b.n	8001be8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001ba0:	68f9      	ldr	r1, [r7, #12]
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b2ca      	uxtb	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	0a19      	lsrs	r1, r3, #8
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b2ca      	uxtb	r2, r1
 8001bba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	0c19      	lsrs	r1, r3, #16
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b2ca      	uxtb	r2, r1
 8001bca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	0e19      	lsrs	r1, r3, #24
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	3303      	adds	r3, #3
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b2ca      	uxtb	r2, r1
 8001bda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	3304      	adds	r3, #4
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3cf      	bcc.n	8001b92 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69d9      	ldr	r1, [r3, #28]
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2ca      	uxtb	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	0a19      	lsrs	r1, r3, #8
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	3301      	adds	r3, #1
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b2ca      	uxtb	r2, r1
 8001c10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	0c19      	lsrs	r1, r3, #16
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b2ca      	uxtb	r2, r1
 8001c22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	0e19      	lsrs	r1, r3, #24
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	3304      	adds	r3, #4
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	e027      	b.n	8001c92 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fa7e 	bl	8000150 <strlen>
 8001c54:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	6979      	ldr	r1, [r7, #20]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 f96a 	bl	8002f38 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	3304      	adds	r3, #4
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	18d0      	adds	r0, r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f00a fc95 	bl	800c5ae <memcpy>
      offset += length_stringsi;
 8001c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	4413      	add	r3, r2
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d3d2      	bcc.n	8001c42 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3728      	adds	r7, #40	@ 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b08e      	sub	sp, #56	@ 0x38
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	6a3a      	ldr	r2, [r7, #32]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	6a3a      	ldr	r2, [r7, #32]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	6a3a      	ldr	r2, [r7, #32]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	6a3a      	ldr	r2, [r7, #32]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d90a      	bls.n	8001d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4610      	mov	r0, r2
 8001d10:	f009 fdb4 	bl	800b87c <realloc>
 8001d14:	4602      	mov	r2, r0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a3a      	ldr	r2, [r7, #32]
 8001d1e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d24:	e035      	b.n	8001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d2e:	6839      	ldr	r1, [r7, #0]
 8001d30:	440a      	add	r2, r1
 8001d32:	7812      	ldrb	r2, [r2, #0]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	6839      	ldr	r1, [r7, #0]
 8001d40:	440b      	add	r3, r1
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d4e:	3302      	adds	r3, #2
 8001d50:	6839      	ldr	r1, [r7, #0]
 8001d52:	440b      	add	r3, r1
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	041b      	lsls	r3, r3, #16
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d60:	3303      	adds	r3, #3
 8001d62:	6839      	ldr	r1, [r7, #0]
 8001d64:	440b      	add	r3, r1
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d76:	3304      	adds	r3, #4
 8001d78:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8e:	3301      	adds	r3, #1
 8001d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3c4      	bcc.n	8001d26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da8:	3301      	adds	r3, #1
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dba:	3302      	adds	r3, #2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	041b      	lsls	r3, r3, #16
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dcc:	3303      	adds	r3, #3
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dde:	3304      	adds	r3, #4
 8001de0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d90a      	bls.n	8001e02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f009 fd40 	bl	800b87c <realloc>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e0c:	e035      	b.n	8001e7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e16:	6839      	ldr	r1, [r7, #0]
 8001e18:	440a      	add	r2, r1
 8001e1a:	7812      	ldrb	r2, [r2, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e24:	3301      	adds	r3, #1
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	440b      	add	r3, r1
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e36:	3302      	adds	r3, #2
 8001e38:	6839      	ldr	r1, [r7, #0]
 8001e3a:	440b      	add	r3, r1
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	041b      	lsls	r3, r3, #16
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e48:	3303      	adds	r3, #3
 8001e4a:	6839      	ldr	r1, [r7, #0]
 8001e4c:	440b      	add	r3, r1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e5e:	3304      	adds	r3, #4
 8001e60:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	3214      	adds	r2, #20
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e76:	3301      	adds	r3, #1
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3c4      	bcc.n	8001e0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	4413      	add	r3, r2
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e90:	3301      	adds	r3, #1
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	041b      	lsls	r3, r3, #16
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb4:	3303      	adds	r3, #3
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d90a      	bls.n	8001eea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f009 fccc 	bl	800b87c <realloc>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ef4:	e03e      	b.n	8001f74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	441a      	add	r2, r3
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f001 f836 	bl	8002f74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f12:	e00b      	b.n	8001f2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	441a      	add	r2, r3
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	6839      	ldr	r1, [r7, #0]
 8001f20:	440b      	add	r3, r1
 8001f22:	7812      	ldrb	r2, [r2, #0]
 8001f24:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	3301      	adds	r3, #1
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4413      	add	r3, r2
 8001f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d3ed      	bcc.n	8001f14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	441a      	add	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001f54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	3220      	adds	r2, #32
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f70:	3301      	adds	r3, #1
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d3bb      	bcc.n	8001ef6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001f80:	4618      	mov	r0, r3
 8001f82:	3738      	adds	r7, #56	@ 0x38
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	4b02      	ldr	r3, [pc, #8]	@ (8001f9c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	0800e660 	.word	0x0800e660

08001fa0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	4b02      	ldr	r3, [pc, #8]	@ (8001fb4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	0800e4b4 	.word	0x0800e4b4

08001fb8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	611a      	str	r2, [r3, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68d8      	ldr	r0, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6891      	ldr	r1, [r2, #8]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4798      	blx	r3
 8002002:	4603      	mov	r3, r0
  };
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
  }
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
	...

08002048 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <_ZN13STM32HardwareC1Ev+0x34>)
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20001684 	.word	0x20001684

08002080 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f804 	bl	8002096 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020aa:	4619      	mov	r1, r3
 80020ac:	f004 fb78 	bl	80067a0 <HAL_UART_Receive_DMA>
    }
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
      int c = -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020c4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffa8 	bl	8002022 <_ZN13STM32Hardware10getRdmaIndEv>
 80020d2:	4603      	mov	r3, r0
 80020d4:	429c      	cmp	r4, r3
 80020d6:	bf14      	ite	ne
 80020d8:	2301      	movne	r3, #1
 80020da:	2300      	moveq	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d012      	beq.n	8002108 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80020e8:	1c59      	adds	r1, r3, #1
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	791b      	ldrb	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80020fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8002108:	68fb      	ldr	r3, [r7, #12]
    }
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
	...

08002114 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b20      	cmp	r3, #32
 8002128:	d108      	bne.n	800213c <_ZN13STM32Hardware5flushEv+0x28>
 800212a:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <_ZN13STM32Hardware5flushEv+0xb8>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <_ZN13STM32Hardware5flushEv+0x28>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <_ZN13STM32Hardware5flushEv+0x2a>
 800213c:	2300      	movs	r3, #0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d03f      	beq.n	80021c2 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002142:	4b22      	ldr	r3, [pc, #136]	@ (80021cc <_ZN13STM32Hardware5flushEv+0xb8>)
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002154:	429a      	cmp	r2, r3
 8002156:	d031      	beq.n	80021bc <_ZN13STM32Hardware5flushEv+0xa8>
            uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002164:	429a      	cmp	r2, r3
 8002166:	d20a      	bcs.n	800217e <_ZN13STM32Hardware5flushEv+0x6a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800216e:	b29a      	uxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002176:	b29b      	uxth	r3, r3
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	b29b      	uxth	r3, r3
 800217c:	e006      	b.n	800218c <_ZN13STM32Hardware5flushEv+0x78>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002184:	b29b      	uxth	r3, r3
 8002186:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800218a:	b29b      	uxth	r3, r3
 800218c:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002198:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	89fa      	ldrh	r2, [r7, #14]
 80021a2:	4619      	mov	r1, r3
 80021a4:	f004 fa8c 	bl	80066c0 <HAL_UART_Transmit_DMA>
            tfind = (tfind + len) & (tbuflen - 1);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80021ae:	89fb      	ldrh	r3, [r7, #14]
 80021b0:	4413      	add	r3, r2
 80021b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 80021bc:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <_ZN13STM32Hardware5flushEv+0xb8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
      }
    }
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000b38 	.word	0x20000b38

080021d0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
      uint16_t n = length;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	82bb      	strh	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80021e2:	8abb      	ldrh	r3, [r7, #20]
 80021e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021e8:	d803      	bhi.n	80021f2 <_ZN13STM32Hardware5writeEPhi+0x22>
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	e001      	b.n	80021f6 <_ZN13STM32Hardware5writeEPhi+0x26>
 80021f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021f6:	82bb      	strh	r3, [r7, #20]

      uint16_t n_tail = n <= (tbuflen - twind) ? n : tbuflen - twind;
 80021f8:	8abb      	ldrh	r3, [r7, #20]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002202:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002206:	4293      	cmp	r3, r2
 8002208:	bf28      	it	cs
 800220a:	4613      	movcs	r3, r2
 800220c:	82fb      	strh	r3, [r7, #22]
      memcpy(&(tbuf[twind]), data, n_tail);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002214:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	8afa      	ldrh	r2, [r7, #22]
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	4618      	mov	r0, r3
 8002222:	f00a f9c4 	bl	800c5ae <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800222c:	8aba      	ldrh	r2, [r7, #20]
 800222e:	4413      	add	r3, r2
 8002230:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 800223a:	8abb      	ldrh	r3, [r7, #20]
 800223c:	8afa      	ldrh	r2, [r7, #22]
 800223e:	429a      	cmp	r2, r3
 8002240:	d00c      	beq.n	800225c <_ZN13STM32Hardware5writeEPhi+0x8c>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8002248:	8afb      	ldrh	r3, [r7, #22]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	18d1      	adds	r1, r2, r3
 800224e:	8abb      	ldrh	r3, [r7, #20]
 8002250:	461a      	mov	r2, r3
 8002252:	8afb      	ldrh	r3, [r7, #22]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	461a      	mov	r2, r3
 8002258:	f00a f9a9 	bl	800c5ae <memcpy>
      }

      flush();
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7ff ff59 	bl	8002114 <_ZN13STM32Hardware5flushEv>
    }
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	f002 f935 	bl	80044e0 <HAL_GetTick>
 8002276:	4603      	mov	r3, r0
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_ZN8std_msgs6StringC1Ev>:
class String: public ros::Msg {
public:
	typedef const char *_data_type;
	_data_type data;

	String() :
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
			data("") {
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f866 	bl	800135c <_ZN3ros3MsgC1Ev>
 8002290:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <_ZN8std_msgs6StringC1Ev+0x28>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a04      	ldr	r2, [pc, #16]	@ (80022ac <_ZN8std_msgs6StringC1Ev+0x2c>)
 800229a:	605a      	str	r2, [r3, #4]
	}
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	0800e6f8 	.word	0x0800e6f8
 80022ac:	0800e438 	.word	0x0800e438

080022b0 <_ZNK8std_msgs6String9serializeEPh>:

	virtual int serialize(unsigned char *outbuffer) const override
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
		uint32_t length_data = strlen(this->data);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fd ff44 	bl	8000150 <strlen>
 80022c8:	60b8      	str	r0, [r7, #8]
		varToArr(outbuffer + offset, length_data);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fe30 	bl	8002f38 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
		offset += 4;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3304      	adds	r3, #4
 80022dc:	60fb      	str	r3, [r7, #12]
		memcpy(outbuffer + offset, this->data, length_data);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	18d0      	adds	r0, r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	4619      	mov	r1, r3
 80022ec:	f00a f95f 	bl	800c5ae <memcpy>
		offset += length_data;
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
		return offset;
 80022f8:	68fb      	ldr	r3, [r7, #12]
	}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_ZN8std_msgs6String11deserializeEPh>:

	virtual int deserialize(unsigned char *inbuffer) override
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
		uint32_t length_data;
		arrToVar(length_data, (inbuffer + offset));
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	441a      	add	r2, r3
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fe29 	bl	8002f74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
		offset += 4;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	3304      	adds	r3, #4
 8002326:	613b      	str	r3, [r7, #16]
		for (unsigned int k = offset; k < offset + length_data; ++k) {
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e00b      	b.n	8002346 <_ZN8std_msgs6String11deserializeEPh+0x44>
			inbuffer[k - 1] = inbuffer[k];
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	441a      	add	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3b01      	subs	r3, #1
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	440b      	add	r3, r1
 800233c:	7812      	ldrb	r2, [r2, #0]
 800233e:	701a      	strb	r2, [r3, #0]
		for (unsigned int k = offset; k < offset + length_data; ++k) {
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3ed      	bcc.n	800232e <_ZN8std_msgs6String11deserializeEPh+0x2c>
		}
		inbuffer[offset + length_data - 1] = 0;
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	3b01      	subs	r3, #1
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	4413      	add	r3, r2
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
		this->data = (char*) (inbuffer + offset - 1);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	3b01      	subs	r3, #1
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	441a      	add	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	605a      	str	r2, [r3, #4]
		offset += length_data;
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
		return offset;
 8002376:	693b      	ldr	r3, [r7, #16]
	}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_ZN8std_msgs6String7getTypeEv>:

	virtual const char* getType() override {
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
		return "std_msgs/String";
 8002388:	4b02      	ldr	r3, [pc, #8]	@ (8002394 <_ZN8std_msgs6String7getTypeEv+0x14>)
	}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	0800e4d8 	.word	0x0800e4d8

08002398 <_ZN8std_msgs6String6getMD5Ev>:
	;
	virtual const char* getMD5() override {
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
		return "992ce8a1687cec8c8bd883ec73ca41d1";
 80023a0:	4b02      	ldr	r3, [pc, #8]	@ (80023ac <_ZN8std_msgs6String6getMD5Ev+0x14>)
	}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	0800e4e8 	.word	0x0800e4e8

080023b0 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
	typedef uint32_t _size_type;
	_size_type size;
	typedef uint32_t _stride_type;
	_stride_type stride;

	MultiArrayDimension() :
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
			label(""), size(0), stride(0) {
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe ffce 	bl	800135c <_ZN3ros3MsgC1Ev>
 80023c0:	4a08      	ldr	r2, [pc, #32]	@ (80023e4 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a07      	ldr	r2, [pc, #28]	@ (80023e8 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	60da      	str	r2, [r3, #12]
	}
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	0800e6e0 	.word	0x0800e6e0
 80023e8:	0800e438 	.word	0x0800e438

080023ec <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

	virtual int serialize(unsigned char *outbuffer) const override
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
		uint32_t length_label = strlen(this->label);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fd fea6 	bl	8000150 <strlen>
 8002404:	60b8      	str	r0, [r7, #8]
		varToArr(outbuffer + offset, length_label);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fd92 	bl	8002f38 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
		offset += 4;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3304      	adds	r3, #4
 8002418:	60fb      	str	r3, [r7, #12]
		memcpy(outbuffer + offset, this->label, length_label);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	18d0      	adds	r0, r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	4619      	mov	r1, r3
 8002428:	f00a f8c1 	bl	800c5ae <memcpy>
		offset += length_label;
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4413      	add	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
		*(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6899      	ldr	r1, [r3, #8]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	4413      	add	r3, r2
 800243e:	b2ca      	uxtb	r2, r1
 8002440:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0a19      	lsrs	r1, r3, #8
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3301      	adds	r3, #1
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	b2ca      	uxtb	r2, r1
 8002452:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	0c19      	lsrs	r1, r3, #16
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3302      	adds	r3, #2
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	4413      	add	r3, r2
 8002462:	b2ca      	uxtb	r2, r1
 8002464:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0e19      	lsrs	r1, r3, #24
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3303      	adds	r3, #3
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4413      	add	r3, r2
 8002474:	b2ca      	uxtb	r2, r1
 8002476:	701a      	strb	r2, [r3, #0]
		offset += sizeof(this->size);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3304      	adds	r3, #4
 800247c:	60fb      	str	r3, [r7, #12]
		*(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68d9      	ldr	r1, [r3, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	4413      	add	r3, r2
 8002488:	b2ca      	uxtb	r2, r1
 800248a:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a19      	lsrs	r1, r3, #8
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	3301      	adds	r3, #1
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4413      	add	r3, r2
 800249a:	b2ca      	uxtb	r2, r1
 800249c:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	0c19      	lsrs	r1, r3, #16
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3302      	adds	r3, #2
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	b2ca      	uxtb	r2, r1
 80024ae:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0e19      	lsrs	r1, r3, #24
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3303      	adds	r3, #3
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	b2ca      	uxtb	r2, r1
 80024c0:	701a      	strb	r2, [r3, #0]
		offset += sizeof(this->stride);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3304      	adds	r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
		return offset;
 80024c8:	68fb      	ldr	r3, [r7, #12]
	}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

	virtual int deserialize(unsigned char *inbuffer) override
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
		uint32_t length_label;
		arrToVar(length_label, (inbuffer + offset));
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	441a      	add	r2, r3
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fd41 	bl	8002f74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
		offset += 4;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	3304      	adds	r3, #4
 80024f6:	613b      	str	r3, [r7, #16]
		for (unsigned int k = offset; k < offset + length_label; ++k) {
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	e00b      	b.n	8002516 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
			inbuffer[k - 1] = inbuffer[k];
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	441a      	add	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3b01      	subs	r3, #1
 8002508:	6839      	ldr	r1, [r7, #0]
 800250a:	440b      	add	r3, r1
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	701a      	strb	r2, [r3, #0]
		for (unsigned int k = offset; k < offset + length_label; ++k) {
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	429a      	cmp	r2, r3
 8002520:	d3ed      	bcc.n	80024fe <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
		}
		inbuffer[offset + length_label - 1] = 0;
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	3b01      	subs	r3, #1
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	4413      	add	r3, r2
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
		this->label = (char*) (inbuffer + offset - 1);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	3b01      	subs	r3, #1
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	441a      	add	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	605a      	str	r2, [r3, #4]
		offset += length_label;
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
		this->size = ((uint32_t) (*(inbuffer + offset)));
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	609a      	str	r2, [r3, #8]
		this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	3301      	adds	r3, #1
 800255c:	6839      	ldr	r1, [r7, #0]
 800255e:	440b      	add	r3, r1
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	609a      	str	r2, [r3, #8]
		this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	3302      	adds	r3, #2
 8002572:	6839      	ldr	r1, [r7, #0]
 8002574:	440b      	add	r3, r1
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	609a      	str	r2, [r3, #8]
		this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	3303      	adds	r3, #3
 8002588:	6839      	ldr	r1, [r7, #0]
 800258a:	440b      	add	r3, r1
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	609a      	str	r2, [r3, #8]
		offset += sizeof(this->size);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	3304      	adds	r3, #4
 800259a:	613b      	str	r3, [r7, #16]
		this->stride = ((uint32_t) (*(inbuffer + offset)));
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60da      	str	r2, [r3, #12]
		this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	3301      	adds	r3, #1
 80025b2:	6839      	ldr	r1, [r7, #0]
 80025b4:	440b      	add	r3, r1
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	60da      	str	r2, [r3, #12]
		this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	3302      	adds	r3, #2
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	440b      	add	r3, r1
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	60da      	str	r2, [r3, #12]
		this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	3303      	adds	r3, #3
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	440b      	add	r3, r1
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]
		offset += sizeof(this->stride);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	3304      	adds	r3, #4
 80025f0:	613b      	str	r3, [r7, #16]
		return offset;
 80025f2:	693b      	ldr	r3, [r7, #16]
	}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

	virtual const char* getType() override {
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
		return "std_msgs/MultiArrayDimension";
 8002604:	4b02      	ldr	r3, [pc, #8]	@ (8002610 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x14>)
	}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	0800e50c 	.word	0x0800e50c

08002614 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
	;
	virtual const char* getMD5() override {
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
		return "4cd0c83a8683deae40ecdac60e53bfa8";
 800261c:	4b02      	ldr	r3, [pc, #8]	@ (8002628 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x14>)
	}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	0800e52c 	.word	0x0800e52c

0800262c <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fe90 	bl	800135c <_ZN3ros3MsgC1Ev>
 800263c:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3308      	adds	r3, #8
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff feaf 	bl	80023b0 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
    {
    }
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	0800e6c8 	.word	0x0800e6c8

0800266c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	4413      	add	r3, r2
 8002684:	b2ca      	uxtb	r2, r1
 8002686:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0a19      	lsrs	r1, r3, #8
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3301      	adds	r3, #1
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4413      	add	r3, r2
 8002696:	b2ca      	uxtb	r2, r1
 8002698:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	0c19      	lsrs	r1, r3, #16
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3302      	adds	r3, #2
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	b2ca      	uxtb	r2, r1
 80026aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	0e19      	lsrs	r1, r3, #24
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3303      	adds	r3, #3
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	b2ca      	uxtb	r2, r1
 80026bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	e017      	b.n	80026fa <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	18d0      	adds	r0, r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	4413      	add	r3, r2
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	6839      	ldr	r1, [r7, #0]
 80026e6:	440a      	add	r2, r1
 80026e8:	4611      	mov	r1, r2
 80026ea:	4798      	blx	r3
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4413      	add	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	429a      	cmp	r2, r3
 8002702:	d3e2      	bcc.n	80026ca <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69d9      	ldr	r1, [r3, #28]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	4413      	add	r3, r2
 800270e:	b2ca      	uxtb	r2, r1
 8002710:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	0a19      	lsrs	r1, r3, #8
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3301      	adds	r3, #1
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	4413      	add	r3, r2
 8002720:	b2ca      	uxtb	r2, r1
 8002722:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	0c19      	lsrs	r1, r3, #16
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3302      	adds	r3, #2
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	4413      	add	r3, r2
 8002732:	b2ca      	uxtb	r2, r1
 8002734:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	0e19      	lsrs	r1, r3, #24
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3303      	adds	r3, #3
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4413      	add	r3, r2
 8002744:	b2ca      	uxtb	r2, r1
 8002746:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3304      	adds	r3, #4
 800274c:	60fb      	str	r3, [r7, #12]
      return offset;
 800274e:	68fb      	ldr	r3, [r7, #12]
    }
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZN3ros3MsgaSERKS0_>:
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <_ZN8std_msgs19MultiArrayDimensionaSERKS0_>:
class MultiArrayDimension: public ros::Msg {
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ffea 	bl	8002758 <_ZN3ros3MsgaSERKS0_>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80027a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a8:	b087      	sub	sp, #28
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3302      	adds	r3, #2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	041b      	lsls	r3, r3, #16
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3303      	adds	r3, #3
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

      offset += sizeof(this->dim_length);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3304      	adds	r3, #4
 80027f8:	617b      	str	r3, [r7, #20]

      if(dim_lengthT > dim_length){
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d922      	bls.n	800284a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xa4>
    	  delete[] this->dim;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x70>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4618      	mov	r0, r3
 8002812:	f008 f81b 	bl	800a84c <_ZdaPv>
    	  this->dim = new std_msgs::MultiArrayDimension[dim_lengthT];
 8002816:	68fc      	ldr	r4, [r7, #12]
 8002818:	f1b4 6f00 	cmp.w	r4, #134217728	@ 0x8000000
 800281c:	d201      	bcs.n	8002822 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7c>
 800281e:	0123      	lsls	r3, r4, #4
 8002820:	e001      	b.n	8002826 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
 8002822:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002826:	4618      	mov	r0, r3
 8002828:	f008 f812 	bl	800a850 <_Znaj>
 800282c:	4603      	mov	r3, r0
 800282e:	461e      	mov	r6, r3
 8002830:	4635      	mov	r5, r6
 8002832:	1e63      	subs	r3, r4, #1
 8002834:	461c      	mov	r4, r3
 8002836:	e004      	b.n	8002842 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x9c>
 8002838:	4628      	mov	r0, r5
 800283a:	f7ff fdb9 	bl	80023b0 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 800283e:	3c01      	subs	r4, #1
 8002840:	3510      	adds	r5, #16
 8002842:	2c00      	cmp	r4, #0
 8002844:	daf8      	bge.n	8002838 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x92>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	619e      	str	r6, [r3, #24]
      }

      dim_length = dim_lengthT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]

      for( uint32_t i = 0; i < dim_length; i++){
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	e01a      	b.n	800288c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xe6>
    	  offset += this->st_dim.deserialize(inbuffer + offset);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f103 0008 	add.w	r0, r3, #8
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	4619      	mov	r1, r3
 8002864:	f7ff fe35 	bl	80024d2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002868:	4602      	mov	r2, r0
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	4413      	add	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
    	  this->dim[i] = this->st_dim;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	441a      	add	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3308      	adds	r3, #8
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f7ff ff74 	bl	800276e <_ZN8std_msgs19MultiArrayDimensionaSERKS0_>
      for( uint32_t i = 0; i < dim_length; i++){
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	3301      	adds	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	429a      	cmp	r2, r3
 8002894:	d3df      	bcc.n	8002856 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb0>
      }

      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3301      	adds	r3, #1
 80028ac:	6839      	ldr	r1, [r7, #0]
 80028ae:	440b      	add	r3, r1
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3302      	adds	r3, #2
 80028c2:	6839      	ldr	r1, [r7, #0]
 80028c4:	440b      	add	r3, r1
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3303      	adds	r3, #3
 80028d8:	6839      	ldr	r1, [r7, #0]
 80028da:	440b      	add	r3, r1
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	061b      	lsls	r3, r3, #24
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	61da      	str	r2, [r3, #28]

      offset += sizeof(this->data_offset);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3304      	adds	r3, #4
 80028ea:	617b      	str	r3, [r7, #20]
      return offset;
 80028ec:	697b      	ldr	r3, [r7, #20]
    }
 80028ee:	4618      	mov	r0, r3
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028f8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	4b02      	ldr	r3, [pc, #8]	@ (800290c <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x14>)
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	0800e550 	.word	0x0800e550

08002910 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	4b02      	ldr	r3, [pc, #8]	@ (8002924 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x14>)
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	0800e56c 	.word	0x0800e56c

08002928 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fd12 	bl	800135c <_ZN3ros3MsgC1Ev>
 8002938:	4a0b      	ldr	r2, [pc, #44]	@ (8002968 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	601a      	str	r2, [r3, #0]
      layout(),
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fe72 	bl	800262c <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	629a      	str	r2, [r3, #40]	@ 0x28
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
    }
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	0800e6b0 	.word	0x0800e6b0

0800296c <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	1d18      	adds	r0, r3, #4
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7ff fe71 	bl	800266c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 800298a:	4602      	mov	r2, r0
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	4413      	add	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	4413      	add	r3, r2
 800299c:	b2ca      	uxtb	r2, r1
 800299e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	0a19      	lsrs	r1, r3, #8
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	4413      	add	r3, r2
 80029ae:	b2ca      	uxtb	r2, r1
 80029b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	0c19      	lsrs	r1, r3, #16
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	3302      	adds	r3, #2
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	b2ca      	uxtb	r2, r1
 80029c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	0e19      	lsrs	r1, r3, #24
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3303      	adds	r3, #3
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	b2ca      	uxtb	r2, r1
 80029d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3304      	adds	r3, #4
 80029da:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	e02a      	b.n	8002a38 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 80029f0:	68f9      	ldr	r1, [r7, #12]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	b2ca      	uxtb	r2, r1
 80029fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	0a19      	lsrs	r1, r3, #8
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3301      	adds	r3, #1
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	b2ca      	uxtb	r2, r1
 8002a0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	0c19      	lsrs	r1, r3, #16
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	3302      	adds	r3, #2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	b2ca      	uxtb	r2, r1
 8002a1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	0e19      	lsrs	r1, r3, #24
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3303      	adds	r3, #3
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	b2ca      	uxtb	r2, r1
 8002a2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	3301      	adds	r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d3cf      	bcc.n	80029e2 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8002a42:	697b      	ldr	r3, [r7, #20]
    }
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	1d18      	adds	r0, r3, #4
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	f7ff fe9e 	bl	80027a6 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	4413      	add	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3302      	adds	r3, #2
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	4413      	add	r3, r2
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3303      	adds	r3, #3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d90a      	bls.n	8002ad8 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f008 fed5 	bl	800b87c <realloc>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
      data_length = data_lengthT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	625a      	str	r2, [r3, #36]	@ 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e035      	b.n	8002b50 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	440a      	add	r2, r1
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3301      	adds	r3, #1
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	440b      	add	r3, r1
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	6839      	ldr	r1, [r7, #0]
 8002b10:	440b      	add	r3, r1
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3303      	adds	r3, #3
 8002b20:	6839      	ldr	r1, [r7, #0]
 8002b22:	440b      	add	r3, r1
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	629a      	str	r2, [r3, #40]	@ 0x28
      offset += sizeof(this->st_data);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3304      	adds	r3, #4
 8002b36:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	3228      	adds	r2, #40	@ 0x28
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d3c4      	bcc.n	8002ae4 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8002b5a:	697b      	ldr	r3, [r7, #20]
    }
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	4b02      	ldr	r3, [pc, #8]	@ (8002b78 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x14>)
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	0800e590 	.word	0x0800e590

08002b7c <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	4b02      	ldr	r3, [pc, #8]	@ (8002b90 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x14>)
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	0800e5ac 	.word	0x0800e5ac

08002b94 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	4a04      	ldr	r2, [pc, #16]	@ (8002bb0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	0800e728 	.word	0x0800e728

08002bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ffe8 	bl	8002b94 <_ZN3ros15NodeHandleBase_C1Ev>
 8002bc4:	4a36      	ldr	r2, [pc, #216]	@ (8002ca0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fa3a 	bl	8002048 <_ZN13STM32HardwareC1Ev>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8002bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f009 fbf2 	bl	800c3ea <memset>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8002c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f009 fbe9 	bl	800c3ea <memset>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8002c1e:	2264      	movs	r2, #100	@ 0x64
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f009 fbe1 	bl	800c3ea <memset>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8002c2e:	2264      	movs	r2, #100	@ 0x64
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f009 fbd9 	bl	800c3ea <memset>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe feca 	bl	8001a28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	0800e69c 	.word	0x0800e69c
 8002ca4:	00000000 	.word	0x00000000

08002ca8 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE>:

double vel_left = 0;
double vel_right = 0;

void stringCallback(const std_msgs::Float32MultiArray& msg)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

	vel_left = msg.data[0];
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fbb6 	bl	8000428 <__aeabi_f2d>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4947      	ldr	r1, [pc, #284]	@ (8002de0 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x138>)
 8002cc2:	e9c1 2300 	strd	r2, r3, [r1]
	vel_right = msg.data[1];
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	3304      	adds	r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fbaa 	bl	8000428 <__aeabi_f2d>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4942      	ldr	r1, [pc, #264]	@ (8002de4 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x13c>)
 8002cda:	e9c1 2300 	strd	r2, r3, [r1]

	if ((vel_left == 0) &&(vel_right == 0)){
 8002cde:	4b40      	ldr	r3, [pc, #256]	@ (8002de0 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x138>)
 8002ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	f7fd fe5c 	bl	80009a8 <__aeabi_dcmpeq>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01d      	beq.n	8002d32 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x8a>
 8002cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x13c>)
 8002cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	f7fd fe50 	bl	80009a8 <__aeabi_dcmpeq>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d011      	beq.n	8002d32 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x8a>
		command = ROBOT_STOP;
 8002d0e:	4b36      	ldr	r3, [pc, #216]	@ (8002de8 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x140>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
		left_vel = 0;
 8002d14:	4935      	ldr	r1, [pc, #212]	@ (8002dec <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x144>)
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	e9c1 2300 	strd	r2, r3, [r1]
		right_vel = 0;
 8002d22:	4933      	ldr	r1, [pc, #204]	@ (8002df0 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x148>)
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9c1 2300 	strd	r2, r3, [r1]
 8002d30:	e04b      	b.n	8002dca <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x122>
	}
	else {
		command = ROBOT_MOVE;
 8002d32:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x140>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
		left_vel = VELOCITY_TO_TICK(vel_left);
 8002d38:	4b29      	ldr	r3, [pc, #164]	@ (8002de0 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x138>)
 8002d3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	4b2c      	ldr	r3, [pc, #176]	@ (8002df4 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x14c>)
 8002d44:	f7fd fcf2 	bl	800072c <__aeabi_ddiv>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	a321      	add	r3, pc, #132	@ (adr r3, 8002dd8 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x130>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fbbf 	bl	80004d8 <__aeabi_dmul>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f7fd feb1 	bl	8000ac8 <__aeabi_d2f>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f007 fdfd 	bl	800a968 <roundf>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fb59 	bl	8000428 <__aeabi_f2d>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	491c      	ldr	r1, [pc, #112]	@ (8002dec <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x144>)
 8002d7c:	e9c1 2300 	strd	r2, r3, [r1]
		right_vel = VELOCITY_TO_TICK(vel_right);
 8002d80:	4b18      	ldr	r3, [pc, #96]	@ (8002de4 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x13c>)
 8002d82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002df4 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x14c>)
 8002d8c:	f7fd fcce 	bl	800072c <__aeabi_ddiv>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	a30f      	add	r3, pc, #60	@ (adr r3, 8002dd8 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x130>)
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	f7fd fb9b 	bl	80004d8 <__aeabi_dmul>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7fd fe8d 	bl	8000ac8 <__aeabi_d2f>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f007 fdd9 	bl	800a968 <roundf>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fb35 	bl	8000428 <__aeabi_f2d>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	490b      	ldr	r1, [pc, #44]	@ (8002df0 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x148>)
 8002dc4:	e9c1 2300 	strd	r2, r3, [r1]
	}

}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	00000000 	.word	0x00000000
 8002ddc:	407ef000 	.word	0x407ef000
 8002de0:	200014a8 	.word	0x200014a8
 8002de4:	200014b0 	.word	0x200014b0
 8002de8:	20000b20 	.word	0x20000b20
 8002dec:	20000b28 	.word	0x20000b28
 8002df0:	20000b30 	.word	0x20000b30
 8002df4:	404e0000 	.word	0x404e0000

08002df8 <HAL_UART_TxCpltCallback>:

ros::Subscriber<std_msgs::Float32MultiArray> listener("wheel_velocity", &stringCallback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002e00:	4805      	ldr	r0, [pc, #20]	@ (8002e18 <HAL_UART_TxCpltCallback+0x20>)
 8002e02:	f000 f911 	bl	8003028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff f983 	bl	8002114 <_ZN13STM32Hardware5flushEv>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000b50 	.word	0x20000b50

08002e1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002e24:	4805      	ldr	r0, [pc, #20]	@ (8002e3c <HAL_UART_RxCpltCallback+0x20>)
 8002e26:	f000 f8ff 	bl	8003028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f932 	bl	8002096 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000b50 	.word	0x20000b50

08002e40 <setup>:



void setup(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  nh.initNode();
 8002e44:	4806      	ldr	r0, [pc, #24]	@ (8002e60 <setup+0x20>)
 8002e46:	f000 f8fa 	bl	800303e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(listener);
 8002e4a:	4906      	ldr	r1, [pc, #24]	@ (8002e64 <setup+0x24>)
 8002e4c:	4804      	ldr	r0, [pc, #16]	@ (8002e60 <setup+0x20>)
 8002e4e:	f000 f913 	bl	8003078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  nh.advertise(chatter);
 8002e52:	4905      	ldr	r1, [pc, #20]	@ (8002e68 <setup+0x28>)
 8002e54:	4802      	ldr	r0, [pc, #8]	@ (8002e60 <setup+0x20>)
 8002e56:	f000 f939 	bl	80030cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000b50 	.word	0x20000b50
 8002e64:	200014b8 	.word	0x200014b8
 8002e68:	20001494 	.word	0x20001494
 8002e6c:	00000000 	.word	0x00000000

08002e70 <loop>:

char str[100];

void loop(void)
{
 8002e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af06      	add	r7, sp, #24

	std::sprintf(str, "[%f,%f],[%f,%f]", real_left_vel,real_right_vel,TICK_TO_VELOCTIY(left_vel),TICK_TO_VELOCTIY(right_vel));
 8002e78:	4b25      	ldr	r3, [pc, #148]	@ (8002f10 <loop+0xa0>)
 8002e7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e7e:	4b25      	ldr	r3, [pc, #148]	@ (8002f14 <loop+0xa4>)
 8002e80:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e84:	4b24      	ldr	r3, [pc, #144]	@ (8002f18 <loop+0xa8>)
 8002e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <loop+0xac>)
 8002e90:	f7fd fb22 	bl	80004d8 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	a31a      	add	r3, pc, #104	@ (adr r3, 8002f08 <loop+0x98>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd fc43 	bl	800072c <__aeabi_ddiv>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4692      	mov	sl, r2
 8002eac:	469b      	mov	fp, r3
 8002eae:	4b1c      	ldr	r3, [pc, #112]	@ (8002f20 <loop+0xb0>)
 8002eb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	4b18      	ldr	r3, [pc, #96]	@ (8002f1c <loop+0xac>)
 8002eba:	f7fd fb0d 	bl	80004d8 <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	a310      	add	r3, pc, #64	@ (adr r3, 8002f08 <loop+0x98>)
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f7fd fc2e 	bl	800072c <__aeabi_ddiv>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ed8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002edc:	e9cd 4500 	strd	r4, r5, [sp]
 8002ee0:	4642      	mov	r2, r8
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	490f      	ldr	r1, [pc, #60]	@ (8002f24 <loop+0xb4>)
 8002ee6:	4810      	ldr	r0, [pc, #64]	@ (8002f28 <loop+0xb8>)
 8002ee8:	f009 fa1c 	bl	800c324 <siprintf>
	str_msg.data = str;
 8002eec:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <loop+0xbc>)
 8002eee:	4a0e      	ldr	r2, [pc, #56]	@ (8002f28 <loop+0xb8>)
 8002ef0:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 8002ef2:	490e      	ldr	r1, [pc, #56]	@ (8002f2c <loop+0xbc>)
 8002ef4:	480e      	ldr	r0, [pc, #56]	@ (8002f30 <loop+0xc0>)
 8002ef6:	f7ff f875 	bl	8001fe4 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 8002efa:	480e      	ldr	r0, [pc, #56]	@ (8002f34 <loop+0xc4>)
 8002efc:	f000 f915 	bl	800312a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	407ef000 	.word	0x407ef000
 8002f10:	20000b40 	.word	0x20000b40
 8002f14:	20000b48 	.word	0x20000b48
 8002f18:	20000b28 	.word	0x20000b28
 8002f1c:	404e0000 	.word	0x404e0000
 8002f20:	20000b30 	.word	0x20000b30
 8002f24:	0800e5d0 	.word	0x0800e5d0
 8002f28:	200014fc 	.word	0x200014fc
 8002f2c:	2000148c 	.word	0x2000148c
 8002f30:	20001494 	.word	0x20001494
 8002f34:	20000b50 	.word	0x20000b50

08002f38 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e00c      	b.n	8002f62 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	fa22 f103 	lsr.w	r1, r2, r3
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	b2ca      	uxtb	r2, r1
 8002f5a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d9ef      	bls.n	8002f48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	e010      	b.n	8002fac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6839      	ldr	r1, [r7, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	440a      	add	r2, r1
 8002f94:	7812      	ldrb	r2, [r2, #0]
 8002f96:	4611      	mov	r1, r2
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	00d2      	lsls	r2, r2, #3
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d9eb      	bls.n	8002f8a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
	...

08002fc0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	4a04      	ldr	r2, [pc, #16]	@ (8002fdc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	0800e710 	.word	0x0800e710

08002fe0 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ffe5 	bl	8002fc0 <_ZN3ros11Subscriber_C1Ev>
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8003024 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	330c      	adds	r3, #12
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fc91 	bl	8002928 <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	63da      	str	r2, [r3, #60]	@ 0x3c
    endpoint_(endpoint)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	641a      	str	r2, [r3, #64]	@ 0x40
  {
    topic_ = topic_name;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
  };
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	0800e684 	.word	0x0800e684

08003028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
  }
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f818 	bl	8002080 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	e018      	b.n	80030ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10d      	bne.n	80030b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80030a0:	6839      	ldr	r1, [r7, #0]
 80030a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	605a      	str	r2, [r3, #4]
        return true;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e006      	b.n	80030c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3301      	adds	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b18      	cmp	r3, #24
 80030be:	dde3      	ble.n	8003088 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80030c0:	2300      	movs	r3, #0
  }
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e01d      	b.n	8003118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d111      	bne.n	8003112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	60da      	str	r2, [r3, #12]
        return true;
 800310e:	2301      	movs	r3, #1
 8003110:	e006      	b.n	8003120 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3301      	adds	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b18      	cmp	r3, #24
 800311c:	ddde      	ble.n	80030dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 800311e:	2300      	movs	r3, #0
  }
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f897 	bl	800226a <_ZN13STM32Hardware4timeEv>
 800313c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800314c:	4293      	cmp	r3, r2
 800314e:	d903      	bls.n	8003158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	429a      	cmp	r2, r3
 800316c:	d903      	bls.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800317c:	2b00      	cmp	r3, #0
 800317e:	d014      	beq.n	80031aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff f870 	bl	800226a <_ZN13STM32Hardware4timeEv>
 800318a:	4602      	mov	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad2      	subs	r2, r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8003196:	429a      	cmp	r2, r3
 8003198:	bf8c      	ite	hi
 800319a:	2301      	movhi	r3, #1
 800319c:	2300      	movls	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80031a4:	f06f 0301 	mvn.w	r3, #1
 80031a8:	e194      	b.n	80034d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe ff82 	bl	80020b8 <_ZN13STM32Hardware4readEv>
 80031b4:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f2c0 8174 	blt.w	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	441a      	add	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80031d4:	2b07      	cmp	r3, #7
 80031d6:	d11e      	bne.n	8003216 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80031de:	1c59      	adds	r1, r3, #1
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	b2d1      	uxtb	r1, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	460a      	mov	r2, r1
 80031f0:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80031fa:	1e5a      	subs	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1b4      	bne.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2208      	movs	r2, #8
 8003210:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003214:	e7af      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800321c:	2b00      	cmp	r3, #0
 800321e:	d128      	bne.n	8003272 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2bff      	cmp	r3, #255	@ 0xff
 8003224:	d10d      	bne.n	8003242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f103 0214 	add.w	r2, r3, #20
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8003240:	e799      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3304      	adds	r3, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff f80f 	bl	800226a <_ZN13STM32Hardware4timeEv>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	bf8c      	ite	hi
 800325a:	2301      	movhi	r3, #1
 800325c:	2300      	movls	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d088      	beq.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 800326c:	f06f 0301 	mvn.w	r3, #1
 8003270:	e130      	b.n	80034d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003278:	2b01      	cmp	r3, #1
 800327a:	d118      	bne.n	80032ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003280:	d107      	bne.n	8003292 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003290:	e771      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f47f af68 	bne.w	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f918 	bl	80034dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80032ac:	e763      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d113      	bne.n	80032e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80032de:	e74a      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d110      	bne.n	800330c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800330a:	e734      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003312:	2b04      	cmp	r3, #4
 8003314:	d116      	bne.n	8003344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800331c:	425a      	negs	r2, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	bf58      	it	pl
 8003324:	4253      	negpl	r3, r2
 8003326:	2bff      	cmp	r3, #255	@ 0xff
 8003328:	d107      	bne.n	800333a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003338:	e71d      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003342:	e718      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800334a:	2b05      	cmp	r3, #5
 800334c:	d10f      	bne.n	800336e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 800336c:	e703      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003374:	2b06      	cmp	r3, #6
 8003376:	d117      	bne.n	80033a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	441a      	add	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2207      	movs	r2, #7
 800338e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8003398:	2b00      	cmp	r3, #0
 800339a:	f47f aeec 	bne.w	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2208      	movs	r2, #8
 80033a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80033a6:	e6e6      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	f47f aee1 	bne.w	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80033c2:	425a      	negs	r2, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	bf58      	it	pl
 80033ca:	4253      	negpl	r3, r2
 80033cc:	2bff      	cmp	r3, #255	@ 0xff
 80033ce:	f47f aed2 	bne.w	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d110      	bne.n	80033fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f87d 	bl	80034dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f898 	bl	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033fc:	e06a      	b.n	80034d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003404:	2b0a      	cmp	r3, #10
 8003406:	d107      	bne.n	8003418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f961 	bl	80036d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003416:	e6ae      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800341e:	2b06      	cmp	r3, #6
 8003420:	d10e      	bne.n	8003440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f7fe fc38 	bl	8001ca6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 800343e:	e69a      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003446:	2b0b      	cmp	r3, #11
 8003448:	d104      	bne.n	8003454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8003452:	e690      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800345a:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f43f ae84 	beq.w	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003474:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800347e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003488:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 80034a0:	4611      	mov	r1, r2
 80034a2:	4798      	blx	r3
    while (true)
 80034a4:	e667      	b.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80034a6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00f      	beq.n	80034d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d906      	bls.n	80034d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f809 	bl	80034dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 80034d2:	2300      	movs	r3, #0
  }
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd ff47 	bl	800137c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f107 020c 	add.w	r2, r7, #12
 80034f8:	210a      	movs	r1, #10
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
    rt_time = hardware_.time();
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe feb1 	bl	800226a <_ZN13STM32Hardware4timeEv>
 8003508:	4602      	mov	r2, r0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b08b      	sub	sp, #44	@ 0x2c
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003520:	f107 030c 	add.w	r3, r7, #12
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe f813 	bl	8001550 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
 800352e:	e062      	b.n	80035f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d056      	beq.n	80035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	b29b      	uxth	r3, r3
 8003554:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3308      	adds	r3, #8
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4608      	mov	r0, r1
 8003590:	4798      	blx	r3
 8003592:	4603      	mov	r3, r0
 8003594:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	6859      	ldr	r1, [r3, #4]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4608      	mov	r0, r1
 80035be:	4798      	blx	r3
 80035c0:	4603      	mov	r3, r0
 80035c2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80035c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035c8:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681c      	ldr	r4, [r3, #0]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fd14 	bl	800200c <_ZN3ros9Publisher15getEndpointTypeEv>
 80035e4:	4601      	mov	r1, r0
 80035e6:	f107 030c 	add.w	r3, r7, #12
 80035ea:	461a      	mov	r2, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	3301      	adds	r3, #1
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	2b18      	cmp	r3, #24
 80035fa:	dd99      	ble.n	8003530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003600:	e05e      	b.n	80036c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003606:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800360a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d053      	beq.n	80036ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003616:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800361a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	b29b      	uxth	r3, r3
 8003622:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003628:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800362c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003638:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800363c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003644:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3308      	adds	r3, #8
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4608      	mov	r0, r1
 8003654:	4798      	blx	r3
 8003656:	4603      	mov	r3, r0
 8003658:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003662:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800366e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4608      	mov	r0, r1
 800367a:	4798      	blx	r3
 800367c:	4603      	mov	r3, r0
 800367e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003680:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003684:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681c      	ldr	r4, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003690:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80036a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3304      	adds	r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4608      	mov	r0, r1
 80036ac:	4798      	blx	r3
 80036ae:	4601      	mov	r1, r0
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	461a      	mov	r2, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	3301      	adds	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	2b18      	cmp	r3, #24
 80036c4:	dd9d      	ble.n	8003602 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 80036ce:	bf00      	nop
 80036d0:	372c      	adds	r7, #44	@ 0x2c
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd90      	pop	{r4, r7, pc}
	...

080036d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fe48 	bl	800137c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fdba 	bl	800226a <_ZN13STM32Hardware4timeEv>
 80036f6:	4602      	mov	r2, r0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003702:	f107 0308 	add.w	r3, r7, #8
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fea6 	bl	800145a <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	4915      	ldr	r1, [pc, #84]	@ (8003768 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003714:	fba1 1303 	umull	r1, r3, r1, r3
 8003718:	099b      	lsrs	r3, r3, #6
 800371a:	4413      	add	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800371e:	6939      	ldr	r1, [r7, #16]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4b11      	ldr	r3, [pc, #68]	@ (8003768 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003724:	fba3 0302 	umull	r0, r3, r3, r2
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800372e:	fb00 f303 	mul.w	r3, r0, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	4a0d      	ldr	r2, [pc, #52]	@ (800376c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	440b      	add	r3, r1
 800373c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8a6 	bl	8003898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	4618      	mov	r0, r3
 8003752:	f7fe fd8a 	bl	800226a <_ZN13STM32Hardware4timeEv>
 8003756:	4602      	mov	r2, r0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	10624dd3 	.word	0x10624dd3
 800376c:	000f4240 	.word	0x000f4240

08003770 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b63      	cmp	r3, #99	@ 0x63
 8003780:	dd09      	ble.n	8003796 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8003788:	f083 0301 	eor.w	r3, r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003792:	2300      	movs	r3, #0
 8003794:	e079      	b.n	800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 80037a2:	3207      	adds	r2, #7
 80037a4:	4611      	mov	r1, r2
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4798      	blx	r3
 80037aa:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	22ff      	movs	r2, #255	@ 0xff
 80037b0:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	22fe      	movs	r2, #254	@ 0xfe
 80037b8:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 80037e2:	4413      	add	r3, r2
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	b21b      	sxth	r3, r3
 80037fe:	121b      	asrs	r3, r3, #8
 8003800:	b21b      	sxth	r3, r3
 8003802:	b2da      	uxtb	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800380e:	2305      	movs	r3, #5
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e00c      	b.n	800382e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	4413      	add	r3, r2
 800381a:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	3301      	adds	r3, #1
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3306      	adds	r3, #6
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	429a      	cmp	r2, r3
 8003836:	dded      	ble.n	8003814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3307      	adds	r3, #7
 800383c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	425a      	negs	r2, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	bf58      	it	pl
 8003848:	4253      	negpl	r3, r2
 800384a:	b2da      	uxtb	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	6179      	str	r1, [r7, #20]
 8003852:	43d2      	mvns	r2, r2
 8003854:	b2d1      	uxtb	r1, r2
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	460a      	mov	r2, r1
 800385c:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003866:	dc0a      	bgt.n	800387e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1d18      	adds	r0, r3, #4
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4619      	mov	r1, r3
 8003876:	f7fe fcab 	bl	80021d0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	e005      	b.n	800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800387e:	4905      	ldr	r1, [pc, #20]	@ (8003894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f849 	bl	8003918 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	0800e5e0 	.word	0x0800e5e0

08003898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fcdf 	bl	800226a <_ZN13STM32Hardware4timeEv>
 80038ac:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4915      	ldr	r1, [pc, #84]	@ (800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80038b6:	fba1 1303 	umull	r1, r3, r1, r3
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	1e5a      	subs	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4b0f      	ldr	r3, [pc, #60]	@ (800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80038ce:	fba3 0302 	umull	r0, r3, r3, r2
 80038d2:	099b      	lsrs	r3, r3, #6
 80038d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038d8:	fb00 f303 	mul.w	r3, r0, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	4a0c      	ldr	r2, [pc, #48]	@ (8003910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80038e0:	fb02 f303 	mul.w	r3, r2, r3
 80038e4:	1aca      	subs	r2, r1, r3
 80038e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80038e8:	4413      	add	r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f000 fc3e 	bl	8004180 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	10624dd3 	.word	0x10624dd3
 8003910:	000f4240 	.word	0x000f4240
 8003914:	3b9aca00 	.word	0x3b9aca00

08003918 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	2103      	movs	r1, #3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f804 	bl	8003934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	460b      	mov	r3, r1
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003942:	f107 0314 	add.w	r3, r7, #20
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd ffc2 	bl	80018d0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800394c:	7afb      	ldrb	r3, [r7, #11]
 800394e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f107 0214 	add.w	r2, r7, #20
 800395e:	2107      	movs	r1, #7
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	4798      	blx	r3
  }
 8003964:	bf00      	nop
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <_Z41__static_initialization_and_destruction_0ii>:
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d116      	bne.n	80039aa <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003982:	4293      	cmp	r3, r2
 8003984:	d111      	bne.n	80039aa <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003986:	480b      	ldr	r0, [pc, #44]	@ (80039b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003988:	f7ff f914 	bl	8002bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 800398c:	480a      	ldr	r0, [pc, #40]	@ (80039b8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800398e:	f7fe fc77 	bl	8002280 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("stm32_to_pc", &str_msg);
 8003992:	2300      	movs	r3, #0
 8003994:	4a08      	ldr	r2, [pc, #32]	@ (80039b8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003996:	4909      	ldr	r1, [pc, #36]	@ (80039bc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003998:	4809      	ldr	r0, [pc, #36]	@ (80039c0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800399a:	f7fe fb0d 	bl	8001fb8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32MultiArray> listener("wheel_velocity", &stringCallback);
 800399e:	2301      	movs	r3, #1
 80039a0:	4a08      	ldr	r2, [pc, #32]	@ (80039c4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80039a2:	4909      	ldr	r1, [pc, #36]	@ (80039c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80039a4:	4809      	ldr	r0, [pc, #36]	@ (80039cc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80039a6:	f7ff fb1b 	bl	8002fe0 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000b50 	.word	0x20000b50
 80039b8:	2000148c 	.word	0x2000148c
 80039bc:	0800e61c 	.word	0x0800e61c
 80039c0:	20001494 	.word	0x20001494
 80039c4:	08002ca9 	.word	0x08002ca9
 80039c8:	0800e628 	.word	0x0800e628
 80039cc:	200014b8 	.word	0x200014b8

080039d0 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	330c      	adds	r3, #12
 80039de:	6839      	ldr	r1, [r7, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff f833 	bl	8002a4c <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	320c      	adds	r2, #12
 80039ee:	4610      	mov	r0, r2
 80039f0:	4798      	blx	r3
  }
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  }
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff f8a1 	bl	8002b64 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8003a22:	4603      	mov	r3, r0
  }
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	330c      	adds	r3, #12
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f89f 	bl	8002b7c <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 8003a3e:	4603      	mov	r3, r0
  }
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
    return configured_;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <_GLOBAL__sub_I_real_left_vel>:
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f7ff ff7f 	bl	800396c <_Z41__static_initialization_and_destruction_0ii>
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a76:	4b18      	ldr	r3, [pc, #96]	@ (8003ad8 <HAL_MspInit+0x68>)
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <HAL_MspInit+0x68>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6193      	str	r3, [r2, #24]
 8003a82:	4b15      	ldr	r3, [pc, #84]	@ (8003ad8 <HAL_MspInit+0x68>)
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ad8 <HAL_MspInit+0x68>)
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	4a11      	ldr	r2, [pc, #68]	@ (8003ad8 <HAL_MspInit+0x68>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	61d3      	str	r3, [r2, #28]
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad8 <HAL_MspInit+0x68>)
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	210f      	movs	r1, #15
 8003aaa:	f06f 0001 	mvn.w	r0, #1
 8003aae:	f000 fdd6 	bl	800465e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <HAL_MspInit+0x6c>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	4a04      	ldr	r2, [pc, #16]	@ (8003adc <HAL_MspInit+0x6c>)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40010000 	.word	0x40010000

08003ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	@ 0x30
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003af6:	4b2e      	ldr	r3, [pc, #184]	@ (8003bb0 <HAL_InitTick+0xd0>)
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb0 <HAL_InitTick+0xd0>)
 8003afc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b00:	6193      	str	r3, [r2, #24]
 8003b02:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb0 <HAL_InitTick+0xd0>)
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b0e:	f107 020c 	add.w	r2, r7, #12
 8003b12:	f107 0310 	add.w	r3, r7, #16
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 fdfb 	bl	8005714 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b1e:	f001 fde5 	bl	80056ec <HAL_RCC_GetPCLK2Freq>
 8003b22:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b26:	4a23      	ldr	r2, [pc, #140]	@ (8003bb4 <HAL_InitTick+0xd4>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	0c9b      	lsrs	r3, r3, #18
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b32:	4b21      	ldr	r3, [pc, #132]	@ (8003bb8 <HAL_InitTick+0xd8>)
 8003b34:	4a21      	ldr	r2, [pc, #132]	@ (8003bbc <HAL_InitTick+0xdc>)
 8003b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003b38:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb8 <HAL_InitTick+0xd8>)
 8003b3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b3e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b40:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <HAL_InitTick+0xd8>)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003b46:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb8 <HAL_InitTick+0xd8>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb8 <HAL_InitTick+0xd8>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b52:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <HAL_InitTick+0xd8>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003b58:	4817      	ldr	r0, [pc, #92]	@ (8003bb8 <HAL_InitTick+0xd8>)
 8003b5a:	f001 fe29 	bl	80057b0 <HAL_TIM_Base_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003b64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003b6c:	4812      	ldr	r0, [pc, #72]	@ (8003bb8 <HAL_InitTick+0xd8>)
 8003b6e:	f001 fe77 	bl	8005860 <HAL_TIM_Base_Start_IT>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003b78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003b80:	2019      	movs	r0, #25
 8003b82:	f000 fd88 	bl	8004696 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d808      	bhi.n	8003b9e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	2019      	movs	r0, #25
 8003b92:	f000 fd64 	bl	800465e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b96:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc0 <HAL_InitTick+0xe0>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	e002      	b.n	8003ba4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3730      	adds	r7, #48	@ 0x30
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	431bde83 	.word	0x431bde83
 8003bb8:	20001560 	.word	0x20001560
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	20000024 	.word	0x20000024

08003bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <NMI_Handler+0x4>

08003bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <HardFault_Handler+0x4>

08003bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <MemManage_Handler+0x4>

08003bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <BusFault_Handler+0x4>

08003be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <UsageFault_Handler+0x4>

08003bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003bfc:	4802      	ldr	r0, [pc, #8]	@ (8003c08 <DMA1_Channel4_IRQHandler+0x10>)
 8003bfe:	f000 fec7 	bl	8004990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20001758 	.word	0x20001758

08003c0c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c10:	4802      	ldr	r0, [pc, #8]	@ (8003c1c <DMA1_Channel5_IRQHandler+0x10>)
 8003c12:	f000 febd 	bl	8004990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20001714 	.word	0x20001714

08003c20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c24:	4802      	ldr	r0, [pc, #8]	@ (8003c30 <TIM1_UP_IRQHandler+0x10>)
 8003c26:	f002 f88f 	bl	8005d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20001560 	.word	0x20001560

08003c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c38:	4802      	ldr	r0, [pc, #8]	@ (8003c44 <USART1_IRQHandler+0x10>)
 8003c3a:	f002 fdd7 	bl	80067ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20001684 	.word	0x20001684

08003c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return 1;
 8003c4c:	2301      	movs	r3, #1
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <_kill>:

int _kill(int pid, int sig)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c60:	f008 fc6a 	bl	800c538 <__errno>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2216      	movs	r2, #22
 8003c68:	601a      	str	r2, [r3, #0]
  return -1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_exit>:

void _exit (int status)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c7e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ffe7 	bl	8003c56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <_exit+0x12>

08003c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e00a      	b.n	8003cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c9e:	f3af 8000 	nop.w
 8003ca2:	4601      	mov	r1, r0
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	60ba      	str	r2, [r7, #8]
 8003caa:	b2ca      	uxtb	r2, r1
 8003cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	dbf0      	blt.n	8003c9e <_read+0x12>
  }

  return len;
 8003cbc:	687b      	ldr	r3, [r7, #4]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e009      	b.n	8003cec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	60ba      	str	r2, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	dbf1      	blt.n	8003cd8 <_write+0x12>
  }
  return len;
 8003cf4:	687b      	ldr	r3, [r7, #4]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_close>:

int _close(int file)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d24:	605a      	str	r2, [r3, #4]
  return 0;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <_isatty>:

int _isatty(int file)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d3a:	2301      	movs	r3, #1
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr

08003d46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
	...

08003d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d68:	4a14      	ldr	r2, [pc, #80]	@ (8003dbc <_sbrk+0x5c>)
 8003d6a:	4b15      	ldr	r3, [pc, #84]	@ (8003dc0 <_sbrk+0x60>)
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d74:	4b13      	ldr	r3, [pc, #76]	@ (8003dc4 <_sbrk+0x64>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <_sbrk+0x64>)
 8003d7e:	4a12      	ldr	r2, [pc, #72]	@ (8003dc8 <_sbrk+0x68>)
 8003d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d82:	4b10      	ldr	r3, [pc, #64]	@ (8003dc4 <_sbrk+0x64>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d207      	bcs.n	8003da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d90:	f008 fbd2 	bl	800c538 <__errno>
 8003d94:	4603      	mov	r3, r0
 8003d96:	220c      	movs	r2, #12
 8003d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d9e:	e009      	b.n	8003db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003da0:	4b08      	ldr	r3, [pc, #32]	@ (8003dc4 <_sbrk+0x64>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003da6:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <_sbrk+0x64>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	4a05      	ldr	r2, [pc, #20]	@ (8003dc4 <_sbrk+0x64>)
 8003db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003db2:	68fb      	ldr	r3, [r7, #12]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20005000 	.word	0x20005000
 8003dc0:	00000400 	.word	0x00000400
 8003dc4:	200015a8 	.word	0x200015a8
 8003dc8:	20002778 	.word	0x20002778

08003dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08e      	sub	sp, #56	@ 0x38
 8003ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	PWM_Config pwm_config = {.pwm_resolution = 10, .pwm_freq = 1000, .pwm_input_freq = 72*1000000};
 8003dde:	4a36      	ldr	r2, [pc, #216]	@ (8003eb8 <MX_TIM2_Init+0xe0>)
 8003de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003de4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003de6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t PSC_value, ARR_value;
	calculate_pwm_values(&pwm_config, &PSC_value, &ARR_value);
 8003dea:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003dee:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003df6:	4618      	mov	r0, r3
 8003df8:	f003 fcf2 	bl	80077e0 <calculate_pwm_values>
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dfc:	f107 031c 	add.w	r3, r7, #28
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e06:	463b      	mov	r3, r7
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	611a      	str	r2, [r3, #16]
 8003e14:	615a      	str	r2, [r3, #20]
 8003e16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e18:	4b28      	ldr	r3, [pc, #160]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003e1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003e20:	4b26      	ldr	r3, [pc, #152]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e26:	4b25      	ldr	r3, [pc, #148]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003e2c:	4b23      	ldr	r3, [pc, #140]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003e2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e34:	4b21      	ldr	r3, [pc, #132]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e3a:	4b20      	ldr	r3, [pc, #128]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e40:	481e      	ldr	r0, [pc, #120]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003e42:	f001 fd5f 	bl	8005904 <HAL_TIM_PWM_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003e4c:	f7fd fa70 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4817      	ldr	r0, [pc, #92]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003e60:	f002 fb6e 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003e6a:	f7fd fa61 	bl	8001330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e6e:	2360      	movs	r3, #96	@ 0x60
 8003e70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e7e:	463b      	mov	r3, r7
 8003e80:	2200      	movs	r2, #0
 8003e82:	4619      	mov	r1, r3
 8003e84:	480d      	ldr	r0, [pc, #52]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003e86:	f002 f867 	bl	8005f58 <HAL_TIM_PWM_ConfigChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8003e90:	f7fd fa4e 	bl	8001330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e94:	463b      	mov	r3, r7
 8003e96:	2204      	movs	r2, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4808      	ldr	r0, [pc, #32]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003e9c:	f002 f85c 	bl	8005f58 <HAL_TIM_PWM_ConfigChannel>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8003ea6:	f7fd fa43 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003eaa:	4804      	ldr	r0, [pc, #16]	@ (8003ebc <MX_TIM2_Init+0xe4>)
 8003eac:	f000 f938 	bl	8004120 <HAL_TIM_MspPostInit>

}
 8003eb0:	bf00      	nop
 8003eb2:	3738      	adds	r7, #56	@ 0x38
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	0800e638 	.word	0x0800e638
 8003ebc:	200015ac 	.word	0x200015ac

08003ec0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08c      	sub	sp, #48	@ 0x30
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ec6:	f107 030c 	add.w	r3, r7, #12
 8003eca:	2224      	movs	r2, #36	@ 0x24
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f008 fa8b 	bl	800c3ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ed4:	1d3b      	adds	r3, r7, #4
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003edc:	4b20      	ldr	r3, [pc, #128]	@ (8003f60 <MX_TIM3_Init+0xa0>)
 8003ede:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <MX_TIM3_Init+0xa4>)
 8003ee0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f60 <MX_TIM3_Init+0xa0>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f60 <MX_TIM3_Init+0xa0>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003eee:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <MX_TIM3_Init+0xa0>)
 8003ef0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ef4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <MX_TIM3_Init+0xa0>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003efc:	4b18      	ldr	r3, [pc, #96]	@ (8003f60 <MX_TIM3_Init+0xa0>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f02:	2301      	movs	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003f26:	f107 030c 	add.w	r3, r7, #12
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	480c      	ldr	r0, [pc, #48]	@ (8003f60 <MX_TIM3_Init+0xa0>)
 8003f2e:	f001 fddb 	bl	8005ae8 <HAL_TIM_Encoder_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003f38:	f7fd f9fa 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	4805      	ldr	r0, [pc, #20]	@ (8003f60 <MX_TIM3_Init+0xa0>)
 8003f4a:	f002 faf9 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003f54:	f7fd f9ec 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f58:	bf00      	nop
 8003f5a:	3730      	adds	r7, #48	@ 0x30
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	200015f4 	.word	0x200015f4
 8003f64:	40000400 	.word	0x40000400

08003f68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08c      	sub	sp, #48	@ 0x30
 8003f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f6e:	f107 030c 	add.w	r3, r7, #12
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f008 fa37 	bl	800c3ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f84:	4b20      	ldr	r3, [pc, #128]	@ (8004008 <MX_TIM4_Init+0xa0>)
 8003f86:	4a21      	ldr	r2, [pc, #132]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003f88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004008 <MX_TIM4_Init+0xa0>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f90:	4b1d      	ldr	r3, [pc, #116]	@ (8004008 <MX_TIM4_Init+0xa0>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f96:	4b1c      	ldr	r3, [pc, #112]	@ (8004008 <MX_TIM4_Init+0xa0>)
 8003f98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004008 <MX_TIM4_Init+0xa0>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa4:	4b18      	ldr	r3, [pc, #96]	@ (8004008 <MX_TIM4_Init+0xa0>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	480c      	ldr	r0, [pc, #48]	@ (8004008 <MX_TIM4_Init+0xa0>)
 8003fd6:	f001 fd87 	bl	8005ae8 <HAL_TIM_Encoder_Init>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003fe0:	f7fd f9a6 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fec:	1d3b      	adds	r3, r7, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4805      	ldr	r0, [pc, #20]	@ (8004008 <MX_TIM4_Init+0xa0>)
 8003ff2:	f002 faa5 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003ffc:	f7fd f998 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004000:	bf00      	nop
 8004002:	3730      	adds	r7, #48	@ 0x30
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	2000163c 	.word	0x2000163c
 800400c:	40000800 	.word	0x40000800

08004010 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004020:	d10b      	bne.n	800403a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004022:	4b08      	ldr	r3, [pc, #32]	@ (8004044 <HAL_TIM_PWM_MspInit+0x34>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4a07      	ldr	r2, [pc, #28]	@ (8004044 <HAL_TIM_PWM_MspInit+0x34>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	61d3      	str	r3, [r2, #28]
 800402e:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <HAL_TIM_PWM_MspInit+0x34>)
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr
 8004044:	40021000 	.word	0x40021000

08004048 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	@ 0x28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004050:	f107 0318 	add.w	r3, r7, #24
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2a      	ldr	r2, [pc, #168]	@ (800410c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d124      	bne.n	80040b2 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004068:	4b29      	ldr	r3, [pc, #164]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	4a28      	ldr	r2, [pc, #160]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 800406e:	f043 0302 	orr.w	r3, r3, #2
 8004072:	61d3      	str	r3, [r2, #28]
 8004074:	4b26      	ldr	r3, [pc, #152]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004080:	4b23      	ldr	r3, [pc, #140]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	4a22      	ldr	r2, [pc, #136]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	6193      	str	r3, [r2, #24]
 800408c:	4b20      	ldr	r3, [pc, #128]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004098:	23c0      	movs	r3, #192	@ 0xc0
 800409a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a4:	f107 0318 	add.w	r3, r7, #24
 80040a8:	4619      	mov	r1, r3
 80040aa:	481a      	ldr	r0, [pc, #104]	@ (8004114 <HAL_TIM_Encoder_MspInit+0xcc>)
 80040ac:	f000 fda4 	bl	8004bf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80040b0:	e028      	b.n	8004104 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM4)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a18      	ldr	r2, [pc, #96]	@ (8004118 <HAL_TIM_Encoder_MspInit+0xd0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d123      	bne.n	8004104 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040bc:	4b14      	ldr	r3, [pc, #80]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4a13      	ldr	r2, [pc, #76]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040c2:	f043 0304 	orr.w	r3, r3, #4
 80040c6:	61d3      	str	r3, [r2, #28]
 80040c8:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040da:	f043 0308 	orr.w	r3, r3, #8
 80040de:	6193      	str	r3, [r2, #24]
 80040e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040ec:	23c0      	movs	r3, #192	@ 0xc0
 80040ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f8:	f107 0318 	add.w	r3, r7, #24
 80040fc:	4619      	mov	r1, r3
 80040fe:	4807      	ldr	r0, [pc, #28]	@ (800411c <HAL_TIM_Encoder_MspInit+0xd4>)
 8004100:	f000 fd7a 	bl	8004bf8 <HAL_GPIO_Init>
}
 8004104:	bf00      	nop
 8004106:	3728      	adds	r7, #40	@ 0x28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40000400 	.word	0x40000400
 8004110:	40021000 	.word	0x40021000
 8004114:	40010800 	.word	0x40010800
 8004118:	40000800 	.word	0x40000800
 800411c:	40010c00 	.word	0x40010c00

08004120 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 0310 	add.w	r3, r7, #16
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413e:	d117      	bne.n	8004170 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004140:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <HAL_TIM_MspPostInit+0x58>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	4a0c      	ldr	r2, [pc, #48]	@ (8004178 <HAL_TIM_MspPostInit+0x58>)
 8004146:	f043 0304 	orr.w	r3, r3, #4
 800414a:	6193      	str	r3, [r2, #24]
 800414c:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <HAL_TIM_MspPostInit+0x58>)
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004158:	2303      	movs	r3, #3
 800415a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415c:	2302      	movs	r3, #2
 800415e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004160:	2302      	movs	r3, #2
 8004162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004164:	f107 0310 	add.w	r3, r7, #16
 8004168:	4619      	mov	r1, r3
 800416a:	4804      	ldr	r0, [pc, #16]	@ (800417c <HAL_TIM_MspPostInit+0x5c>)
 800416c:	f000 fd44 	bl	8004bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004170:	bf00      	nop
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	40010800 	.word	0x40010800

08004180 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	0a5a      	lsrs	r2, r3, #9
 8004190:	490f      	ldr	r1, [pc, #60]	@ (80041d0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004192:	fba1 1202 	umull	r1, r2, r1, r2
 8004196:	09d2      	lsrs	r2, r2, #7
 8004198:	490e      	ldr	r1, [pc, #56]	@ (80041d4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800419a:	fb01 f202 	mul.w	r2, r1, r2
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	0a5b      	lsrs	r3, r3, #9
 80041a8:	4a09      	ldr	r2, [pc, #36]	@ (80041d0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	09db      	lsrs	r3, r3, #7
 80041b0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	441a      	add	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	601a      	str	r2, [r3, #0]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	00044b83 	.word	0x00044b83
 80041d4:	3b9aca00 	.word	0x3b9aca00

080041d8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041dc:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <MX_USART1_UART_Init+0x4c>)
 80041de:	4a12      	ldr	r2, [pc, #72]	@ (8004228 <MX_USART1_UART_Init+0x50>)
 80041e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80041e2:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <MX_USART1_UART_Init+0x4c>)
 80041e4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80041e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004224 <MX_USART1_UART_Init+0x4c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004224 <MX_USART1_UART_Init+0x4c>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <MX_USART1_UART_Init+0x4c>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041fc:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <MX_USART1_UART_Init+0x4c>)
 80041fe:	220c      	movs	r2, #12
 8004200:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004202:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <MX_USART1_UART_Init+0x4c>)
 8004204:	2200      	movs	r2, #0
 8004206:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004208:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <MX_USART1_UART_Init+0x4c>)
 800420a:	2200      	movs	r2, #0
 800420c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800420e:	4805      	ldr	r0, [pc, #20]	@ (8004224 <MX_USART1_UART_Init+0x4c>)
 8004210:	f002 fa06 	bl	8006620 <HAL_UART_Init>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800421a:	f7fd f889 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20001684 	.word	0x20001684
 8004228:	40013800 	.word	0x40013800

0800422c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004230:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <MX_USART2_UART_Init+0x4c>)
 8004232:	4a12      	ldr	r2, [pc, #72]	@ (800427c <MX_USART2_UART_Init+0x50>)
 8004234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004236:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <MX_USART2_UART_Init+0x4c>)
 8004238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800423c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800423e:	4b0e      	ldr	r3, [pc, #56]	@ (8004278 <MX_USART2_UART_Init+0x4c>)
 8004240:	2200      	movs	r2, #0
 8004242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004244:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <MX_USART2_UART_Init+0x4c>)
 8004246:	2200      	movs	r2, #0
 8004248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800424a:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <MX_USART2_UART_Init+0x4c>)
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004250:	4b09      	ldr	r3, [pc, #36]	@ (8004278 <MX_USART2_UART_Init+0x4c>)
 8004252:	220c      	movs	r2, #12
 8004254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004256:	4b08      	ldr	r3, [pc, #32]	@ (8004278 <MX_USART2_UART_Init+0x4c>)
 8004258:	2200      	movs	r2, #0
 800425a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <MX_USART2_UART_Init+0x4c>)
 800425e:	2200      	movs	r2, #0
 8004260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004262:	4805      	ldr	r0, [pc, #20]	@ (8004278 <MX_USART2_UART_Init+0x4c>)
 8004264:	f002 f9dc 	bl	8006620 <HAL_UART_Init>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800426e:	f7fd f85f 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200016cc 	.word	0x200016cc
 800427c:	40004400 	.word	0x40004400

08004280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	@ 0x28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004288:	f107 0318 	add.w	r3, r7, #24
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a62      	ldr	r2, [pc, #392]	@ (8004424 <HAL_UART_MspInit+0x1a4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	f040 8087 	bne.w	80043b0 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042a2:	4b61      	ldr	r3, [pc, #388]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	4a60      	ldr	r2, [pc, #384]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80042a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042ac:	6193      	str	r3, [r2, #24]
 80042ae:	4b5e      	ldr	r3, [pc, #376]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	4a5a      	ldr	r2, [pc, #360]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80042c0:	f043 0304 	orr.w	r3, r3, #4
 80042c4:	6193      	str	r3, [r2, #24]
 80042c6:	4b58      	ldr	r3, [pc, #352]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80042d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d8:	2302      	movs	r3, #2
 80042da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042dc:	2303      	movs	r3, #3
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042e0:	f107 0318 	add.w	r3, r7, #24
 80042e4:	4619      	mov	r1, r3
 80042e6:	4851      	ldr	r0, [pc, #324]	@ (800442c <HAL_UART_MspInit+0x1ac>)
 80042e8:	f000 fc86 	bl	8004bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fa:	f107 0318 	add.w	r3, r7, #24
 80042fe:	4619      	mov	r1, r3
 8004300:	484a      	ldr	r0, [pc, #296]	@ (800442c <HAL_UART_MspInit+0x1ac>)
 8004302:	f000 fc79 	bl	8004bf8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004306:	4b4a      	ldr	r3, [pc, #296]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 8004308:	4a4a      	ldr	r2, [pc, #296]	@ (8004434 <HAL_UART_MspInit+0x1b4>)
 800430a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800430c:	4b48      	ldr	r3, [pc, #288]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 800430e:	2200      	movs	r2, #0
 8004310:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004312:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 8004314:	2200      	movs	r2, #0
 8004316:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004318:	4b45      	ldr	r3, [pc, #276]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 800431a:	2280      	movs	r2, #128	@ 0x80
 800431c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800431e:	4b44      	ldr	r3, [pc, #272]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 8004320:	2200      	movs	r2, #0
 8004322:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004324:	4b42      	ldr	r3, [pc, #264]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 8004326:	2200      	movs	r2, #0
 8004328:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800432a:	4b41      	ldr	r3, [pc, #260]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 800432c:	2200      	movs	r2, #0
 800432e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004330:	4b3f      	ldr	r3, [pc, #252]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 8004332:	2200      	movs	r2, #0
 8004334:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004336:	483e      	ldr	r0, [pc, #248]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 8004338:	f000 f9bc 	bl	80046b4 <HAL_DMA_Init>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004342:	f7fc fff5 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a39      	ldr	r2, [pc, #228]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 800434a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800434c:	4a38      	ldr	r2, [pc, #224]	@ (8004430 <HAL_UART_MspInit+0x1b0>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004352:	4b39      	ldr	r3, [pc, #228]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 8004354:	4a39      	ldr	r2, [pc, #228]	@ (800443c <HAL_UART_MspInit+0x1bc>)
 8004356:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004358:	4b37      	ldr	r3, [pc, #220]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 800435a:	2210      	movs	r2, #16
 800435c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800435e:	4b36      	ldr	r3, [pc, #216]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004364:	4b34      	ldr	r3, [pc, #208]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 8004366:	2280      	movs	r2, #128	@ 0x80
 8004368:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800436a:	4b33      	ldr	r3, [pc, #204]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 800436c:	2200      	movs	r2, #0
 800436e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004370:	4b31      	ldr	r3, [pc, #196]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 8004372:	2200      	movs	r2, #0
 8004374:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004376:	4b30      	ldr	r3, [pc, #192]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 8004378:	2200      	movs	r2, #0
 800437a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800437c:	4b2e      	ldr	r3, [pc, #184]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 800437e:	2200      	movs	r2, #0
 8004380:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004382:	482d      	ldr	r0, [pc, #180]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 8004384:	f000 f996 	bl	80046b4 <HAL_DMA_Init>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800438e:	f7fc ffcf 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a28      	ldr	r2, [pc, #160]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 8004396:	639a      	str	r2, [r3, #56]	@ 0x38
 8004398:	4a27      	ldr	r2, [pc, #156]	@ (8004438 <HAL_UART_MspInit+0x1b8>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800439e:	2200      	movs	r2, #0
 80043a0:	2105      	movs	r1, #5
 80043a2:	2025      	movs	r0, #37	@ 0x25
 80043a4:	f000 f95b 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043a8:	2025      	movs	r0, #37	@ 0x25
 80043aa:	f000 f974 	bl	8004696 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80043ae:	e034      	b.n	800441a <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a22      	ldr	r2, [pc, #136]	@ (8004440 <HAL_UART_MspInit+0x1c0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d12f      	bne.n	800441a <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4a1a      	ldr	r2, [pc, #104]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c4:	61d3      	str	r3, [r2, #28]
 80043c6:	4b18      	ldr	r3, [pc, #96]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d2:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	4a14      	ldr	r2, [pc, #80]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80043d8:	f043 0304 	orr.w	r3, r3, #4
 80043dc:	6193      	str	r3, [r2, #24]
 80043de:	4b12      	ldr	r3, [pc, #72]	@ (8004428 <HAL_UART_MspInit+0x1a8>)
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043ea:	2304      	movs	r3, #4
 80043ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ee:	2302      	movs	r3, #2
 80043f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043f2:	2303      	movs	r3, #3
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f6:	f107 0318 	add.w	r3, r7, #24
 80043fa:	4619      	mov	r1, r3
 80043fc:	480b      	ldr	r0, [pc, #44]	@ (800442c <HAL_UART_MspInit+0x1ac>)
 80043fe:	f000 fbfb 	bl	8004bf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004402:	2308      	movs	r3, #8
 8004404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440e:	f107 0318 	add.w	r3, r7, #24
 8004412:	4619      	mov	r1, r3
 8004414:	4805      	ldr	r0, [pc, #20]	@ (800442c <HAL_UART_MspInit+0x1ac>)
 8004416:	f000 fbef 	bl	8004bf8 <HAL_GPIO_Init>
}
 800441a:	bf00      	nop
 800441c:	3728      	adds	r7, #40	@ 0x28
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40013800 	.word	0x40013800
 8004428:	40021000 	.word	0x40021000
 800442c:	40010800 	.word	0x40010800
 8004430:	20001714 	.word	0x20001714
 8004434:	40020058 	.word	0x40020058
 8004438:	20001758 	.word	0x20001758
 800443c:	40020044 	.word	0x40020044
 8004440:	40004400 	.word	0x40004400

08004444 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004444:	f7ff fcc2 	bl	8003dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004448:	480b      	ldr	r0, [pc, #44]	@ (8004478 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800444a:	490c      	ldr	r1, [pc, #48]	@ (800447c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800444c:	4a0c      	ldr	r2, [pc, #48]	@ (8004480 <LoopFillZerobss+0x16>)
  movs r3, #0
 800444e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004450:	e002      	b.n	8004458 <LoopCopyDataInit>

08004452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004456:	3304      	adds	r3, #4

08004458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800445a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800445c:	d3f9      	bcc.n	8004452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800445e:	4a09      	ldr	r2, [pc, #36]	@ (8004484 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004460:	4c09      	ldr	r4, [pc, #36]	@ (8004488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004464:	e001      	b.n	800446a <LoopFillZerobss>

08004466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004468:	3204      	adds	r2, #4

0800446a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800446a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800446c:	d3fb      	bcc.n	8004466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800446e:	f008 f869 	bl	800c544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004472:	f7fc fe3d 	bl	80010f0 <main>
  bx lr
 8004476:	4770      	bx	lr
  ldr r0, =_sdata
 8004478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800447c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004480:	0800eb8c 	.word	0x0800eb8c
  ldr r2, =_sbss
 8004484:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004488:	20002778 	.word	0x20002778

0800448c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800448c:	e7fe      	b.n	800448c <ADC1_2_IRQHandler>
	...

08004490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004494:	4b08      	ldr	r3, [pc, #32]	@ (80044b8 <HAL_Init+0x28>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a07      	ldr	r2, [pc, #28]	@ (80044b8 <HAL_Init+0x28>)
 800449a:	f043 0310 	orr.w	r3, r3, #16
 800449e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a0:	2003      	movs	r0, #3
 80044a2:	f000 f8d1 	bl	8004648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044a6:	200f      	movs	r0, #15
 80044a8:	f7ff fb1a 	bl	8003ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044ac:	f7ff fae0 	bl	8003a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40022000 	.word	0x40022000

080044bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044c0:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <HAL_IncTick+0x1c>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b05      	ldr	r3, [pc, #20]	@ (80044dc <HAL_IncTick+0x20>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4413      	add	r3, r2
 80044cc:	4a03      	ldr	r2, [pc, #12]	@ (80044dc <HAL_IncTick+0x20>)
 80044ce:	6013      	str	r3, [r2, #0]
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	20000028 	.word	0x20000028
 80044dc:	2000179c 	.word	0x2000179c

080044e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return uwTick;
 80044e4:	4b02      	ldr	r3, [pc, #8]	@ (80044f0 <HAL_GetTick+0x10>)
 80044e6:	681b      	ldr	r3, [r3, #0]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	2000179c 	.word	0x2000179c

080044f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004504:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800451c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	@ (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <__NVIC_GetPriorityGrouping+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 0307 	and.w	r3, r3, #7
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db0b      	blt.n	8004582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	4906      	ldr	r1, [pc, #24]	@ (800458c <__NVIC_EnableIRQ+0x34>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	e000e100 	.word	0xe000e100

08004590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db0a      	blt.n	80045ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	490c      	ldr	r1, [pc, #48]	@ (80045dc <__NVIC_SetPriority+0x4c>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	440b      	add	r3, r1
 80045b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b8:	e00a      	b.n	80045d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	4908      	ldr	r1, [pc, #32]	@ (80045e0 <__NVIC_SetPriority+0x50>)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	3b04      	subs	r3, #4
 80045c8:	0112      	lsls	r2, r2, #4
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	440b      	add	r3, r1
 80045ce:	761a      	strb	r2, [r3, #24]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	e000e100 	.word	0xe000e100
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	@ 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f1c3 0307 	rsb	r3, r3, #7
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf28      	it	cs
 8004602:	2304      	movcs	r3, #4
 8004604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3304      	adds	r3, #4
 800460a:	2b06      	cmp	r3, #6
 800460c:	d902      	bls.n	8004614 <NVIC_EncodePriority+0x30>
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3b03      	subs	r3, #3
 8004612:	e000      	b.n	8004616 <NVIC_EncodePriority+0x32>
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43da      	mvns	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	401a      	ands	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800462c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	43d9      	mvns	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	4313      	orrs	r3, r2
         );
}
 800463e:	4618      	mov	r0, r3
 8004640:	3724      	adds	r7, #36	@ 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ff4f 	bl	80044f4 <__NVIC_SetPriorityGrouping>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004670:	f7ff ff64 	bl	800453c <__NVIC_GetPriorityGrouping>
 8004674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff ffb2 	bl	80045e4 <NVIC_EncodePriority>
 8004680:	4602      	mov	r2, r0
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff81 	bl	8004590 <__NVIC_SetPriority>
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff57 	bl	8004558 <__NVIC_EnableIRQ>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e043      	b.n	8004752 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b22      	ldr	r3, [pc, #136]	@ (800475c <HAL_DMA_Init+0xa8>)
 80046d2:	4413      	add	r3, r2
 80046d4:	4a22      	ldr	r2, [pc, #136]	@ (8004760 <HAL_DMA_Init+0xac>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	009a      	lsls	r2, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004764 <HAL_DMA_Init+0xb0>)
 80046e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80046fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004702:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800470c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	bffdfff8 	.word	0xbffdfff8
 8004760:	cccccccd 	.word	0xcccccccd
 8004764:	40020000 	.word	0x40020000

08004768 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_DMA_Start_IT+0x20>
 8004784:	2302      	movs	r3, #2
 8004786:	e04b      	b.n	8004820 <HAL_DMA_Start_IT+0xb8>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d13a      	bne.n	8004812 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f9eb 	bl	8004b9c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 020e 	orr.w	r2, r2, #14
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e00f      	b.n	8004800 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0204 	bic.w	r2, r2, #4
 80047ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 020a 	orr.w	r2, r2, #10
 80047fe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e005      	b.n	800481e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800481a:	2302      	movs	r3, #2
 800481c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800481e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d008      	beq.n	8004852 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2204      	movs	r2, #4
 8004844:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e020      	b.n	8004894 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 020e 	bic.w	r2, r2, #14
 8004860:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487a:	2101      	movs	r1, #1
 800487c:	fa01 f202 	lsl.w	r2, r1, r2
 8004880:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004892:	7bfb      	ldrb	r3, [r7, #15]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr
	...

080048a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d005      	beq.n	80048c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2204      	movs	r2, #4
 80048bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
 80048c2:	e051      	b.n	8004968 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 020e 	bic.w	r2, r2, #14
 80048d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a22      	ldr	r2, [pc, #136]	@ (8004974 <HAL_DMA_Abort_IT+0xd4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d029      	beq.n	8004942 <HAL_DMA_Abort_IT+0xa2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a21      	ldr	r2, [pc, #132]	@ (8004978 <HAL_DMA_Abort_IT+0xd8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d022      	beq.n	800493e <HAL_DMA_Abort_IT+0x9e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1f      	ldr	r2, [pc, #124]	@ (800497c <HAL_DMA_Abort_IT+0xdc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01a      	beq.n	8004938 <HAL_DMA_Abort_IT+0x98>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1e      	ldr	r2, [pc, #120]	@ (8004980 <HAL_DMA_Abort_IT+0xe0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d012      	beq.n	8004932 <HAL_DMA_Abort_IT+0x92>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1c      	ldr	r2, [pc, #112]	@ (8004984 <HAL_DMA_Abort_IT+0xe4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00a      	beq.n	800492c <HAL_DMA_Abort_IT+0x8c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1b      	ldr	r2, [pc, #108]	@ (8004988 <HAL_DMA_Abort_IT+0xe8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d102      	bne.n	8004926 <HAL_DMA_Abort_IT+0x86>
 8004920:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004924:	e00e      	b.n	8004944 <HAL_DMA_Abort_IT+0xa4>
 8004926:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800492a:	e00b      	b.n	8004944 <HAL_DMA_Abort_IT+0xa4>
 800492c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004930:	e008      	b.n	8004944 <HAL_DMA_Abort_IT+0xa4>
 8004932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004936:	e005      	b.n	8004944 <HAL_DMA_Abort_IT+0xa4>
 8004938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800493c:	e002      	b.n	8004944 <HAL_DMA_Abort_IT+0xa4>
 800493e:	2310      	movs	r3, #16
 8004940:	e000      	b.n	8004944 <HAL_DMA_Abort_IT+0xa4>
 8004942:	2301      	movs	r3, #1
 8004944:	4a11      	ldr	r2, [pc, #68]	@ (800498c <HAL_DMA_Abort_IT+0xec>)
 8004946:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4798      	blx	r3
    } 
  }
  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40020008 	.word	0x40020008
 8004978:	4002001c 	.word	0x4002001c
 800497c:	40020030 	.word	0x40020030
 8004980:	40020044 	.word	0x40020044
 8004984:	40020058 	.word	0x40020058
 8004988:	4002006c 	.word	0x4002006c
 800498c:	40020000 	.word	0x40020000

08004990 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	2204      	movs	r2, #4
 80049ae:	409a      	lsls	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d04f      	beq.n	8004a58 <HAL_DMA_IRQHandler+0xc8>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d04a      	beq.n	8004a58 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d107      	bne.n	80049e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0204 	bic.w	r2, r2, #4
 80049de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a66      	ldr	r2, [pc, #408]	@ (8004b80 <HAL_DMA_IRQHandler+0x1f0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d029      	beq.n	8004a3e <HAL_DMA_IRQHandler+0xae>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a65      	ldr	r2, [pc, #404]	@ (8004b84 <HAL_DMA_IRQHandler+0x1f4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d022      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xaa>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a63      	ldr	r2, [pc, #396]	@ (8004b88 <HAL_DMA_IRQHandler+0x1f8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d01a      	beq.n	8004a34 <HAL_DMA_IRQHandler+0xa4>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a62      	ldr	r2, [pc, #392]	@ (8004b8c <HAL_DMA_IRQHandler+0x1fc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d012      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x9e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a60      	ldr	r2, [pc, #384]	@ (8004b90 <HAL_DMA_IRQHandler+0x200>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00a      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x98>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a5f      	ldr	r2, [pc, #380]	@ (8004b94 <HAL_DMA_IRQHandler+0x204>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d102      	bne.n	8004a22 <HAL_DMA_IRQHandler+0x92>
 8004a1c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a20:	e00e      	b.n	8004a40 <HAL_DMA_IRQHandler+0xb0>
 8004a22:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004a26:	e00b      	b.n	8004a40 <HAL_DMA_IRQHandler+0xb0>
 8004a28:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004a2c:	e008      	b.n	8004a40 <HAL_DMA_IRQHandler+0xb0>
 8004a2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a32:	e005      	b.n	8004a40 <HAL_DMA_IRQHandler+0xb0>
 8004a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a38:	e002      	b.n	8004a40 <HAL_DMA_IRQHandler+0xb0>
 8004a3a:	2340      	movs	r3, #64	@ 0x40
 8004a3c:	e000      	b.n	8004a40 <HAL_DMA_IRQHandler+0xb0>
 8004a3e:	2304      	movs	r3, #4
 8004a40:	4a55      	ldr	r2, [pc, #340]	@ (8004b98 <HAL_DMA_IRQHandler+0x208>)
 8004a42:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8094 	beq.w	8004b76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004a56:	e08e      	b.n	8004b76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d056      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x186>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d051      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10b      	bne.n	8004a98 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 020a 	bic.w	r2, r2, #10
 8004a8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a38      	ldr	r2, [pc, #224]	@ (8004b80 <HAL_DMA_IRQHandler+0x1f0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d029      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x166>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a37      	ldr	r2, [pc, #220]	@ (8004b84 <HAL_DMA_IRQHandler+0x1f4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x162>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a35      	ldr	r2, [pc, #212]	@ (8004b88 <HAL_DMA_IRQHandler+0x1f8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01a      	beq.n	8004aec <HAL_DMA_IRQHandler+0x15c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a34      	ldr	r2, [pc, #208]	@ (8004b8c <HAL_DMA_IRQHandler+0x1fc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d012      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x156>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a32      	ldr	r2, [pc, #200]	@ (8004b90 <HAL_DMA_IRQHandler+0x200>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x150>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a31      	ldr	r2, [pc, #196]	@ (8004b94 <HAL_DMA_IRQHandler+0x204>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d102      	bne.n	8004ada <HAL_DMA_IRQHandler+0x14a>
 8004ad4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004ad8:	e00e      	b.n	8004af8 <HAL_DMA_IRQHandler+0x168>
 8004ada:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ade:	e00b      	b.n	8004af8 <HAL_DMA_IRQHandler+0x168>
 8004ae0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ae4:	e008      	b.n	8004af8 <HAL_DMA_IRQHandler+0x168>
 8004ae6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004aea:	e005      	b.n	8004af8 <HAL_DMA_IRQHandler+0x168>
 8004aec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004af0:	e002      	b.n	8004af8 <HAL_DMA_IRQHandler+0x168>
 8004af2:	2320      	movs	r3, #32
 8004af4:	e000      	b.n	8004af8 <HAL_DMA_IRQHandler+0x168>
 8004af6:	2302      	movs	r3, #2
 8004af8:	4a27      	ldr	r2, [pc, #156]	@ (8004b98 <HAL_DMA_IRQHandler+0x208>)
 8004afa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d034      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004b14:	e02f      	b.n	8004b76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d028      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x1e8>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d023      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 020e 	bic.w	r2, r2, #14
 8004b3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
    }
  }
  return;
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
}
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40020008 	.word	0x40020008
 8004b84:	4002001c 	.word	0x4002001c
 8004b88:	40020030 	.word	0x40020030
 8004b8c:	40020044 	.word	0x40020044
 8004b90:	40020058 	.word	0x40020058
 8004b94:	4002006c 	.word	0x4002006c
 8004b98:	40020000 	.word	0x40020000

08004b9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d108      	bne.n	8004bdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bda:	e007      	b.n	8004bec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	60da      	str	r2, [r3, #12]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr
	...

08004bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b08b      	sub	sp, #44	@ 0x2c
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c02:	2300      	movs	r3, #0
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c06:	2300      	movs	r3, #0
 8004c08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c0a:	e169      	b.n	8004ee0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	f040 8158 	bne.w	8004eda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4a9a      	ldr	r2, [pc, #616]	@ (8004e98 <HAL_GPIO_Init+0x2a0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d05e      	beq.n	8004cf2 <HAL_GPIO_Init+0xfa>
 8004c34:	4a98      	ldr	r2, [pc, #608]	@ (8004e98 <HAL_GPIO_Init+0x2a0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d875      	bhi.n	8004d26 <HAL_GPIO_Init+0x12e>
 8004c3a:	4a98      	ldr	r2, [pc, #608]	@ (8004e9c <HAL_GPIO_Init+0x2a4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d058      	beq.n	8004cf2 <HAL_GPIO_Init+0xfa>
 8004c40:	4a96      	ldr	r2, [pc, #600]	@ (8004e9c <HAL_GPIO_Init+0x2a4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d86f      	bhi.n	8004d26 <HAL_GPIO_Init+0x12e>
 8004c46:	4a96      	ldr	r2, [pc, #600]	@ (8004ea0 <HAL_GPIO_Init+0x2a8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d052      	beq.n	8004cf2 <HAL_GPIO_Init+0xfa>
 8004c4c:	4a94      	ldr	r2, [pc, #592]	@ (8004ea0 <HAL_GPIO_Init+0x2a8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d869      	bhi.n	8004d26 <HAL_GPIO_Init+0x12e>
 8004c52:	4a94      	ldr	r2, [pc, #592]	@ (8004ea4 <HAL_GPIO_Init+0x2ac>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d04c      	beq.n	8004cf2 <HAL_GPIO_Init+0xfa>
 8004c58:	4a92      	ldr	r2, [pc, #584]	@ (8004ea4 <HAL_GPIO_Init+0x2ac>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d863      	bhi.n	8004d26 <HAL_GPIO_Init+0x12e>
 8004c5e:	4a92      	ldr	r2, [pc, #584]	@ (8004ea8 <HAL_GPIO_Init+0x2b0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d046      	beq.n	8004cf2 <HAL_GPIO_Init+0xfa>
 8004c64:	4a90      	ldr	r2, [pc, #576]	@ (8004ea8 <HAL_GPIO_Init+0x2b0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d85d      	bhi.n	8004d26 <HAL_GPIO_Init+0x12e>
 8004c6a:	2b12      	cmp	r3, #18
 8004c6c:	d82a      	bhi.n	8004cc4 <HAL_GPIO_Init+0xcc>
 8004c6e:	2b12      	cmp	r3, #18
 8004c70:	d859      	bhi.n	8004d26 <HAL_GPIO_Init+0x12e>
 8004c72:	a201      	add	r2, pc, #4	@ (adr r2, 8004c78 <HAL_GPIO_Init+0x80>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004cf3 	.word	0x08004cf3
 8004c7c:	08004ccd 	.word	0x08004ccd
 8004c80:	08004cdf 	.word	0x08004cdf
 8004c84:	08004d21 	.word	0x08004d21
 8004c88:	08004d27 	.word	0x08004d27
 8004c8c:	08004d27 	.word	0x08004d27
 8004c90:	08004d27 	.word	0x08004d27
 8004c94:	08004d27 	.word	0x08004d27
 8004c98:	08004d27 	.word	0x08004d27
 8004c9c:	08004d27 	.word	0x08004d27
 8004ca0:	08004d27 	.word	0x08004d27
 8004ca4:	08004d27 	.word	0x08004d27
 8004ca8:	08004d27 	.word	0x08004d27
 8004cac:	08004d27 	.word	0x08004d27
 8004cb0:	08004d27 	.word	0x08004d27
 8004cb4:	08004d27 	.word	0x08004d27
 8004cb8:	08004d27 	.word	0x08004d27
 8004cbc:	08004cd5 	.word	0x08004cd5
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	4a79      	ldr	r2, [pc, #484]	@ (8004eac <HAL_GPIO_Init+0x2b4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004cca:	e02c      	b.n	8004d26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	623b      	str	r3, [r7, #32]
          break;
 8004cd2:	e029      	b.n	8004d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	623b      	str	r3, [r7, #32]
          break;
 8004cdc:	e024      	b.n	8004d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	623b      	str	r3, [r7, #32]
          break;
 8004ce6:	e01f      	b.n	8004d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	330c      	adds	r3, #12
 8004cee:	623b      	str	r3, [r7, #32]
          break;
 8004cf0:	e01a      	b.n	8004d28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d102      	bne.n	8004d00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	623b      	str	r3, [r7, #32]
          break;
 8004cfe:	e013      	b.n	8004d28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d105      	bne.n	8004d14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d08:	2308      	movs	r3, #8
 8004d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	611a      	str	r2, [r3, #16]
          break;
 8004d12:	e009      	b.n	8004d28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d14:	2308      	movs	r3, #8
 8004d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	615a      	str	r2, [r3, #20]
          break;
 8004d1e:	e003      	b.n	8004d28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004d20:	2300      	movs	r3, #0
 8004d22:	623b      	str	r3, [r7, #32]
          break;
 8004d24:	e000      	b.n	8004d28 <HAL_GPIO_Init+0x130>
          break;
 8004d26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2bff      	cmp	r3, #255	@ 0xff
 8004d2c:	d801      	bhi.n	8004d32 <HAL_GPIO_Init+0x13a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	e001      	b.n	8004d36 <HAL_GPIO_Init+0x13e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2bff      	cmp	r3, #255	@ 0xff
 8004d3c:	d802      	bhi.n	8004d44 <HAL_GPIO_Init+0x14c>
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	e002      	b.n	8004d4a <HAL_GPIO_Init+0x152>
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	3b08      	subs	r3, #8
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	210f      	movs	r1, #15
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	401a      	ands	r2, r3
 8004d5c:	6a39      	ldr	r1, [r7, #32]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	fa01 f303 	lsl.w	r3, r1, r3
 8004d64:	431a      	orrs	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80b1 	beq.w	8004eda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004d78:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb0 <HAL_GPIO_Init+0x2b8>)
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8004eb0 <HAL_GPIO_Init+0x2b8>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6193      	str	r3, [r2, #24]
 8004d84:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb0 <HAL_GPIO_Init+0x2b8>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004d90:	4a48      	ldr	r2, [pc, #288]	@ (8004eb4 <HAL_GPIO_Init+0x2bc>)
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	089b      	lsrs	r3, r3, #2
 8004d96:	3302      	adds	r3, #2
 8004d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	220f      	movs	r2, #15
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4013      	ands	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a40      	ldr	r2, [pc, #256]	@ (8004eb8 <HAL_GPIO_Init+0x2c0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <HAL_GPIO_Init+0x1ec>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8004ebc <HAL_GPIO_Init+0x2c4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00d      	beq.n	8004de0 <HAL_GPIO_Init+0x1e8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ec0 <HAL_GPIO_Init+0x2c8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d007      	beq.n	8004ddc <HAL_GPIO_Init+0x1e4>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a3d      	ldr	r2, [pc, #244]	@ (8004ec4 <HAL_GPIO_Init+0x2cc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d101      	bne.n	8004dd8 <HAL_GPIO_Init+0x1e0>
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e006      	b.n	8004de6 <HAL_GPIO_Init+0x1ee>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	e004      	b.n	8004de6 <HAL_GPIO_Init+0x1ee>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e002      	b.n	8004de6 <HAL_GPIO_Init+0x1ee>
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <HAL_GPIO_Init+0x1ee>
 8004de4:	2300      	movs	r3, #0
 8004de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de8:	f002 0203 	and.w	r2, r2, #3
 8004dec:	0092      	lsls	r2, r2, #2
 8004dee:	4093      	lsls	r3, r2
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004df6:	492f      	ldr	r1, [pc, #188]	@ (8004eb4 <HAL_GPIO_Init+0x2bc>)
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	089b      	lsrs	r3, r3, #2
 8004dfc:	3302      	adds	r3, #2
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d006      	beq.n	8004e1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e10:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	492c      	ldr	r1, [pc, #176]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]
 8004e1c:	e006      	b.n	8004e2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	4928      	ldr	r1, [pc, #160]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d006      	beq.n	8004e46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004e38:	4b23      	ldr	r3, [pc, #140]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	4922      	ldr	r1, [pc, #136]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60cb      	str	r3, [r1, #12]
 8004e44:	e006      	b.n	8004e54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004e46:	4b20      	ldr	r3, [pc, #128]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	491e      	ldr	r1, [pc, #120]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d006      	beq.n	8004e6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004e60:	4b19      	ldr	r3, [pc, #100]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	4918      	ldr	r1, [pc, #96]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]
 8004e6c:	e006      	b.n	8004e7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004e6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	4914      	ldr	r1, [pc, #80]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d021      	beq.n	8004ecc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004e88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	490e      	ldr	r1, [pc, #56]	@ (8004ec8 <HAL_GPIO_Init+0x2d0>)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]
 8004e94:	e021      	b.n	8004eda <HAL_GPIO_Init+0x2e2>
 8004e96:	bf00      	nop
 8004e98:	10320000 	.word	0x10320000
 8004e9c:	10310000 	.word	0x10310000
 8004ea0:	10220000 	.word	0x10220000
 8004ea4:	10210000 	.word	0x10210000
 8004ea8:	10120000 	.word	0x10120000
 8004eac:	10110000 	.word	0x10110000
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	40010800 	.word	0x40010800
 8004ebc:	40010c00 	.word	0x40010c00
 8004ec0:	40011000 	.word	0x40011000
 8004ec4:	40011400 	.word	0x40011400
 8004ec8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <HAL_GPIO_Init+0x304>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	4909      	ldr	r1, [pc, #36]	@ (8004efc <HAL_GPIO_Init+0x304>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	3301      	adds	r3, #1
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f47f ae8e 	bne.w	8004c0c <HAL_GPIO_Init+0x14>
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	372c      	adds	r7, #44	@ 0x2c
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	40010400 	.word	0x40010400

08004f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	807b      	strh	r3, [r7, #2]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f10:	787b      	ldrb	r3, [r7, #1]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f16:	887a      	ldrh	r2, [r7, #2]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004f1c:	e003      	b.n	8004f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f1e:	887b      	ldrh	r3, [r7, #2]
 8004f20:	041a      	lsls	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr

08004f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e272      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 8087 	beq.w	800505e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f50:	4b92      	ldr	r3, [pc, #584]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d00c      	beq.n	8004f76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 030c 	and.w	r3, r3, #12
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d112      	bne.n	8004f8e <HAL_RCC_OscConfig+0x5e>
 8004f68:	4b8c      	ldr	r3, [pc, #560]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f74:	d10b      	bne.n	8004f8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f76:	4b89      	ldr	r3, [pc, #548]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d06c      	beq.n	800505c <HAL_RCC_OscConfig+0x12c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d168      	bne.n	800505c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e24c      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f96:	d106      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x76>
 8004f98:	4b80      	ldr	r3, [pc, #512]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a7f      	ldr	r2, [pc, #508]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	e02e      	b.n	8005004 <HAL_RCC_OscConfig+0xd4>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x98>
 8004fae:	4b7b      	ldr	r3, [pc, #492]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a7a      	ldr	r2, [pc, #488]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	4b78      	ldr	r3, [pc, #480]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a77      	ldr	r2, [pc, #476]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e01d      	b.n	8005004 <HAL_RCC_OscConfig+0xd4>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0xbc>
 8004fd2:	4b72      	ldr	r3, [pc, #456]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a71      	ldr	r2, [pc, #452]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b6f      	ldr	r3, [pc, #444]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0xd4>
 8004fec:	4b6b      	ldr	r3, [pc, #428]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a6a      	ldr	r2, [pc, #424]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b68      	ldr	r3, [pc, #416]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a67      	ldr	r2, [pc, #412]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005002:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d013      	beq.n	8005034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500c:	f7ff fa68 	bl	80044e0 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005014:	f7ff fa64 	bl	80044e0 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	@ 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e200      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	4b5d      	ldr	r3, [pc, #372]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0xe4>
 8005032:	e014      	b.n	800505e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7ff fa54 	bl	80044e0 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800503c:	f7ff fa50 	bl	80044e0 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	@ 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e1ec      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504e:	4b53      	ldr	r3, [pc, #332]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x10c>
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d063      	beq.n	8005132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800506a:	4b4c      	ldr	r3, [pc, #304]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005076:	4b49      	ldr	r3, [pc, #292]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b08      	cmp	r3, #8
 8005080:	d11c      	bne.n	80050bc <HAL_RCC_OscConfig+0x18c>
 8005082:	4b46      	ldr	r3, [pc, #280]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d116      	bne.n	80050bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508e:	4b43      	ldr	r3, [pc, #268]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_RCC_OscConfig+0x176>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e1c0      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b3d      	ldr	r3, [pc, #244]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4939      	ldr	r1, [pc, #228]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	e03a      	b.n	8005132 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d020      	beq.n	8005106 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c4:	4b36      	ldr	r3, [pc, #216]	@ (80051a0 <HAL_RCC_OscConfig+0x270>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ca:	f7ff fa09 	bl	80044e0 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d2:	f7ff fa05 	bl	80044e0 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e1a1      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e4:	4b2d      	ldr	r3, [pc, #180]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f0:	4b2a      	ldr	r3, [pc, #168]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	4927      	ldr	r1, [pc, #156]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]
 8005104:	e015      	b.n	8005132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005106:	4b26      	ldr	r3, [pc, #152]	@ (80051a0 <HAL_RCC_OscConfig+0x270>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7ff f9e8 	bl	80044e0 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005114:	f7ff f9e4 	bl	80044e0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e180      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	4b1d      	ldr	r3, [pc, #116]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d03a      	beq.n	80051b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d019      	beq.n	800517a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005146:	4b17      	ldr	r3, [pc, #92]	@ (80051a4 <HAL_RCC_OscConfig+0x274>)
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514c:	f7ff f9c8 	bl	80044e0 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005154:	f7ff f9c4 	bl	80044e0 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e160      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	4b0d      	ldr	r3, [pc, #52]	@ (800519c <HAL_RCC_OscConfig+0x26c>)
 8005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005172:	2001      	movs	r0, #1
 8005174:	f000 fafe 	bl	8005774 <RCC_Delay>
 8005178:	e01c      	b.n	80051b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800517a:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <HAL_RCC_OscConfig+0x274>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005180:	f7ff f9ae 	bl	80044e0 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005186:	e00f      	b.n	80051a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005188:	f7ff f9aa 	bl	80044e0 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d908      	bls.n	80051a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e146      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
 800519a:	bf00      	nop
 800519c:	40021000 	.word	0x40021000
 80051a0:	42420000 	.word	0x42420000
 80051a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a8:	4b92      	ldr	r3, [pc, #584]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e9      	bne.n	8005188 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80a6 	beq.w	800530e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c2:	2300      	movs	r3, #0
 80051c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051c6:	4b8b      	ldr	r3, [pc, #556]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10d      	bne.n	80051ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d2:	4b88      	ldr	r3, [pc, #544]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	4a87      	ldr	r2, [pc, #540]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051dc:	61d3      	str	r3, [r2, #28]
 80051de:	4b85      	ldr	r3, [pc, #532]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e6:	60bb      	str	r3, [r7, #8]
 80051e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ee:	4b82      	ldr	r3, [pc, #520]	@ (80053f8 <HAL_RCC_OscConfig+0x4c8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d118      	bne.n	800522c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051fa:	4b7f      	ldr	r3, [pc, #508]	@ (80053f8 <HAL_RCC_OscConfig+0x4c8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a7e      	ldr	r2, [pc, #504]	@ (80053f8 <HAL_RCC_OscConfig+0x4c8>)
 8005200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005206:	f7ff f96b 	bl	80044e0 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800520e:	f7ff f967 	bl	80044e0 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b64      	cmp	r3, #100	@ 0x64
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e103      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005220:	4b75      	ldr	r3, [pc, #468]	@ (80053f8 <HAL_RCC_OscConfig+0x4c8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d106      	bne.n	8005242 <HAL_RCC_OscConfig+0x312>
 8005234:	4b6f      	ldr	r3, [pc, #444]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	4a6e      	ldr	r2, [pc, #440]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	6213      	str	r3, [r2, #32]
 8005240:	e02d      	b.n	800529e <HAL_RCC_OscConfig+0x36e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10c      	bne.n	8005264 <HAL_RCC_OscConfig+0x334>
 800524a:	4b6a      	ldr	r3, [pc, #424]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	4a69      	ldr	r2, [pc, #420]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	6213      	str	r3, [r2, #32]
 8005256:	4b67      	ldr	r3, [pc, #412]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4a66      	ldr	r2, [pc, #408]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 800525c:	f023 0304 	bic.w	r3, r3, #4
 8005260:	6213      	str	r3, [r2, #32]
 8005262:	e01c      	b.n	800529e <HAL_RCC_OscConfig+0x36e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2b05      	cmp	r3, #5
 800526a:	d10c      	bne.n	8005286 <HAL_RCC_OscConfig+0x356>
 800526c:	4b61      	ldr	r3, [pc, #388]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	4a60      	ldr	r2, [pc, #384]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005272:	f043 0304 	orr.w	r3, r3, #4
 8005276:	6213      	str	r3, [r2, #32]
 8005278:	4b5e      	ldr	r3, [pc, #376]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	4a5d      	ldr	r2, [pc, #372]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	6213      	str	r3, [r2, #32]
 8005284:	e00b      	b.n	800529e <HAL_RCC_OscConfig+0x36e>
 8005286:	4b5b      	ldr	r3, [pc, #364]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	4a5a      	ldr	r2, [pc, #360]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	6213      	str	r3, [r2, #32]
 8005292:	4b58      	ldr	r3, [pc, #352]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	4a57      	ldr	r2, [pc, #348]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005298:	f023 0304 	bic.w	r3, r3, #4
 800529c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d015      	beq.n	80052d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a6:	f7ff f91b 	bl	80044e0 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ac:	e00a      	b.n	80052c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f7ff f917 	bl	80044e0 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e0b1      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c4:	4b4b      	ldr	r3, [pc, #300]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0ee      	beq.n	80052ae <HAL_RCC_OscConfig+0x37e>
 80052d0:	e014      	b.n	80052fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d2:	f7ff f905 	bl	80044e0 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7ff f901 	bl	80044e0 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e09b      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f0:	4b40      	ldr	r3, [pc, #256]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1ee      	bne.n	80052da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d105      	bne.n	800530e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005302:	4b3c      	ldr	r3, [pc, #240]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	4a3b      	ldr	r2, [pc, #236]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005308:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800530c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 8087 	beq.w	8005426 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005318:	4b36      	ldr	r3, [pc, #216]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 030c 	and.w	r3, r3, #12
 8005320:	2b08      	cmp	r3, #8
 8005322:	d061      	beq.n	80053e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d146      	bne.n	80053ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532c:	4b33      	ldr	r3, [pc, #204]	@ (80053fc <HAL_RCC_OscConfig+0x4cc>)
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005332:	f7ff f8d5 	bl	80044e0 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800533a:	f7ff f8d1 	bl	80044e0 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e06d      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800534c:	4b29      	ldr	r3, [pc, #164]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1f0      	bne.n	800533a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005360:	d108      	bne.n	8005374 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005362:	4b24      	ldr	r3, [pc, #144]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	4921      	ldr	r1, [pc, #132]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005370:	4313      	orrs	r3, r2
 8005372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005374:	4b1f      	ldr	r3, [pc, #124]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a19      	ldr	r1, [r3, #32]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	430b      	orrs	r3, r1
 8005386:	491b      	ldr	r1, [pc, #108]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800538c:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <HAL_RCC_OscConfig+0x4cc>)
 800538e:	2201      	movs	r2, #1
 8005390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005392:	f7ff f8a5 	bl	80044e0 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539a:	f7ff f8a1 	bl	80044e0 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e03d      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053ac:	4b11      	ldr	r3, [pc, #68]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0f0      	beq.n	800539a <HAL_RCC_OscConfig+0x46a>
 80053b8:	e035      	b.n	8005426 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ba:	4b10      	ldr	r3, [pc, #64]	@ (80053fc <HAL_RCC_OscConfig+0x4cc>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c0:	f7ff f88e 	bl	80044e0 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c8:	f7ff f88a 	bl	80044e0 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e026      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053da:	4b06      	ldr	r3, [pc, #24]	@ (80053f4 <HAL_RCC_OscConfig+0x4c4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x498>
 80053e6:	e01e      	b.n	8005426 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d107      	bne.n	8005400 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e019      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
 80053f4:	40021000 	.word	0x40021000
 80053f8:	40007000 	.word	0x40007000
 80053fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005400:	4b0b      	ldr	r3, [pc, #44]	@ (8005430 <HAL_RCC_OscConfig+0x500>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	429a      	cmp	r2, r3
 8005412:	d106      	bne.n	8005422 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541e:	429a      	cmp	r2, r3
 8005420:	d001      	beq.n	8005426 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40021000 	.word	0x40021000

08005434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0d0      	b.n	80055ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005448:	4b6a      	ldr	r3, [pc, #424]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c0>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d910      	bls.n	8005478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005456:	4b67      	ldr	r3, [pc, #412]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 0207 	bic.w	r2, r3, #7
 800545e:	4965      	ldr	r1, [pc, #404]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	4313      	orrs	r3, r2
 8005464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005466:	4b63      	ldr	r3, [pc, #396]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d001      	beq.n	8005478 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0b8      	b.n	80055ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d020      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d005      	beq.n	800549c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005490:	4b59      	ldr	r3, [pc, #356]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	4a58      	ldr	r2, [pc, #352]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005496:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800549a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054a8:	4b53      	ldr	r3, [pc, #332]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4a52      	ldr	r2, [pc, #328]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80054b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b4:	4b50      	ldr	r3, [pc, #320]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	494d      	ldr	r1, [pc, #308]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d040      	beq.n	8005554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d107      	bne.n	80054ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054da:	4b47      	ldr	r3, [pc, #284]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d115      	bne.n	8005512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e07f      	b.n	80055ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d107      	bne.n	8005502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f2:	4b41      	ldr	r3, [pc, #260]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e073      	b.n	80055ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005502:	4b3d      	ldr	r3, [pc, #244]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e06b      	b.n	80055ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005512:	4b39      	ldr	r3, [pc, #228]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f023 0203 	bic.w	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4936      	ldr	r1, [pc, #216]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	4313      	orrs	r3, r2
 8005522:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005524:	f7fe ffdc 	bl	80044e0 <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552a:	e00a      	b.n	8005542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800552c:	f7fe ffd8 	bl	80044e0 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e053      	b.n	80055ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005542:	4b2d      	ldr	r3, [pc, #180]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f003 020c 	and.w	r2, r3, #12
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	429a      	cmp	r2, r3
 8005552:	d1eb      	bne.n	800552c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005554:	4b27      	ldr	r3, [pc, #156]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d210      	bcs.n	8005584 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b24      	ldr	r3, [pc, #144]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f023 0207 	bic.w	r2, r3, #7
 800556a:	4922      	ldr	r1, [pc, #136]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c0>)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005572:	4b20      	ldr	r3, [pc, #128]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d001      	beq.n	8005584 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e032      	b.n	80055ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005590:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4916      	ldr	r1, [pc, #88]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055ae:	4b12      	ldr	r3, [pc, #72]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	490e      	ldr	r1, [pc, #56]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055c2:	f000 f821 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 80055c6:	4602      	mov	r2, r0
 80055c8:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	490a      	ldr	r1, [pc, #40]	@ (80055fc <HAL_RCC_ClockConfig+0x1c8>)
 80055d4:	5ccb      	ldrb	r3, [r1, r3]
 80055d6:	fa22 f303 	lsr.w	r3, r2, r3
 80055da:	4a09      	ldr	r2, [pc, #36]	@ (8005600 <HAL_RCC_ClockConfig+0x1cc>)
 80055dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055de:	4b09      	ldr	r3, [pc, #36]	@ (8005604 <HAL_RCC_ClockConfig+0x1d0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fa7c 	bl	8003ae0 <HAL_InitTick>

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40022000 	.word	0x40022000
 80055f8:	40021000 	.word	0x40021000
 80055fc:	0800e7ac 	.word	0x0800e7ac
 8005600:	20000020 	.word	0x20000020
 8005604:	20000024 	.word	0x20000024

08005608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	2300      	movs	r3, #0
 800561c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005622:	4b1e      	ldr	r3, [pc, #120]	@ (800569c <HAL_RCC_GetSysClockFreq+0x94>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b04      	cmp	r3, #4
 8005630:	d002      	beq.n	8005638 <HAL_RCC_GetSysClockFreq+0x30>
 8005632:	2b08      	cmp	r3, #8
 8005634:	d003      	beq.n	800563e <HAL_RCC_GetSysClockFreq+0x36>
 8005636:	e027      	b.n	8005688 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005638:	4b19      	ldr	r3, [pc, #100]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800563a:	613b      	str	r3, [r7, #16]
      break;
 800563c:	e027      	b.n	800568e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	0c9b      	lsrs	r3, r3, #18
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	4a17      	ldr	r2, [pc, #92]	@ (80056a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005648:	5cd3      	ldrb	r3, [r2, r3]
 800564a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d010      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005656:	4b11      	ldr	r3, [pc, #68]	@ (800569c <HAL_RCC_GetSysClockFreq+0x94>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	0c5b      	lsrs	r3, r3, #17
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	4a11      	ldr	r2, [pc, #68]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005662:	5cd3      	ldrb	r3, [r2, r3]
 8005664:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a0d      	ldr	r2, [pc, #52]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800566a:	fb03 f202 	mul.w	r2, r3, r2
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	e004      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a0c      	ldr	r2, [pc, #48]	@ (80056ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800567c:	fb02 f303 	mul.w	r3, r2, r3
 8005680:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	613b      	str	r3, [r7, #16]
      break;
 8005686:	e002      	b.n	800568e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800568a:	613b      	str	r3, [r7, #16]
      break;
 800568c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800568e:	693b      	ldr	r3, [r7, #16]
}
 8005690:	4618      	mov	r0, r3
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000
 80056a0:	007a1200 	.word	0x007a1200
 80056a4:	0800e7c4 	.word	0x0800e7c4
 80056a8:	0800e7d4 	.word	0x0800e7d4
 80056ac:	003d0900 	.word	0x003d0900

080056b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b4:	4b02      	ldr	r3, [pc, #8]	@ (80056c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr
 80056c0:	20000020 	.word	0x20000020

080056c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056c8:	f7ff fff2 	bl	80056b0 <HAL_RCC_GetHCLKFreq>
 80056cc:	4602      	mov	r2, r0
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	0a1b      	lsrs	r3, r3, #8
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	4903      	ldr	r1, [pc, #12]	@ (80056e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056da:	5ccb      	ldrb	r3, [r1, r3]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40021000 	.word	0x40021000
 80056e8:	0800e7bc 	.word	0x0800e7bc

080056ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056f0:	f7ff ffde 	bl	80056b0 <HAL_RCC_GetHCLKFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b05      	ldr	r3, [pc, #20]	@ (800570c <HAL_RCC_GetPCLK2Freq+0x20>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	0adb      	lsrs	r3, r3, #11
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	4903      	ldr	r1, [pc, #12]	@ (8005710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40021000 	.word	0x40021000
 8005710:	0800e7bc 	.word	0x0800e7bc

08005714 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	220f      	movs	r2, #15
 8005722:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005724:	4b11      	ldr	r3, [pc, #68]	@ (800576c <HAL_RCC_GetClockConfig+0x58>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0203 	and.w	r2, r3, #3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005730:	4b0e      	ldr	r3, [pc, #56]	@ (800576c <HAL_RCC_GetClockConfig+0x58>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800573c:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <HAL_RCC_GetClockConfig+0x58>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005748:	4b08      	ldr	r3, [pc, #32]	@ (800576c <HAL_RCC_GetClockConfig+0x58>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	08db      	lsrs	r3, r3, #3
 800574e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005756:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <HAL_RCC_GetClockConfig+0x5c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0207 	and.w	r2, r3, #7
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr
 800576c:	40021000 	.word	0x40021000
 8005770:	40022000 	.word	0x40022000

08005774 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800577c:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <RCC_Delay+0x34>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a0a      	ldr	r2, [pc, #40]	@ (80057ac <RCC_Delay+0x38>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	0a5b      	lsrs	r3, r3, #9
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005790:	bf00      	nop
  }
  while (Delay --);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1e5a      	subs	r2, r3, #1
 8005796:	60fa      	str	r2, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f9      	bne.n	8005790 <RCC_Delay+0x1c>
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr
 80057a8:	20000020 	.word	0x20000020
 80057ac:	10624dd3 	.word	0x10624dd3

080057b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e041      	b.n	8005846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f839 	bl	800584e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f000 fc98 	bl	8006124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d001      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e03a      	b.n	80058ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a18      	ldr	r2, [pc, #96]	@ (80058f8 <HAL_TIM_Base_Start_IT+0x98>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00e      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x58>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a2:	d009      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x58>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a14      	ldr	r2, [pc, #80]	@ (80058fc <HAL_TIM_Base_Start_IT+0x9c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x58>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a13      	ldr	r2, [pc, #76]	@ (8005900 <HAL_TIM_Base_Start_IT+0xa0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d111      	bne.n	80058dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b06      	cmp	r3, #6
 80058c8:	d010      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058da:	e007      	b.n	80058ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800

08005904 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e041      	b.n	800599a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fe fb70 	bl	8004010 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f000 fbee 	bl	8006124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_TIM_PWM_Start+0x24>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	e022      	b.n	8005a0e <HAL_TIM_PWM_Start+0x6a>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d109      	bne.n	80059e2 <HAL_TIM_PWM_Start+0x3e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	bf14      	ite	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	2300      	moveq	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	e015      	b.n	8005a0e <HAL_TIM_PWM_Start+0x6a>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d109      	bne.n	80059fc <HAL_TIM_PWM_Start+0x58>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	e008      	b.n	8005a0e <HAL_TIM_PWM_Start+0x6a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	bf14      	ite	ne
 8005a08:	2301      	movne	r3, #1
 8005a0a:	2300      	moveq	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e05e      	b.n	8005ad4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d104      	bne.n	8005a26 <HAL_TIM_PWM_Start+0x82>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a24:	e013      	b.n	8005a4e <HAL_TIM_PWM_Start+0xaa>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d104      	bne.n	8005a36 <HAL_TIM_PWM_Start+0x92>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a34:	e00b      	b.n	8005a4e <HAL_TIM_PWM_Start+0xaa>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_PWM_Start+0xa2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a44:	e003      	b.n	8005a4e <HAL_TIM_PWM_Start+0xaa>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2201      	movs	r2, #1
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fd4e 	bl	80064f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1e      	ldr	r2, [pc, #120]	@ (8005adc <HAL_TIM_PWM_Start+0x138>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d107      	bne.n	8005a76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a18      	ldr	r2, [pc, #96]	@ (8005adc <HAL_TIM_PWM_Start+0x138>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_TIM_PWM_Start+0xfa>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a88:	d009      	beq.n	8005a9e <HAL_TIM_PWM_Start+0xfa>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a14      	ldr	r2, [pc, #80]	@ (8005ae0 <HAL_TIM_PWM_Start+0x13c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_TIM_PWM_Start+0xfa>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a12      	ldr	r2, [pc, #72]	@ (8005ae4 <HAL_TIM_PWM_Start+0x140>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d111      	bne.n	8005ac2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b06      	cmp	r3, #6
 8005aae:	d010      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac0:	e007      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0201 	orr.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800

08005ae8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e093      	b.n	8005c24 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7fe fa99 	bl	8004048 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b2c:	f023 0307 	bic.w	r3, r3, #7
 8005b30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f000 faf1 	bl	8006124 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005b88:	f023 030c 	bic.w	r3, r3, #12
 8005b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	011a      	lsls	r2, r3, #4
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	031b      	lsls	r3, r3, #12
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c54:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d110      	bne.n	8005c7e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d102      	bne.n	8005c68 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c62:	7b7b      	ldrb	r3, [r7, #13]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d001      	beq.n	8005c6c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e069      	b.n	8005d40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c7c:	e031      	b.n	8005ce2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d110      	bne.n	8005ca6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c84:	7bbb      	ldrb	r3, [r7, #14]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d102      	bne.n	8005c90 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c8a:	7b3b      	ldrb	r3, [r7, #12]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d001      	beq.n	8005c94 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e055      	b.n	8005d40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ca4:	e01d      	b.n	8005ce2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d108      	bne.n	8005cbe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cac:	7bbb      	ldrb	r3, [r7, #14]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d105      	bne.n	8005cbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cb2:	7b7b      	ldrb	r3, [r7, #13]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d102      	bne.n	8005cbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cb8:	7b3b      	ldrb	r3, [r7, #12]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d001      	beq.n	8005cc2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e03e      	b.n	8005d40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_TIM_Encoder_Start+0xc4>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d008      	beq.n	8005d00 <HAL_TIM_Encoder_Start+0xd4>
 8005cee:	e00f      	b.n	8005d10 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fbfd 	bl	80064f8 <TIM_CCxChannelCmd>
      break;
 8005cfe:	e016      	b.n	8005d2e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2201      	movs	r2, #1
 8005d06:	2104      	movs	r1, #4
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fbf5 	bl	80064f8 <TIM_CCxChannelCmd>
      break;
 8005d0e:	e00e      	b.n	8005d2e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2201      	movs	r2, #1
 8005d16:	2100      	movs	r1, #0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fbed 	bl	80064f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2201      	movs	r2, #1
 8005d24:	2104      	movs	r1, #4
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fbe6 	bl	80064f8 <TIM_CCxChannelCmd>
      break;
 8005d2c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0201 	orr.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d122      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d11b      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0202 	mvn.w	r2, #2
 8005d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9af 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9a2 	bl	80060dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f9b1 	bl	8006100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d122      	bne.n	8005df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d11b      	bne.n	8005df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0204 	mvn.w	r2, #4
 8005dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f985 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f978 	bl	80060dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f987 	bl	8006100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d122      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d11b      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0208 	mvn.w	r2, #8
 8005e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2204      	movs	r2, #4
 8005e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f95b 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f94e 	bl	80060dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f95d 	bl	8006100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0310 	and.w	r3, r3, #16
 8005e56:	2b10      	cmp	r3, #16
 8005e58:	d122      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d11b      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0210 	mvn.w	r2, #16
 8005e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2208      	movs	r2, #8
 8005e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f931 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f924 	bl	80060dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f933 	bl	8006100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d10e      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d107      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0201 	mvn.w	r2, #1
 8005ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fb fa20 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed6:	2b80      	cmp	r3, #128	@ 0x80
 8005ed8:	d10e      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee4:	2b80      	cmp	r3, #128	@ 0x80
 8005ee6:	d107      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fb8b 	bl	800660e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f02:	2b40      	cmp	r3, #64	@ 0x40
 8005f04:	d10e      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f10:	2b40      	cmp	r3, #64	@ 0x40
 8005f12:	d107      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f8f7 	bl	8006112 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d10e      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d107      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0220 	mvn.w	r2, #32
 8005f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fb56 	bl	80065fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e0ae      	b.n	80060d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	f200 809f 	bhi.w	80060c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f86:	a201      	add	r2, pc, #4	@ (adr r2, 8005f8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	080060c5 	.word	0x080060c5
 8005f94:	080060c5 	.word	0x080060c5
 8005f98:	080060c5 	.word	0x080060c5
 8005f9c:	08006001 	.word	0x08006001
 8005fa0:	080060c5 	.word	0x080060c5
 8005fa4:	080060c5 	.word	0x080060c5
 8005fa8:	080060c5 	.word	0x080060c5
 8005fac:	08006043 	.word	0x08006043
 8005fb0:	080060c5 	.word	0x080060c5
 8005fb4:	080060c5 	.word	0x080060c5
 8005fb8:	080060c5 	.word	0x080060c5
 8005fbc:	08006083 	.word	0x08006083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f90e 	bl	80061e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0208 	orr.w	r2, r2, #8
 8005fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0204 	bic.w	r2, r2, #4
 8005fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6999      	ldr	r1, [r3, #24]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	619a      	str	r2, [r3, #24]
      break;
 8005ffe:	e064      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f954 	bl	80062b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800601a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800602a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6999      	ldr	r1, [r3, #24]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	021a      	lsls	r2, r3, #8
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	619a      	str	r2, [r3, #24]
      break;
 8006040:	e043      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 f99d 	bl	8006388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0208 	orr.w	r2, r2, #8
 800605c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0204 	bic.w	r2, r2, #4
 800606c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69d9      	ldr	r1, [r3, #28]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	61da      	str	r2, [r3, #28]
      break;
 8006080:	e023      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f000 f9e7 	bl	800645c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800609c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69d9      	ldr	r1, [r3, #28]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	021a      	lsls	r2, r3, #8
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	61da      	str	r2, [r3, #28]
      break;
 80060c2:	e002      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
      break;
 80060c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr

080060ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr

08006112 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr

08006124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a29      	ldr	r2, [pc, #164]	@ (80061dc <TIM_Base_SetConfig+0xb8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00b      	beq.n	8006154 <TIM_Base_SetConfig+0x30>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006142:	d007      	beq.n	8006154 <TIM_Base_SetConfig+0x30>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a26      	ldr	r2, [pc, #152]	@ (80061e0 <TIM_Base_SetConfig+0xbc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_Base_SetConfig+0x30>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a25      	ldr	r2, [pc, #148]	@ (80061e4 <TIM_Base_SetConfig+0xc0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d108      	bne.n	8006166 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800615a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a1c      	ldr	r2, [pc, #112]	@ (80061dc <TIM_Base_SetConfig+0xb8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00b      	beq.n	8006186 <TIM_Base_SetConfig+0x62>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006174:	d007      	beq.n	8006186 <TIM_Base_SetConfig+0x62>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a19      	ldr	r2, [pc, #100]	@ (80061e0 <TIM_Base_SetConfig+0xbc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_Base_SetConfig+0x62>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a18      	ldr	r2, [pc, #96]	@ (80061e4 <TIM_Base_SetConfig+0xc0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d108      	bne.n	8006198 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800618c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4313      	orrs	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a07      	ldr	r2, [pc, #28]	@ (80061dc <TIM_Base_SetConfig+0xb8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d103      	bne.n	80061cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	615a      	str	r2, [r3, #20]
}
 80061d2:	bf00      	nop
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr
 80061dc:	40012c00 	.word	0x40012c00
 80061e0:	40000400 	.word	0x40000400
 80061e4:	40000800 	.word	0x40000800

080061e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f023 0201 	bic.w	r2, r3, #1
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f023 0302 	bic.w	r3, r3, #2
 8006230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1c      	ldr	r2, [pc, #112]	@ (80062b0 <TIM_OC1_SetConfig+0xc8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10c      	bne.n	800625e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0308 	bic.w	r3, r3, #8
 800624a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f023 0304 	bic.w	r3, r3, #4
 800625c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a13      	ldr	r2, [pc, #76]	@ (80062b0 <TIM_OC1_SetConfig+0xc8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d111      	bne.n	800628a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800626c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40012c00 	.word	0x40012c00

080062b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f023 0210 	bic.w	r2, r3, #16
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f023 0320 	bic.w	r3, r3, #32
 80062fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a1d      	ldr	r2, [pc, #116]	@ (8006384 <TIM_OC2_SetConfig+0xd0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d10d      	bne.n	8006330 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800631a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800632e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a14      	ldr	r2, [pc, #80]	@ (8006384 <TIM_OC2_SetConfig+0xd0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d113      	bne.n	8006360 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800633e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr
 8006384:	40012c00 	.word	0x40012c00

08006388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006458 <TIM_OC3_SetConfig+0xd0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10d      	bne.n	8006402 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a14      	ldr	r2, [pc, #80]	@ (8006458 <TIM_OC3_SetConfig+0xd0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d113      	bne.n	8006432 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	621a      	str	r2, [r3, #32]
}
 800644c:	bf00      	nop
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	bc80      	pop	{r7}
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40012c00 	.word	0x40012c00

0800645c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	031b      	lsls	r3, r3, #12
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a0f      	ldr	r2, [pc, #60]	@ (80064f4 <TIM_OC4_SetConfig+0x98>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d109      	bne.n	80064d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	019b      	lsls	r3, r3, #6
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr
 80064f4:	40012c00 	.word	0x40012c00

080064f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2201      	movs	r2, #1
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	43db      	mvns	r3, r3
 800651a:	401a      	ands	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1a      	ldr	r2, [r3, #32]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	fa01 f303 	lsl.w	r3, r1, r3
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006554:	2302      	movs	r3, #2
 8006556:	e046      	b.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a16      	ldr	r2, [pc, #88]	@ (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065a4:	d009      	beq.n	80065ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a12      	ldr	r2, [pc, #72]	@ (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a10      	ldr	r2, [pc, #64]	@ (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d10c      	bne.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40000400 	.word	0x40000400
 80065f8:	40000800 	.word	0x40000800

080065fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	bc80      	pop	{r7}
 800660c:	4770      	bx	lr

0800660e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e042      	b.n	80066b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fd fe1a 	bl	8004280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2224      	movs	r2, #36	@ 0x24
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 ff2f 	bl	80074c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695a      	ldr	r2, [r3, #20]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08c      	sub	sp, #48	@ 0x30
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d156      	bne.n	8006788 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_UART_Transmit_DMA+0x26>
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e04f      	b.n	800678a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	88fa      	ldrh	r2, [r7, #6]
 80066f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	88fa      	ldrh	r2, [r7, #6]
 80066fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2221      	movs	r2, #33	@ 0x21
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670e:	4a21      	ldr	r2, [pc, #132]	@ (8006794 <HAL_UART_Transmit_DMA+0xd4>)
 8006710:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006716:	4a20      	ldr	r2, [pc, #128]	@ (8006798 <HAL_UART_Transmit_DMA+0xd8>)
 8006718:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671e:	4a1f      	ldr	r2, [pc, #124]	@ (800679c <HAL_UART_Transmit_DMA+0xdc>)
 8006720:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006726:	2200      	movs	r2, #0
 8006728:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800672a:	f107 0308 	add.w	r3, r7, #8
 800672e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006736:	6819      	ldr	r1, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3304      	adds	r3, #4
 800673e:	461a      	mov	r2, r3
 8006740:	88fb      	ldrh	r3, [r7, #6]
 8006742:	f7fe f811 	bl	8004768 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800674e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3314      	adds	r3, #20
 8006756:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	617b      	str	r3, [r7, #20]
   return(result);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006766:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3314      	adds	r3, #20
 800676e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006770:	627a      	str	r2, [r7, #36]	@ 0x24
 8006772:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6a39      	ldr	r1, [r7, #32]
 8006776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	61fb      	str	r3, [r7, #28]
   return(result);
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e5      	bne.n	8006750 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	e000      	b.n	800678a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006788:	2302      	movs	r3, #2
  }
}
 800678a:	4618      	mov	r0, r3
 800678c:	3730      	adds	r7, #48	@ 0x30
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	08006d5d 	.word	0x08006d5d
 8006798:	08006df7 	.word	0x08006df7
 800679c:	08006f7b 	.word	0x08006f7b

080067a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d112      	bne.n	80067e0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <HAL_UART_Receive_DMA+0x26>
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e00b      	b.n	80067e2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	461a      	mov	r2, r3
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fc1a 	bl	8007010 <UART_Start_Receive_DMA>
 80067dc:	4603      	mov	r3, r0
 80067de:	e000      	b.n	80067e2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80067e0:	2302      	movs	r3, #2
  }
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b0ba      	sub	sp, #232	@ 0xe8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006812:	2300      	movs	r3, #0
 8006814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800682a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10f      	bne.n	8006852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <HAL_UART_IRQHandler+0x66>
 800683e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fd7e 	bl	800734c <UART_Receive_IT>
      return;
 8006850:	e25b      	b.n	8006d0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 80de 	beq.w	8006a18 <HAL_UART_IRQHandler+0x22c>
 800685c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d106      	bne.n	8006876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800686c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80d1 	beq.w	8006a18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <HAL_UART_IRQHandler+0xae>
 8006882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d005      	beq.n	800689a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f043 0201 	orr.w	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <HAL_UART_IRQHandler+0xd2>
 80068a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b6:	f043 0202 	orr.w	r2, r3, #2
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <HAL_UART_IRQHandler+0xf6>
 80068ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068da:	f043 0204 	orr.w	r2, r3, #4
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d011      	beq.n	8006912 <HAL_UART_IRQHandler+0x126>
 80068ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690a:	f043 0208 	orr.w	r2, r3, #8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 81f2 	beq.w	8006d00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800691c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d008      	beq.n	800693a <HAL_UART_IRQHandler+0x14e>
 8006928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fd09 	bl	800734c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	bf14      	ite	ne
 8006948:	2301      	movne	r3, #1
 800694a:	2300      	moveq	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d103      	bne.n	8006966 <HAL_UART_IRQHandler+0x17a>
 800695e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006962:	2b00      	cmp	r3, #0
 8006964:	d04f      	beq.n	8006a06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fc13 	bl	8007192 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d041      	beq.n	80069fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3314      	adds	r3, #20
 8006980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3314      	adds	r3, #20
 80069a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1d9      	bne.n	800697a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d013      	beq.n	80069f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d2:	4a7e      	ldr	r2, [pc, #504]	@ (8006bcc <HAL_UART_IRQHandler+0x3e0>)
 80069d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fd ff60 	bl	80048a0 <HAL_DMA_Abort_IT>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d016      	beq.n	8006a14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f4:	e00e      	b.n	8006a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f99c 	bl	8006d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	e00a      	b.n	8006a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f998 	bl	8006d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	e006      	b.n	8006a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f994 	bl	8006d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a12:	e175      	b.n	8006d00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	bf00      	nop
    return;
 8006a16:	e173      	b.n	8006d00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	f040 814f 	bne.w	8006cc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8148 	beq.w	8006cc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8141 	beq.w	8006cc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 80b6 	beq.w	8006bd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8145 	beq.w	8006d04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a82:	429a      	cmp	r2, r3
 8006a84:	f080 813e 	bcs.w	8006d04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	f000 8088 	beq.w	8006bac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ab6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	330c      	adds	r3, #12
 8006ac4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ac8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006acc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ad4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1d9      	bne.n	8006a9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3314      	adds	r3, #20
 8006aee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006af8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006afa:	f023 0301 	bic.w	r3, r3, #1
 8006afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3314      	adds	r3, #20
 8006b08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b0c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e1      	bne.n	8006ae8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3314      	adds	r3, #20
 8006b2a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3314      	adds	r3, #20
 8006b44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e3      	bne.n	8006b24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b7c:	f023 0310 	bic.w	r3, r3, #16
 8006b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	330c      	adds	r3, #12
 8006b8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b8e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b90:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e3      	bne.n	8006b6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fd fe3e 	bl	8004828 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f8bf 	bl	8006d46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bc8:	e09c      	b.n	8006d04 <HAL_UART_IRQHandler+0x518>
 8006bca:	bf00      	nop
 8006bcc:	08007257 	.word	0x08007257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 808e 	beq.w	8006d08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8089 	beq.w	8006d08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	330c      	adds	r3, #12
 8006c16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e3      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3314      	adds	r3, #20
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c52:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e3      	bne.n	8006c2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	330c      	adds	r3, #12
 8006c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0310 	bic.w	r3, r3, #16
 8006c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	330c      	adds	r3, #12
 8006c94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c98:	61fa      	str	r2, [r7, #28]
 8006c9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	69b9      	ldr	r1, [r7, #24]
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e3      	bne.n	8006c74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f844 	bl	8006d46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cbe:	e023      	b.n	8006d08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d009      	beq.n	8006ce0 <HAL_UART_IRQHandler+0x4f4>
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fad0 	bl	800727e <UART_Transmit_IT>
    return;
 8006cde:	e014      	b.n	8006d0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00e      	beq.n	8006d0a <HAL_UART_IRQHandler+0x51e>
 8006cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fb0f 	bl	800731c <UART_EndTransmit_IT>
    return;
 8006cfe:	e004      	b.n	8006d0a <HAL_UART_IRQHandler+0x51e>
    return;
 8006d00:	bf00      	nop
 8006d02:	e002      	b.n	8006d0a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d04:	bf00      	nop
 8006d06:	e000      	b.n	8006d0a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d08:	bf00      	nop
  }
}
 8006d0a:	37e8      	adds	r7, #232	@ 0xe8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr

08006d22 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b090      	sub	sp, #64	@ 0x40
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d137      	bne.n	8006de8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3314      	adds	r3, #20
 8006d84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3314      	adds	r3, #20
 8006d9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e5      	bne.n	8006d7e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dd2:	61fa      	str	r2, [r7, #28]
 8006dd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	69b9      	ldr	r1, [r7, #24]
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	617b      	str	r3, [r7, #20]
   return(result);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e5      	bne.n	8006db2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006de6:	e002      	b.n	8006dee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006de8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006dea:	f7fc f805 	bl	8002df8 <HAL_UART_TxCpltCallback>
}
 8006dee:	bf00      	nop
 8006df0:	3740      	adds	r7, #64	@ 0x40
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff ff83 	bl	8006d10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b09c      	sub	sp, #112	@ 0x70
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d172      	bne.n	8006f14 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e30:	2200      	movs	r2, #0
 8006e32:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006e54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e5      	bne.n	8006e34 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3314      	adds	r3, #20
 8006e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3314      	adds	r3, #20
 8006e86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e88:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e8a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e5      	bne.n	8006e68 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3314      	adds	r3, #20
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	623b      	str	r3, [r7, #32]
   return(result);
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3314      	adds	r3, #20
 8006eba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ebc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d119      	bne.n	8006f14 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0310 	bic.w	r3, r3, #16
 8006ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	330c      	adds	r3, #12
 8006efe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f00:	61fa      	str	r2, [r7, #28]
 8006f02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	69b9      	ldr	r1, [r7, #24]
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e5      	bne.n	8006ee0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f16:	2200      	movs	r2, #0
 8006f18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d106      	bne.n	8006f30 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f26:	4619      	mov	r1, r3
 8006f28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f2a:	f7ff ff0c 	bl	8006d46 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f2e:	e002      	b.n	8006f36 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f32:	f7fb ff73 	bl	8002e1c <HAL_UART_RxCpltCallback>
}
 8006f36:	bf00      	nop
 8006f38:	3770      	adds	r7, #112	@ 0x70
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d108      	bne.n	8006f6c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f5e:	085b      	lsrs	r3, r3, #1
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff feee 	bl	8006d46 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f6a:	e002      	b.n	8006f72 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff fed8 	bl	8006d22 <HAL_UART_RxHalfCpltCallback>
}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bf14      	ite	ne
 8006f9a:	2301      	movne	r3, #1
 8006f9c:	2300      	moveq	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b21      	cmp	r3, #33	@ 0x21
 8006fac:	d108      	bne.n	8006fc0 <UART_DMAError+0x46>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006fba:	68b8      	ldr	r0, [r7, #8]
 8006fbc:	f000 f8c2 	bl	8007144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bf14      	ite	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	2300      	moveq	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b22      	cmp	r3, #34	@ 0x22
 8006fe0:	d108      	bne.n	8006ff4 <UART_DMAError+0x7a>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2200      	movs	r2, #0
 8006fec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006fee:	68b8      	ldr	r0, [r7, #8]
 8006ff0:	f000 f8cf 	bl	8007192 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff8:	f043 0210 	orr.w	r2, r3, #16
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007000:	68b8      	ldr	r0, [r7, #8]
 8007002:	f7ff fe97 	bl	8006d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007006:	bf00      	nop
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b098      	sub	sp, #96	@ 0x60
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	4613      	mov	r3, r2
 800701c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	88fa      	ldrh	r2, [r7, #6]
 8007028:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2222      	movs	r2, #34	@ 0x22
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703c:	4a3e      	ldr	r2, [pc, #248]	@ (8007138 <UART_Start_Receive_DMA+0x128>)
 800703e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007044:	4a3d      	ldr	r2, [pc, #244]	@ (800713c <UART_Start_Receive_DMA+0x12c>)
 8007046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704c:	4a3c      	ldr	r2, [pc, #240]	@ (8007140 <UART_Start_Receive_DMA+0x130>)
 800704e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007054:	2200      	movs	r2, #0
 8007056:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007058:	f107 0308 	add.w	r3, r7, #8
 800705c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3304      	adds	r3, #4
 8007068:	4619      	mov	r1, r3
 800706a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	f7fd fb7a 	bl	8004768 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d019      	beq.n	80070c6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	330c      	adds	r3, #12
 8007098:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	330c      	adds	r3, #12
 80070b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070b2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80070b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80070b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e5      	bne.n	8007092 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3314      	adds	r3, #20
 80070cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	f043 0301 	orr.w	r3, r3, #1
 80070dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3314      	adds	r3, #20
 80070e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070e6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80070e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80070ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3314      	adds	r3, #20
 8007100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	617b      	str	r3, [r7, #20]
   return(result);
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007110:	653b      	str	r3, [r7, #80]	@ 0x50
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3314      	adds	r3, #20
 8007118:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800711a:	627a      	str	r2, [r7, #36]	@ 0x24
 800711c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6a39      	ldr	r1, [r7, #32]
 8007120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	61fb      	str	r3, [r7, #28]
   return(result);
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e5      	bne.n	80070fa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3760      	adds	r7, #96	@ 0x60
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	08006e13 	.word	0x08006e13
 800713c:	08006f3f 	.word	0x08006f3f
 8007140:	08006f7b 	.word	0x08006f7b

08007144 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b089      	sub	sp, #36	@ 0x24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	60bb      	str	r3, [r7, #8]
   return(result);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	330c      	adds	r3, #12
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	61ba      	str	r2, [r7, #24]
 800716e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6979      	ldr	r1, [r7, #20]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	613b      	str	r3, [r7, #16]
   return(result);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e5      	bne.n	800714c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007188:	bf00      	nop
 800718a:	3724      	adds	r7, #36	@ 0x24
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr

08007192 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007192:	b480      	push	{r7}
 8007194:	b095      	sub	sp, #84	@ 0x54
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80071bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e5      	bne.n	800719a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3314      	adds	r3, #20
 80071d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f023 0301 	bic.w	r3, r3, #1
 80071e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3314      	adds	r3, #20
 80071ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007206:	2b01      	cmp	r3, #1
 8007208:	d119      	bne.n	800723e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	330c      	adds	r3, #12
 8007210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	60bb      	str	r3, [r7, #8]
   return(result);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f023 0310 	bic.w	r3, r3, #16
 8007220:	647b      	str	r3, [r7, #68]	@ 0x44
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800722a:	61ba      	str	r2, [r7, #24]
 800722c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6979      	ldr	r1, [r7, #20]
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	613b      	str	r3, [r7, #16]
   return(result);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e5      	bne.n	800720a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800724c:	bf00      	nop
 800724e:	3754      	adds	r7, #84	@ 0x54
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr

08007256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff fd5f 	bl	8006d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b21      	cmp	r3, #33	@ 0x21
 8007290:	d13e      	bne.n	8007310 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729a:	d114      	bne.n	80072c6 <UART_Transmit_IT+0x48>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d110      	bne.n	80072c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	1c9a      	adds	r2, r3, #2
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	621a      	str	r2, [r3, #32]
 80072c4:	e008      	b.n	80072d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	1c59      	adds	r1, r3, #1
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6211      	str	r1, [r2, #32]
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	4619      	mov	r1, r3
 80072e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10f      	bne.n	800730c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800730a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	e000      	b.n	8007312 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007310:	2302      	movs	r3, #2
  }
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007332:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fb fd5b 	bl	8002df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08c      	sub	sp, #48	@ 0x30
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b22      	cmp	r3, #34	@ 0x22
 800735e:	f040 80ae 	bne.w	80074be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800736a:	d117      	bne.n	800739c <UART_Receive_IT+0x50>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d113      	bne.n	800739c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007374:	2300      	movs	r3, #0
 8007376:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	b29b      	uxth	r3, r3
 8007386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738a:	b29a      	uxth	r2, r3
 800738c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007394:	1c9a      	adds	r2, r3, #2
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	629a      	str	r2, [r3, #40]	@ 0x28
 800739a:	e026      	b.n	80073ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ae:	d007      	beq.n	80073c0 <UART_Receive_IT+0x74>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <UART_Receive_IT+0x82>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d106      	bne.n	80073ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	e008      	b.n	80073e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	4619      	mov	r1, r3
 80073f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d15d      	bne.n	80074ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0220 	bic.w	r2, r2, #32
 800740c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800741c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	695a      	ldr	r2, [r3, #20]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0201 	bic.w	r2, r2, #1
 800742c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007440:	2b01      	cmp	r3, #1
 8007442:	d135      	bne.n	80074b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	330c      	adds	r3, #12
 8007450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	613b      	str	r3, [r7, #16]
   return(result);
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f023 0310 	bic.w	r3, r3, #16
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	330c      	adds	r3, #12
 8007468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800746a:	623a      	str	r2, [r7, #32]
 800746c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	69f9      	ldr	r1, [r7, #28]
 8007470:	6a3a      	ldr	r2, [r7, #32]
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	61bb      	str	r3, [r7, #24]
   return(result);
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e5      	bne.n	800744a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b10      	cmp	r3, #16
 800748a:	d10a      	bne.n	80074a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff fc4c 	bl	8006d46 <HAL_UARTEx_RxEventCallback>
 80074ae:	e002      	b.n	80074b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fb fcb3 	bl	8002e1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	e002      	b.n	80074c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	e000      	b.n	80074c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80074be:	2302      	movs	r3, #2
  }
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3730      	adds	r7, #48	@ 0x30
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007502:	f023 030c 	bic.w	r3, r3, #12
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6812      	ldr	r2, [r2, #0]
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	430b      	orrs	r3, r1
 800750e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a2c      	ldr	r2, [pc, #176]	@ (80075dc <UART_SetConfig+0x114>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d103      	bne.n	8007538 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007530:	f7fe f8dc 	bl	80056ec <HAL_RCC_GetPCLK2Freq>
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	e002      	b.n	800753e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007538:	f7fe f8c4 	bl	80056c4 <HAL_RCC_GetPCLK1Freq>
 800753c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009a      	lsls	r2, r3, #2
 8007548:	441a      	add	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	fbb2 f3f3 	udiv	r3, r2, r3
 8007554:	4a22      	ldr	r2, [pc, #136]	@ (80075e0 <UART_SetConfig+0x118>)
 8007556:	fba2 2303 	umull	r2, r3, r2, r3
 800755a:	095b      	lsrs	r3, r3, #5
 800755c:	0119      	lsls	r1, r3, #4
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	009a      	lsls	r2, r3, #2
 8007568:	441a      	add	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	fbb2 f2f3 	udiv	r2, r2, r3
 8007574:	4b1a      	ldr	r3, [pc, #104]	@ (80075e0 <UART_SetConfig+0x118>)
 8007576:	fba3 0302 	umull	r0, r3, r3, r2
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	2064      	movs	r0, #100	@ 0x64
 800757e:	fb00 f303 	mul.w	r3, r0, r3
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	3332      	adds	r3, #50	@ 0x32
 8007588:	4a15      	ldr	r2, [pc, #84]	@ (80075e0 <UART_SetConfig+0x118>)
 800758a:	fba2 2303 	umull	r2, r3, r2, r3
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007594:	4419      	add	r1, r3
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	009a      	lsls	r2, r3, #2
 80075a0:	441a      	add	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80075ac:	4b0c      	ldr	r3, [pc, #48]	@ (80075e0 <UART_SetConfig+0x118>)
 80075ae:	fba3 0302 	umull	r0, r3, r3, r2
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	2064      	movs	r0, #100	@ 0x64
 80075b6:	fb00 f303 	mul.w	r3, r0, r3
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	3332      	adds	r3, #50	@ 0x32
 80075c0:	4a07      	ldr	r2, [pc, #28]	@ (80075e0 <UART_SetConfig+0x118>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	f003 020f 	and.w	r2, r3, #15
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	440a      	add	r2, r1
 80075d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80075d4:	bf00      	nop
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	40013800 	.word	0x40013800
 80075e0:	51eb851f 	.word	0x51eb851f

080075e4 <motor_run>:
    motor->channel = channel;
}


/* Run motor at specified speed */
void motor_run(Motor *motor, double speed) {
 80075e4:	b5b0      	push	{r4, r5, r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	e9c7 2300 	strd	r2, r3, [r7]
    if (speed >= 0) {
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075fc:	f7f9 f9f2 	bl	80009e4 <__aeabi_dcmpge>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d010      	beq.n	8007628 <motor_run+0x44>
        HAL_GPIO_WritePin(motor->port, motor->pin_f, GPIO_PIN_SET);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	889b      	ldrh	r3, [r3, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	4619      	mov	r1, r3
 8007612:	f7fd fc75 	bl	8004f00 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->port, motor->pin_b, GPIO_PIN_RESET);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	88db      	ldrh	r3, [r3, #6]
 800761e:	2200      	movs	r2, #0
 8007620:	4619      	mov	r1, r3
 8007622:	f7fd fc6d 	bl	8004f00 <HAL_GPIO_WritePin>
 8007626:	e015      	b.n	8007654 <motor_run+0x70>
    } else {
        HAL_GPIO_WritePin(motor->port, motor->pin_f, GPIO_PIN_RESET);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	889b      	ldrh	r3, [r3, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	4619      	mov	r1, r3
 8007634:	f7fd fc64 	bl	8004f00 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->port, motor->pin_b, GPIO_PIN_SET);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	88db      	ldrh	r3, [r3, #6]
 8007640:	2201      	movs	r2, #1
 8007642:	4619      	mov	r1, r3
 8007644:	f7fd fc5c 	bl	8004f00 <HAL_GPIO_WritePin>
        speed = -speed; // Make speed positive for PWM duty cycle
 8007648:	683c      	ldr	r4, [r7, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007650:	e9c7 4500 	strd	r4, r5, [r7]
    }
    // Set PWM duty cycle based on speed
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, (uint16_t)(speed * motor->timer->Instance->ARR));
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d117      	bne.n	800768c <motor_run+0xa8>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007664:	4618      	mov	r0, r3
 8007666:	f7f8 febd 	bl	80003e4 <__aeabi_ui2d>
 800766a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800766e:	f7f8 ff33 	bl	80004d8 <__aeabi_dmul>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4610      	mov	r0, r2
 8007678:	4619      	mov	r1, r3
 800767a:	f7f9 fa05 	bl	8000a88 <__aeabi_d2uiz>
 800767e:	4603      	mov	r3, r0
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800768a:	e051      	b.n	8007730 <motor_run+0x14c>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, (uint16_t)(speed * motor->timer->Instance->ARR));
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	2b04      	cmp	r3, #4
 8007692:	d118      	bne.n	80076c6 <motor_run+0xe2>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769c:	4618      	mov	r0, r3
 800769e:	f7f8 fea1 	bl	80003e4 <__aeabi_ui2d>
 80076a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076a6:	f7f8 ff17 	bl	80004d8 <__aeabi_dmul>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4610      	mov	r0, r2
 80076b0:	4619      	mov	r1, r3
 80076b2:	f7f9 f9e9 	bl	8000a88 <__aeabi_d2uiz>
 80076b6:	4603      	mov	r3, r0
 80076b8:	b299      	uxth	r1, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	460b      	mov	r3, r1
 80076c2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80076c4:	e034      	b.n	8007730 <motor_run+0x14c>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, (uint16_t)(speed * motor->timer->Instance->ARR));
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d118      	bne.n	8007700 <motor_run+0x11c>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7f8 fe84 	bl	80003e4 <__aeabi_ui2d>
 80076dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e0:	f7f8 fefa 	bl	80004d8 <__aeabi_dmul>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4610      	mov	r0, r2
 80076ea:	4619      	mov	r1, r3
 80076ec:	f7f9 f9cc 	bl	8000a88 <__aeabi_d2uiz>
 80076f0:	4603      	mov	r3, r0
 80076f2:	b299      	uxth	r1, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	460b      	mov	r3, r1
 80076fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80076fe:	e017      	b.n	8007730 <motor_run+0x14c>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, (uint16_t)(speed * motor->timer->Instance->ARR));
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	4618      	mov	r0, r3
 800770a:	f7f8 fe6b 	bl	80003e4 <__aeabi_ui2d>
 800770e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007712:	f7f8 fee1 	bl	80004d8 <__aeabi_dmul>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4610      	mov	r0, r2
 800771c:	4619      	mov	r1, r3
 800771e:	f7f9 f9b3 	bl	8000a88 <__aeabi_d2uiz>
 8007722:	4603      	mov	r3, r0
 8007724:	b299      	uxth	r1, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	460b      	mov	r3, r1
 800772e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bdb0      	pop	{r4, r5, r7, pc}

08007738 <motor_stop>:

/* Stop motor */
void motor_stop(Motor *motor) {
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->port, motor->pin_f, GPIO_PIN_SET);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	889b      	ldrh	r3, [r3, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	4619      	mov	r1, r3
 800774c:	f7fd fbd8 	bl	8004f00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->port, motor->pin_b, GPIO_PIN_SET);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6818      	ldr	r0, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	88db      	ldrh	r3, [r3, #6]
 8007758:	2201      	movs	r2, #1
 800775a:	4619      	mov	r1, r3
 800775c:	f7fd fbd0 	bl	8004f00 <HAL_GPIO_WritePin>
    // Set PWM duty cycle to 0
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, 0);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d105      	bne.n	8007774 <motor_stop+0x3c>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2200      	movs	r2, #0
 8007770:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007772:	e018      	b.n	80077a6 <motor_stop+0x6e>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, 0);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	2b04      	cmp	r3, #4
 800777a:	d105      	bne.n	8007788 <motor_stop+0x50>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	2300      	movs	r3, #0
 8007784:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007786:	e00e      	b.n	80077a6 <motor_stop+0x6e>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, 0);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	2b08      	cmp	r3, #8
 800778e:	d105      	bne.n	800779c <motor_stop+0x64>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	2300      	movs	r3, #0
 8007798:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800779a:	e004      	b.n	80077a6 <motor_stop+0x6e>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, 0);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	2300      	movs	r3, #0
 80077a4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <enable_motor>:

/* Enable motors and start PWM */
void enable_motor(Motor *motor) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Example GPIO pin for motor enable
 80077b8:	2201      	movs	r2, #1
 80077ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80077be:	4807      	ldr	r0, [pc, #28]	@ (80077dc <enable_motor+0x2c>)
 80077c0:	f7fd fb9e 	bl	8004f00 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(motor->timer, motor->channel); // Start PWM for the specified motor
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f7fe f8e8 	bl	80059a4 <HAL_TIM_PWM_Start>
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40010800 	.word	0x40010800

080077e0 <calculate_pwm_values>:
void disable_motor(Motor *motor) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Example GPIO pin for motor disable
    HAL_TIM_PWM_Stop(motor->timer, motor->channel); // Stop PWM for the specified motor
}

void calculate_pwm_values(PWM_Config *config, uint32_t *PSC_value, uint32_t *ARR_value) {
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
    *ARR_value = pow(2, config->pwm_resolution) - 2; // Ideal ARR value
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7f8 fdf7 	bl	80003e4 <__aeabi_ui2d>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	f04f 0000 	mov.w	r0, #0
 80077fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007802:	f003 f843 	bl	800a88c <pow>
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800780e:	f7f8 fcab 	bl	8000168 <__aeabi_dsub>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4610      	mov	r0, r2
 8007818:	4619      	mov	r1, r3
 800781a:	f7f9 f935 	bl	8000a88 <__aeabi_d2uiz>
 800781e:	4602      	mov	r2, r0
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	601a      	str	r2, [r3, #0]
    *PSC_value = (uint32_t)((config->pwm_input_freq) / ((*ARR_value + 1) * config->pwm_freq)) - 1;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	6849      	ldr	r1, [r1, #4]
 8007832:	fb01 f303 	mul.w	r3, r1, r3
 8007836:	fbb2 f3f3 	udiv	r3, r2, r3
 800783a:	1e5a      	subs	r2, r3, #1
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	601a      	str	r2, [r3, #0]
}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <init_motor_dynamics>:
 * @param motor_dynamics Podoubleer to the MotorDynamics structure to be initialized.
 * @param wheel_diameter Wheel diameter in meters.
 * @param gear_ratio Gear ratio.
 * @param counts_per_revolution Counts per revolution.
 */
void init_motor_dynamics(MotorDynamics* motor_dynamics, double wheel_diameter, double gear_ratio, double counts_per_revolution, AverageFilter* averageFilter, TIM_HandleTypeDef* htim) {
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	e9c7 2300 	strd	r2, r3, [r7]
    // Initialize members with default values
    motor_dynamics->encoder_count_per_sampling_period = 0;
 8007854:	68f9      	ldr	r1, [r7, #12]
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	f04f 0300 	mov.w	r3, #0
 800785e:	e9c1 2300 	strd	r2, r3, [r1]
    motor_dynamics->rpm = 0;
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    motor_dynamics->linear_velocity = 0;
 8007870:	68f9      	ldr	r1, [r7, #12]
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    motor_dynamics->previous_encoder_count = 0;
 800787e:	68f9      	ldr	r1, [r7, #12]
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	e9c1 2308 	strd	r2, r3, [r1, #32]
    motor_dynamics->current_encoder_count = 0;
 800788c:	68f9      	ldr	r1, [r7, #12]
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    // Initialize members with arguments
    motor_dynamics->wheel_diameter = wheel_diameter;
 800789a:	68f9      	ldr	r1, [r7, #12]
 800789c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    motor_dynamics->gear_ratio = gear_ratio;
 80078a4:	68f9      	ldr	r1, [r7, #12]
 80078a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    motor_dynamics->counts_per_revolution = counts_per_revolution;
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078b4:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    motor_dynamics->averageFilter = averageFilter;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078bc:	649a      	str	r2, [r3, #72]	@ 0x48
    motor_dynamics->htim = htim;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078c2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80078c4:	bf00      	nop
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr
	...

080078d0 <update_encoder_count_per_sampling_period>:
 * We call this function inside of the timer callback function.
 *
 * @param motor_dynamics Podoubleer to MotorDynamics struct
 * @param current_encoder_count Current tick count
 */
void update_encoder_count_per_sampling_period(MotorDynamics* motor_dynamics) {
 80078d0:	b5b0      	push	{r4, r5, r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
    motor_dynamics->current_encoder_count = (double) (__HAL_TIM_GET_COUNTER(motor_dynamics->htim)>>2);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e0:	089b      	lsrs	r3, r3, #2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7f8 fd7e 	bl	80003e4 <__aeabi_ui2d>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    if(__HAL_TIM_IS_TIM_COUNTING_DOWN(motor_dynamics->htim) && (motor_dynamics->current_encoder_count > motor_dynamics->previous_encoder_count)) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0310 	and.w	r3, r3, #16
 80078fe:	2b10      	cmp	r3, #16
 8007900:	d132      	bne.n	8007968 <update_encoder_count_per_sampling_period+0x98>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800790e:	f7f9 f873 	bl	80009f8 <__aeabi_dcmpgt>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d027      	beq.n	8007968 <update_encoder_count_per_sampling_period+0x98>
    	/* Underflow condition */
    	motor_dynamics->encoder_count_per_sampling_period = motor_dynamics->current_encoder_count - 1 - __HAL_TIM_GET_AUTORELOAD(motor_dynamics->htim) - motor_dynamics->previous_encoder_count;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	4b42      	ldr	r3, [pc, #264]	@ (8007a2c <update_encoder_count_per_sampling_period+0x15c>)
 8007924:	f7f8 fc20 	bl	8000168 <__aeabi_dsub>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4614      	mov	r4, r2
 800792e:	461d      	mov	r5, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	4618      	mov	r0, r3
 800793a:	f7f8 fd53 	bl	80003e4 <__aeabi_ui2d>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4620      	mov	r0, r4
 8007944:	4629      	mov	r1, r5
 8007946:	f7f8 fc0f 	bl	8000168 <__aeabi_dsub>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4610      	mov	r0, r2
 8007950:	4619      	mov	r1, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007958:	f7f8 fc06 	bl	8000168 <__aeabi_dsub>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	e9c1 2300 	strd	r2, r3, [r1]
 8007966:	e047      	b.n	80079f8 <update_encoder_count_per_sampling_period+0x128>
    }
    else if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(motor_dynamics->htim) && (motor_dynamics->current_encoder_count < motor_dynamics->previous_encoder_count )){
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0310 	and.w	r3, r3, #16
 8007974:	2b10      	cmp	r3, #16
 8007976:	d032      	beq.n	80079de <update_encoder_count_per_sampling_period+0x10e>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007984:	f7f9 f81a 	bl	80009bc <__aeabi_dcmplt>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d027      	beq.n	80079de <update_encoder_count_per_sampling_period+0x10e>
    	/* Overflow condition */
    	motor_dynamics->encoder_count_per_sampling_period = motor_dynamics->current_encoder_count + 1 + __HAL_TIM_GET_AUTORELOAD(motor_dynamics->htim) - motor_dynamics->previous_encoder_count;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	4b24      	ldr	r3, [pc, #144]	@ (8007a2c <update_encoder_count_per_sampling_period+0x15c>)
 800799a:	f7f8 fbe7 	bl	800016c <__adddf3>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4614      	mov	r4, r2
 80079a4:	461d      	mov	r5, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7f8 fd18 	bl	80003e4 <__aeabi_ui2d>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4620      	mov	r0, r4
 80079ba:	4629      	mov	r1, r5
 80079bc:	f7f8 fbd6 	bl	800016c <__adddf3>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4610      	mov	r0, r2
 80079c6:	4619      	mov	r1, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079ce:	f7f8 fbcb 	bl	8000168 <__aeabi_dsub>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	e9c1 2300 	strd	r2, r3, [r1]
 80079dc:	e00c      	b.n	80079f8 <update_encoder_count_per_sampling_period+0x128>
    }
   	else {
   		/* normal counting condition */
   		motor_dynamics->encoder_count_per_sampling_period = motor_dynamics->current_encoder_count - motor_dynamics->previous_encoder_count;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079ea:	f7f8 fbbd 	bl	8000168 <__aeabi_dsub>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	e9c1 2300 	strd	r2, r3, [r1]
   }

    motor_dynamics->previous_encoder_count = motor_dynamics->current_encoder_count;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	e9c1 2308 	strd	r2, r3, [r1, #32]
    add_to_filter_buffer(motor_dynamics->averageFilter, (int8_t)motor_dynamics->encoder_count_per_sampling_period);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	4610      	mov	r0, r2
 8007a10:	4619      	mov	r1, r3
 8007a12:	f7f9 f811 	bl	8000a38 <__aeabi_d2iz>
 8007a16:	4603      	mov	r3, r0
 8007a18:	b25b      	sxtb	r3, r3
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 f869 	bl	8007af4 <add_to_filter_buffer>
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bdb0      	pop	{r4, r5, r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	3ff00000 	.word	0x3ff00000

08007a30 <get_speed_count>:
 * based on the encoder_count per the recent sampling period and motor parameters.
 *
 * @param motor_dynamics Podoubleer to MotorDynamics struct
 * @return Motor speed in RPM
 */
int get_speed_count(MotorDynamics* motor_dynamics) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
    return motor_dynamics->count = filter_output(motor_dynamics->averageFilter) / SAMPLING_PERIOD;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f899 	bl	8007b74 <filter_output>
 8007a42:	a30b      	add	r3, pc, #44	@ (adr r3, 8007a70 <get_speed_count+0x40>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fe70 	bl	800072c <__aeabi_ddiv>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4610      	mov	r0, r2
 8007a52:	4619      	mov	r1, r3
 8007a54:	f7f8 fff0 	bl	8000a38 <__aeabi_d2iz>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	611a      	str	r2, [r3, #16]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	f3af 8000 	nop.w
 8007a70:	47ae147b 	.word	0x47ae147b
 8007a74:	3f847ae1 	.word	0x3f847ae1

08007a78 <get_speed_rpm>:
 * based on the encoder_count per the recent sampling period and motor parameters.
 *
 * @param motor_dynamics Podoubleer to MotorDynamics struct
 * @return Motor speed in RPM
 */
double get_speed_rpm(MotorDynamics* motor_dynamics) {
 8007a78:	b5b0      	push	{r4, r5, r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
    return motor_dynamics->rpm = (filter_output(motor_dynamics->averageFilter) * MINIUTE_DURATION) /
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 f875 	bl	8007b74 <filter_output>
 8007a8a:	f04f 0200 	mov.w	r2, #0
 8007a8e:	4b18      	ldr	r3, [pc, #96]	@ (8007af0 <get_speed_rpm+0x78>)
 8007a90:	f7f8 fd22 	bl	80004d8 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4614      	mov	r4, r2
 8007a9a:	461d      	mov	r5, r3
                                 (motor_dynamics->gear_ratio * motor_dynamics->counts_per_revolution * SAMPLING_PERIOD);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007aa8:	f7f8 fd16 	bl	80004d8 <__aeabi_dmul>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	a30c      	add	r3, pc, #48	@ (adr r3, 8007ae8 <get_speed_rpm+0x70>)
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f7f8 fd0d 	bl	80004d8 <__aeabi_dmul>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
    return motor_dynamics->rpm = (filter_output(motor_dynamics->averageFilter) * MINIUTE_DURATION) /
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	f7f8 fe31 	bl	800072c <__aeabi_ddiv>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
}
 8007ada:	4610      	mov	r0, r2
 8007adc:	4619      	mov	r1, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ae4:	f3af 8000 	nop.w
 8007ae8:	47ae147b 	.word	0x47ae147b
 8007aec:	3f847ae1 	.word	0x3f847ae1
 8007af0:	404e0000 	.word	0x404e0000

08007af4 <add_to_filter_buffer>:
                                        (motor_dynamics->gear_ratio * motor_dynamics->counts_per_revolution * SAMPLING_PERIOD);
}



void add_to_filter_buffer(AverageFilter *filter, int8_t encoder_count){
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]

	filter->sum = encoder_count;
 8007b00:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	601a      	str	r2, [r3, #0]
    for(uint8_t i =99; i>0; i--){
 8007b08:	2363      	movs	r3, #99	@ 0x63
 8007b0a:	73fb      	strb	r3, [r7, #15]
 8007b0c:	e018      	b.n	8007b40 <add_to_filter_buffer+0x4c>
        filter->samples[i] = filter->samples[i-1];
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	1e5a      	subs	r2, r3, #1
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	440a      	add	r2, r1
 8007b18:	f992 1005 	ldrsb.w	r1, [r2, #5]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	4413      	add	r3, r2
 8007b20:	460a      	mov	r2, r1
 8007b22:	715a      	strb	r2, [r3, #5]
        filter->sum += filter->samples[i-1];
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	7bfa      	ldrb	r2, [r7, #15]
 8007b2a:	3a01      	subs	r2, #1
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8007b34:	441a      	add	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
    for(uint8_t i =99; i>0; i--){
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e3      	bne.n	8007b0e <add_to_filter_buffer+0x1a>
    }
    filter->samples[0] = encoder_count;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	715a      	strb	r2, [r3, #5]

	if(filter->sample_count <filter->num_samples ){
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 2069 	ldrb.w	r2, [r3, #105]	@ 0x69
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	791b      	ldrb	r3, [r3, #4]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d207      	bcs.n	8007b6a <add_to_filter_buffer+0x76>
		filter->sample_count++;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8007b60:	3301      	adds	r3, #1
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	}

}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bc80      	pop	{r7}
 8007b72:	4770      	bx	lr

08007b74 <filter_output>:

double filter_output(AverageFilter *filter){
 8007b74:	b5b0      	push	{r4, r5, r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
    return  ((double) (filter->sum))/(filter->sample_count);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7f8 fc3f 	bl	8000404 <__aeabi_i2d>
 8007b86:	4604      	mov	r4, r0
 8007b88:	460d      	mov	r5, r1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7f8 fc37 	bl	8000404 <__aeabi_i2d>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	f7f8 fdc5 	bl	800072c <__aeabi_ddiv>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
}
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	4619      	mov	r1, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bdb0      	pop	{r4, r5, r7, pc}

08007bb0 <init_filter>:
		filter->samples[0] = 0;
	}

}

void init_filter(AverageFilter *filter , uint8_t num_samples){
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]

	filter->num_samples =  num_samples;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	711a      	strb	r2, [r3, #4]

	filter->sum = 0;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]

	filter -> sample_count = 0;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

	for(int i = 0; i < filter->num_samples; i++ ){
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	e005      	b.n	8007be2 <init_filter+0x32>
		filter->samples[0] = 0;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	715a      	strb	r2, [r3, #5]
	for(int i = 0; i < filter->num_samples; i++ ){
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	791b      	ldrb	r3, [r3, #4]
 8007be6:	461a      	mov	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4293      	cmp	r3, r2
 8007bec:	dbf3      	blt.n	8007bd6 <init_filter+0x26>
	}

}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bc80      	pop	{r7}
 8007bf8:	4770      	bx	lr

08007bfa <PID_Init>:
#include <stdio.h> // Include necessary libraries
#include "pid_v1.h"


// Define PID functions
void PID_Init(PIDController *pid, double kp, double ki, double kd, double dt, double lower_bound, double upper_bound) {
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	e9c7 2300 	strd	r2, r3, [r7]
    pid->kp = kp;
 8007c06:	68f9      	ldr	r1, [r7, #12]
 8007c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c0c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    pid->ki = ki;
 8007c10:	68f9      	ldr	r1, [r7, #12]
 8007c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c16:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    pid->kd = kd;
 8007c1a:	68f9      	ldr	r1, [r7, #12]
 8007c1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c20:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    pid->error_integral = 0;
 8007c24:	68f9      	ldr	r1, [r7, #12]
 8007c26:	f04f 0200 	mov.w	r2, #0
 8007c2a:	f04f 0300 	mov.w	r3, #0
 8007c2e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->prev_error = 0;
 8007c32:	68f9      	ldr	r1, [r7, #12]
 8007c34:	f04f 0200 	mov.w	r2, #0
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->output = 0;
 8007c40:	68f9      	ldr	r1, [r7, #12]
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    pid->error = 0;
 8007c4e:	68f9      	ldr	r1, [r7, #12]
 8007c50:	f04f 0200 	mov.w	r2, #0
 8007c54:	f04f 0300 	mov.w	r3, #0
 8007c58:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    pid->dt = dt;
 8007c5c:	68f9      	ldr	r1, [r7, #12]
 8007c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c62:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    pid->lower_bound = lower_bound;
 8007c66:	68f9      	ldr	r1, [r7, #12]
 8007c68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007c6c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    pid->upper_bound = upper_bound;
 8007c70:	68f9      	ldr	r1, [r7, #12]
 8007c72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c76:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
}
 8007c7a:	bf00      	nop
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc80      	pop	{r7}
 8007c82:	4770      	bx	lr

08007c84 <PID_calculate>:


void PID_calculate(PIDController *pid){ // No dt parameter
 8007c84:	b5b0      	push	{r4, r5, r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
    pid->error =  pid->target_value -pid->current_value;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007c98:	f7f8 fa66 	bl	8000168 <__aeabi_dsub>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    pid->error_integral += (pid->error * pid->dt); // Scale the accumulated error by dt
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007cb8:	f7f8 fc0e 	bl	80004d8 <__aeabi_dmul>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	f7f8 fa52 	bl	800016c <__adddf3>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	6879      	ldr	r1, [r7, #4]
 8007cce:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->output = (pid->error * pid->kp) + (pid->error_integral * pid->ki) + (((pid->error - pid->prev_error) / pid->dt) * pid->kd); // Include dt in derivative term
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007cde:	f7f8 fbfb 	bl	80004d8 <__aeabi_dmul>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4614      	mov	r4, r2
 8007ce8:	461d      	mov	r5, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007cf6:	f7f8 fbef 	bl	80004d8 <__aeabi_dmul>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	f7f8 fa33 	bl	800016c <__adddf3>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4614      	mov	r4, r2
 8007d0c:	461d      	mov	r5, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d1a:	f7f8 fa25 	bl	8000168 <__aeabi_dsub>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4610      	mov	r0, r2
 8007d24:	4619      	mov	r1, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007d2c:	f7f8 fcfe 	bl	800072c <__aeabi_ddiv>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4610      	mov	r0, r2
 8007d36:	4619      	mov	r1, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007d3e:	f7f8 fbcb 	bl	80004d8 <__aeabi_dmul>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4620      	mov	r0, r4
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7f8 fa0f 	bl	800016c <__adddf3>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    pid->prev_error = pid->error;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	e9c1 2308 	strd	r2, r3, [r1, #32]

    if(pid->upper_bound < pid->output){
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007d70:	f7f8 fe24 	bl	80009bc <__aeabi_dcmplt>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d006      	beq.n	8007d88 <PID_calculate+0x104>
        pid->output= pid->upper_bound;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    }
    else if(pid->lower_bound > pid->output){
        pid->output= pid->lower_bound;
    }
}
 8007d86:	e011      	b.n	8007dac <PID_calculate+0x128>
    else if(pid->lower_bound > pid->output){
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007d94:	f7f8 fe30 	bl	80009f8 <__aeabi_dcmpgt>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d100      	bne.n	8007da0 <PID_calculate+0x11c>
}
 8007d9e:	e005      	b.n	8007dac <PID_calculate+0x128>
        pid->output= pid->lower_bound;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bdb0      	pop	{r4, r5, r7, pc}

08007db4 <PID_reset>:


void PID_reset(PIDController *pid) {
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
    pid->error_integral = 0;
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	f04f 0200 	mov.w	r2, #0
 8007dc2:	f04f 0300 	mov.w	r3, #0
 8007dc6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->prev_error = 0;
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->output = 0;
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	f04f 0200 	mov.w	r2, #0
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    pid->error = 0;
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	f04f 0200 	mov.w	r2, #0
 8007dec:	f04f 0300 	mov.w	r3, #0
 8007df0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr

08007dfe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	4603      	mov	r3, r0
 8007e06:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e10:	2b84      	cmp	r3, #132	@ 0x84
 8007e12:	d005      	beq.n	8007e20 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3303      	adds	r3, #3
 8007e1e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e20:	68fb      	ldr	r3, [r7, #12]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr

08007e2c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e32:	f3ef 8305 	mrs	r3, IPSR
 8007e36:	607b      	str	r3, [r7, #4]
  return(result);
 8007e38:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bf14      	ite	ne
 8007e3e:	2301      	movne	r3, #1
 8007e40:	2300      	moveq	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr

08007e4e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e52:	f001 f841 	bl	8008ed8 <vTaskStartScheduler>
  
  return osOK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e5e:	b089      	sub	sp, #36	@ 0x24
 8007e60:	af04      	add	r7, sp, #16
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d020      	beq.n	8007eb0 <osThreadCreate+0x54>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d01c      	beq.n	8007eb0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685c      	ldr	r4, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691e      	ldr	r6, [r3, #16]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff ffb8 	bl	8007dfe <makeFreeRtosPriority>
 8007e8e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e98:	9202      	str	r2, [sp, #8]
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	9100      	str	r1, [sp, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 fe53 	bl	8008b50 <xTaskCreateStatic>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	e01c      	b.n	8007eea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685c      	ldr	r4, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ebc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff ff9a 	bl	8007dfe <makeFreeRtosPriority>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	f107 030c 	add.w	r3, r7, #12
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	9200      	str	r2, [sp, #0]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fe97 	bl	8008c0e <xTaskCreate>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d001      	beq.n	8007eea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e000      	b.n	8007eec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007eea:	68fb      	ldr	r3, [r7, #12]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ef4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <osDelay+0x16>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	e000      	b.n	8007f0c <osDelay+0x18>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 ffad 	bl	8008e6c <vTaskDelay>
  
  return osOK;
 8007f12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	460b      	mov	r3, r1
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d013      	beq.n	8007f5a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8007f32:	7afb      	ldrb	r3, [r7, #11]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <osTimerCreate+0x20>
 8007f38:	2101      	movs	r1, #1
 8007f3a:	e000      	b.n	8007f3e <osTimerCreate+0x22>
 8007f3c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8007f46:	9201      	str	r2, [sp, #4]
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	460a      	mov	r2, r1
 8007f4e:	2101      	movs	r1, #1
 8007f50:	480b      	ldr	r0, [pc, #44]	@ (8007f80 <osTimerCreate+0x64>)
 8007f52:	f001 fd8a 	bl	8009a6a <xTimerCreateStatic>
 8007f56:	4603      	mov	r3, r0
 8007f58:	e00e      	b.n	8007f78 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <osTimerCreate+0x48>
 8007f60:	2201      	movs	r2, #1
 8007f62:	e000      	b.n	8007f66 <osTimerCreate+0x4a>
 8007f64:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2101      	movs	r1, #1
 8007f70:	4803      	ldr	r0, [pc, #12]	@ (8007f80 <osTimerCreate+0x64>)
 8007f72:	f001 fd59 	bl	8009a28 <xTimerCreate>
 8007f76:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	0800e644 	.word	0x0800e644

08007f84 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <osTimerStart+0x20>
    ticks = 1;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8007fa4:	f7ff ff42 	bl	8007e2c <inHandlerMode>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01a      	beq.n	8007fe4 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007fae:	f107 030c 	add.w	r3, r7, #12
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	9200      	str	r2, [sp, #0]
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	2109      	movs	r1, #9
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 fdc8 	bl	8009b50 <xTimerGenericCommand>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d002      	beq.n	8007fcc <osTimerStart+0x48>
    {
      result = osErrorOS;
 8007fc6:	23ff      	movs	r3, #255	@ 0xff
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	e018      	b.n	8007ffe <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d015      	beq.n	8007ffe <osTimerStart+0x7a>
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008008 <osTimerStart+0x84>)
 8007fd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	e00c      	b.n	8007ffe <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	2104      	movs	r1, #4
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 fdae 	bl	8009b50 <xTimerGenericCommand>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d001      	beq.n	8007ffe <osTimerStart+0x7a>
      result = osErrorOS;
 8007ffa:	23ff      	movs	r3, #255	@ 0xff
 8007ffc:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8007ffe:	697b      	ldr	r3, [r7, #20]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f103 0208 	add.w	r2, r3, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f103 0208 	add.w	r2, r3, #8
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f103 0208 	add.w	r2, r3, #8
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	bc80      	pop	{r7}
 8008048:	4770      	bx	lr

0800804a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	bc80      	pop	{r7}
 8008060:	4770      	bx	lr

08008062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	601a      	str	r2, [r3, #0]
}
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr

080080a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080be:	d103      	bne.n	80080c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	e00c      	b.n	80080e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3308      	adds	r3, #8
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	e002      	b.n	80080d6 <vListInsert+0x2e>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d2f6      	bcs.n	80080d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	601a      	str	r2, [r3, #0]
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr

08008118 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6892      	ldr	r2, [r2, #8]
 800812e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6852      	ldr	r2, [r2, #4]
 8008138:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	d103      	bne.n	800814c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	1e5a      	subs	r2, r3, #1
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	bc80      	pop	{r7}
 8008168:	4770      	bx	lr
	...

0800816c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10b      	bne.n	8008198 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008192:	bf00      	nop
 8008194:	bf00      	nop
 8008196:	e7fd      	b.n	8008194 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008198:	f002 f876 	bl	800a288 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a4:	68f9      	ldr	r1, [r7, #12]
 80081a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081a8:	fb01 f303 	mul.w	r3, r1, r3
 80081ac:	441a      	add	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c8:	3b01      	subs	r3, #1
 80081ca:	68f9      	ldr	r1, [r7, #12]
 80081cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081ce:	fb01 f303 	mul.w	r3, r1, r3
 80081d2:	441a      	add	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	22ff      	movs	r2, #255	@ 0xff
 80081dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	22ff      	movs	r2, #255	@ 0xff
 80081e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d114      	bne.n	8008218 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d01a      	beq.n	800822c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3310      	adds	r3, #16
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 f8fa 	bl	80093f4 <xTaskRemoveFromEventList>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d012      	beq.n	800822c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008206:	4b0d      	ldr	r3, [pc, #52]	@ (800823c <xQueueGenericReset+0xd0>)
 8008208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	e009      	b.n	800822c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3310      	adds	r3, #16
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fef5 	bl	800800c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3324      	adds	r3, #36	@ 0x24
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff fef0 	bl	800800c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800822c:	f002 f85c 	bl	800a2e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008230:	2301      	movs	r3, #1
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	e000ed04 	.word	0xe000ed04

08008240 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08e      	sub	sp, #56	@ 0x38
 8008244:	af02      	add	r7, sp, #8
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10b      	bne.n	800826c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008266:	bf00      	nop
 8008268:	bf00      	nop
 800826a:	e7fd      	b.n	8008268 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10b      	bne.n	800828a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop
 8008288:	e7fd      	b.n	8008286 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <xQueueGenericCreateStatic+0x56>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <xQueueGenericCreateStatic+0x5a>
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <xQueueGenericCreateStatic+0x5c>
 800829a:	2300      	movs	r3, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10b      	bne.n	80082b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	623b      	str	r3, [r7, #32]
}
 80082b2:	bf00      	nop
 80082b4:	bf00      	nop
 80082b6:	e7fd      	b.n	80082b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d102      	bne.n	80082c4 <xQueueGenericCreateStatic+0x84>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <xQueueGenericCreateStatic+0x88>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <xQueueGenericCreateStatic+0x8a>
 80082c8:	2300      	movs	r3, #0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10b      	bne.n	80082e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	61fb      	str	r3, [r7, #28]
}
 80082e0:	bf00      	nop
 80082e2:	bf00      	nop
 80082e4:	e7fd      	b.n	80082e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082e6:	2348      	movs	r3, #72	@ 0x48
 80082e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b48      	cmp	r3, #72	@ 0x48
 80082ee:	d00b      	beq.n	8008308 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	61bb      	str	r3, [r7, #24]
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00d      	beq.n	800832e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800831a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800831e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	4613      	mov	r3, r2
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	68b9      	ldr	r1, [r7, #8]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f805 	bl	8008338 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800832e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008330:	4618      	mov	r0, r3
 8008332:	3730      	adds	r7, #48	@ 0x30
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d103      	bne.n	8008354 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	69ba      	ldr	r2, [r7, #24]
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	e002      	b.n	800835a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008366:	2101      	movs	r1, #1
 8008368:	69b8      	ldr	r0, [r7, #24]
 800836a:	f7ff feff 	bl	800816c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08e      	sub	sp, #56	@ 0x38
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008386:	2300      	movs	r3, #0
 8008388:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10b      	bne.n	80083ac <xQueueGenericSend+0x34>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083a6:	bf00      	nop
 80083a8:	bf00      	nop
 80083aa:	e7fd      	b.n	80083a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <xQueueGenericSend+0x42>
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <xQueueGenericSend+0x46>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e000      	b.n	80083c0 <xQueueGenericSend+0x48>
 80083be:	2300      	movs	r3, #0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10b      	bne.n	80083dc <xQueueGenericSend+0x64>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	e7fd      	b.n	80083d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d103      	bne.n	80083ea <xQueueGenericSend+0x72>
 80083e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d101      	bne.n	80083ee <xQueueGenericSend+0x76>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e000      	b.n	80083f0 <xQueueGenericSend+0x78>
 80083ee:	2300      	movs	r3, #0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10b      	bne.n	800840c <xQueueGenericSend+0x94>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	623b      	str	r3, [r7, #32]
}
 8008406:	bf00      	nop
 8008408:	bf00      	nop
 800840a:	e7fd      	b.n	8008408 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800840c:	f001 f9b6 	bl	800977c <xTaskGetSchedulerState>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d102      	bne.n	800841c <xQueueGenericSend+0xa4>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <xQueueGenericSend+0xa8>
 800841c:	2301      	movs	r3, #1
 800841e:	e000      	b.n	8008422 <xQueueGenericSend+0xaa>
 8008420:	2300      	movs	r3, #0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10b      	bne.n	800843e <xQueueGenericSend+0xc6>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	61fb      	str	r3, [r7, #28]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800843e:	f001 ff23 	bl	800a288 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844a:	429a      	cmp	r2, r3
 800844c:	d302      	bcc.n	8008454 <xQueueGenericSend+0xdc>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d129      	bne.n	80084a8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800845a:	f000 fa0d 	bl	8008878 <prvCopyDataToQueue>
 800845e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008464:	2b00      	cmp	r3, #0
 8008466:	d010      	beq.n	800848a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846a:	3324      	adds	r3, #36	@ 0x24
 800846c:	4618      	mov	r0, r3
 800846e:	f000 ffc1 	bl	80093f4 <xTaskRemoveFromEventList>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d013      	beq.n	80084a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008478:	4b3f      	ldr	r3, [pc, #252]	@ (8008578 <xQueueGenericSend+0x200>)
 800847a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	e00a      	b.n	80084a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800848a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d007      	beq.n	80084a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008490:	4b39      	ldr	r3, [pc, #228]	@ (8008578 <xQueueGenericSend+0x200>)
 8008492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084a0:	f001 ff22 	bl	800a2e8 <vPortExitCritical>
				return pdPASS;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e063      	b.n	8008570 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d103      	bne.n	80084b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084ae:	f001 ff1b 	bl	800a2e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	e05c      	b.n	8008570 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d106      	bne.n	80084ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084bc:	f107 0314 	add.w	r3, r7, #20
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 fffb 	bl	80094bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084c6:	2301      	movs	r3, #1
 80084c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084ca:	f001 ff0d 	bl	800a2e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084ce:	f000 fd6b 	bl	8008fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084d2:	f001 fed9 	bl	800a288 <vPortEnterCritical>
 80084d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084dc:	b25b      	sxtb	r3, r3
 80084de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084e2:	d103      	bne.n	80084ec <xQueueGenericSend+0x174>
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084f2:	b25b      	sxtb	r3, r3
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084f8:	d103      	bne.n	8008502 <xQueueGenericSend+0x18a>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008502:	f001 fef1 	bl	800a2e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008506:	1d3a      	adds	r2, r7, #4
 8008508:	f107 0314 	add.w	r3, r7, #20
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f000 ffea 	bl	80094e8 <xTaskCheckForTimeOut>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d124      	bne.n	8008564 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800851a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800851c:	f000 faa4 	bl	8008a68 <prvIsQueueFull>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d018      	beq.n	8008558 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008528:	3310      	adds	r3, #16
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	4611      	mov	r1, r2
 800852e:	4618      	mov	r0, r3
 8008530:	f000 ff0e 	bl	8009350 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008536:	f000 fa2f 	bl	8008998 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800853a:	f000 fd43 	bl	8008fc4 <xTaskResumeAll>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	f47f af7c 	bne.w	800843e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008546:	4b0c      	ldr	r3, [pc, #48]	@ (8008578 <xQueueGenericSend+0x200>)
 8008548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	e772      	b.n	800843e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800855a:	f000 fa1d 	bl	8008998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800855e:	f000 fd31 	bl	8008fc4 <xTaskResumeAll>
 8008562:	e76c      	b.n	800843e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008566:	f000 fa17 	bl	8008998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800856a:	f000 fd2b 	bl	8008fc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800856e:	2300      	movs	r3, #0
		}
	}
}
 8008570:	4618      	mov	r0, r3
 8008572:	3738      	adds	r7, #56	@ 0x38
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	e000ed04 	.word	0xe000ed04

0800857c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08e      	sub	sp, #56	@ 0x38
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10b      	bne.n	80085ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085a6:	bf00      	nop
 80085a8:	bf00      	nop
 80085aa:	e7fd      	b.n	80085a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d103      	bne.n	80085ba <xQueueGenericSendFromISR+0x3e>
 80085b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <xQueueGenericSendFromISR+0x42>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e000      	b.n	80085c0 <xQueueGenericSendFromISR+0x44>
 80085be:	2300      	movs	r3, #0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10b      	bne.n	80085dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	623b      	str	r3, [r7, #32]
}
 80085d6:	bf00      	nop
 80085d8:	bf00      	nop
 80085da:	e7fd      	b.n	80085d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d103      	bne.n	80085ea <xQueueGenericSendFromISR+0x6e>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d101      	bne.n	80085ee <xQueueGenericSendFromISR+0x72>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <xQueueGenericSendFromISR+0x74>
 80085ee:	2300      	movs	r3, #0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10b      	bne.n	800860c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	61fb      	str	r3, [r7, #28]
}
 8008606:	bf00      	nop
 8008608:	bf00      	nop
 800860a:	e7fd      	b.n	8008608 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800860c:	f001 ff00 	bl	800a410 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008610:	f3ef 8211 	mrs	r2, BASEPRI
 8008614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	61ba      	str	r2, [r7, #24]
 8008626:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008628:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800862a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008634:	429a      	cmp	r2, r3
 8008636:	d302      	bcc.n	800863e <xQueueGenericSendFromISR+0xc2>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2b02      	cmp	r3, #2
 800863c:	d12c      	bne.n	8008698 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800864e:	f000 f913 	bl	8008878 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008652:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800865a:	d112      	bne.n	8008682 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	d016      	beq.n	8008692 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	3324      	adds	r3, #36	@ 0x24
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fec3 	bl	80093f4 <xTaskRemoveFromEventList>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00e      	beq.n	8008692 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00b      	beq.n	8008692 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	e007      	b.n	8008692 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008682:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008686:	3301      	adds	r3, #1
 8008688:	b2db      	uxtb	r3, r3
 800868a:	b25a      	sxtb	r2, r3
 800868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008692:	2301      	movs	r3, #1
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008696:	e001      	b.n	800869c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008698:	2300      	movs	r3, #0
 800869a:	637b      	str	r3, [r7, #52]	@ 0x34
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3738      	adds	r7, #56	@ 0x38
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08c      	sub	sp, #48	@ 0x30
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <xQueueReceive+0x32>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	623b      	str	r3, [r7, #32]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d103      	bne.n	80086f4 <xQueueReceive+0x40>
 80086ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <xQueueReceive+0x44>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e000      	b.n	80086fa <xQueueReceive+0x46>
 80086f8:	2300      	movs	r3, #0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10b      	bne.n	8008716 <xQueueReceive+0x62>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	61fb      	str	r3, [r7, #28]
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	e7fd      	b.n	8008712 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008716:	f001 f831 	bl	800977c <xTaskGetSchedulerState>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <xQueueReceive+0x72>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <xQueueReceive+0x76>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <xQueueReceive+0x78>
 800872a:	2300      	movs	r3, #0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10b      	bne.n	8008748 <xQueueReceive+0x94>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	61bb      	str	r3, [r7, #24]
}
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008748:	f001 fd9e 	bl	800a288 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800874c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008750:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01f      	beq.n	8008798 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800875c:	f000 f8f6 	bl	800894c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	1e5a      	subs	r2, r3, #1
 8008764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008766:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00f      	beq.n	8008790 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008772:	3310      	adds	r3, #16
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fe3d 	bl	80093f4 <xTaskRemoveFromEventList>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008780:	4b3c      	ldr	r3, [pc, #240]	@ (8008874 <xQueueReceive+0x1c0>)
 8008782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008790:	f001 fdaa 	bl	800a2e8 <vPortExitCritical>
				return pdPASS;
 8008794:	2301      	movs	r3, #1
 8008796:	e069      	b.n	800886c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d103      	bne.n	80087a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800879e:	f001 fda3 	bl	800a2e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e062      	b.n	800886c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d106      	bne.n	80087ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087ac:	f107 0310 	add.w	r3, r7, #16
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 fe83 	bl	80094bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087b6:	2301      	movs	r3, #1
 80087b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087ba:	f001 fd95 	bl	800a2e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087be:	f000 fbf3 	bl	8008fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087c2:	f001 fd61 	bl	800a288 <vPortEnterCritical>
 80087c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087cc:	b25b      	sxtb	r3, r3
 80087ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087d2:	d103      	bne.n	80087dc <xQueueReceive+0x128>
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087e2:	b25b      	sxtb	r3, r3
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e8:	d103      	bne.n	80087f2 <xQueueReceive+0x13e>
 80087ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087f2:	f001 fd79 	bl	800a2e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087f6:	1d3a      	adds	r2, r7, #4
 80087f8:	f107 0310 	add.w	r3, r7, #16
 80087fc:	4611      	mov	r1, r2
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fe72 	bl	80094e8 <xTaskCheckForTimeOut>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d123      	bne.n	8008852 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800880a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800880c:	f000 f916 	bl	8008a3c <prvIsQueueEmpty>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d017      	beq.n	8008846 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008818:	3324      	adds	r3, #36	@ 0x24
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fd96 	bl	8009350 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008826:	f000 f8b7 	bl	8008998 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800882a:	f000 fbcb 	bl	8008fc4 <xTaskResumeAll>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d189      	bne.n	8008748 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008834:	4b0f      	ldr	r3, [pc, #60]	@ (8008874 <xQueueReceive+0x1c0>)
 8008836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	e780      	b.n	8008748 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008848:	f000 f8a6 	bl	8008998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800884c:	f000 fbba 	bl	8008fc4 <xTaskResumeAll>
 8008850:	e77a      	b.n	8008748 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008854:	f000 f8a0 	bl	8008998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008858:	f000 fbb4 	bl	8008fc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800885c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800885e:	f000 f8ed 	bl	8008a3c <prvIsQueueEmpty>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	f43f af6f 	beq.w	8008748 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800886a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800886c:	4618      	mov	r0, r3
 800886e:	3730      	adds	r7, #48	@ 0x30
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	e000ed04 	.word	0xe000ed04

08008878 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10d      	bne.n	80088b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d14d      	bne.n	800893a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 ff88 	bl	80097b8 <xTaskPriorityDisinherit>
 80088a8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	605a      	str	r2, [r3, #4]
 80088b0:	e043      	b.n	800893a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d119      	bne.n	80088ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6898      	ldr	r0, [r3, #8]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c0:	461a      	mov	r2, r3
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	f003 fe73 	bl	800c5ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d0:	441a      	add	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d32b      	bcc.n	800893a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	609a      	str	r2, [r3, #8]
 80088ea:	e026      	b.n	800893a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68d8      	ldr	r0, [r3, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f4:	461a      	mov	r2, r3
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	f003 fe59 	bl	800c5ae <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008904:	425b      	negs	r3, r3
 8008906:	441a      	add	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d207      	bcs.n	8008928 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008920:	425b      	negs	r3, r3
 8008922:	441a      	add	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d105      	bne.n	800893a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	3b01      	subs	r3, #1
 8008938:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008942:	697b      	ldr	r3, [r7, #20]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895a:	2b00      	cmp	r3, #0
 800895c:	d018      	beq.n	8008990 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008966:	441a      	add	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	429a      	cmp	r2, r3
 8008976:	d303      	bcc.n	8008980 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68d9      	ldr	r1, [r3, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008988:	461a      	mov	r2, r3
 800898a:	6838      	ldr	r0, [r7, #0]
 800898c:	f003 fe0f 	bl	800c5ae <memcpy>
	}
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089a0:	f001 fc72 	bl	800a288 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089ac:	e011      	b.n	80089d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d012      	beq.n	80089dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3324      	adds	r3, #36	@ 0x24
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 fd1a 	bl	80093f4 <xTaskRemoveFromEventList>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089c6:	f000 fdf3 	bl	80095b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dce9      	bgt.n	80089ae <prvUnlockQueue+0x16>
 80089da:	e000      	b.n	80089de <prvUnlockQueue+0x46>
					break;
 80089dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	22ff      	movs	r2, #255	@ 0xff
 80089e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80089e6:	f001 fc7f 	bl	800a2e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089ea:	f001 fc4d 	bl	800a288 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089f6:	e011      	b.n	8008a1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d012      	beq.n	8008a26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3310      	adds	r3, #16
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fcf5 	bl	80093f4 <xTaskRemoveFromEventList>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a10:	f000 fdce 	bl	80095b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dce9      	bgt.n	80089f8 <prvUnlockQueue+0x60>
 8008a24:	e000      	b.n	8008a28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	22ff      	movs	r2, #255	@ 0xff
 8008a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a30:	f001 fc5a 	bl	800a2e8 <vPortExitCritical>
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a44:	f001 fc20 	bl	800a288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a50:	2301      	movs	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e001      	b.n	8008a5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a5a:	f001 fc45 	bl	800a2e8 <vPortExitCritical>

	return xReturn;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a70:	f001 fc0a 	bl	800a288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d102      	bne.n	8008a86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e001      	b.n	8008a8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a8a:	f001 fc2d 	bl	800a2e8 <vPortExitCritical>

	return xReturn;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	e014      	b.n	8008ad2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8008ae4 <vQueueAddToRegistry+0x4c>)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10b      	bne.n	8008acc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ab4:	490b      	ldr	r1, [pc, #44]	@ (8008ae4 <vQueueAddToRegistry+0x4c>)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008abe:	4a09      	ldr	r2, [pc, #36]	@ (8008ae4 <vQueueAddToRegistry+0x4c>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008aca:	e006      	b.n	8008ada <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b07      	cmp	r3, #7
 8008ad6:	d9e7      	bls.n	8008aa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ad8:	bf00      	nop
 8008ada:	bf00      	nop
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bc80      	pop	{r7}
 8008ae2:	4770      	bx	lr
 8008ae4:	200017a0 	.word	0x200017a0

08008ae8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008af8:	f001 fbc6 	bl	800a288 <vPortEnterCritical>
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b02:	b25b      	sxtb	r3, r3
 8008b04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b08:	d103      	bne.n	8008b12 <vQueueWaitForMessageRestricted+0x2a>
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b18:	b25b      	sxtb	r3, r3
 8008b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b1e:	d103      	bne.n	8008b28 <vQueueWaitForMessageRestricted+0x40>
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b28:	f001 fbde 	bl	800a2e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d106      	bne.n	8008b42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	3324      	adds	r3, #36	@ 0x24
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fc2d 	bl	800939c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b42:	6978      	ldr	r0, [r7, #20]
 8008b44:	f7ff ff28 	bl	8008998 <prvUnlockQueue>
	}
 8008b48:	bf00      	nop
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08e      	sub	sp, #56	@ 0x38
 8008b54:	af04      	add	r7, sp, #16
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10b      	bne.n	8008b7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	623b      	str	r3, [r7, #32]
}
 8008b76:	bf00      	nop
 8008b78:	bf00      	nop
 8008b7a:	e7fd      	b.n	8008b78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10b      	bne.n	8008b9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	61fb      	str	r3, [r7, #28]
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop
 8008b98:	e7fd      	b.n	8008b96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b9a:	2354      	movs	r3, #84	@ 0x54
 8008b9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	2b54      	cmp	r3, #84	@ 0x54
 8008ba2:	d00b      	beq.n	8008bbc <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	61bb      	str	r3, [r7, #24]
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	e7fd      	b.n	8008bb8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d01e      	beq.n	8008c00 <xTaskCreateStatic+0xb0>
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01b      	beq.n	8008c00 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bd0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9303      	str	r3, [sp, #12]
 8008bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be0:	9302      	str	r3, [sp, #8]
 8008be2:	f107 0314 	add.w	r3, r7, #20
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	68b9      	ldr	r1, [r7, #8]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 f850 	bl	8008c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008bfa:	f000 f8cd 	bl	8008d98 <prvAddNewTaskToReadyList>
 8008bfe:	e001      	b.n	8008c04 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8008c00:	2300      	movs	r3, #0
 8008c02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c04:	697b      	ldr	r3, [r7, #20]
	}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3728      	adds	r7, #40	@ 0x28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b08c      	sub	sp, #48	@ 0x30
 8008c12:	af04      	add	r7, sp, #16
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	603b      	str	r3, [r7, #0]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c1e:	88fb      	ldrh	r3, [r7, #6]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 fc34 	bl	800a490 <pvPortMalloc>
 8008c28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00e      	beq.n	8008c4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008c30:	2054      	movs	r0, #84	@ 0x54
 8008c32:	f001 fc2d 	bl	800a490 <pvPortMalloc>
 8008c36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c44:	e005      	b.n	8008c52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c46:	6978      	ldr	r0, [r7, #20]
 8008c48:	f001 fcea 	bl	800a620 <vPortFree>
 8008c4c:	e001      	b.n	8008c52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d017      	beq.n	8008c88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c60:	88fa      	ldrh	r2, [r7, #6]
 8008c62:	2300      	movs	r3, #0
 8008c64:	9303      	str	r3, [sp, #12]
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	9302      	str	r3, [sp, #8]
 8008c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6c:	9301      	str	r3, [sp, #4]
 8008c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 f80e 	bl	8008c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c7c:	69f8      	ldr	r0, [r7, #28]
 8008c7e:	f000 f88b 	bl	8008d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c82:	2301      	movs	r3, #1
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	e002      	b.n	8008c8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c8e:	69bb      	ldr	r3, [r7, #24]
	}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3720      	adds	r7, #32
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b088      	sub	sp, #32
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	f023 0307 	bic.w	r3, r3, #7
 8008cbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00b      	beq.n	8008ce2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	617b      	str	r3, [r7, #20]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	e012      	b.n	8008d0e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	4413      	add	r3, r2
 8008cee:	7819      	ldrb	r1, [r3, #0]
 8008cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3334      	adds	r3, #52	@ 0x34
 8008cf8:	460a      	mov	r2, r1
 8008cfa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	4413      	add	r3, r2
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d006      	beq.n	8008d16 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	61fb      	str	r3, [r7, #28]
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	2b0f      	cmp	r3, #15
 8008d12:	d9e9      	bls.n	8008ce8 <prvInitialiseNewTask+0x50>
 8008d14:	e000      	b.n	8008d18 <prvInitialiseNewTask+0x80>
		{
			break;
 8008d16:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d22:	2b06      	cmp	r3, #6
 8008d24:	d901      	bls.n	8008d2a <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d26:	2306      	movs	r3, #6
 8008d28:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d34:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d38:	2200      	movs	r2, #0
 8008d3a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3e:	3304      	adds	r3, #4
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff f982 	bl	800804a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	3318      	adds	r3, #24
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff f97d 	bl	800804a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d58:	f1c3 0207 	rsb	r2, r3, #7
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d64:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	2200      	movs	r2, #0
 8008d6a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	68f9      	ldr	r1, [r7, #12]
 8008d78:	69b8      	ldr	r0, [r7, #24]
 8008d7a:	f001 f9a3 	bl	800a0c4 <pxPortInitialiseStack>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d82:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d90:	bf00      	nop
 8008d92:	3720      	adds	r7, #32
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008da0:	f001 fa72 	bl	800a288 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008da4:	4b2a      	ldr	r3, [pc, #168]	@ (8008e50 <prvAddNewTaskToReadyList+0xb8>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3301      	adds	r3, #1
 8008daa:	4a29      	ldr	r2, [pc, #164]	@ (8008e50 <prvAddNewTaskToReadyList+0xb8>)
 8008dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008dae:	4b29      	ldr	r3, [pc, #164]	@ (8008e54 <prvAddNewTaskToReadyList+0xbc>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d109      	bne.n	8008dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008db6:	4a27      	ldr	r2, [pc, #156]	@ (8008e54 <prvAddNewTaskToReadyList+0xbc>)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008dbc:	4b24      	ldr	r3, [pc, #144]	@ (8008e50 <prvAddNewTaskToReadyList+0xb8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d110      	bne.n	8008de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008dc4:	f000 fc18 	bl	80095f8 <prvInitialiseTaskLists>
 8008dc8:	e00d      	b.n	8008de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008dca:	4b23      	ldr	r3, [pc, #140]	@ (8008e58 <prvAddNewTaskToReadyList+0xc0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d109      	bne.n	8008de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008dd2:	4b20      	ldr	r3, [pc, #128]	@ (8008e54 <prvAddNewTaskToReadyList+0xbc>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d802      	bhi.n	8008de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008de0:	4a1c      	ldr	r2, [pc, #112]	@ (8008e54 <prvAddNewTaskToReadyList+0xbc>)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008de6:	4b1d      	ldr	r3, [pc, #116]	@ (8008e5c <prvAddNewTaskToReadyList+0xc4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3301      	adds	r3, #1
 8008dec:	4a1b      	ldr	r2, [pc, #108]	@ (8008e5c <prvAddNewTaskToReadyList+0xc4>)
 8008dee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df4:	2201      	movs	r2, #1
 8008df6:	409a      	lsls	r2, r3
 8008df8:	4b19      	ldr	r3, [pc, #100]	@ (8008e60 <prvAddNewTaskToReadyList+0xc8>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	4a18      	ldr	r2, [pc, #96]	@ (8008e60 <prvAddNewTaskToReadyList+0xc8>)
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4a15      	ldr	r2, [pc, #84]	@ (8008e64 <prvAddNewTaskToReadyList+0xcc>)
 8008e10:	441a      	add	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3304      	adds	r3, #4
 8008e16:	4619      	mov	r1, r3
 8008e18:	4610      	mov	r0, r2
 8008e1a:	f7ff f922 	bl	8008062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e1e:	f001 fa63 	bl	800a2e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e22:	4b0d      	ldr	r3, [pc, #52]	@ (8008e58 <prvAddNewTaskToReadyList+0xc0>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00e      	beq.n	8008e48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e54 <prvAddNewTaskToReadyList+0xbc>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d207      	bcs.n	8008e48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e38:	4b0b      	ldr	r3, [pc, #44]	@ (8008e68 <prvAddNewTaskToReadyList+0xd0>)
 8008e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	200018e0 	.word	0x200018e0
 8008e54:	200017e0 	.word	0x200017e0
 8008e58:	200018ec 	.word	0x200018ec
 8008e5c:	200018fc 	.word	0x200018fc
 8008e60:	200018e8 	.word	0x200018e8
 8008e64:	200017e4 	.word	0x200017e4
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e74:	2300      	movs	r3, #0
 8008e76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d018      	beq.n	8008eb0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e7e:	4b14      	ldr	r3, [pc, #80]	@ (8008ed0 <vTaskDelay+0x64>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00b      	beq.n	8008e9e <vTaskDelay+0x32>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	60bb      	str	r3, [r7, #8]
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	e7fd      	b.n	8008e9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e9e:	f000 f883 	bl	8008fa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fd0f 	bl	80098c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008eaa:	f000 f88b 	bl	8008fc4 <xTaskResumeAll>
 8008eae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d107      	bne.n	8008ec6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008eb6:	4b07      	ldr	r3, [pc, #28]	@ (8008ed4 <vTaskDelay+0x68>)
 8008eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20001908 	.word	0x20001908
 8008ed4:	e000ed04 	.word	0xe000ed04

08008ed8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08a      	sub	sp, #40	@ 0x28
 8008edc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ee6:	463a      	mov	r2, r7
 8008ee8:	1d39      	adds	r1, r7, #4
 8008eea:	f107 0308 	add.w	r3, r7, #8
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f7 ff6e 	bl	8000dd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	9202      	str	r2, [sp, #8]
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	2300      	movs	r3, #0
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	2300      	movs	r3, #0
 8008f04:	460a      	mov	r2, r1
 8008f06:	4922      	ldr	r1, [pc, #136]	@ (8008f90 <vTaskStartScheduler+0xb8>)
 8008f08:	4822      	ldr	r0, [pc, #136]	@ (8008f94 <vTaskStartScheduler+0xbc>)
 8008f0a:	f7ff fe21 	bl	8008b50 <xTaskCreateStatic>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	4a21      	ldr	r2, [pc, #132]	@ (8008f98 <vTaskStartScheduler+0xc0>)
 8008f12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f14:	4b20      	ldr	r3, [pc, #128]	@ (8008f98 <vTaskStartScheduler+0xc0>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	e001      	b.n	8008f26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d102      	bne.n	8008f32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f2c:	f000 fd32 	bl	8009994 <xTimerCreateTimerTask>
 8008f30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d116      	bne.n	8008f66 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	613b      	str	r3, [r7, #16]
}
 8008f4a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f4c:	4b13      	ldr	r3, [pc, #76]	@ (8008f9c <vTaskStartScheduler+0xc4>)
 8008f4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f54:	4b12      	ldr	r3, [pc, #72]	@ (8008fa0 <vTaskStartScheduler+0xc8>)
 8008f56:	2201      	movs	r2, #1
 8008f58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008f5a:	4b12      	ldr	r3, [pc, #72]	@ (8008fa4 <vTaskStartScheduler+0xcc>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f60:	f001 f932 	bl	800a1c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f64:	e00f      	b.n	8008f86 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f6c:	d10b      	bne.n	8008f86 <vTaskStartScheduler+0xae>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	60fb      	str	r3, [r7, #12]
}
 8008f80:	bf00      	nop
 8008f82:	bf00      	nop
 8008f84:	e7fd      	b.n	8008f82 <vTaskStartScheduler+0xaa>
}
 8008f86:	bf00      	nop
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	0800e648 	.word	0x0800e648
 8008f94:	080095c9 	.word	0x080095c9
 8008f98:	20001904 	.word	0x20001904
 8008f9c:	20001900 	.word	0x20001900
 8008fa0:	200018ec 	.word	0x200018ec
 8008fa4:	200018e4 	.word	0x200018e4

08008fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008fac:	4b04      	ldr	r3, [pc, #16]	@ (8008fc0 <vTaskSuspendAll+0x18>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	4a03      	ldr	r2, [pc, #12]	@ (8008fc0 <vTaskSuspendAll+0x18>)
 8008fb4:	6013      	str	r3, [r2, #0]
}
 8008fb6:	bf00      	nop
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bc80      	pop	{r7}
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	20001908 	.word	0x20001908

08008fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008fd2:	4b42      	ldr	r3, [pc, #264]	@ (80090dc <xTaskResumeAll+0x118>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10b      	bne.n	8008ff2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	603b      	str	r3, [r7, #0]
}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	e7fd      	b.n	8008fee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ff2:	f001 f949 	bl	800a288 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ff6:	4b39      	ldr	r3, [pc, #228]	@ (80090dc <xTaskResumeAll+0x118>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	4a37      	ldr	r2, [pc, #220]	@ (80090dc <xTaskResumeAll+0x118>)
 8008ffe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009000:	4b36      	ldr	r3, [pc, #216]	@ (80090dc <xTaskResumeAll+0x118>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d161      	bne.n	80090cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009008:	4b35      	ldr	r3, [pc, #212]	@ (80090e0 <xTaskResumeAll+0x11c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d05d      	beq.n	80090cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009010:	e02e      	b.n	8009070 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009012:	4b34      	ldr	r3, [pc, #208]	@ (80090e4 <xTaskResumeAll+0x120>)
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3318      	adds	r3, #24
 800901e:	4618      	mov	r0, r3
 8009020:	f7ff f87a 	bl	8008118 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3304      	adds	r3, #4
 8009028:	4618      	mov	r0, r3
 800902a:	f7ff f875 	bl	8008118 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009032:	2201      	movs	r2, #1
 8009034:	409a      	lsls	r2, r3
 8009036:	4b2c      	ldr	r3, [pc, #176]	@ (80090e8 <xTaskResumeAll+0x124>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4313      	orrs	r3, r2
 800903c:	4a2a      	ldr	r2, [pc, #168]	@ (80090e8 <xTaskResumeAll+0x124>)
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009044:	4613      	mov	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4a27      	ldr	r2, [pc, #156]	@ (80090ec <xTaskResumeAll+0x128>)
 800904e:	441a      	add	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3304      	adds	r3, #4
 8009054:	4619      	mov	r1, r3
 8009056:	4610      	mov	r0, r2
 8009058:	f7ff f803 	bl	8008062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009060:	4b23      	ldr	r3, [pc, #140]	@ (80090f0 <xTaskResumeAll+0x12c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009066:	429a      	cmp	r2, r3
 8009068:	d302      	bcc.n	8009070 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800906a:	4b22      	ldr	r3, [pc, #136]	@ (80090f4 <xTaskResumeAll+0x130>)
 800906c:	2201      	movs	r2, #1
 800906e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009070:	4b1c      	ldr	r3, [pc, #112]	@ (80090e4 <xTaskResumeAll+0x120>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1cc      	bne.n	8009012 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800907e:	f000 fb59 	bl	8009734 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009082:	4b1d      	ldr	r3, [pc, #116]	@ (80090f8 <xTaskResumeAll+0x134>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d010      	beq.n	80090b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800908e:	f000 f845 	bl	800911c <xTaskIncrementTick>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009098:	4b16      	ldr	r3, [pc, #88]	@ (80090f4 <xTaskResumeAll+0x130>)
 800909a:	2201      	movs	r2, #1
 800909c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1f1      	bne.n	800908e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80090aa:	4b13      	ldr	r3, [pc, #76]	@ (80090f8 <xTaskResumeAll+0x134>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090b0:	4b10      	ldr	r3, [pc, #64]	@ (80090f4 <xTaskResumeAll+0x130>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d009      	beq.n	80090cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090bc:	4b0f      	ldr	r3, [pc, #60]	@ (80090fc <xTaskResumeAll+0x138>)
 80090be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090cc:	f001 f90c 	bl	800a2e8 <vPortExitCritical>

	return xAlreadyYielded;
 80090d0:	68bb      	ldr	r3, [r7, #8]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20001908 	.word	0x20001908
 80090e0:	200018e0 	.word	0x200018e0
 80090e4:	200018a0 	.word	0x200018a0
 80090e8:	200018e8 	.word	0x200018e8
 80090ec:	200017e4 	.word	0x200017e4
 80090f0:	200017e0 	.word	0x200017e0
 80090f4:	200018f4 	.word	0x200018f4
 80090f8:	200018f0 	.word	0x200018f0
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009106:	4b04      	ldr	r3, [pc, #16]	@ (8009118 <xTaskGetTickCount+0x18>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800910c:	687b      	ldr	r3, [r7, #4]
}
 800910e:	4618      	mov	r0, r3
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr
 8009118:	200018e4 	.word	0x200018e4

0800911c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009122:	2300      	movs	r3, #0
 8009124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009126:	4b51      	ldr	r3, [pc, #324]	@ (800926c <xTaskIncrementTick+0x150>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	f040 808e 	bne.w	800924c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009130:	4b4f      	ldr	r3, [pc, #316]	@ (8009270 <xTaskIncrementTick+0x154>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3301      	adds	r3, #1
 8009136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009138:	4a4d      	ldr	r2, [pc, #308]	@ (8009270 <xTaskIncrementTick+0x154>)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d121      	bne.n	8009188 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009144:	4b4b      	ldr	r3, [pc, #300]	@ (8009274 <xTaskIncrementTick+0x158>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <xTaskIncrementTick+0x4a>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	603b      	str	r3, [r7, #0]
}
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	e7fd      	b.n	8009162 <xTaskIncrementTick+0x46>
 8009166:	4b43      	ldr	r3, [pc, #268]	@ (8009274 <xTaskIncrementTick+0x158>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	4b42      	ldr	r3, [pc, #264]	@ (8009278 <xTaskIncrementTick+0x15c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a40      	ldr	r2, [pc, #256]	@ (8009274 <xTaskIncrementTick+0x158>)
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	4a40      	ldr	r2, [pc, #256]	@ (8009278 <xTaskIncrementTick+0x15c>)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	4b40      	ldr	r3, [pc, #256]	@ (800927c <xTaskIncrementTick+0x160>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3301      	adds	r3, #1
 8009180:	4a3e      	ldr	r2, [pc, #248]	@ (800927c <xTaskIncrementTick+0x160>)
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	f000 fad6 	bl	8009734 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009188:	4b3d      	ldr	r3, [pc, #244]	@ (8009280 <xTaskIncrementTick+0x164>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	d34d      	bcc.n	800922e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009192:	4b38      	ldr	r3, [pc, #224]	@ (8009274 <xTaskIncrementTick+0x158>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <xTaskIncrementTick+0x84>
 800919c:	2301      	movs	r3, #1
 800919e:	e000      	b.n	80091a2 <xTaskIncrementTick+0x86>
 80091a0:	2300      	movs	r3, #0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d004      	beq.n	80091b0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a6:	4b36      	ldr	r3, [pc, #216]	@ (8009280 <xTaskIncrementTick+0x164>)
 80091a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091ac:	601a      	str	r2, [r3, #0]
					break;
 80091ae:	e03e      	b.n	800922e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80091b0:	4b30      	ldr	r3, [pc, #192]	@ (8009274 <xTaskIncrementTick+0x158>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d203      	bcs.n	80091d0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091c8:	4a2d      	ldr	r2, [pc, #180]	@ (8009280 <xTaskIncrementTick+0x164>)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6013      	str	r3, [r2, #0]
						break;
 80091ce:	e02e      	b.n	800922e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	3304      	adds	r3, #4
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe ff9f 	bl	8008118 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d004      	beq.n	80091ec <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	3318      	adds	r3, #24
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe ff96 	bl	8008118 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f0:	2201      	movs	r2, #1
 80091f2:	409a      	lsls	r2, r3
 80091f4:	4b23      	ldr	r3, [pc, #140]	@ (8009284 <xTaskIncrementTick+0x168>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	4a22      	ldr	r2, [pc, #136]	@ (8009284 <xTaskIncrementTick+0x168>)
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4a1f      	ldr	r2, [pc, #124]	@ (8009288 <xTaskIncrementTick+0x16c>)
 800920c:	441a      	add	r2, r3
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	3304      	adds	r3, #4
 8009212:	4619      	mov	r1, r3
 8009214:	4610      	mov	r0, r2
 8009216:	f7fe ff24 	bl	8008062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800921e:	4b1b      	ldr	r3, [pc, #108]	@ (800928c <xTaskIncrementTick+0x170>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009224:	429a      	cmp	r2, r3
 8009226:	d3b4      	bcc.n	8009192 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009228:	2301      	movs	r3, #1
 800922a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800922c:	e7b1      	b.n	8009192 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800922e:	4b17      	ldr	r3, [pc, #92]	@ (800928c <xTaskIncrementTick+0x170>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009234:	4914      	ldr	r1, [pc, #80]	@ (8009288 <xTaskIncrementTick+0x16c>)
 8009236:	4613      	mov	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	440b      	add	r3, r1
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d907      	bls.n	8009256 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009246:	2301      	movs	r3, #1
 8009248:	617b      	str	r3, [r7, #20]
 800924a:	e004      	b.n	8009256 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800924c:	4b10      	ldr	r3, [pc, #64]	@ (8009290 <xTaskIncrementTick+0x174>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3301      	adds	r3, #1
 8009252:	4a0f      	ldr	r2, [pc, #60]	@ (8009290 <xTaskIncrementTick+0x174>)
 8009254:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009256:	4b0f      	ldr	r3, [pc, #60]	@ (8009294 <xTaskIncrementTick+0x178>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800925e:	2301      	movs	r3, #1
 8009260:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009262:	697b      	ldr	r3, [r7, #20]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20001908 	.word	0x20001908
 8009270:	200018e4 	.word	0x200018e4
 8009274:	20001898 	.word	0x20001898
 8009278:	2000189c 	.word	0x2000189c
 800927c:	200018f8 	.word	0x200018f8
 8009280:	20001900 	.word	0x20001900
 8009284:	200018e8 	.word	0x200018e8
 8009288:	200017e4 	.word	0x200017e4
 800928c:	200017e0 	.word	0x200017e0
 8009290:	200018f0 	.word	0x200018f0
 8009294:	200018f4 	.word	0x200018f4

08009298 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800929e:	4b27      	ldr	r3, [pc, #156]	@ (800933c <vTaskSwitchContext+0xa4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092a6:	4b26      	ldr	r3, [pc, #152]	@ (8009340 <vTaskSwitchContext+0xa8>)
 80092a8:	2201      	movs	r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092ac:	e040      	b.n	8009330 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80092ae:	4b24      	ldr	r3, [pc, #144]	@ (8009340 <vTaskSwitchContext+0xa8>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80092b4:	4b23      	ldr	r3, [pc, #140]	@ (8009344 <vTaskSwitchContext+0xac>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	fab3 f383 	clz	r3, r3
 80092c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092c2:	7afb      	ldrb	r3, [r7, #11]
 80092c4:	f1c3 031f 	rsb	r3, r3, #31
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	491f      	ldr	r1, [pc, #124]	@ (8009348 <vTaskSwitchContext+0xb0>)
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	4613      	mov	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	440b      	add	r3, r1
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10b      	bne.n	80092f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	607b      	str	r3, [r7, #4]
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	e7fd      	b.n	80092f2 <vTaskSwitchContext+0x5a>
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	4613      	mov	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4a11      	ldr	r2, [pc, #68]	@ (8009348 <vTaskSwitchContext+0xb0>)
 8009302:	4413      	add	r3, r2
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	605a      	str	r2, [r3, #4]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	3308      	adds	r3, #8
 8009318:	429a      	cmp	r2, r3
 800931a:	d104      	bne.n	8009326 <vTaskSwitchContext+0x8e>
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	605a      	str	r2, [r3, #4]
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	4a07      	ldr	r2, [pc, #28]	@ (800934c <vTaskSwitchContext+0xb4>)
 800932e:	6013      	str	r3, [r2, #0]
}
 8009330:	bf00      	nop
 8009332:	371c      	adds	r7, #28
 8009334:	46bd      	mov	sp, r7
 8009336:	bc80      	pop	{r7}
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	20001908 	.word	0x20001908
 8009340:	200018f4 	.word	0x200018f4
 8009344:	200018e8 	.word	0x200018e8
 8009348:	200017e4 	.word	0x200017e4
 800934c:	200017e0 	.word	0x200017e0

08009350 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10b      	bne.n	8009378 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	60fb      	str	r3, [r7, #12]
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	e7fd      	b.n	8009374 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009378:	4b07      	ldr	r3, [pc, #28]	@ (8009398 <vTaskPlaceOnEventList+0x48>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3318      	adds	r3, #24
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7fe fe91 	bl	80080a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009386:	2101      	movs	r1, #1
 8009388:	6838      	ldr	r0, [r7, #0]
 800938a:	f000 fa9d 	bl	80098c8 <prvAddCurrentTaskToDelayedList>
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	200017e0 	.word	0x200017e0

0800939c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10b      	bne.n	80093c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	617b      	str	r3, [r7, #20]
}
 80093c0:	bf00      	nop
 80093c2:	bf00      	nop
 80093c4:	e7fd      	b.n	80093c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093c6:	4b0a      	ldr	r3, [pc, #40]	@ (80093f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3318      	adds	r3, #24
 80093cc:	4619      	mov	r1, r3
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f7fe fe47 	bl	8008062 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80093da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	68b8      	ldr	r0, [r7, #8]
 80093e4:	f000 fa70 	bl	80098c8 <prvAddCurrentTaskToDelayedList>
	}
 80093e8:	bf00      	nop
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	200017e0 	.word	0x200017e0

080093f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10b      	bne.n	8009422 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	60fb      	str	r3, [r7, #12]
}
 800941c:	bf00      	nop
 800941e:	bf00      	nop
 8009420:	e7fd      	b.n	800941e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	3318      	adds	r3, #24
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fe76 	bl	8008118 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800942c:	4b1d      	ldr	r3, [pc, #116]	@ (80094a4 <xTaskRemoveFromEventList+0xb0>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d11c      	bne.n	800946e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	3304      	adds	r3, #4
 8009438:	4618      	mov	r0, r3
 800943a:	f7fe fe6d 	bl	8008118 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009442:	2201      	movs	r2, #1
 8009444:	409a      	lsls	r2, r3
 8009446:	4b18      	ldr	r3, [pc, #96]	@ (80094a8 <xTaskRemoveFromEventList+0xb4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4313      	orrs	r3, r2
 800944c:	4a16      	ldr	r2, [pc, #88]	@ (80094a8 <xTaskRemoveFromEventList+0xb4>)
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4a13      	ldr	r2, [pc, #76]	@ (80094ac <xTaskRemoveFromEventList+0xb8>)
 800945e:	441a      	add	r2, r3
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	3304      	adds	r3, #4
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7fe fdfb 	bl	8008062 <vListInsertEnd>
 800946c:	e005      	b.n	800947a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	3318      	adds	r3, #24
 8009472:	4619      	mov	r1, r3
 8009474:	480e      	ldr	r0, [pc, #56]	@ (80094b0 <xTaskRemoveFromEventList+0xbc>)
 8009476:	f7fe fdf4 	bl	8008062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800947e:	4b0d      	ldr	r3, [pc, #52]	@ (80094b4 <xTaskRemoveFromEventList+0xc0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009484:	429a      	cmp	r2, r3
 8009486:	d905      	bls.n	8009494 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009488:	2301      	movs	r3, #1
 800948a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800948c:	4b0a      	ldr	r3, [pc, #40]	@ (80094b8 <xTaskRemoveFromEventList+0xc4>)
 800948e:	2201      	movs	r2, #1
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	e001      	b.n	8009498 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009494:	2300      	movs	r3, #0
 8009496:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009498:	697b      	ldr	r3, [r7, #20]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20001908 	.word	0x20001908
 80094a8:	200018e8 	.word	0x200018e8
 80094ac:	200017e4 	.word	0x200017e4
 80094b0:	200018a0 	.word	0x200018a0
 80094b4:	200017e0 	.word	0x200017e0
 80094b8:	200018f4 	.word	0x200018f4

080094bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094c4:	4b06      	ldr	r3, [pc, #24]	@ (80094e0 <vTaskInternalSetTimeOutState+0x24>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094cc:	4b05      	ldr	r3, [pc, #20]	@ (80094e4 <vTaskInternalSetTimeOutState+0x28>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	605a      	str	r2, [r3, #4]
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	bc80      	pop	{r7}
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	200018f8 	.word	0x200018f8
 80094e4:	200018e4 	.word	0x200018e4

080094e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10b      	bne.n	8009510 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80094f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	613b      	str	r3, [r7, #16]
}
 800950a:	bf00      	nop
 800950c:	bf00      	nop
 800950e:	e7fd      	b.n	800950c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10b      	bne.n	800952e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	60fb      	str	r3, [r7, #12]
}
 8009528:	bf00      	nop
 800952a:	bf00      	nop
 800952c:	e7fd      	b.n	800952a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800952e:	f000 feab 	bl	800a288 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009532:	4b1d      	ldr	r3, [pc, #116]	@ (80095a8 <xTaskCheckForTimeOut+0xc0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800954a:	d102      	bne.n	8009552 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800954c:	2300      	movs	r3, #0
 800954e:	61fb      	str	r3, [r7, #28]
 8009550:	e023      	b.n	800959a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4b15      	ldr	r3, [pc, #84]	@ (80095ac <xTaskCheckForTimeOut+0xc4>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d007      	beq.n	800956e <xTaskCheckForTimeOut+0x86>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	429a      	cmp	r2, r3
 8009566:	d302      	bcc.n	800956e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009568:	2301      	movs	r3, #1
 800956a:	61fb      	str	r3, [r7, #28]
 800956c:	e015      	b.n	800959a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	429a      	cmp	r2, r3
 8009576:	d20b      	bcs.n	8009590 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	1ad2      	subs	r2, r2, r3
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ff99 	bl	80094bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800958a:	2300      	movs	r3, #0
 800958c:	61fb      	str	r3, [r7, #28]
 800958e:	e004      	b.n	800959a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009596:	2301      	movs	r3, #1
 8009598:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800959a:	f000 fea5 	bl	800a2e8 <vPortExitCritical>

	return xReturn;
 800959e:	69fb      	ldr	r3, [r7, #28]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3720      	adds	r7, #32
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	200018e4 	.word	0x200018e4
 80095ac:	200018f8 	.word	0x200018f8

080095b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095b0:	b480      	push	{r7}
 80095b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095b4:	4b03      	ldr	r3, [pc, #12]	@ (80095c4 <vTaskMissedYield+0x14>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	601a      	str	r2, [r3, #0]
}
 80095ba:	bf00      	nop
 80095bc:	46bd      	mov	sp, r7
 80095be:	bc80      	pop	{r7}
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	200018f4 	.word	0x200018f4

080095c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095d0:	f000 f852 	bl	8009678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095d4:	4b06      	ldr	r3, [pc, #24]	@ (80095f0 <prvIdleTask+0x28>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d9f9      	bls.n	80095d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80095dc:	4b05      	ldr	r3, [pc, #20]	@ (80095f4 <prvIdleTask+0x2c>)
 80095de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095ec:	e7f0      	b.n	80095d0 <prvIdleTask+0x8>
 80095ee:	bf00      	nop
 80095f0:	200017e4 	.word	0x200017e4
 80095f4:	e000ed04 	.word	0xe000ed04

080095f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095fe:	2300      	movs	r3, #0
 8009600:	607b      	str	r3, [r7, #4]
 8009602:	e00c      	b.n	800961e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4a12      	ldr	r2, [pc, #72]	@ (8009658 <prvInitialiseTaskLists+0x60>)
 8009610:	4413      	add	r3, r2
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fcfa 	bl	800800c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3301      	adds	r3, #1
 800961c:	607b      	str	r3, [r7, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b06      	cmp	r3, #6
 8009622:	d9ef      	bls.n	8009604 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009624:	480d      	ldr	r0, [pc, #52]	@ (800965c <prvInitialiseTaskLists+0x64>)
 8009626:	f7fe fcf1 	bl	800800c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800962a:	480d      	ldr	r0, [pc, #52]	@ (8009660 <prvInitialiseTaskLists+0x68>)
 800962c:	f7fe fcee 	bl	800800c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009630:	480c      	ldr	r0, [pc, #48]	@ (8009664 <prvInitialiseTaskLists+0x6c>)
 8009632:	f7fe fceb 	bl	800800c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009636:	480c      	ldr	r0, [pc, #48]	@ (8009668 <prvInitialiseTaskLists+0x70>)
 8009638:	f7fe fce8 	bl	800800c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800963c:	480b      	ldr	r0, [pc, #44]	@ (800966c <prvInitialiseTaskLists+0x74>)
 800963e:	f7fe fce5 	bl	800800c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009642:	4b0b      	ldr	r3, [pc, #44]	@ (8009670 <prvInitialiseTaskLists+0x78>)
 8009644:	4a05      	ldr	r2, [pc, #20]	@ (800965c <prvInitialiseTaskLists+0x64>)
 8009646:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009648:	4b0a      	ldr	r3, [pc, #40]	@ (8009674 <prvInitialiseTaskLists+0x7c>)
 800964a:	4a05      	ldr	r2, [pc, #20]	@ (8009660 <prvInitialiseTaskLists+0x68>)
 800964c:	601a      	str	r2, [r3, #0]
}
 800964e:	bf00      	nop
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	200017e4 	.word	0x200017e4
 800965c:	20001870 	.word	0x20001870
 8009660:	20001884 	.word	0x20001884
 8009664:	200018a0 	.word	0x200018a0
 8009668:	200018b4 	.word	0x200018b4
 800966c:	200018cc 	.word	0x200018cc
 8009670:	20001898 	.word	0x20001898
 8009674:	2000189c 	.word	0x2000189c

08009678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800967e:	e019      	b.n	80096b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009680:	f000 fe02 	bl	800a288 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009684:	4b10      	ldr	r3, [pc, #64]	@ (80096c8 <prvCheckTasksWaitingTermination+0x50>)
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3304      	adds	r3, #4
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe fd41 	bl	8008118 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009696:	4b0d      	ldr	r3, [pc, #52]	@ (80096cc <prvCheckTasksWaitingTermination+0x54>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3b01      	subs	r3, #1
 800969c:	4a0b      	ldr	r2, [pc, #44]	@ (80096cc <prvCheckTasksWaitingTermination+0x54>)
 800969e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096a0:	4b0b      	ldr	r3, [pc, #44]	@ (80096d0 <prvCheckTasksWaitingTermination+0x58>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	4a0a      	ldr	r2, [pc, #40]	@ (80096d0 <prvCheckTasksWaitingTermination+0x58>)
 80096a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80096aa:	f000 fe1d 	bl	800a2e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f810 	bl	80096d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096b4:	4b06      	ldr	r3, [pc, #24]	@ (80096d0 <prvCheckTasksWaitingTermination+0x58>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e1      	bne.n	8009680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	200018b4 	.word	0x200018b4
 80096cc:	200018e0 	.word	0x200018e0
 80096d0:	200018c8 	.word	0x200018c8

080096d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d108      	bne.n	80096f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 ff98 	bl	800a620 <vPortFree>
				vPortFree( pxTCB );
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 ff95 	bl	800a620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096f6:	e019      	b.n	800972c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d103      	bne.n	800970a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 ff8c 	bl	800a620 <vPortFree>
	}
 8009708:	e010      	b.n	800972c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009710:	2b02      	cmp	r3, #2
 8009712:	d00b      	beq.n	800972c <prvDeleteTCB+0x58>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	60fb      	str	r3, [r7, #12]
}
 8009726:	bf00      	nop
 8009728:	bf00      	nop
 800972a:	e7fd      	b.n	8009728 <prvDeleteTCB+0x54>
	}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800973a:	4b0e      	ldr	r3, [pc, #56]	@ (8009774 <prvResetNextTaskUnblockTime+0x40>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <prvResetNextTaskUnblockTime+0x14>
 8009744:	2301      	movs	r3, #1
 8009746:	e000      	b.n	800974a <prvResetNextTaskUnblockTime+0x16>
 8009748:	2300      	movs	r3, #0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d004      	beq.n	8009758 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800974e:	4b0a      	ldr	r3, [pc, #40]	@ (8009778 <prvResetNextTaskUnblockTime+0x44>)
 8009750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009754:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009756:	e008      	b.n	800976a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009758:	4b06      	ldr	r3, [pc, #24]	@ (8009774 <prvResetNextTaskUnblockTime+0x40>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	4a04      	ldr	r2, [pc, #16]	@ (8009778 <prvResetNextTaskUnblockTime+0x44>)
 8009768:	6013      	str	r3, [r2, #0]
}
 800976a:	bf00      	nop
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	bc80      	pop	{r7}
 8009772:	4770      	bx	lr
 8009774:	20001898 	.word	0x20001898
 8009778:	20001900 	.word	0x20001900

0800977c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009782:	4b0b      	ldr	r3, [pc, #44]	@ (80097b0 <xTaskGetSchedulerState+0x34>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d102      	bne.n	8009790 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800978a:	2301      	movs	r3, #1
 800978c:	607b      	str	r3, [r7, #4]
 800978e:	e008      	b.n	80097a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009790:	4b08      	ldr	r3, [pc, #32]	@ (80097b4 <xTaskGetSchedulerState+0x38>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d102      	bne.n	800979e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009798:	2302      	movs	r3, #2
 800979a:	607b      	str	r3, [r7, #4]
 800979c:	e001      	b.n	80097a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800979e:	2300      	movs	r3, #0
 80097a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097a2:	687b      	ldr	r3, [r7, #4]
	}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bc80      	pop	{r7}
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	200018ec 	.word	0x200018ec
 80097b4:	20001908 	.word	0x20001908

080097b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097c4:	2300      	movs	r3, #0
 80097c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d070      	beq.n	80098b0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097ce:	4b3b      	ldr	r3, [pc, #236]	@ (80098bc <xTaskPriorityDisinherit+0x104>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d00b      	beq.n	80097f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80097d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	60fb      	str	r3, [r7, #12]
}
 80097ea:	bf00      	nop
 80097ec:	bf00      	nop
 80097ee:	e7fd      	b.n	80097ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10b      	bne.n	8009810 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	60bb      	str	r3, [r7, #8]
}
 800980a:	bf00      	nop
 800980c:	bf00      	nop
 800980e:	e7fd      	b.n	800980c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009814:	1e5a      	subs	r2, r3, #1
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009822:	429a      	cmp	r2, r3
 8009824:	d044      	beq.n	80098b0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800982a:	2b00      	cmp	r3, #0
 800982c:	d140      	bne.n	80098b0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	3304      	adds	r3, #4
 8009832:	4618      	mov	r0, r3
 8009834:	f7fe fc70 	bl	8008118 <uxListRemove>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d115      	bne.n	800986a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009842:	491f      	ldr	r1, [pc, #124]	@ (80098c0 <xTaskPriorityDisinherit+0x108>)
 8009844:	4613      	mov	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	440b      	add	r3, r1
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <xTaskPriorityDisinherit+0xb2>
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009858:	2201      	movs	r2, #1
 800985a:	fa02 f303 	lsl.w	r3, r2, r3
 800985e:	43da      	mvns	r2, r3
 8009860:	4b18      	ldr	r3, [pc, #96]	@ (80098c4 <xTaskPriorityDisinherit+0x10c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4013      	ands	r3, r2
 8009866:	4a17      	ldr	r2, [pc, #92]	@ (80098c4 <xTaskPriorityDisinherit+0x10c>)
 8009868:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009876:	f1c3 0207 	rsb	r2, r3, #7
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009882:	2201      	movs	r2, #1
 8009884:	409a      	lsls	r2, r3
 8009886:	4b0f      	ldr	r3, [pc, #60]	@ (80098c4 <xTaskPriorityDisinherit+0x10c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4313      	orrs	r3, r2
 800988c:	4a0d      	ldr	r2, [pc, #52]	@ (80098c4 <xTaskPriorityDisinherit+0x10c>)
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4a08      	ldr	r2, [pc, #32]	@ (80098c0 <xTaskPriorityDisinherit+0x108>)
 800989e:	441a      	add	r2, r3
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	3304      	adds	r3, #4
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f7fe fbdb 	bl	8008062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098ac:	2301      	movs	r3, #1
 80098ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098b0:	697b      	ldr	r3, [r7, #20]
	}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	200017e0 	.word	0x200017e0
 80098c0:	200017e4 	.word	0x200017e4
 80098c4:	200018e8 	.word	0x200018e8

080098c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098d2:	4b29      	ldr	r3, [pc, #164]	@ (8009978 <prvAddCurrentTaskToDelayedList+0xb0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098d8:	4b28      	ldr	r3, [pc, #160]	@ (800997c <prvAddCurrentTaskToDelayedList+0xb4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3304      	adds	r3, #4
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fc1a 	bl	8008118 <uxListRemove>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10b      	bne.n	8009902 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80098ea:	4b24      	ldr	r3, [pc, #144]	@ (800997c <prvAddCurrentTaskToDelayedList+0xb4>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f0:	2201      	movs	r2, #1
 80098f2:	fa02 f303 	lsl.w	r3, r2, r3
 80098f6:	43da      	mvns	r2, r3
 80098f8:	4b21      	ldr	r3, [pc, #132]	@ (8009980 <prvAddCurrentTaskToDelayedList+0xb8>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4013      	ands	r3, r2
 80098fe:	4a20      	ldr	r2, [pc, #128]	@ (8009980 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009900:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009908:	d10a      	bne.n	8009920 <prvAddCurrentTaskToDelayedList+0x58>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d007      	beq.n	8009920 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009910:	4b1a      	ldr	r3, [pc, #104]	@ (800997c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3304      	adds	r3, #4
 8009916:	4619      	mov	r1, r3
 8009918:	481a      	ldr	r0, [pc, #104]	@ (8009984 <prvAddCurrentTaskToDelayedList+0xbc>)
 800991a:	f7fe fba2 	bl	8008062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800991e:	e026      	b.n	800996e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4413      	add	r3, r2
 8009926:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009928:	4b14      	ldr	r3, [pc, #80]	@ (800997c <prvAddCurrentTaskToDelayedList+0xb4>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	429a      	cmp	r2, r3
 8009936:	d209      	bcs.n	800994c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009938:	4b13      	ldr	r3, [pc, #76]	@ (8009988 <prvAddCurrentTaskToDelayedList+0xc0>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	4b0f      	ldr	r3, [pc, #60]	@ (800997c <prvAddCurrentTaskToDelayedList+0xb4>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3304      	adds	r3, #4
 8009942:	4619      	mov	r1, r3
 8009944:	4610      	mov	r0, r2
 8009946:	f7fe fbaf 	bl	80080a8 <vListInsert>
}
 800994a:	e010      	b.n	800996e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800994c:	4b0f      	ldr	r3, [pc, #60]	@ (800998c <prvAddCurrentTaskToDelayedList+0xc4>)
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	4b0a      	ldr	r3, [pc, #40]	@ (800997c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3304      	adds	r3, #4
 8009956:	4619      	mov	r1, r3
 8009958:	4610      	mov	r0, r2
 800995a:	f7fe fba5 	bl	80080a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800995e:	4b0c      	ldr	r3, [pc, #48]	@ (8009990 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	429a      	cmp	r2, r3
 8009966:	d202      	bcs.n	800996e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009968:	4a09      	ldr	r2, [pc, #36]	@ (8009990 <prvAddCurrentTaskToDelayedList+0xc8>)
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	6013      	str	r3, [r2, #0]
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200018e4 	.word	0x200018e4
 800997c:	200017e0 	.word	0x200017e0
 8009980:	200018e8 	.word	0x200018e8
 8009984:	200018cc 	.word	0x200018cc
 8009988:	2000189c 	.word	0x2000189c
 800998c:	20001898 	.word	0x20001898
 8009990:	20001900 	.word	0x20001900

08009994 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08a      	sub	sp, #40	@ 0x28
 8009998:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800999a:	2300      	movs	r3, #0
 800999c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800999e:	f000 fb51 	bl	800a044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a18 <xTimerCreateTimerTask+0x84>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d021      	beq.n	80099ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099b2:	1d3a      	adds	r2, r7, #4
 80099b4:	f107 0108 	add.w	r1, r7, #8
 80099b8:	f107 030c 	add.w	r3, r7, #12
 80099bc:	4618      	mov	r0, r3
 80099be:	f7f7 fa1f 	bl	8000e00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	9202      	str	r2, [sp, #8]
 80099ca:	9301      	str	r3, [sp, #4]
 80099cc:	2306      	movs	r3, #6
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	2300      	movs	r3, #0
 80099d2:	460a      	mov	r2, r1
 80099d4:	4911      	ldr	r1, [pc, #68]	@ (8009a1c <xTimerCreateTimerTask+0x88>)
 80099d6:	4812      	ldr	r0, [pc, #72]	@ (8009a20 <xTimerCreateTimerTask+0x8c>)
 80099d8:	f7ff f8ba 	bl	8008b50 <xTaskCreateStatic>
 80099dc:	4603      	mov	r3, r0
 80099de:	4a11      	ldr	r2, [pc, #68]	@ (8009a24 <xTimerCreateTimerTask+0x90>)
 80099e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099e2:	4b10      	ldr	r3, [pc, #64]	@ (8009a24 <xTimerCreateTimerTask+0x90>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099ea:	2301      	movs	r3, #1
 80099ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10b      	bne.n	8009a0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	613b      	str	r3, [r7, #16]
}
 8009a06:	bf00      	nop
 8009a08:	bf00      	nop
 8009a0a:	e7fd      	b.n	8009a08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a0c:	697b      	ldr	r3, [r7, #20]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	2000193c 	.word	0x2000193c
 8009a1c:	0800e650 	.word	0x0800e650
 8009a20:	08009c71 	.word	0x08009c71
 8009a24:	20001940 	.word	0x20001940

08009a28 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af02      	add	r7, sp, #8
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009a36:	202c      	movs	r0, #44	@ 0x2c
 8009a38:	f000 fd2a 	bl	800a490 <pvPortMalloc>
 8009a3c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00d      	beq.n	8009a60 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	9301      	str	r3, [sp, #4]
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f848 	bl	8009ae8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009a60:	697b      	ldr	r3, [r7, #20]
	}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b08a      	sub	sp, #40	@ 0x28
 8009a6e:	af02      	add	r7, sp, #8
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	60b9      	str	r1, [r7, #8]
 8009a74:	607a      	str	r2, [r7, #4]
 8009a76:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009a78:	232c      	movs	r3, #44	@ 0x2c
 8009a7a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2b2c      	cmp	r3, #44	@ 0x2c
 8009a80:	d00b      	beq.n	8009a9a <xTimerCreateStatic+0x30>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	61bb      	str	r3, [r7, #24]
}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop
 8009a98:	e7fd      	b.n	8009a96 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10b      	bne.n	8009ab8 <xTimerCreateStatic+0x4e>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	617b      	str	r3, [r7, #20]
}
 8009ab2:	bf00      	nop
 8009ab4:	bf00      	nop
 8009ab6:	e7fd      	b.n	8009ab4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aba:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00d      	beq.n	8009ade <xTimerCreateStatic+0x74>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 f809 	bl	8009ae8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8009ade:	69fb      	ldr	r3, [r7, #28]
	}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10b      	bne.n	8009b14 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	617b      	str	r3, [r7, #20]
}
 8009b0e:	bf00      	nop
 8009b10:	bf00      	nop
 8009b12:	e7fd      	b.n	8009b10 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d015      	beq.n	8009b46 <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009b1a:	f000 fa93 	bl	800a044 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b38:	6a3a      	ldr	r2, [r7, #32]
 8009b3a:	625a      	str	r2, [r3, #36]	@ 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fa82 	bl	800804a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009b46:	bf00      	nop
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b08a      	sub	sp, #40	@ 0x28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10b      	bne.n	8009b80 <xTimerGenericCommand+0x30>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	623b      	str	r3, [r7, #32]
}
 8009b7a:	bf00      	nop
 8009b7c:	bf00      	nop
 8009b7e:	e7fd      	b.n	8009b7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b80:	4b19      	ldr	r3, [pc, #100]	@ (8009be8 <xTimerGenericCommand+0x98>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d02a      	beq.n	8009bde <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	2b05      	cmp	r3, #5
 8009b98:	dc18      	bgt.n	8009bcc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b9a:	f7ff fdef 	bl	800977c <xTaskGetSchedulerState>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d109      	bne.n	8009bb8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ba4:	4b10      	ldr	r3, [pc, #64]	@ (8009be8 <xTimerGenericCommand+0x98>)
 8009ba6:	6818      	ldr	r0, [r3, #0]
 8009ba8:	f107 0114 	add.w	r1, r7, #20
 8009bac:	2300      	movs	r3, #0
 8009bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bb0:	f7fe fbe2 	bl	8008378 <xQueueGenericSend>
 8009bb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009bb6:	e012      	b.n	8009bde <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8009be8 <xTimerGenericCommand+0x98>)
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	f107 0114 	add.w	r1, r7, #20
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f7fe fbd8 	bl	8008378 <xQueueGenericSend>
 8009bc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009bca:	e008      	b.n	8009bde <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bcc:	4b06      	ldr	r3, [pc, #24]	@ (8009be8 <xTimerGenericCommand+0x98>)
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	f107 0114 	add.w	r1, r7, #20
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	f7fe fcd0 	bl	800857c <xQueueGenericSendFromISR>
 8009bdc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3728      	adds	r7, #40	@ 0x28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	2000193c 	.word	0x2000193c

08009bec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af02      	add	r7, sp, #8
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8009c6c <prvProcessExpiredTimer+0x80>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	3304      	adds	r3, #4
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe fa87 	bl	8008118 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d123      	bne.n	8009c5a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	18d1      	adds	r1, r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	683a      	ldr	r2, [r7, #0]
 8009c1e:	6978      	ldr	r0, [r7, #20]
 8009c20:	f000 f8cc 	bl	8009dbc <prvInsertTimerInActiveList>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d017      	beq.n	8009c5a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	2100      	movs	r1, #0
 8009c34:	6978      	ldr	r0, [r7, #20]
 8009c36:	f7ff ff8b 	bl	8009b50 <xTimerGenericCommand>
 8009c3a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10b      	bne.n	8009c5a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	60fb      	str	r3, [r7, #12]
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	e7fd      	b.n	8009c56 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5e:	6978      	ldr	r0, [r7, #20]
 8009c60:	4798      	blx	r3
}
 8009c62:	bf00      	nop
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20001934 	.word	0x20001934

08009c70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c78:	f107 0308 	add.w	r3, r7, #8
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 f859 	bl	8009d34 <prvGetNextExpireTime>
 8009c82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	4619      	mov	r1, r3
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 f805 	bl	8009c98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c8e:	f000 f8d7 	bl	8009e40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c92:	bf00      	nop
 8009c94:	e7f0      	b.n	8009c78 <prvTimerTask+0x8>
	...

08009c98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009ca2:	f7ff f981 	bl	8008fa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ca6:	f107 0308 	add.w	r3, r7, #8
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 f866 	bl	8009d7c <prvSampleTimeNow>
 8009cb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d130      	bne.n	8009d1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10a      	bne.n	8009cd4 <prvProcessTimerOrBlockTask+0x3c>
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d806      	bhi.n	8009cd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cc6:	f7ff f97d 	bl	8008fc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cca:	68f9      	ldr	r1, [r7, #12]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ff8d 	bl	8009bec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009cd2:	e024      	b.n	8009d1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d008      	beq.n	8009cec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009cda:	4b13      	ldr	r3, [pc, #76]	@ (8009d28 <prvProcessTimerOrBlockTask+0x90>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bf0c      	ite	eq
 8009ce4:	2301      	moveq	r3, #1
 8009ce6:	2300      	movne	r3, #0
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cec:	4b0f      	ldr	r3, [pc, #60]	@ (8009d2c <prvProcessTimerOrBlockTask+0x94>)
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	f7fe fef5 	bl	8008ae8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009cfe:	f7ff f961 	bl	8008fc4 <xTaskResumeAll>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d08:	4b09      	ldr	r3, [pc, #36]	@ (8009d30 <prvProcessTimerOrBlockTask+0x98>)
 8009d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	f3bf 8f6f 	isb	sy
}
 8009d18:	e001      	b.n	8009d1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d1a:	f7ff f953 	bl	8008fc4 <xTaskResumeAll>
}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20001938 	.word	0x20001938
 8009d2c:	2000193c 	.word	0x2000193c
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009d78 <prvGetNextExpireTime+0x44>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	bf0c      	ite	eq
 8009d46:	2301      	moveq	r3, #1
 8009d48:	2300      	movne	r3, #0
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d105      	bne.n	8009d66 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d5a:	4b07      	ldr	r3, [pc, #28]	@ (8009d78 <prvGetNextExpireTime+0x44>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	e001      	b.n	8009d6a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bc80      	pop	{r7}
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	20001934 	.word	0x20001934

08009d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d84:	f7ff f9bc 	bl	8009100 <xTaskGetTickCount>
 8009d88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009db8 <prvSampleTimeNow+0x3c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d205      	bcs.n	8009da0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d94:	f000 f8f4 	bl	8009f80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	e002      	b.n	8009da6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009da6:	4a04      	ldr	r2, [pc, #16]	@ (8009db8 <prvSampleTimeNow+0x3c>)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009dac:	68fb      	ldr	r3, [r7, #12]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20001944 	.word	0x20001944

08009dbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d812      	bhi.n	8009e08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	1ad2      	subs	r2, r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d302      	bcc.n	8009df6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009df0:	2301      	movs	r3, #1
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	e01b      	b.n	8009e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009df6:	4b10      	ldr	r3, [pc, #64]	@ (8009e38 <prvInsertTimerInActiveList+0x7c>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4610      	mov	r0, r2
 8009e02:	f7fe f951 	bl	80080a8 <vListInsert>
 8009e06:	e012      	b.n	8009e2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d206      	bcs.n	8009e1e <prvInsertTimerInActiveList+0x62>
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d302      	bcc.n	8009e1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	617b      	str	r3, [r7, #20]
 8009e1c:	e007      	b.n	8009e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e1e:	4b07      	ldr	r3, [pc, #28]	@ (8009e3c <prvInsertTimerInActiveList+0x80>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3304      	adds	r3, #4
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f7fe f93d 	bl	80080a8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e2e:	697b      	ldr	r3, [r7, #20]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20001938 	.word	0x20001938
 8009e3c:	20001934 	.word	0x20001934

08009e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08c      	sub	sp, #48	@ 0x30
 8009e44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e46:	e087      	b.n	8009f58 <prvProcessReceivedCommands+0x118>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f2c0 8084 	blt.w	8009f58 <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe f959 	bl	8008118 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e66:	1d3b      	adds	r3, r7, #4
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7ff ff87 	bl	8009d7c <prvSampleTimeNow>
 8009e6e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2b09      	cmp	r3, #9
 8009e74:	d86b      	bhi.n	8009f4e <prvProcessReceivedCommands+0x10e>
 8009e76:	a201      	add	r2, pc, #4	@ (adr r2, 8009e7c <prvProcessReceivedCommands+0x3c>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009ea5 	.word	0x08009ea5
 8009e80:	08009ea5 	.word	0x08009ea5
 8009e84:	08009ea5 	.word	0x08009ea5
 8009e88:	08009f4f 	.word	0x08009f4f
 8009e8c:	08009f03 	.word	0x08009f03
 8009e90:	08009f3d 	.word	0x08009f3d
 8009e94:	08009ea5 	.word	0x08009ea5
 8009e98:	08009ea5 	.word	0x08009ea5
 8009e9c:	08009f4f 	.word	0x08009f4f
 8009ea0:	08009f03 	.word	0x08009f03
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	18d1      	adds	r1, r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6a3a      	ldr	r2, [r7, #32]
 8009eb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009eb2:	f7ff ff83 	bl	8009dbc <prvInsertTimerInActiveList>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d04a      	beq.n	8009f52 <prvProcessReceivedCommands+0x112>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009ec2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec6:	69db      	ldr	r3, [r3, #28]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d142      	bne.n	8009f52 <prvProcessReceivedCommands+0x112>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	441a      	add	r2, r3
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2100      	movs	r1, #0
 8009edc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009ede:	f7ff fe37 	bl	8009b50 <xTimerGenericCommand>
 8009ee2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d133      	bne.n	8009f52 <prvProcessReceivedCommands+0x112>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	61bb      	str	r3, [r7, #24]
}
 8009efc:	bf00      	nop
 8009efe:	bf00      	nop
 8009f00:	e7fd      	b.n	8009efe <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10b      	bne.n	8009f28 <prvProcessReceivedCommands+0xe8>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	617b      	str	r3, [r7, #20]
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	e7fd      	b.n	8009f24 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2a:	699a      	ldr	r2, [r3, #24]
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	18d1      	adds	r1, r2, r3
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	6a3a      	ldr	r2, [r7, #32]
 8009f34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f36:	f7ff ff41 	bl	8009dbc <prvInsertTimerInActiveList>
					break;
 8009f3a:	e00d      	b.n	8009f58 <prvProcessReceivedCommands+0x118>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d107      	bne.n	8009f56 <prvProcessReceivedCommands+0x116>
						{
							vPortFree( pxTimer );
 8009f46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f48:	f000 fb6a 	bl	800a620 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f4c:	e003      	b.n	8009f56 <prvProcessReceivedCommands+0x116>

				default	:
					/* Don't expect to get here. */
					break;
 8009f4e:	bf00      	nop
 8009f50:	e002      	b.n	8009f58 <prvProcessReceivedCommands+0x118>
					break;
 8009f52:	bf00      	nop
 8009f54:	e000      	b.n	8009f58 <prvProcessReceivedCommands+0x118>
					break;
 8009f56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f58:	4b08      	ldr	r3, [pc, #32]	@ (8009f7c <prvProcessReceivedCommands+0x13c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f107 0108 	add.w	r1, r7, #8
 8009f60:	2200      	movs	r2, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fe fba6 	bl	80086b4 <xQueueReceive>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f47f af6c 	bne.w	8009e48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
 8009f74:	3728      	adds	r7, #40	@ 0x28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	2000193c 	.word	0x2000193c

08009f80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f86:	e046      	b.n	800a016 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f88:	4b2c      	ldr	r3, [pc, #176]	@ (800a03c <prvSwitchTimerLists+0xbc>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f92:	4b2a      	ldr	r3, [pc, #168]	@ (800a03c <prvSwitchTimerLists+0xbc>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fe f8b9 	bl	8008118 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d12f      	bne.n	800a016 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d90e      	bls.n	8009fe6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fd4:	4b19      	ldr	r3, [pc, #100]	@ (800a03c <prvSwitchTimerLists+0xbc>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3304      	adds	r3, #4
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4610      	mov	r0, r2
 8009fe0:	f7fe f862 	bl	80080a8 <vListInsert>
 8009fe4:	e017      	b.n	800a016 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	2300      	movs	r3, #0
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	2100      	movs	r1, #0
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f7ff fdad 	bl	8009b50 <xTimerGenericCommand>
 8009ff6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10b      	bne.n	800a016 <prvSwitchTimerLists+0x96>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	603b      	str	r3, [r7, #0]
}
 800a010:	bf00      	nop
 800a012:	bf00      	nop
 800a014:	e7fd      	b.n	800a012 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a016:	4b09      	ldr	r3, [pc, #36]	@ (800a03c <prvSwitchTimerLists+0xbc>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1b3      	bne.n	8009f88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a020:	4b06      	ldr	r3, [pc, #24]	@ (800a03c <prvSwitchTimerLists+0xbc>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a026:	4b06      	ldr	r3, [pc, #24]	@ (800a040 <prvSwitchTimerLists+0xc0>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a04      	ldr	r2, [pc, #16]	@ (800a03c <prvSwitchTimerLists+0xbc>)
 800a02c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a02e:	4a04      	ldr	r2, [pc, #16]	@ (800a040 <prvSwitchTimerLists+0xc0>)
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	6013      	str	r3, [r2, #0]
}
 800a034:	bf00      	nop
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20001934 	.word	0x20001934
 800a040:	20001938 	.word	0x20001938

0800a044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a04a:	f000 f91d 	bl	800a288 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a04e:	4b15      	ldr	r3, [pc, #84]	@ (800a0a4 <prvCheckForValidListAndQueue+0x60>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d120      	bne.n	800a098 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a056:	4814      	ldr	r0, [pc, #80]	@ (800a0a8 <prvCheckForValidListAndQueue+0x64>)
 800a058:	f7fd ffd8 	bl	800800c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a05c:	4813      	ldr	r0, [pc, #76]	@ (800a0ac <prvCheckForValidListAndQueue+0x68>)
 800a05e:	f7fd ffd5 	bl	800800c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a062:	4b13      	ldr	r3, [pc, #76]	@ (800a0b0 <prvCheckForValidListAndQueue+0x6c>)
 800a064:	4a10      	ldr	r2, [pc, #64]	@ (800a0a8 <prvCheckForValidListAndQueue+0x64>)
 800a066:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a068:	4b12      	ldr	r3, [pc, #72]	@ (800a0b4 <prvCheckForValidListAndQueue+0x70>)
 800a06a:	4a10      	ldr	r2, [pc, #64]	@ (800a0ac <prvCheckForValidListAndQueue+0x68>)
 800a06c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a06e:	2300      	movs	r3, #0
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	4b11      	ldr	r3, [pc, #68]	@ (800a0b8 <prvCheckForValidListAndQueue+0x74>)
 800a074:	4a11      	ldr	r2, [pc, #68]	@ (800a0bc <prvCheckForValidListAndQueue+0x78>)
 800a076:	210c      	movs	r1, #12
 800a078:	200a      	movs	r0, #10
 800a07a:	f7fe f8e1 	bl	8008240 <xQueueGenericCreateStatic>
 800a07e:	4603      	mov	r3, r0
 800a080:	4a08      	ldr	r2, [pc, #32]	@ (800a0a4 <prvCheckForValidListAndQueue+0x60>)
 800a082:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a084:	4b07      	ldr	r3, [pc, #28]	@ (800a0a4 <prvCheckForValidListAndQueue+0x60>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d005      	beq.n	800a098 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a08c:	4b05      	ldr	r3, [pc, #20]	@ (800a0a4 <prvCheckForValidListAndQueue+0x60>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	490b      	ldr	r1, [pc, #44]	@ (800a0c0 <prvCheckForValidListAndQueue+0x7c>)
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fd00 	bl	8008a98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a098:	f000 f926 	bl	800a2e8 <vPortExitCritical>
}
 800a09c:	bf00      	nop
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	2000193c 	.word	0x2000193c
 800a0a8:	2000190c 	.word	0x2000190c
 800a0ac:	20001920 	.word	0x20001920
 800a0b0:	20001934 	.word	0x20001934
 800a0b4:	20001938 	.word	0x20001938
 800a0b8:	200019c0 	.word	0x200019c0
 800a0bc:	20001948 	.word	0x20001948
 800a0c0:	0800e658 	.word	0x0800e658

0800a0c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3b04      	subs	r3, #4
 800a0d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3b04      	subs	r3, #4
 800a0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	f023 0201 	bic.w	r2, r3, #1
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3b04      	subs	r3, #4
 800a0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0f4:	4a08      	ldr	r2, [pc, #32]	@ (800a118 <pxPortInitialiseStack+0x54>)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	3b14      	subs	r3, #20
 800a0fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3b20      	subs	r3, #32
 800a10a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a10c:	68fb      	ldr	r3, [r7, #12]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	bc80      	pop	{r7}
 800a116:	4770      	bx	lr
 800a118:	0800a11d 	.word	0x0800a11d

0800a11c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a122:	2300      	movs	r3, #0
 800a124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a126:	4b12      	ldr	r3, [pc, #72]	@ (800a170 <prvTaskExitError+0x54>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a12e:	d00b      	beq.n	800a148 <prvTaskExitError+0x2c>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	bf00      	nop
 800a146:	e7fd      	b.n	800a144 <prvTaskExitError+0x28>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	60bb      	str	r3, [r7, #8]
}
 800a15a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a15c:	bf00      	nop
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0fc      	beq.n	800a15e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bc80      	pop	{r7}
 800a16e:	4770      	bx	lr
 800a170:	2000002c 	.word	0x2000002c
	...

0800a180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a180:	4b07      	ldr	r3, [pc, #28]	@ (800a1a0 <pxCurrentTCBConst2>)
 800a182:	6819      	ldr	r1, [r3, #0]
 800a184:	6808      	ldr	r0, [r1, #0]
 800a186:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a18a:	f380 8809 	msr	PSP, r0
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	f380 8811 	msr	BASEPRI, r0
 800a19a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a19e:	4770      	bx	lr

0800a1a0 <pxCurrentTCBConst2>:
 800a1a0:	200017e0 	.word	0x200017e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop

0800a1a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a1a8:	4806      	ldr	r0, [pc, #24]	@ (800a1c4 <prvPortStartFirstTask+0x1c>)
 800a1aa:	6800      	ldr	r0, [r0, #0]
 800a1ac:	6800      	ldr	r0, [r0, #0]
 800a1ae:	f380 8808 	msr	MSP, r0
 800a1b2:	b662      	cpsie	i
 800a1b4:	b661      	cpsie	f
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	df00      	svc	0
 800a1c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1c2:	bf00      	nop
 800a1c4:	e000ed08 	.word	0xe000ed08

0800a1c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1ce:	4b29      	ldr	r3, [pc, #164]	@ (800a274 <xPortStartScheduler+0xac>)
 800a1d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	22ff      	movs	r2, #255	@ 0xff
 800a1de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1e8:	79fb      	ldrb	r3, [r7, #7]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	4b21      	ldr	r3, [pc, #132]	@ (800a278 <xPortStartScheduler+0xb0>)
 800a1f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1f6:	4b21      	ldr	r3, [pc, #132]	@ (800a27c <xPortStartScheduler+0xb4>)
 800a1f8:	2207      	movs	r2, #7
 800a1fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1fc:	e009      	b.n	800a212 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a1fe:	4b1f      	ldr	r3, [pc, #124]	@ (800a27c <xPortStartScheduler+0xb4>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3b01      	subs	r3, #1
 800a204:	4a1d      	ldr	r2, [pc, #116]	@ (800a27c <xPortStartScheduler+0xb4>)
 800a206:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a208:	79fb      	ldrb	r3, [r7, #7]
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a212:	79fb      	ldrb	r3, [r7, #7]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a21a:	2b80      	cmp	r3, #128	@ 0x80
 800a21c:	d0ef      	beq.n	800a1fe <xPortStartScheduler+0x36>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a21e:	4b17      	ldr	r3, [pc, #92]	@ (800a27c <xPortStartScheduler+0xb4>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	021b      	lsls	r3, r3, #8
 800a224:	4a15      	ldr	r2, [pc, #84]	@ (800a27c <xPortStartScheduler+0xb4>)
 800a226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a228:	4b14      	ldr	r3, [pc, #80]	@ (800a27c <xPortStartScheduler+0xb4>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a230:	4a12      	ldr	r2, [pc, #72]	@ (800a27c <xPortStartScheduler+0xb4>)
 800a232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	b2da      	uxtb	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a23c:	4b10      	ldr	r3, [pc, #64]	@ (800a280 <xPortStartScheduler+0xb8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a0f      	ldr	r2, [pc, #60]	@ (800a280 <xPortStartScheduler+0xb8>)
 800a242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a248:	4b0d      	ldr	r3, [pc, #52]	@ (800a280 <xPortStartScheduler+0xb8>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a0c      	ldr	r2, [pc, #48]	@ (800a280 <xPortStartScheduler+0xb8>)
 800a24e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a254:	f000 f8ba 	bl	800a3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a258:	4b0a      	ldr	r3, [pc, #40]	@ (800a284 <xPortStartScheduler+0xbc>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a25e:	f7ff ffa3 	bl	800a1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a262:	f7ff f819 	bl	8009298 <vTaskSwitchContext>
	prvTaskExitError();
 800a266:	f7ff ff59 	bl	800a11c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	e000e400 	.word	0xe000e400
 800a278:	20001a08 	.word	0x20001a08
 800a27c:	20001a0c 	.word	0x20001a0c
 800a280:	e000ed20 	.word	0xe000ed20
 800a284:	2000002c 	.word	0x2000002c

0800a288 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	607b      	str	r3, [r7, #4]
}
 800a2a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a2e0 <vPortEnterCritical+0x58>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	4a0d      	ldr	r2, [pc, #52]	@ (800a2e0 <vPortEnterCritical+0x58>)
 800a2aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e0 <vPortEnterCritical+0x58>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d110      	bne.n	800a2d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2b4:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e4 <vPortEnterCritical+0x5c>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00b      	beq.n	800a2d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	603b      	str	r3, [r7, #0]
}
 800a2d0:	bf00      	nop
 800a2d2:	bf00      	nop
 800a2d4:	e7fd      	b.n	800a2d2 <vPortEnterCritical+0x4a>
	}
}
 800a2d6:	bf00      	nop
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bc80      	pop	{r7}
 800a2de:	4770      	bx	lr
 800a2e0:	2000002c 	.word	0x2000002c
 800a2e4:	e000ed04 	.word	0xe000ed04

0800a2e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2ee:	4b12      	ldr	r3, [pc, #72]	@ (800a338 <vPortExitCritical+0x50>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <vPortExitCritical+0x26>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	607b      	str	r3, [r7, #4]
}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	e7fd      	b.n	800a30a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a30e:	4b0a      	ldr	r3, [pc, #40]	@ (800a338 <vPortExitCritical+0x50>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3b01      	subs	r3, #1
 800a314:	4a08      	ldr	r2, [pc, #32]	@ (800a338 <vPortExitCritical+0x50>)
 800a316:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a318:	4b07      	ldr	r3, [pc, #28]	@ (800a338 <vPortExitCritical+0x50>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d105      	bne.n	800a32c <vPortExitCritical+0x44>
 800a320:	2300      	movs	r3, #0
 800a322:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	f383 8811 	msr	BASEPRI, r3
}
 800a32a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	bc80      	pop	{r7}
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	2000002c 	.word	0x2000002c
 800a33c:	00000000 	.word	0x00000000

0800a340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a340:	f3ef 8009 	mrs	r0, PSP
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	4b0d      	ldr	r3, [pc, #52]	@ (800a380 <pxCurrentTCBConst>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a350:	6010      	str	r0, [r2, #0]
 800a352:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a356:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a35a:	f380 8811 	msr	BASEPRI, r0
 800a35e:	f7fe ff9b 	bl	8009298 <vTaskSwitchContext>
 800a362:	f04f 0000 	mov.w	r0, #0
 800a366:	f380 8811 	msr	BASEPRI, r0
 800a36a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a36e:	6819      	ldr	r1, [r3, #0]
 800a370:	6808      	ldr	r0, [r1, #0]
 800a372:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a376:	f380 8809 	msr	PSP, r0
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	4770      	bx	lr

0800a380 <pxCurrentTCBConst>:
 800a380:	200017e0 	.word	0x200017e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop

0800a388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	607b      	str	r3, [r7, #4]
}
 800a3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3a2:	f7fe febb 	bl	800911c <xTaskIncrementTick>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3ac:	4b06      	ldr	r3, [pc, #24]	@ (800a3c8 <SysTick_Handler+0x40>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f383 8811 	msr	BASEPRI, r3
}
 800a3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	e000ed04 	.word	0xe000ed04

0800a3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3fc <vPortSetupTimerInterrupt+0x30>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a400 <vPortSetupTimerInterrupt+0x34>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3dc:	4b09      	ldr	r3, [pc, #36]	@ (800a404 <vPortSetupTimerInterrupt+0x38>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a09      	ldr	r2, [pc, #36]	@ (800a408 <vPortSetupTimerInterrupt+0x3c>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	099b      	lsrs	r3, r3, #6
 800a3e8:	4a08      	ldr	r2, [pc, #32]	@ (800a40c <vPortSetupTimerInterrupt+0x40>)
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ee:	4b03      	ldr	r3, [pc, #12]	@ (800a3fc <vPortSetupTimerInterrupt+0x30>)
 800a3f0:	2207      	movs	r2, #7
 800a3f2:	601a      	str	r2, [r3, #0]
}
 800a3f4:	bf00      	nop
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bc80      	pop	{r7}
 800a3fa:	4770      	bx	lr
 800a3fc:	e000e010 	.word	0xe000e010
 800a400:	e000e018 	.word	0xe000e018
 800a404:	20000020 	.word	0x20000020
 800a408:	10624dd3 	.word	0x10624dd3
 800a40c:	e000e014 	.word	0xe000e014

0800a410 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a416:	f3ef 8305 	mrs	r3, IPSR
 800a41a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b0f      	cmp	r3, #15
 800a420:	d915      	bls.n	800a44e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a422:	4a17      	ldr	r2, [pc, #92]	@ (800a480 <vPortValidateInterruptPriority+0x70>)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	4413      	add	r3, r2
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a42c:	4b15      	ldr	r3, [pc, #84]	@ (800a484 <vPortValidateInterruptPriority+0x74>)
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	7afa      	ldrb	r2, [r7, #11]
 800a432:	429a      	cmp	r2, r3
 800a434:	d20b      	bcs.n	800a44e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	607b      	str	r3, [r7, #4]
}
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	e7fd      	b.n	800a44a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a44e:	4b0e      	ldr	r3, [pc, #56]	@ (800a488 <vPortValidateInterruptPriority+0x78>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a456:	4b0d      	ldr	r3, [pc, #52]	@ (800a48c <vPortValidateInterruptPriority+0x7c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d90b      	bls.n	800a476 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	603b      	str	r3, [r7, #0]
}
 800a470:	bf00      	nop
 800a472:	bf00      	nop
 800a474:	e7fd      	b.n	800a472 <vPortValidateInterruptPriority+0x62>
	}
 800a476:	bf00      	nop
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bc80      	pop	{r7}
 800a47e:	4770      	bx	lr
 800a480:	e000e3f0 	.word	0xe000e3f0
 800a484:	20001a08 	.word	0x20001a08
 800a488:	e000ed0c 	.word	0xe000ed0c
 800a48c:	20001a0c 	.word	0x20001a0c

0800a490 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08a      	sub	sp, #40	@ 0x28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a49c:	f7fe fd84 	bl	8008fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4a0:	4b5a      	ldr	r3, [pc, #360]	@ (800a60c <pvPortMalloc+0x17c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4a8:	f000 f916 	bl	800a6d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4ac:	4b58      	ldr	r3, [pc, #352]	@ (800a610 <pvPortMalloc+0x180>)
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f040 8090 	bne.w	800a5da <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01e      	beq.n	800a4fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a4c0:	2208      	movs	r2, #8
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f003 0307 	and.w	r3, r3, #7
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d015      	beq.n	800a4fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f023 0307 	bic.w	r3, r3, #7
 800a4d8:	3308      	adds	r3, #8
 800a4da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f003 0307 	and.w	r3, r3, #7
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00b      	beq.n	800a4fe <pvPortMalloc+0x6e>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	617b      	str	r3, [r7, #20]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d06a      	beq.n	800a5da <pvPortMalloc+0x14a>
 800a504:	4b43      	ldr	r3, [pc, #268]	@ (800a614 <pvPortMalloc+0x184>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d865      	bhi.n	800a5da <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a50e:	4b42      	ldr	r3, [pc, #264]	@ (800a618 <pvPortMalloc+0x188>)
 800a510:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a512:	4b41      	ldr	r3, [pc, #260]	@ (800a618 <pvPortMalloc+0x188>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a518:	e004      	b.n	800a524 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d903      	bls.n	800a536 <pvPortMalloc+0xa6>
 800a52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1f1      	bne.n	800a51a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a536:	4b35      	ldr	r3, [pc, #212]	@ (800a60c <pvPortMalloc+0x17c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d04c      	beq.n	800a5da <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2208      	movs	r2, #8
 800a546:	4413      	add	r3, r2
 800a548:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	1ad2      	subs	r2, r2, r3
 800a55a:	2308      	movs	r3, #8
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	429a      	cmp	r2, r3
 800a560:	d920      	bls.n	800a5a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4413      	add	r3, r2
 800a568:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	f003 0307 	and.w	r3, r3, #7
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00b      	beq.n	800a58c <pvPortMalloc+0xfc>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	613b      	str	r3, [r7, #16]
}
 800a586:	bf00      	nop
 800a588:	bf00      	nop
 800a58a:	e7fd      	b.n	800a588 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	1ad2      	subs	r2, r2, r3
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a59e:	69b8      	ldr	r0, [r7, #24]
 800a5a0:	f000 f8fc 	bl	800a79c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a614 <pvPortMalloc+0x184>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	4a19      	ldr	r2, [pc, #100]	@ (800a614 <pvPortMalloc+0x184>)
 800a5b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5b2:	4b18      	ldr	r3, [pc, #96]	@ (800a614 <pvPortMalloc+0x184>)
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	4b19      	ldr	r3, [pc, #100]	@ (800a61c <pvPortMalloc+0x18c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d203      	bcs.n	800a5c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5be:	4b15      	ldr	r3, [pc, #84]	@ (800a614 <pvPortMalloc+0x184>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a16      	ldr	r2, [pc, #88]	@ (800a61c <pvPortMalloc+0x18c>)
 800a5c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	685a      	ldr	r2, [r3, #4]
 800a5ca:	4b11      	ldr	r3, [pc, #68]	@ (800a610 <pvPortMalloc+0x180>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5da:	f7fe fcf3 	bl	8008fc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	f003 0307 	and.w	r3, r3, #7
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <pvPortMalloc+0x170>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	60fb      	str	r3, [r7, #12]
}
 800a5fa:	bf00      	nop
 800a5fc:	bf00      	nop
 800a5fe:	e7fd      	b.n	800a5fc <pvPortMalloc+0x16c>
	return pvReturn;
 800a600:	69fb      	ldr	r3, [r7, #28]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3728      	adds	r7, #40	@ 0x28
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20002618 	.word	0x20002618
 800a610:	20002624 	.word	0x20002624
 800a614:	2000261c 	.word	0x2000261c
 800a618:	20002610 	.word	0x20002610
 800a61c:	20002620 	.word	0x20002620

0800a620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d04a      	beq.n	800a6c8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a632:	2308      	movs	r3, #8
 800a634:	425b      	negs	r3, r3
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	4413      	add	r3, r2
 800a63a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	4b22      	ldr	r3, [pc, #136]	@ (800a6d0 <vPortFree+0xb0>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4013      	ands	r3, r2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10b      	bne.n	800a666 <vPortFree+0x46>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	60fb      	str	r3, [r7, #12]
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	e7fd      	b.n	800a662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00b      	beq.n	800a686 <vPortFree+0x66>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	60bb      	str	r3, [r7, #8]
}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	e7fd      	b.n	800a682 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	685a      	ldr	r2, [r3, #4]
 800a68a:	4b11      	ldr	r3, [pc, #68]	@ (800a6d0 <vPortFree+0xb0>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4013      	ands	r3, r2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d019      	beq.n	800a6c8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d115      	bne.n	800a6c8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d0 <vPortFree+0xb0>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	43db      	mvns	r3, r3
 800a6a6:	401a      	ands	r2, r3
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6ac:	f7fe fc7c 	bl	8008fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	4b07      	ldr	r3, [pc, #28]	@ (800a6d4 <vPortFree+0xb4>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	4a06      	ldr	r2, [pc, #24]	@ (800a6d4 <vPortFree+0xb4>)
 800a6bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6be:	6938      	ldr	r0, [r7, #16]
 800a6c0:	f000 f86c 	bl	800a79c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a6c4:	f7fe fc7e 	bl	8008fc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6c8:	bf00      	nop
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20002624 	.word	0x20002624
 800a6d4:	2000261c 	.word	0x2000261c

0800a6d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a6e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6e4:	4b27      	ldr	r3, [pc, #156]	@ (800a784 <prvHeapInit+0xac>)
 800a6e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f003 0307 	and.w	r3, r3, #7
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00c      	beq.n	800a70c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3307      	adds	r3, #7
 800a6f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f023 0307 	bic.w	r3, r3, #7
 800a6fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	4a1f      	ldr	r2, [pc, #124]	@ (800a784 <prvHeapInit+0xac>)
 800a708:	4413      	add	r3, r2
 800a70a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a710:	4a1d      	ldr	r2, [pc, #116]	@ (800a788 <prvHeapInit+0xb0>)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a716:	4b1c      	ldr	r3, [pc, #112]	@ (800a788 <prvHeapInit+0xb0>)
 800a718:	2200      	movs	r2, #0
 800a71a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	4413      	add	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a724:	2208      	movs	r2, #8
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	1a9b      	subs	r3, r3, r2
 800a72a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f023 0307 	bic.w	r3, r3, #7
 800a732:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4a15      	ldr	r2, [pc, #84]	@ (800a78c <prvHeapInit+0xb4>)
 800a738:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a73a:	4b14      	ldr	r3, [pc, #80]	@ (800a78c <prvHeapInit+0xb4>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2200      	movs	r2, #0
 800a740:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a742:	4b12      	ldr	r3, [pc, #72]	@ (800a78c <prvHeapInit+0xb4>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2200      	movs	r2, #0
 800a748:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	1ad2      	subs	r2, r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a758:	4b0c      	ldr	r3, [pc, #48]	@ (800a78c <prvHeapInit+0xb4>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	4a0a      	ldr	r2, [pc, #40]	@ (800a790 <prvHeapInit+0xb8>)
 800a766:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	4a09      	ldr	r2, [pc, #36]	@ (800a794 <prvHeapInit+0xbc>)
 800a76e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a770:	4b09      	ldr	r3, [pc, #36]	@ (800a798 <prvHeapInit+0xc0>)
 800a772:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a776:	601a      	str	r2, [r3, #0]
}
 800a778:	bf00      	nop
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bc80      	pop	{r7}
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	20001a10 	.word	0x20001a10
 800a788:	20002610 	.word	0x20002610
 800a78c:	20002618 	.word	0x20002618
 800a790:	20002620 	.word	0x20002620
 800a794:	2000261c 	.word	0x2000261c
 800a798:	20002624 	.word	0x20002624

0800a79c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7a4:	4b27      	ldr	r3, [pc, #156]	@ (800a844 <prvInsertBlockIntoFreeList+0xa8>)
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	e002      	b.n	800a7b0 <prvInsertBlockIntoFreeList+0x14>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d8f7      	bhi.n	800a7aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d108      	bne.n	800a7de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	441a      	add	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	441a      	add	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d118      	bne.n	800a824 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	4b14      	ldr	r3, [pc, #80]	@ (800a848 <prvInsertBlockIntoFreeList+0xac>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d00d      	beq.n	800a81a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	441a      	add	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	e008      	b.n	800a82c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a81a:	4b0b      	ldr	r3, [pc, #44]	@ (800a848 <prvInsertBlockIntoFreeList+0xac>)
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	e003      	b.n	800a82c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	429a      	cmp	r2, r3
 800a832:	d002      	beq.n	800a83a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a83a:	bf00      	nop
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	bc80      	pop	{r7}
 800a842:	4770      	bx	lr
 800a844:	20002610 	.word	0x20002610
 800a848:	20002618 	.word	0x20002618

0800a84c <_ZdaPv>:
 800a84c:	f000 b802 	b.w	800a854 <_ZdlPv>

0800a850 <_Znaj>:
 800a850:	f000 b802 	b.w	800a858 <_Znwj>

0800a854 <_ZdlPv>:
 800a854:	f000 bf5c 	b.w	800b710 <free>

0800a858 <_Znwj>:
 800a858:	2801      	cmp	r0, #1
 800a85a:	bf38      	it	cc
 800a85c:	2001      	movcc	r0, #1
 800a85e:	b510      	push	{r4, lr}
 800a860:	4604      	mov	r4, r0
 800a862:	4620      	mov	r0, r4
 800a864:	f000 ff4c 	bl	800b700 <malloc>
 800a868:	b100      	cbz	r0, 800a86c <_Znwj+0x14>
 800a86a:	bd10      	pop	{r4, pc}
 800a86c:	f000 f806 	bl	800a87c <_ZSt15get_new_handlerv>
 800a870:	b908      	cbnz	r0, 800a876 <_Znwj+0x1e>
 800a872:	f000 ff3d 	bl	800b6f0 <abort>
 800a876:	4780      	blx	r0
 800a878:	e7f3      	b.n	800a862 <_Znwj+0xa>
	...

0800a87c <_ZSt15get_new_handlerv>:
 800a87c:	4b02      	ldr	r3, [pc, #8]	@ (800a888 <_ZSt15get_new_handlerv+0xc>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	f3bf 8f5b 	dmb	ish
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	20002628 	.word	0x20002628

0800a88c <pow>:
 800a88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a890:	4614      	mov	r4, r2
 800a892:	461d      	mov	r5, r3
 800a894:	4680      	mov	r8, r0
 800a896:	4689      	mov	r9, r1
 800a898:	f000 f88a 	bl	800a9b0 <__ieee754_pow>
 800a89c:	4622      	mov	r2, r4
 800a89e:	4606      	mov	r6, r0
 800a8a0:	460f      	mov	r7, r1
 800a8a2:	462b      	mov	r3, r5
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f7f6 f8b0 	bl	8000a0c <__aeabi_dcmpun>
 800a8ac:	bbc8      	cbnz	r0, 800a922 <pow+0x96>
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	f7f6 f877 	bl	80009a8 <__aeabi_dcmpeq>
 800a8ba:	b1b8      	cbz	r0, 800a8ec <pow+0x60>
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2300      	movs	r3, #0
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f7f6 f870 	bl	80009a8 <__aeabi_dcmpeq>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d141      	bne.n	800a950 <pow+0xc4>
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f000 f844 	bl	800a95c <finite>
 800a8d4:	b328      	cbz	r0, 800a922 <pow+0x96>
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2300      	movs	r3, #0
 800a8da:	4620      	mov	r0, r4
 800a8dc:	4629      	mov	r1, r5
 800a8de:	f7f6 f86d 	bl	80009bc <__aeabi_dcmplt>
 800a8e2:	b1f0      	cbz	r0, 800a922 <pow+0x96>
 800a8e4:	f001 fe28 	bl	800c538 <__errno>
 800a8e8:	2322      	movs	r3, #34	@ 0x22
 800a8ea:	e019      	b.n	800a920 <pow+0x94>
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	4639      	mov	r1, r7
 800a8f0:	f000 f834 	bl	800a95c <finite>
 800a8f4:	b9c8      	cbnz	r0, 800a92a <pow+0x9e>
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	f000 f82f 	bl	800a95c <finite>
 800a8fe:	b1a0      	cbz	r0, 800a92a <pow+0x9e>
 800a900:	4620      	mov	r0, r4
 800a902:	4629      	mov	r1, r5
 800a904:	f000 f82a 	bl	800a95c <finite>
 800a908:	b178      	cbz	r0, 800a92a <pow+0x9e>
 800a90a:	4632      	mov	r2, r6
 800a90c:	463b      	mov	r3, r7
 800a90e:	4630      	mov	r0, r6
 800a910:	4639      	mov	r1, r7
 800a912:	f7f6 f87b 	bl	8000a0c <__aeabi_dcmpun>
 800a916:	2800      	cmp	r0, #0
 800a918:	d0e4      	beq.n	800a8e4 <pow+0x58>
 800a91a:	f001 fe0d 	bl	800c538 <__errno>
 800a91e:	2321      	movs	r3, #33	@ 0x21
 800a920:	6003      	str	r3, [r0, #0]
 800a922:	4630      	mov	r0, r6
 800a924:	4639      	mov	r1, r7
 800a926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92a:	2200      	movs	r2, #0
 800a92c:	2300      	movs	r3, #0
 800a92e:	4630      	mov	r0, r6
 800a930:	4639      	mov	r1, r7
 800a932:	f7f6 f839 	bl	80009a8 <__aeabi_dcmpeq>
 800a936:	2800      	cmp	r0, #0
 800a938:	d0f3      	beq.n	800a922 <pow+0x96>
 800a93a:	4640      	mov	r0, r8
 800a93c:	4649      	mov	r1, r9
 800a93e:	f000 f80d 	bl	800a95c <finite>
 800a942:	2800      	cmp	r0, #0
 800a944:	d0ed      	beq.n	800a922 <pow+0x96>
 800a946:	4620      	mov	r0, r4
 800a948:	4629      	mov	r1, r5
 800a94a:	f000 f807 	bl	800a95c <finite>
 800a94e:	e7c8      	b.n	800a8e2 <pow+0x56>
 800a950:	2600      	movs	r6, #0
 800a952:	4f01      	ldr	r7, [pc, #4]	@ (800a958 <pow+0xcc>)
 800a954:	e7e5      	b.n	800a922 <pow+0x96>
 800a956:	bf00      	nop
 800a958:	3ff00000 	.word	0x3ff00000

0800a95c <finite>:
 800a95c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800a960:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a964:	0fc0      	lsrs	r0, r0, #31
 800a966:	4770      	bx	lr

0800a968 <roundf>:
 800a968:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a96c:	3b7f      	subs	r3, #127	@ 0x7f
 800a96e:	2b16      	cmp	r3, #22
 800a970:	4601      	mov	r1, r0
 800a972:	b510      	push	{r4, lr}
 800a974:	dc14      	bgt.n	800a9a0 <roundf+0x38>
 800a976:	2b00      	cmp	r3, #0
 800a978:	da07      	bge.n	800a98a <roundf+0x22>
 800a97a:	3301      	adds	r3, #1
 800a97c:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800a980:	d101      	bne.n	800a986 <roundf+0x1e>
 800a982:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 800a986:	4608      	mov	r0, r1
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	4a08      	ldr	r2, [pc, #32]	@ (800a9ac <roundf+0x44>)
 800a98c:	411a      	asrs	r2, r3
 800a98e:	4202      	tst	r2, r0
 800a990:	d0f9      	beq.n	800a986 <roundf+0x1e>
 800a992:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a996:	4119      	asrs	r1, r3
 800a998:	4401      	add	r1, r0
 800a99a:	ea21 0102 	bic.w	r1, r1, r2
 800a99e:	e7f2      	b.n	800a986 <roundf+0x1e>
 800a9a0:	2b80      	cmp	r3, #128	@ 0x80
 800a9a2:	d1f0      	bne.n	800a986 <roundf+0x1e>
 800a9a4:	f7f6 f8e6 	bl	8000b74 <__addsf3>
 800a9a8:	4601      	mov	r1, r0
 800a9aa:	e7ec      	b.n	800a986 <roundf+0x1e>
 800a9ac:	007fffff 	.word	0x007fffff

0800a9b0 <__ieee754_pow>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	b091      	sub	sp, #68	@ 0x44
 800a9b6:	e9cd 2300 	strd	r2, r3, [sp]
 800a9ba:	468b      	mov	fp, r1
 800a9bc:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a9c0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a9c4:	4682      	mov	sl, r0
 800a9c6:	ea57 0001 	orrs.w	r0, r7, r1
 800a9ca:	d112      	bne.n	800a9f2 <__ieee754_pow+0x42>
 800a9cc:	4653      	mov	r3, sl
 800a9ce:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a9d2:	18db      	adds	r3, r3, r3
 800a9d4:	4152      	adcs	r2, r2
 800a9d6:	4298      	cmp	r0, r3
 800a9d8:	4b91      	ldr	r3, [pc, #580]	@ (800ac20 <__ieee754_pow+0x270>)
 800a9da:	4193      	sbcs	r3, r2
 800a9dc:	f080 84ce 	bcs.w	800b37c <__ieee754_pow+0x9cc>
 800a9e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9e4:	4650      	mov	r0, sl
 800a9e6:	4659      	mov	r1, fp
 800a9e8:	f7f5 fbc0 	bl	800016c <__adddf3>
 800a9ec:	b011      	add	sp, #68	@ 0x44
 800a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f2:	4b8c      	ldr	r3, [pc, #560]	@ (800ac24 <__ieee754_pow+0x274>)
 800a9f4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a9f8:	429e      	cmp	r6, r3
 800a9fa:	465d      	mov	r5, fp
 800a9fc:	46d1      	mov	r9, sl
 800a9fe:	d807      	bhi.n	800aa10 <__ieee754_pow+0x60>
 800aa00:	d102      	bne.n	800aa08 <__ieee754_pow+0x58>
 800aa02:	f1ba 0f00 	cmp.w	sl, #0
 800aa06:	d1eb      	bne.n	800a9e0 <__ieee754_pow+0x30>
 800aa08:	429f      	cmp	r7, r3
 800aa0a:	d801      	bhi.n	800aa10 <__ieee754_pow+0x60>
 800aa0c:	d10f      	bne.n	800aa2e <__ieee754_pow+0x7e>
 800aa0e:	b171      	cbz	r1, 800aa2e <__ieee754_pow+0x7e>
 800aa10:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800aa14:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800aa18:	ea55 0509 	orrs.w	r5, r5, r9
 800aa1c:	d1e0      	bne.n	800a9e0 <__ieee754_pow+0x30>
 800aa1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa22:	18db      	adds	r3, r3, r3
 800aa24:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800aa28:	4152      	adcs	r2, r2
 800aa2a:	429d      	cmp	r5, r3
 800aa2c:	e7d4      	b.n	800a9d8 <__ieee754_pow+0x28>
 800aa2e:	2d00      	cmp	r5, #0
 800aa30:	4633      	mov	r3, r6
 800aa32:	da39      	bge.n	800aaa8 <__ieee754_pow+0xf8>
 800aa34:	4a7c      	ldr	r2, [pc, #496]	@ (800ac28 <__ieee754_pow+0x278>)
 800aa36:	4297      	cmp	r7, r2
 800aa38:	d84e      	bhi.n	800aad8 <__ieee754_pow+0x128>
 800aa3a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800aa3e:	4297      	cmp	r7, r2
 800aa40:	f240 84ab 	bls.w	800b39a <__ieee754_pow+0x9ea>
 800aa44:	153a      	asrs	r2, r7, #20
 800aa46:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800aa4a:	2a14      	cmp	r2, #20
 800aa4c:	dd0f      	ble.n	800aa6e <__ieee754_pow+0xbe>
 800aa4e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800aa52:	fa21 f402 	lsr.w	r4, r1, r2
 800aa56:	fa04 f202 	lsl.w	r2, r4, r2
 800aa5a:	428a      	cmp	r2, r1
 800aa5c:	f040 849d 	bne.w	800b39a <__ieee754_pow+0x9ea>
 800aa60:	f004 0401 	and.w	r4, r4, #1
 800aa64:	f1c4 0402 	rsb	r4, r4, #2
 800aa68:	2900      	cmp	r1, #0
 800aa6a:	d15a      	bne.n	800ab22 <__ieee754_pow+0x172>
 800aa6c:	e00e      	b.n	800aa8c <__ieee754_pow+0xdc>
 800aa6e:	2900      	cmp	r1, #0
 800aa70:	d156      	bne.n	800ab20 <__ieee754_pow+0x170>
 800aa72:	f1c2 0214 	rsb	r2, r2, #20
 800aa76:	fa47 f402 	asr.w	r4, r7, r2
 800aa7a:	fa04 f202 	lsl.w	r2, r4, r2
 800aa7e:	42ba      	cmp	r2, r7
 800aa80:	f040 8488 	bne.w	800b394 <__ieee754_pow+0x9e4>
 800aa84:	f004 0401 	and.w	r4, r4, #1
 800aa88:	f1c4 0402 	rsb	r4, r4, #2
 800aa8c:	4a67      	ldr	r2, [pc, #412]	@ (800ac2c <__ieee754_pow+0x27c>)
 800aa8e:	4297      	cmp	r7, r2
 800aa90:	d130      	bne.n	800aaf4 <__ieee754_pow+0x144>
 800aa92:	f1b8 0f00 	cmp.w	r8, #0
 800aa96:	f280 8479 	bge.w	800b38c <__ieee754_pow+0x9dc>
 800aa9a:	4652      	mov	r2, sl
 800aa9c:	465b      	mov	r3, fp
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	4962      	ldr	r1, [pc, #392]	@ (800ac2c <__ieee754_pow+0x27c>)
 800aaa2:	f7f5 fe43 	bl	800072c <__aeabi_ddiv>
 800aaa6:	e7a1      	b.n	800a9ec <__ieee754_pow+0x3c>
 800aaa8:	2400      	movs	r4, #0
 800aaaa:	2900      	cmp	r1, #0
 800aaac:	d139      	bne.n	800ab22 <__ieee754_pow+0x172>
 800aaae:	4a5d      	ldr	r2, [pc, #372]	@ (800ac24 <__ieee754_pow+0x274>)
 800aab0:	4297      	cmp	r7, r2
 800aab2:	d1eb      	bne.n	800aa8c <__ieee754_pow+0xdc>
 800aab4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800aab8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800aabc:	ea53 0309 	orrs.w	r3, r3, r9
 800aac0:	f000 845c 	beq.w	800b37c <__ieee754_pow+0x9cc>
 800aac4:	4b5a      	ldr	r3, [pc, #360]	@ (800ac30 <__ieee754_pow+0x280>)
 800aac6:	429e      	cmp	r6, r3
 800aac8:	d908      	bls.n	800aadc <__ieee754_pow+0x12c>
 800aaca:	f1b8 0f00 	cmp.w	r8, #0
 800aace:	f2c0 8459 	blt.w	800b384 <__ieee754_pow+0x9d4>
 800aad2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aad6:	e789      	b.n	800a9ec <__ieee754_pow+0x3c>
 800aad8:	2402      	movs	r4, #2
 800aada:	e7e6      	b.n	800aaaa <__ieee754_pow+0xfa>
 800aadc:	f1b8 0f00 	cmp.w	r8, #0
 800aae0:	f04f 0000 	mov.w	r0, #0
 800aae4:	f04f 0100 	mov.w	r1, #0
 800aae8:	da80      	bge.n	800a9ec <__ieee754_pow+0x3c>
 800aaea:	e9dd 0300 	ldrd	r0, r3, [sp]
 800aaee:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800aaf2:	e77b      	b.n	800a9ec <__ieee754_pow+0x3c>
 800aaf4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800aaf8:	d106      	bne.n	800ab08 <__ieee754_pow+0x158>
 800aafa:	4652      	mov	r2, sl
 800aafc:	465b      	mov	r3, fp
 800aafe:	4650      	mov	r0, sl
 800ab00:	4659      	mov	r1, fp
 800ab02:	f7f5 fce9 	bl	80004d8 <__aeabi_dmul>
 800ab06:	e771      	b.n	800a9ec <__ieee754_pow+0x3c>
 800ab08:	4a4a      	ldr	r2, [pc, #296]	@ (800ac34 <__ieee754_pow+0x284>)
 800ab0a:	4590      	cmp	r8, r2
 800ab0c:	d109      	bne.n	800ab22 <__ieee754_pow+0x172>
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	db07      	blt.n	800ab22 <__ieee754_pow+0x172>
 800ab12:	4650      	mov	r0, sl
 800ab14:	4659      	mov	r1, fp
 800ab16:	b011      	add	sp, #68	@ 0x44
 800ab18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	f000 bd12 	b.w	800b544 <__ieee754_sqrt>
 800ab20:	2400      	movs	r4, #0
 800ab22:	4650      	mov	r0, sl
 800ab24:	4659      	mov	r1, fp
 800ab26:	9302      	str	r3, [sp, #8]
 800ab28:	f000 fc6a 	bl	800b400 <fabs>
 800ab2c:	9b02      	ldr	r3, [sp, #8]
 800ab2e:	f1b9 0f00 	cmp.w	r9, #0
 800ab32:	d127      	bne.n	800ab84 <__ieee754_pow+0x1d4>
 800ab34:	4a3d      	ldr	r2, [pc, #244]	@ (800ac2c <__ieee754_pow+0x27c>)
 800ab36:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800ab3a:	4594      	cmp	ip, r2
 800ab3c:	d000      	beq.n	800ab40 <__ieee754_pow+0x190>
 800ab3e:	bb0e      	cbnz	r6, 800ab84 <__ieee754_pow+0x1d4>
 800ab40:	f1b8 0f00 	cmp.w	r8, #0
 800ab44:	da05      	bge.n	800ab52 <__ieee754_pow+0x1a2>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	4937      	ldr	r1, [pc, #220]	@ (800ac2c <__ieee754_pow+0x27c>)
 800ab4e:	f7f5 fded 	bl	800072c <__aeabi_ddiv>
 800ab52:	2d00      	cmp	r5, #0
 800ab54:	f6bf af4a 	bge.w	800a9ec <__ieee754_pow+0x3c>
 800ab58:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800ab5c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800ab60:	4326      	orrs	r6, r4
 800ab62:	d108      	bne.n	800ab76 <__ieee754_pow+0x1c6>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4610      	mov	r0, r2
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	f7f5 fafc 	bl	8000168 <__aeabi_dsub>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	e795      	b.n	800aaa2 <__ieee754_pow+0xf2>
 800ab76:	2c01      	cmp	r4, #1
 800ab78:	f47f af38 	bne.w	800a9ec <__ieee754_pow+0x3c>
 800ab7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab80:	4619      	mov	r1, r3
 800ab82:	e733      	b.n	800a9ec <__ieee754_pow+0x3c>
 800ab84:	0fea      	lsrs	r2, r5, #31
 800ab86:	3a01      	subs	r2, #1
 800ab88:	ea52 0c04 	orrs.w	ip, r2, r4
 800ab8c:	d102      	bne.n	800ab94 <__ieee754_pow+0x1e4>
 800ab8e:	4652      	mov	r2, sl
 800ab90:	465b      	mov	r3, fp
 800ab92:	e7e9      	b.n	800ab68 <__ieee754_pow+0x1b8>
 800ab94:	f04f 0900 	mov.w	r9, #0
 800ab98:	3c01      	subs	r4, #1
 800ab9a:	4314      	orrs	r4, r2
 800ab9c:	bf14      	ite	ne
 800ab9e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800ac2c <__ieee754_pow+0x27c>
 800aba2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800ac38 <__ieee754_pow+0x288>
 800aba6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800abaa:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800abae:	f240 8107 	bls.w	800adc0 <__ieee754_pow+0x410>
 800abb2:	4b22      	ldr	r3, [pc, #136]	@ (800ac3c <__ieee754_pow+0x28c>)
 800abb4:	429f      	cmp	r7, r3
 800abb6:	4b1e      	ldr	r3, [pc, #120]	@ (800ac30 <__ieee754_pow+0x280>)
 800abb8:	d913      	bls.n	800abe2 <__ieee754_pow+0x232>
 800abba:	429e      	cmp	r6, r3
 800abbc:	d808      	bhi.n	800abd0 <__ieee754_pow+0x220>
 800abbe:	f1b8 0f00 	cmp.w	r8, #0
 800abc2:	da08      	bge.n	800abd6 <__ieee754_pow+0x226>
 800abc4:	2000      	movs	r0, #0
 800abc6:	b011      	add	sp, #68	@ 0x44
 800abc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abcc:	f000 bcb4 	b.w	800b538 <__math_oflow>
 800abd0:	f1b8 0f00 	cmp.w	r8, #0
 800abd4:	dcf6      	bgt.n	800abc4 <__ieee754_pow+0x214>
 800abd6:	2000      	movs	r0, #0
 800abd8:	b011      	add	sp, #68	@ 0x44
 800abda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abde:	f000 bca6 	b.w	800b52e <__math_uflow>
 800abe2:	429e      	cmp	r6, r3
 800abe4:	d20c      	bcs.n	800ac00 <__ieee754_pow+0x250>
 800abe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abea:	2200      	movs	r2, #0
 800abec:	2300      	movs	r3, #0
 800abee:	f7f5 fee5 	bl	80009bc <__aeabi_dcmplt>
 800abf2:	3800      	subs	r0, #0
 800abf4:	bf18      	it	ne
 800abf6:	2001      	movne	r0, #1
 800abf8:	f1b8 0f00 	cmp.w	r8, #0
 800abfc:	daec      	bge.n	800abd8 <__ieee754_pow+0x228>
 800abfe:	e7e2      	b.n	800abc6 <__ieee754_pow+0x216>
 800ac00:	4b0a      	ldr	r3, [pc, #40]	@ (800ac2c <__ieee754_pow+0x27c>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	429e      	cmp	r6, r3
 800ac06:	d91b      	bls.n	800ac40 <__ieee754_pow+0x290>
 800ac08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f7f5 fed5 	bl	80009bc <__aeabi_dcmplt>
 800ac12:	3800      	subs	r0, #0
 800ac14:	bf18      	it	ne
 800ac16:	2001      	movne	r0, #1
 800ac18:	f1b8 0f00 	cmp.w	r8, #0
 800ac1c:	dcd3      	bgt.n	800abc6 <__ieee754_pow+0x216>
 800ac1e:	e7db      	b.n	800abd8 <__ieee754_pow+0x228>
 800ac20:	fff00000 	.word	0xfff00000
 800ac24:	7ff00000 	.word	0x7ff00000
 800ac28:	433fffff 	.word	0x433fffff
 800ac2c:	3ff00000 	.word	0x3ff00000
 800ac30:	3fefffff 	.word	0x3fefffff
 800ac34:	3fe00000 	.word	0x3fe00000
 800ac38:	bff00000 	.word	0xbff00000
 800ac3c:	43f00000 	.word	0x43f00000
 800ac40:	4b5b      	ldr	r3, [pc, #364]	@ (800adb0 <__ieee754_pow+0x400>)
 800ac42:	f7f5 fa91 	bl	8000168 <__aeabi_dsub>
 800ac46:	a352      	add	r3, pc, #328	@ (adr r3, 800ad90 <__ieee754_pow+0x3e0>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	460d      	mov	r5, r1
 800ac50:	f7f5 fc42 	bl	80004d8 <__aeabi_dmul>
 800ac54:	a350      	add	r3, pc, #320	@ (adr r3, 800ad98 <__ieee754_pow+0x3e8>)
 800ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	460f      	mov	r7, r1
 800ac5e:	4620      	mov	r0, r4
 800ac60:	4629      	mov	r1, r5
 800ac62:	f7f5 fc39 	bl	80004d8 <__aeabi_dmul>
 800ac66:	2200      	movs	r2, #0
 800ac68:	4682      	mov	sl, r0
 800ac6a:	468b      	mov	fp, r1
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	4629      	mov	r1, r5
 800ac70:	4b50      	ldr	r3, [pc, #320]	@ (800adb4 <__ieee754_pow+0x404>)
 800ac72:	f7f5 fc31 	bl	80004d8 <__aeabi_dmul>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	a149      	add	r1, pc, #292	@ (adr r1, 800ada0 <__ieee754_pow+0x3f0>)
 800ac7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac80:	f7f5 fa72 	bl	8000168 <__aeabi_dsub>
 800ac84:	4622      	mov	r2, r4
 800ac86:	462b      	mov	r3, r5
 800ac88:	f7f5 fc26 	bl	80004d8 <__aeabi_dmul>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	2000      	movs	r0, #0
 800ac92:	4949      	ldr	r1, [pc, #292]	@ (800adb8 <__ieee754_pow+0x408>)
 800ac94:	f7f5 fa68 	bl	8000168 <__aeabi_dsub>
 800ac98:	4622      	mov	r2, r4
 800ac9a:	4680      	mov	r8, r0
 800ac9c:	4689      	mov	r9, r1
 800ac9e:	462b      	mov	r3, r5
 800aca0:	4620      	mov	r0, r4
 800aca2:	4629      	mov	r1, r5
 800aca4:	f7f5 fc18 	bl	80004d8 <__aeabi_dmul>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4640      	mov	r0, r8
 800acae:	4649      	mov	r1, r9
 800acb0:	f7f5 fc12 	bl	80004d8 <__aeabi_dmul>
 800acb4:	a33c      	add	r3, pc, #240	@ (adr r3, 800ada8 <__ieee754_pow+0x3f8>)
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	f7f5 fc0d 	bl	80004d8 <__aeabi_dmul>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4650      	mov	r0, sl
 800acc4:	4659      	mov	r1, fp
 800acc6:	f7f5 fa4f 	bl	8000168 <__aeabi_dsub>
 800acca:	2400      	movs	r4, #0
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	4680      	mov	r8, r0
 800acd2:	4689      	mov	r9, r1
 800acd4:	4630      	mov	r0, r6
 800acd6:	4639      	mov	r1, r7
 800acd8:	f7f5 fa48 	bl	800016c <__adddf3>
 800acdc:	4632      	mov	r2, r6
 800acde:	463b      	mov	r3, r7
 800ace0:	4620      	mov	r0, r4
 800ace2:	460d      	mov	r5, r1
 800ace4:	f7f5 fa40 	bl	8000168 <__aeabi_dsub>
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	4640      	mov	r0, r8
 800acee:	4649      	mov	r1, r9
 800acf0:	f7f5 fa3a 	bl	8000168 <__aeabi_dsub>
 800acf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acfc:	2300      	movs	r3, #0
 800acfe:	9304      	str	r3, [sp, #16]
 800ad00:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ad04:	4606      	mov	r6, r0
 800ad06:	460f      	mov	r7, r1
 800ad08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	465b      	mov	r3, fp
 800ad10:	f7f5 fa2a 	bl	8000168 <__aeabi_dsub>
 800ad14:	4622      	mov	r2, r4
 800ad16:	462b      	mov	r3, r5
 800ad18:	f7f5 fbde 	bl	80004d8 <__aeabi_dmul>
 800ad1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad20:	4680      	mov	r8, r0
 800ad22:	4689      	mov	r9, r1
 800ad24:	4630      	mov	r0, r6
 800ad26:	4639      	mov	r1, r7
 800ad28:	f7f5 fbd6 	bl	80004d8 <__aeabi_dmul>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4640      	mov	r0, r8
 800ad32:	4649      	mov	r1, r9
 800ad34:	f7f5 fa1a 	bl	800016c <__adddf3>
 800ad38:	4652      	mov	r2, sl
 800ad3a:	465b      	mov	r3, fp
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	460f      	mov	r7, r1
 800ad40:	4620      	mov	r0, r4
 800ad42:	4629      	mov	r1, r5
 800ad44:	f7f5 fbc8 	bl	80004d8 <__aeabi_dmul>
 800ad48:	460b      	mov	r3, r1
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	4680      	mov	r8, r0
 800ad4e:	4689      	mov	r9, r1
 800ad50:	4630      	mov	r0, r6
 800ad52:	4639      	mov	r1, r7
 800ad54:	f7f5 fa0a 	bl	800016c <__adddf3>
 800ad58:	4b18      	ldr	r3, [pc, #96]	@ (800adbc <__ieee754_pow+0x40c>)
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4299      	cmp	r1, r3
 800ad5e:	460d      	mov	r5, r1
 800ad60:	468a      	mov	sl, r1
 800ad62:	468b      	mov	fp, r1
 800ad64:	f340 82e0 	ble.w	800b328 <__ieee754_pow+0x978>
 800ad68:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ad6c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ad70:	4303      	orrs	r3, r0
 800ad72:	f000 81df 	beq.w	800b134 <__ieee754_pow+0x784>
 800ad76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f7f5 fe1d 	bl	80009bc <__aeabi_dcmplt>
 800ad82:	3800      	subs	r0, #0
 800ad84:	bf18      	it	ne
 800ad86:	2001      	movne	r0, #1
 800ad88:	e71d      	b.n	800abc6 <__ieee754_pow+0x216>
 800ad8a:	bf00      	nop
 800ad8c:	f3af 8000 	nop.w
 800ad90:	60000000 	.word	0x60000000
 800ad94:	3ff71547 	.word	0x3ff71547
 800ad98:	f85ddf44 	.word	0xf85ddf44
 800ad9c:	3e54ae0b 	.word	0x3e54ae0b
 800ada0:	55555555 	.word	0x55555555
 800ada4:	3fd55555 	.word	0x3fd55555
 800ada8:	652b82fe 	.word	0x652b82fe
 800adac:	3ff71547 	.word	0x3ff71547
 800adb0:	3ff00000 	.word	0x3ff00000
 800adb4:	3fd00000 	.word	0x3fd00000
 800adb8:	3fe00000 	.word	0x3fe00000
 800adbc:	408fffff 	.word	0x408fffff
 800adc0:	4ad3      	ldr	r2, [pc, #844]	@ (800b110 <__ieee754_pow+0x760>)
 800adc2:	402a      	ands	r2, r5
 800adc4:	2a00      	cmp	r2, #0
 800adc6:	f040 817a 	bne.w	800b0be <__ieee754_pow+0x70e>
 800adca:	4bd2      	ldr	r3, [pc, #840]	@ (800b114 <__ieee754_pow+0x764>)
 800adcc:	2200      	movs	r2, #0
 800adce:	f7f5 fb83 	bl	80004d8 <__aeabi_dmul>
 800add2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800add6:	460b      	mov	r3, r1
 800add8:	151a      	asrs	r2, r3, #20
 800adda:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800adde:	4422      	add	r2, r4
 800ade0:	920a      	str	r2, [sp, #40]	@ 0x28
 800ade2:	4acd      	ldr	r2, [pc, #820]	@ (800b118 <__ieee754_pow+0x768>)
 800ade4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ade8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800adec:	4293      	cmp	r3, r2
 800adee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800adf2:	dd08      	ble.n	800ae06 <__ieee754_pow+0x456>
 800adf4:	4ac9      	ldr	r2, [pc, #804]	@ (800b11c <__ieee754_pow+0x76c>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	f340 8163 	ble.w	800b0c2 <__ieee754_pow+0x712>
 800adfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adfe:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ae02:	3301      	adds	r3, #1
 800ae04:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae06:	2600      	movs	r6, #0
 800ae08:	00f3      	lsls	r3, r6, #3
 800ae0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae0c:	4bc4      	ldr	r3, [pc, #784]	@ (800b120 <__ieee754_pow+0x770>)
 800ae0e:	4629      	mov	r1, r5
 800ae10:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae14:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ae1e:	4623      	mov	r3, r4
 800ae20:	4682      	mov	sl, r0
 800ae22:	f7f5 f9a1 	bl	8000168 <__aeabi_dsub>
 800ae26:	4652      	mov	r2, sl
 800ae28:	462b      	mov	r3, r5
 800ae2a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ae2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae32:	f7f5 f99b 	bl	800016c <__adddf3>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	49b9      	ldr	r1, [pc, #740]	@ (800b124 <__ieee754_pow+0x774>)
 800ae3e:	f7f5 fc75 	bl	800072c <__aeabi_ddiv>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae4e:	f7f5 fb43 	bl	80004d8 <__aeabi_dmul>
 800ae52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae56:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ae5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae5e:	2300      	movs	r3, #0
 800ae60:	2200      	movs	r2, #0
 800ae62:	46ab      	mov	fp, r5
 800ae64:	106d      	asrs	r5, r5, #1
 800ae66:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ae6a:	9304      	str	r3, [sp, #16]
 800ae6c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ae70:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ae74:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ae78:	4640      	mov	r0, r8
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	4614      	mov	r4, r2
 800ae7e:	461d      	mov	r5, r3
 800ae80:	f7f5 fb2a 	bl	80004d8 <__aeabi_dmul>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae8c:	f7f5 f96c 	bl	8000168 <__aeabi_dsub>
 800ae90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ae94:	4606      	mov	r6, r0
 800ae96:	460f      	mov	r7, r1
 800ae98:	4620      	mov	r0, r4
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	f7f5 f964 	bl	8000168 <__aeabi_dsub>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4650      	mov	r0, sl
 800aea6:	4659      	mov	r1, fp
 800aea8:	f7f5 f95e 	bl	8000168 <__aeabi_dsub>
 800aeac:	4642      	mov	r2, r8
 800aeae:	464b      	mov	r3, r9
 800aeb0:	f7f5 fb12 	bl	80004d8 <__aeabi_dmul>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4630      	mov	r0, r6
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 f954 	bl	8000168 <__aeabi_dsub>
 800aec0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aec4:	f7f5 fb08 	bl	80004d8 <__aeabi_dmul>
 800aec8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aecc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aed0:	4610      	mov	r0, r2
 800aed2:	4619      	mov	r1, r3
 800aed4:	f7f5 fb00 	bl	80004d8 <__aeabi_dmul>
 800aed8:	a37b      	add	r3, pc, #492	@ (adr r3, 800b0c8 <__ieee754_pow+0x718>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	4604      	mov	r4, r0
 800aee0:	460d      	mov	r5, r1
 800aee2:	f7f5 faf9 	bl	80004d8 <__aeabi_dmul>
 800aee6:	a37a      	add	r3, pc, #488	@ (adr r3, 800b0d0 <__ieee754_pow+0x720>)
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f7f5 f93e 	bl	800016c <__adddf3>
 800aef0:	4622      	mov	r2, r4
 800aef2:	462b      	mov	r3, r5
 800aef4:	f7f5 faf0 	bl	80004d8 <__aeabi_dmul>
 800aef8:	a377      	add	r3, pc, #476	@ (adr r3, 800b0d8 <__ieee754_pow+0x728>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f7f5 f935 	bl	800016c <__adddf3>
 800af02:	4622      	mov	r2, r4
 800af04:	462b      	mov	r3, r5
 800af06:	f7f5 fae7 	bl	80004d8 <__aeabi_dmul>
 800af0a:	a375      	add	r3, pc, #468	@ (adr r3, 800b0e0 <__ieee754_pow+0x730>)
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f7f5 f92c 	bl	800016c <__adddf3>
 800af14:	4622      	mov	r2, r4
 800af16:	462b      	mov	r3, r5
 800af18:	f7f5 fade 	bl	80004d8 <__aeabi_dmul>
 800af1c:	a372      	add	r3, pc, #456	@ (adr r3, 800b0e8 <__ieee754_pow+0x738>)
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	f7f5 f923 	bl	800016c <__adddf3>
 800af26:	4622      	mov	r2, r4
 800af28:	462b      	mov	r3, r5
 800af2a:	f7f5 fad5 	bl	80004d8 <__aeabi_dmul>
 800af2e:	a370      	add	r3, pc, #448	@ (adr r3, 800b0f0 <__ieee754_pow+0x740>)
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	f7f5 f91a 	bl	800016c <__adddf3>
 800af38:	4622      	mov	r2, r4
 800af3a:	4606      	mov	r6, r0
 800af3c:	460f      	mov	r7, r1
 800af3e:	462b      	mov	r3, r5
 800af40:	4620      	mov	r0, r4
 800af42:	4629      	mov	r1, r5
 800af44:	f7f5 fac8 	bl	80004d8 <__aeabi_dmul>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	4630      	mov	r0, r6
 800af4e:	4639      	mov	r1, r7
 800af50:	f7f5 fac2 	bl	80004d8 <__aeabi_dmul>
 800af54:	4604      	mov	r4, r0
 800af56:	460d      	mov	r5, r1
 800af58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af5c:	4642      	mov	r2, r8
 800af5e:	464b      	mov	r3, r9
 800af60:	f7f5 f904 	bl	800016c <__adddf3>
 800af64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800af68:	f7f5 fab6 	bl	80004d8 <__aeabi_dmul>
 800af6c:	4622      	mov	r2, r4
 800af6e:	462b      	mov	r3, r5
 800af70:	f7f5 f8fc 	bl	800016c <__adddf3>
 800af74:	4642      	mov	r2, r8
 800af76:	4682      	mov	sl, r0
 800af78:	468b      	mov	fp, r1
 800af7a:	464b      	mov	r3, r9
 800af7c:	4640      	mov	r0, r8
 800af7e:	4649      	mov	r1, r9
 800af80:	f7f5 faaa 	bl	80004d8 <__aeabi_dmul>
 800af84:	2200      	movs	r2, #0
 800af86:	4b68      	ldr	r3, [pc, #416]	@ (800b128 <__ieee754_pow+0x778>)
 800af88:	4606      	mov	r6, r0
 800af8a:	460f      	mov	r7, r1
 800af8c:	f7f5 f8ee 	bl	800016c <__adddf3>
 800af90:	4652      	mov	r2, sl
 800af92:	465b      	mov	r3, fp
 800af94:	f7f5 f8ea 	bl	800016c <__adddf3>
 800af98:	2400      	movs	r4, #0
 800af9a:	460d      	mov	r5, r1
 800af9c:	4622      	mov	r2, r4
 800af9e:	460b      	mov	r3, r1
 800afa0:	4640      	mov	r0, r8
 800afa2:	4649      	mov	r1, r9
 800afa4:	f7f5 fa98 	bl	80004d8 <__aeabi_dmul>
 800afa8:	2200      	movs	r2, #0
 800afaa:	4680      	mov	r8, r0
 800afac:	4689      	mov	r9, r1
 800afae:	4620      	mov	r0, r4
 800afb0:	4629      	mov	r1, r5
 800afb2:	4b5d      	ldr	r3, [pc, #372]	@ (800b128 <__ieee754_pow+0x778>)
 800afb4:	f7f5 f8d8 	bl	8000168 <__aeabi_dsub>
 800afb8:	4632      	mov	r2, r6
 800afba:	463b      	mov	r3, r7
 800afbc:	f7f5 f8d4 	bl	8000168 <__aeabi_dsub>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	4650      	mov	r0, sl
 800afc6:	4659      	mov	r1, fp
 800afc8:	f7f5 f8ce 	bl	8000168 <__aeabi_dsub>
 800afcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afd0:	f7f5 fa82 	bl	80004d8 <__aeabi_dmul>
 800afd4:	4622      	mov	r2, r4
 800afd6:	4606      	mov	r6, r0
 800afd8:	460f      	mov	r7, r1
 800afda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800afde:	462b      	mov	r3, r5
 800afe0:	f7f5 fa7a 	bl	80004d8 <__aeabi_dmul>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4630      	mov	r0, r6
 800afea:	4639      	mov	r1, r7
 800afec:	f7f5 f8be 	bl	800016c <__adddf3>
 800aff0:	2400      	movs	r4, #0
 800aff2:	4606      	mov	r6, r0
 800aff4:	460f      	mov	r7, r1
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	4640      	mov	r0, r8
 800affc:	4649      	mov	r1, r9
 800affe:	f7f5 f8b5 	bl	800016c <__adddf3>
 800b002:	a33d      	add	r3, pc, #244	@ (adr r3, 800b0f8 <__ieee754_pow+0x748>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	4620      	mov	r0, r4
 800b00a:	460d      	mov	r5, r1
 800b00c:	f7f5 fa64 	bl	80004d8 <__aeabi_dmul>
 800b010:	4642      	mov	r2, r8
 800b012:	464b      	mov	r3, r9
 800b014:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b018:	4620      	mov	r0, r4
 800b01a:	4629      	mov	r1, r5
 800b01c:	f7f5 f8a4 	bl	8000168 <__aeabi_dsub>
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	4630      	mov	r0, r6
 800b026:	4639      	mov	r1, r7
 800b028:	f7f5 f89e 	bl	8000168 <__aeabi_dsub>
 800b02c:	a334      	add	r3, pc, #208	@ (adr r3, 800b100 <__ieee754_pow+0x750>)
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	f7f5 fa51 	bl	80004d8 <__aeabi_dmul>
 800b036:	a334      	add	r3, pc, #208	@ (adr r3, 800b108 <__ieee754_pow+0x758>)
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	4606      	mov	r6, r0
 800b03e:	460f      	mov	r7, r1
 800b040:	4620      	mov	r0, r4
 800b042:	4629      	mov	r1, r5
 800b044:	f7f5 fa48 	bl	80004d8 <__aeabi_dmul>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4630      	mov	r0, r6
 800b04e:	4639      	mov	r1, r7
 800b050:	f7f5 f88c 	bl	800016c <__adddf3>
 800b054:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b056:	4b35      	ldr	r3, [pc, #212]	@ (800b12c <__ieee754_pow+0x77c>)
 800b058:	2400      	movs	r4, #0
 800b05a:	4413      	add	r3, r2
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	f7f5 f884 	bl	800016c <__adddf3>
 800b064:	4682      	mov	sl, r0
 800b066:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b068:	468b      	mov	fp, r1
 800b06a:	f7f5 f9cb 	bl	8000404 <__aeabi_i2d>
 800b06e:	4606      	mov	r6, r0
 800b070:	460f      	mov	r7, r1
 800b072:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b074:	4b2e      	ldr	r3, [pc, #184]	@ (800b130 <__ieee754_pow+0x780>)
 800b076:	4413      	add	r3, r2
 800b078:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b07c:	4652      	mov	r2, sl
 800b07e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b082:	465b      	mov	r3, fp
 800b084:	f7f5 f872 	bl	800016c <__adddf3>
 800b088:	4642      	mov	r2, r8
 800b08a:	464b      	mov	r3, r9
 800b08c:	f7f5 f86e 	bl	800016c <__adddf3>
 800b090:	4632      	mov	r2, r6
 800b092:	463b      	mov	r3, r7
 800b094:	f7f5 f86a 	bl	800016c <__adddf3>
 800b098:	4632      	mov	r2, r6
 800b09a:	463b      	mov	r3, r7
 800b09c:	4620      	mov	r0, r4
 800b09e:	460d      	mov	r5, r1
 800b0a0:	f7f5 f862 	bl	8000168 <__aeabi_dsub>
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	f7f5 f85e 	bl	8000168 <__aeabi_dsub>
 800b0ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0b0:	f7f5 f85a 	bl	8000168 <__aeabi_dsub>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4650      	mov	r0, sl
 800b0ba:	4659      	mov	r1, fp
 800b0bc:	e618      	b.n	800acf0 <__ieee754_pow+0x340>
 800b0be:	2400      	movs	r4, #0
 800b0c0:	e68a      	b.n	800add8 <__ieee754_pow+0x428>
 800b0c2:	2601      	movs	r6, #1
 800b0c4:	e6a0      	b.n	800ae08 <__ieee754_pow+0x458>
 800b0c6:	bf00      	nop
 800b0c8:	4a454eef 	.word	0x4a454eef
 800b0cc:	3fca7e28 	.word	0x3fca7e28
 800b0d0:	93c9db65 	.word	0x93c9db65
 800b0d4:	3fcd864a 	.word	0x3fcd864a
 800b0d8:	a91d4101 	.word	0xa91d4101
 800b0dc:	3fd17460 	.word	0x3fd17460
 800b0e0:	518f264d 	.word	0x518f264d
 800b0e4:	3fd55555 	.word	0x3fd55555
 800b0e8:	db6fabff 	.word	0xdb6fabff
 800b0ec:	3fdb6db6 	.word	0x3fdb6db6
 800b0f0:	33333303 	.word	0x33333303
 800b0f4:	3fe33333 	.word	0x3fe33333
 800b0f8:	e0000000 	.word	0xe0000000
 800b0fc:	3feec709 	.word	0x3feec709
 800b100:	dc3a03fd 	.word	0xdc3a03fd
 800b104:	3feec709 	.word	0x3feec709
 800b108:	145b01f5 	.word	0x145b01f5
 800b10c:	be3e2fe0 	.word	0xbe3e2fe0
 800b110:	7ff00000 	.word	0x7ff00000
 800b114:	43400000 	.word	0x43400000
 800b118:	0003988e 	.word	0x0003988e
 800b11c:	000bb679 	.word	0x000bb679
 800b120:	0800e7f8 	.word	0x0800e7f8
 800b124:	3ff00000 	.word	0x3ff00000
 800b128:	40080000 	.word	0x40080000
 800b12c:	0800e7d8 	.word	0x0800e7d8
 800b130:	0800e7e8 	.word	0x0800e7e8
 800b134:	a39a      	add	r3, pc, #616	@ (adr r3, 800b3a0 <__ieee754_pow+0x9f0>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	4630      	mov	r0, r6
 800b13c:	4639      	mov	r1, r7
 800b13e:	f7f5 f815 	bl	800016c <__adddf3>
 800b142:	4642      	mov	r2, r8
 800b144:	e9cd 0100 	strd	r0, r1, [sp]
 800b148:	464b      	mov	r3, r9
 800b14a:	4620      	mov	r0, r4
 800b14c:	4629      	mov	r1, r5
 800b14e:	f7f5 f80b 	bl	8000168 <__aeabi_dsub>
 800b152:	4602      	mov	r2, r0
 800b154:	460b      	mov	r3, r1
 800b156:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b15a:	f7f5 fc4d 	bl	80009f8 <__aeabi_dcmpgt>
 800b15e:	2800      	cmp	r0, #0
 800b160:	f47f ae09 	bne.w	800ad76 <__ieee754_pow+0x3c6>
 800b164:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b168:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b16c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b170:	fa43 fa0a 	asr.w	sl, r3, sl
 800b174:	44da      	add	sl, fp
 800b176:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b17a:	489b      	ldr	r0, [pc, #620]	@ (800b3e8 <__ieee754_pow+0xa38>)
 800b17c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b180:	4108      	asrs	r0, r1
 800b182:	ea00 030a 	and.w	r3, r0, sl
 800b186:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b18a:	f1c1 0114 	rsb	r1, r1, #20
 800b18e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b192:	4640      	mov	r0, r8
 800b194:	fa4a fa01 	asr.w	sl, sl, r1
 800b198:	f1bb 0f00 	cmp.w	fp, #0
 800b19c:	4649      	mov	r1, r9
 800b19e:	f04f 0200 	mov.w	r2, #0
 800b1a2:	bfb8      	it	lt
 800b1a4:	f1ca 0a00 	rsblt	sl, sl, #0
 800b1a8:	f7f4 ffde 	bl	8000168 <__aeabi_dsub>
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	4689      	mov	r9, r1
 800b1b0:	2400      	movs	r4, #0
 800b1b2:	4632      	mov	r2, r6
 800b1b4:	463b      	mov	r3, r7
 800b1b6:	4640      	mov	r0, r8
 800b1b8:	4649      	mov	r1, r9
 800b1ba:	f7f4 ffd7 	bl	800016c <__adddf3>
 800b1be:	a37a      	add	r3, pc, #488	@ (adr r3, 800b3a8 <__ieee754_pow+0x9f8>)
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	460d      	mov	r5, r1
 800b1c8:	f7f5 f986 	bl	80004d8 <__aeabi_dmul>
 800b1cc:	4642      	mov	r2, r8
 800b1ce:	464b      	mov	r3, r9
 800b1d0:	e9cd 0100 	strd	r0, r1, [sp]
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	f7f4 ffc6 	bl	8000168 <__aeabi_dsub>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	4639      	mov	r1, r7
 800b1e4:	f7f4 ffc0 	bl	8000168 <__aeabi_dsub>
 800b1e8:	a371      	add	r3, pc, #452	@ (adr r3, 800b3b0 <__ieee754_pow+0xa00>)
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	f7f5 f973 	bl	80004d8 <__aeabi_dmul>
 800b1f2:	a371      	add	r3, pc, #452	@ (adr r3, 800b3b8 <__ieee754_pow+0xa08>)
 800b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f8:	4680      	mov	r8, r0
 800b1fa:	4689      	mov	r9, r1
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	4629      	mov	r1, r5
 800b200:	f7f5 f96a 	bl	80004d8 <__aeabi_dmul>
 800b204:	4602      	mov	r2, r0
 800b206:	460b      	mov	r3, r1
 800b208:	4640      	mov	r0, r8
 800b20a:	4649      	mov	r1, r9
 800b20c:	f7f4 ffae 	bl	800016c <__adddf3>
 800b210:	4604      	mov	r4, r0
 800b212:	460d      	mov	r5, r1
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b21c:	f7f4 ffa6 	bl	800016c <__adddf3>
 800b220:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b224:	4680      	mov	r8, r0
 800b226:	4689      	mov	r9, r1
 800b228:	f7f4 ff9e 	bl	8000168 <__aeabi_dsub>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f4 ff98 	bl	8000168 <__aeabi_dsub>
 800b238:	4642      	mov	r2, r8
 800b23a:	4606      	mov	r6, r0
 800b23c:	460f      	mov	r7, r1
 800b23e:	464b      	mov	r3, r9
 800b240:	4640      	mov	r0, r8
 800b242:	4649      	mov	r1, r9
 800b244:	f7f5 f948 	bl	80004d8 <__aeabi_dmul>
 800b248:	a35d      	add	r3, pc, #372	@ (adr r3, 800b3c0 <__ieee754_pow+0xa10>)
 800b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24e:	4604      	mov	r4, r0
 800b250:	460d      	mov	r5, r1
 800b252:	f7f5 f941 	bl	80004d8 <__aeabi_dmul>
 800b256:	a35c      	add	r3, pc, #368	@ (adr r3, 800b3c8 <__ieee754_pow+0xa18>)
 800b258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25c:	f7f4 ff84 	bl	8000168 <__aeabi_dsub>
 800b260:	4622      	mov	r2, r4
 800b262:	462b      	mov	r3, r5
 800b264:	f7f5 f938 	bl	80004d8 <__aeabi_dmul>
 800b268:	a359      	add	r3, pc, #356	@ (adr r3, 800b3d0 <__ieee754_pow+0xa20>)
 800b26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26e:	f7f4 ff7d 	bl	800016c <__adddf3>
 800b272:	4622      	mov	r2, r4
 800b274:	462b      	mov	r3, r5
 800b276:	f7f5 f92f 	bl	80004d8 <__aeabi_dmul>
 800b27a:	a357      	add	r3, pc, #348	@ (adr r3, 800b3d8 <__ieee754_pow+0xa28>)
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f7f4 ff72 	bl	8000168 <__aeabi_dsub>
 800b284:	4622      	mov	r2, r4
 800b286:	462b      	mov	r3, r5
 800b288:	f7f5 f926 	bl	80004d8 <__aeabi_dmul>
 800b28c:	a354      	add	r3, pc, #336	@ (adr r3, 800b3e0 <__ieee754_pow+0xa30>)
 800b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b292:	f7f4 ff6b 	bl	800016c <__adddf3>
 800b296:	4622      	mov	r2, r4
 800b298:	462b      	mov	r3, r5
 800b29a:	f7f5 f91d 	bl	80004d8 <__aeabi_dmul>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	f7f4 ff5f 	bl	8000168 <__aeabi_dsub>
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	460d      	mov	r5, r1
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	f7f5 f90f 	bl	80004d8 <__aeabi_dmul>
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	e9cd 0100 	strd	r0, r1, [sp]
 800b2c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	f7f4 ff4e 	bl	8000168 <__aeabi_dsub>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2d4:	f7f5 fa2a 	bl	800072c <__aeabi_ddiv>
 800b2d8:	4632      	mov	r2, r6
 800b2da:	4604      	mov	r4, r0
 800b2dc:	460d      	mov	r5, r1
 800b2de:	463b      	mov	r3, r7
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	f7f5 f8f8 	bl	80004d8 <__aeabi_dmul>
 800b2e8:	4632      	mov	r2, r6
 800b2ea:	463b      	mov	r3, r7
 800b2ec:	f7f4 ff3e 	bl	800016c <__adddf3>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	f7f4 ff36 	bl	8000168 <__aeabi_dsub>
 800b2fc:	4642      	mov	r2, r8
 800b2fe:	464b      	mov	r3, r9
 800b300:	f7f4 ff32 	bl	8000168 <__aeabi_dsub>
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	2000      	movs	r0, #0
 800b30a:	4938      	ldr	r1, [pc, #224]	@ (800b3ec <__ieee754_pow+0xa3c>)
 800b30c:	f7f4 ff2c 	bl	8000168 <__aeabi_dsub>
 800b310:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b314:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800b318:	da2e      	bge.n	800b378 <__ieee754_pow+0x9c8>
 800b31a:	4652      	mov	r2, sl
 800b31c:	f000 f874 	bl	800b408 <scalbn>
 800b320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b324:	f7ff bbed 	b.w	800ab02 <__ieee754_pow+0x152>
 800b328:	4c31      	ldr	r4, [pc, #196]	@ (800b3f0 <__ieee754_pow+0xa40>)
 800b32a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b32e:	42a3      	cmp	r3, r4
 800b330:	d91a      	bls.n	800b368 <__ieee754_pow+0x9b8>
 800b332:	4b30      	ldr	r3, [pc, #192]	@ (800b3f4 <__ieee754_pow+0xa44>)
 800b334:	440b      	add	r3, r1
 800b336:	4303      	orrs	r3, r0
 800b338:	d009      	beq.n	800b34e <__ieee754_pow+0x99e>
 800b33a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b33e:	2200      	movs	r2, #0
 800b340:	2300      	movs	r3, #0
 800b342:	f7f5 fb3b 	bl	80009bc <__aeabi_dcmplt>
 800b346:	3800      	subs	r0, #0
 800b348:	bf18      	it	ne
 800b34a:	2001      	movne	r0, #1
 800b34c:	e444      	b.n	800abd8 <__ieee754_pow+0x228>
 800b34e:	4642      	mov	r2, r8
 800b350:	464b      	mov	r3, r9
 800b352:	f7f4 ff09 	bl	8000168 <__aeabi_dsub>
 800b356:	4632      	mov	r2, r6
 800b358:	463b      	mov	r3, r7
 800b35a:	f7f5 fb43 	bl	80009e4 <__aeabi_dcmpge>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d1eb      	bne.n	800b33a <__ieee754_pow+0x98a>
 800b362:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800b3f8 <__ieee754_pow+0xa48>
 800b366:	e6fd      	b.n	800b164 <__ieee754_pow+0x7b4>
 800b368:	469a      	mov	sl, r3
 800b36a:	4b24      	ldr	r3, [pc, #144]	@ (800b3fc <__ieee754_pow+0xa4c>)
 800b36c:	459a      	cmp	sl, r3
 800b36e:	f63f aef9 	bhi.w	800b164 <__ieee754_pow+0x7b4>
 800b372:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b376:	e71b      	b.n	800b1b0 <__ieee754_pow+0x800>
 800b378:	4621      	mov	r1, r4
 800b37a:	e7d1      	b.n	800b320 <__ieee754_pow+0x970>
 800b37c:	2000      	movs	r0, #0
 800b37e:	491b      	ldr	r1, [pc, #108]	@ (800b3ec <__ieee754_pow+0xa3c>)
 800b380:	f7ff bb34 	b.w	800a9ec <__ieee754_pow+0x3c>
 800b384:	2000      	movs	r0, #0
 800b386:	2100      	movs	r1, #0
 800b388:	f7ff bb30 	b.w	800a9ec <__ieee754_pow+0x3c>
 800b38c:	4650      	mov	r0, sl
 800b38e:	4659      	mov	r1, fp
 800b390:	f7ff bb2c 	b.w	800a9ec <__ieee754_pow+0x3c>
 800b394:	460c      	mov	r4, r1
 800b396:	f7ff bb79 	b.w	800aa8c <__ieee754_pow+0xdc>
 800b39a:	2400      	movs	r4, #0
 800b39c:	f7ff bb64 	b.w	800aa68 <__ieee754_pow+0xb8>
 800b3a0:	652b82fe 	.word	0x652b82fe
 800b3a4:	3c971547 	.word	0x3c971547
 800b3a8:	00000000 	.word	0x00000000
 800b3ac:	3fe62e43 	.word	0x3fe62e43
 800b3b0:	fefa39ef 	.word	0xfefa39ef
 800b3b4:	3fe62e42 	.word	0x3fe62e42
 800b3b8:	0ca86c39 	.word	0x0ca86c39
 800b3bc:	be205c61 	.word	0xbe205c61
 800b3c0:	72bea4d0 	.word	0x72bea4d0
 800b3c4:	3e663769 	.word	0x3e663769
 800b3c8:	c5d26bf1 	.word	0xc5d26bf1
 800b3cc:	3ebbbd41 	.word	0x3ebbbd41
 800b3d0:	af25de2c 	.word	0xaf25de2c
 800b3d4:	3f11566a 	.word	0x3f11566a
 800b3d8:	16bebd93 	.word	0x16bebd93
 800b3dc:	3f66c16c 	.word	0x3f66c16c
 800b3e0:	5555553e 	.word	0x5555553e
 800b3e4:	3fc55555 	.word	0x3fc55555
 800b3e8:	fff00000 	.word	0xfff00000
 800b3ec:	3ff00000 	.word	0x3ff00000
 800b3f0:	4090cbff 	.word	0x4090cbff
 800b3f4:	3f6f3400 	.word	0x3f6f3400
 800b3f8:	4090cc00 	.word	0x4090cc00
 800b3fc:	3fe00000 	.word	0x3fe00000

0800b400 <fabs>:
 800b400:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b404:	4619      	mov	r1, r3
 800b406:	4770      	bx	lr

0800b408 <scalbn>:
 800b408:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b40c:	4616      	mov	r6, r2
 800b40e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b412:	4683      	mov	fp, r0
 800b414:	468c      	mov	ip, r1
 800b416:	460b      	mov	r3, r1
 800b418:	b982      	cbnz	r2, 800b43c <scalbn+0x34>
 800b41a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b41e:	4303      	orrs	r3, r0
 800b420:	d039      	beq.n	800b496 <scalbn+0x8e>
 800b422:	4b2f      	ldr	r3, [pc, #188]	@ (800b4e0 <scalbn+0xd8>)
 800b424:	2200      	movs	r2, #0
 800b426:	f7f5 f857 	bl	80004d8 <__aeabi_dmul>
 800b42a:	4b2e      	ldr	r3, [pc, #184]	@ (800b4e4 <scalbn+0xdc>)
 800b42c:	4683      	mov	fp, r0
 800b42e:	429e      	cmp	r6, r3
 800b430:	468c      	mov	ip, r1
 800b432:	da0d      	bge.n	800b450 <scalbn+0x48>
 800b434:	a326      	add	r3, pc, #152	@ (adr r3, 800b4d0 <scalbn+0xc8>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	e01b      	b.n	800b474 <scalbn+0x6c>
 800b43c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800b440:	42ba      	cmp	r2, r7
 800b442:	d109      	bne.n	800b458 <scalbn+0x50>
 800b444:	4602      	mov	r2, r0
 800b446:	f7f4 fe91 	bl	800016c <__adddf3>
 800b44a:	4683      	mov	fp, r0
 800b44c:	468c      	mov	ip, r1
 800b44e:	e022      	b.n	800b496 <scalbn+0x8e>
 800b450:	460b      	mov	r3, r1
 800b452:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b456:	3a36      	subs	r2, #54	@ 0x36
 800b458:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b45c:	428e      	cmp	r6, r1
 800b45e:	dd0c      	ble.n	800b47a <scalbn+0x72>
 800b460:	a31d      	add	r3, pc, #116	@ (adr r3, 800b4d8 <scalbn+0xd0>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	461c      	mov	r4, r3
 800b468:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800b46c:	f361 74df 	bfi	r4, r1, #31, #1
 800b470:	4621      	mov	r1, r4
 800b472:	481d      	ldr	r0, [pc, #116]	@ (800b4e8 <scalbn+0xe0>)
 800b474:	f7f5 f830 	bl	80004d8 <__aeabi_dmul>
 800b478:	e7e7      	b.n	800b44a <scalbn+0x42>
 800b47a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b47e:	4432      	add	r2, r6
 800b480:	428a      	cmp	r2, r1
 800b482:	dced      	bgt.n	800b460 <scalbn+0x58>
 800b484:	2a00      	cmp	r2, #0
 800b486:	dd0a      	ble.n	800b49e <scalbn+0x96>
 800b488:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b48c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b490:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b494:	46ac      	mov	ip, r5
 800b496:	4658      	mov	r0, fp
 800b498:	4661      	mov	r1, ip
 800b49a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b49e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b4a2:	da09      	bge.n	800b4b8 <scalbn+0xb0>
 800b4a4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800b4a8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800b4ac:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800b4b0:	480e      	ldr	r0, [pc, #56]	@ (800b4ec <scalbn+0xe4>)
 800b4b2:	f041 011f 	orr.w	r1, r1, #31
 800b4b6:	e7bd      	b.n	800b434 <scalbn+0x2c>
 800b4b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b4bc:	3236      	adds	r2, #54	@ 0x36
 800b4be:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b4c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b4c6:	4658      	mov	r0, fp
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	4b08      	ldr	r3, [pc, #32]	@ (800b4f0 <scalbn+0xe8>)
 800b4ce:	e7d1      	b.n	800b474 <scalbn+0x6c>
 800b4d0:	c2f8f359 	.word	0xc2f8f359
 800b4d4:	01a56e1f 	.word	0x01a56e1f
 800b4d8:	8800759c 	.word	0x8800759c
 800b4dc:	7e37e43c 	.word	0x7e37e43c
 800b4e0:	43500000 	.word	0x43500000
 800b4e4:	ffff3cb0 	.word	0xffff3cb0
 800b4e8:	8800759c 	.word	0x8800759c
 800b4ec:	c2f8f359 	.word	0xc2f8f359
 800b4f0:	3c900000 	.word	0x3c900000

0800b4f4 <with_errno>:
 800b4f4:	b570      	push	{r4, r5, r6, lr}
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	460d      	mov	r5, r1
 800b4fa:	4616      	mov	r6, r2
 800b4fc:	f001 f81c 	bl	800c538 <__errno>
 800b500:	4629      	mov	r1, r5
 800b502:	6006      	str	r6, [r0, #0]
 800b504:	4620      	mov	r0, r4
 800b506:	bd70      	pop	{r4, r5, r6, pc}

0800b508 <xflow>:
 800b508:	b513      	push	{r0, r1, r4, lr}
 800b50a:	4604      	mov	r4, r0
 800b50c:	4619      	mov	r1, r3
 800b50e:	4610      	mov	r0, r2
 800b510:	b10c      	cbz	r4, 800b516 <xflow+0xe>
 800b512:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b516:	e9cd 2300 	strd	r2, r3, [sp]
 800b51a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b51e:	f7f4 ffdb 	bl	80004d8 <__aeabi_dmul>
 800b522:	2222      	movs	r2, #34	@ 0x22
 800b524:	b002      	add	sp, #8
 800b526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b52a:	f7ff bfe3 	b.w	800b4f4 <with_errno>

0800b52e <__math_uflow>:
 800b52e:	2200      	movs	r2, #0
 800b530:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b534:	f7ff bfe8 	b.w	800b508 <xflow>

0800b538 <__math_oflow>:
 800b538:	2200      	movs	r2, #0
 800b53a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800b53e:	f7ff bfe3 	b.w	800b508 <xflow>
	...

0800b544 <__ieee754_sqrt>:
 800b544:	4a67      	ldr	r2, [pc, #412]	@ (800b6e4 <__ieee754_sqrt+0x1a0>)
 800b546:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54a:	438a      	bics	r2, r1
 800b54c:	4606      	mov	r6, r0
 800b54e:	460f      	mov	r7, r1
 800b550:	460b      	mov	r3, r1
 800b552:	4604      	mov	r4, r0
 800b554:	d10e      	bne.n	800b574 <__ieee754_sqrt+0x30>
 800b556:	4602      	mov	r2, r0
 800b558:	f7f4 ffbe 	bl	80004d8 <__aeabi_dmul>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f4 fe02 	bl	800016c <__adddf3>
 800b568:	4606      	mov	r6, r0
 800b56a:	460f      	mov	r7, r1
 800b56c:	4630      	mov	r0, r6
 800b56e:	4639      	mov	r1, r7
 800b570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	2900      	cmp	r1, #0
 800b576:	dc0c      	bgt.n	800b592 <__ieee754_sqrt+0x4e>
 800b578:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b57c:	4302      	orrs	r2, r0
 800b57e:	d0f5      	beq.n	800b56c <__ieee754_sqrt+0x28>
 800b580:	b189      	cbz	r1, 800b5a6 <__ieee754_sqrt+0x62>
 800b582:	4602      	mov	r2, r0
 800b584:	f7f4 fdf0 	bl	8000168 <__aeabi_dsub>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	f7f5 f8ce 	bl	800072c <__aeabi_ddiv>
 800b590:	e7ea      	b.n	800b568 <__ieee754_sqrt+0x24>
 800b592:	150a      	asrs	r2, r1, #20
 800b594:	d115      	bne.n	800b5c2 <__ieee754_sqrt+0x7e>
 800b596:	2100      	movs	r1, #0
 800b598:	e009      	b.n	800b5ae <__ieee754_sqrt+0x6a>
 800b59a:	0ae3      	lsrs	r3, r4, #11
 800b59c:	3a15      	subs	r2, #21
 800b59e:	0564      	lsls	r4, r4, #21
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d0fa      	beq.n	800b59a <__ieee754_sqrt+0x56>
 800b5a4:	e7f7      	b.n	800b596 <__ieee754_sqrt+0x52>
 800b5a6:	460a      	mov	r2, r1
 800b5a8:	e7fa      	b.n	800b5a0 <__ieee754_sqrt+0x5c>
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	3101      	adds	r1, #1
 800b5ae:	02d8      	lsls	r0, r3, #11
 800b5b0:	d5fb      	bpl.n	800b5aa <__ieee754_sqrt+0x66>
 800b5b2:	1e48      	subs	r0, r1, #1
 800b5b4:	1a12      	subs	r2, r2, r0
 800b5b6:	f1c1 0020 	rsb	r0, r1, #32
 800b5ba:	fa24 f000 	lsr.w	r0, r4, r0
 800b5be:	4303      	orrs	r3, r0
 800b5c0:	408c      	lsls	r4, r1
 800b5c2:	2600      	movs	r6, #0
 800b5c4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b5c8:	2116      	movs	r1, #22
 800b5ca:	07d2      	lsls	r2, r2, #31
 800b5cc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5da:	bf5c      	itt	pl
 800b5dc:	005b      	lslpl	r3, r3, #1
 800b5de:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b5e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5e6:	bf58      	it	pl
 800b5e8:	0064      	lslpl	r4, r4, #1
 800b5ea:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b5ee:	107f      	asrs	r7, r7, #1
 800b5f0:	0064      	lsls	r4, r4, #1
 800b5f2:	1815      	adds	r5, r2, r0
 800b5f4:	429d      	cmp	r5, r3
 800b5f6:	bfde      	ittt	le
 800b5f8:	182a      	addle	r2, r5, r0
 800b5fa:	1b5b      	suble	r3, r3, r5
 800b5fc:	1836      	addle	r6, r6, r0
 800b5fe:	0fe5      	lsrs	r5, r4, #31
 800b600:	3901      	subs	r1, #1
 800b602:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b606:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b60a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b60e:	d1f0      	bne.n	800b5f2 <__ieee754_sqrt+0xae>
 800b610:	460d      	mov	r5, r1
 800b612:	f04f 0a20 	mov.w	sl, #32
 800b616:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b61a:	429a      	cmp	r2, r3
 800b61c:	eb01 0c00 	add.w	ip, r1, r0
 800b620:	db02      	blt.n	800b628 <__ieee754_sqrt+0xe4>
 800b622:	d113      	bne.n	800b64c <__ieee754_sqrt+0x108>
 800b624:	45a4      	cmp	ip, r4
 800b626:	d811      	bhi.n	800b64c <__ieee754_sqrt+0x108>
 800b628:	f1bc 0f00 	cmp.w	ip, #0
 800b62c:	eb0c 0100 	add.w	r1, ip, r0
 800b630:	da42      	bge.n	800b6b8 <__ieee754_sqrt+0x174>
 800b632:	2900      	cmp	r1, #0
 800b634:	db40      	blt.n	800b6b8 <__ieee754_sqrt+0x174>
 800b636:	f102 0e01 	add.w	lr, r2, #1
 800b63a:	1a9b      	subs	r3, r3, r2
 800b63c:	4672      	mov	r2, lr
 800b63e:	45a4      	cmp	ip, r4
 800b640:	bf88      	it	hi
 800b642:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800b646:	eba4 040c 	sub.w	r4, r4, ip
 800b64a:	4405      	add	r5, r0
 800b64c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b650:	f1ba 0a01 	subs.w	sl, sl, #1
 800b654:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b658:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b65c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b660:	d1db      	bne.n	800b61a <__ieee754_sqrt+0xd6>
 800b662:	431c      	orrs	r4, r3
 800b664:	d01a      	beq.n	800b69c <__ieee754_sqrt+0x158>
 800b666:	4c20      	ldr	r4, [pc, #128]	@ (800b6e8 <__ieee754_sqrt+0x1a4>)
 800b668:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800b6ec <__ieee754_sqrt+0x1a8>
 800b66c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b670:	e9db 2300 	ldrd	r2, r3, [fp]
 800b674:	f7f4 fd78 	bl	8000168 <__aeabi_dsub>
 800b678:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	4640      	mov	r0, r8
 800b682:	4649      	mov	r1, r9
 800b684:	f7f5 f9a4 	bl	80009d0 <__aeabi_dcmple>
 800b688:	b140      	cbz	r0, 800b69c <__ieee754_sqrt+0x158>
 800b68a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b68e:	e9db 2300 	ldrd	r2, r3, [fp]
 800b692:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800b696:	d111      	bne.n	800b6bc <__ieee754_sqrt+0x178>
 800b698:	4655      	mov	r5, sl
 800b69a:	3601      	adds	r6, #1
 800b69c:	1072      	asrs	r2, r6, #1
 800b69e:	086b      	lsrs	r3, r5, #1
 800b6a0:	07f1      	lsls	r1, r6, #31
 800b6a2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b6a6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b6aa:	bf48      	it	mi
 800b6ac:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800b6b6:	e757      	b.n	800b568 <__ieee754_sqrt+0x24>
 800b6b8:	4696      	mov	lr, r2
 800b6ba:	e7be      	b.n	800b63a <__ieee754_sqrt+0xf6>
 800b6bc:	f7f4 fd56 	bl	800016c <__adddf3>
 800b6c0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	f7f5 f976 	bl	80009bc <__aeabi_dcmplt>
 800b6d0:	b120      	cbz	r0, 800b6dc <__ieee754_sqrt+0x198>
 800b6d2:	1ca8      	adds	r0, r5, #2
 800b6d4:	bf08      	it	eq
 800b6d6:	3601      	addeq	r6, #1
 800b6d8:	3502      	adds	r5, #2
 800b6da:	e7df      	b.n	800b69c <__ieee754_sqrt+0x158>
 800b6dc:	1c6b      	adds	r3, r5, #1
 800b6de:	f023 0501 	bic.w	r5, r3, #1
 800b6e2:	e7db      	b.n	800b69c <__ieee754_sqrt+0x158>
 800b6e4:	7ff00000 	.word	0x7ff00000
 800b6e8:	20000038 	.word	0x20000038
 800b6ec:	20000030 	.word	0x20000030

0800b6f0 <abort>:
 800b6f0:	2006      	movs	r0, #6
 800b6f2:	b508      	push	{r3, lr}
 800b6f4:	f000 feaa 	bl	800c44c <raise>
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	f7f8 fabc 	bl	8003c76 <_exit>
	...

0800b700 <malloc>:
 800b700:	4b02      	ldr	r3, [pc, #8]	@ (800b70c <malloc+0xc>)
 800b702:	4601      	mov	r1, r0
 800b704:	6818      	ldr	r0, [r3, #0]
 800b706:	f000 b82d 	b.w	800b764 <_malloc_r>
 800b70a:	bf00      	nop
 800b70c:	2000004c 	.word	0x2000004c

0800b710 <free>:
 800b710:	4b02      	ldr	r3, [pc, #8]	@ (800b71c <free+0xc>)
 800b712:	4601      	mov	r1, r0
 800b714:	6818      	ldr	r0, [r3, #0]
 800b716:	f001 bdab 	b.w	800d270 <_free_r>
 800b71a:	bf00      	nop
 800b71c:	2000004c 	.word	0x2000004c

0800b720 <sbrk_aligned>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	4e0f      	ldr	r6, [pc, #60]	@ (800b760 <sbrk_aligned+0x40>)
 800b724:	460c      	mov	r4, r1
 800b726:	6831      	ldr	r1, [r6, #0]
 800b728:	4605      	mov	r5, r0
 800b72a:	b911      	cbnz	r1, 800b732 <sbrk_aligned+0x12>
 800b72c:	f000 fee2 	bl	800c4f4 <_sbrk_r>
 800b730:	6030      	str	r0, [r6, #0]
 800b732:	4621      	mov	r1, r4
 800b734:	4628      	mov	r0, r5
 800b736:	f000 fedd 	bl	800c4f4 <_sbrk_r>
 800b73a:	1c43      	adds	r3, r0, #1
 800b73c:	d103      	bne.n	800b746 <sbrk_aligned+0x26>
 800b73e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b742:	4620      	mov	r0, r4
 800b744:	bd70      	pop	{r4, r5, r6, pc}
 800b746:	1cc4      	adds	r4, r0, #3
 800b748:	f024 0403 	bic.w	r4, r4, #3
 800b74c:	42a0      	cmp	r0, r4
 800b74e:	d0f8      	beq.n	800b742 <sbrk_aligned+0x22>
 800b750:	1a21      	subs	r1, r4, r0
 800b752:	4628      	mov	r0, r5
 800b754:	f000 fece 	bl	800c4f4 <_sbrk_r>
 800b758:	3001      	adds	r0, #1
 800b75a:	d1f2      	bne.n	800b742 <sbrk_aligned+0x22>
 800b75c:	e7ef      	b.n	800b73e <sbrk_aligned+0x1e>
 800b75e:	bf00      	nop
 800b760:	2000262c 	.word	0x2000262c

0800b764 <_malloc_r>:
 800b764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b768:	1ccd      	adds	r5, r1, #3
 800b76a:	f025 0503 	bic.w	r5, r5, #3
 800b76e:	3508      	adds	r5, #8
 800b770:	2d0c      	cmp	r5, #12
 800b772:	bf38      	it	cc
 800b774:	250c      	movcc	r5, #12
 800b776:	2d00      	cmp	r5, #0
 800b778:	4606      	mov	r6, r0
 800b77a:	db01      	blt.n	800b780 <_malloc_r+0x1c>
 800b77c:	42a9      	cmp	r1, r5
 800b77e:	d904      	bls.n	800b78a <_malloc_r+0x26>
 800b780:	230c      	movs	r3, #12
 800b782:	6033      	str	r3, [r6, #0]
 800b784:	2000      	movs	r0, #0
 800b786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b78a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b860 <_malloc_r+0xfc>
 800b78e:	f000 f869 	bl	800b864 <__malloc_lock>
 800b792:	f8d8 3000 	ldr.w	r3, [r8]
 800b796:	461c      	mov	r4, r3
 800b798:	bb44      	cbnz	r4, 800b7ec <_malloc_r+0x88>
 800b79a:	4629      	mov	r1, r5
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7ff ffbf 	bl	800b720 <sbrk_aligned>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	d158      	bne.n	800b85a <_malloc_r+0xf6>
 800b7a8:	f8d8 4000 	ldr.w	r4, [r8]
 800b7ac:	4627      	mov	r7, r4
 800b7ae:	2f00      	cmp	r7, #0
 800b7b0:	d143      	bne.n	800b83a <_malloc_r+0xd6>
 800b7b2:	2c00      	cmp	r4, #0
 800b7b4:	d04b      	beq.n	800b84e <_malloc_r+0xea>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	4639      	mov	r1, r7
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	eb04 0903 	add.w	r9, r4, r3
 800b7c0:	f000 fe98 	bl	800c4f4 <_sbrk_r>
 800b7c4:	4581      	cmp	r9, r0
 800b7c6:	d142      	bne.n	800b84e <_malloc_r+0xea>
 800b7c8:	6821      	ldr	r1, [r4, #0]
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	1a6d      	subs	r5, r5, r1
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	f7ff ffa6 	bl	800b720 <sbrk_aligned>
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	d03a      	beq.n	800b84e <_malloc_r+0xea>
 800b7d8:	6823      	ldr	r3, [r4, #0]
 800b7da:	442b      	add	r3, r5
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	f8d8 3000 	ldr.w	r3, [r8]
 800b7e2:	685a      	ldr	r2, [r3, #4]
 800b7e4:	bb62      	cbnz	r2, 800b840 <_malloc_r+0xdc>
 800b7e6:	f8c8 7000 	str.w	r7, [r8]
 800b7ea:	e00f      	b.n	800b80c <_malloc_r+0xa8>
 800b7ec:	6822      	ldr	r2, [r4, #0]
 800b7ee:	1b52      	subs	r2, r2, r5
 800b7f0:	d420      	bmi.n	800b834 <_malloc_r+0xd0>
 800b7f2:	2a0b      	cmp	r2, #11
 800b7f4:	d917      	bls.n	800b826 <_malloc_r+0xc2>
 800b7f6:	1961      	adds	r1, r4, r5
 800b7f8:	42a3      	cmp	r3, r4
 800b7fa:	6025      	str	r5, [r4, #0]
 800b7fc:	bf18      	it	ne
 800b7fe:	6059      	strne	r1, [r3, #4]
 800b800:	6863      	ldr	r3, [r4, #4]
 800b802:	bf08      	it	eq
 800b804:	f8c8 1000 	streq.w	r1, [r8]
 800b808:	5162      	str	r2, [r4, r5]
 800b80a:	604b      	str	r3, [r1, #4]
 800b80c:	4630      	mov	r0, r6
 800b80e:	f000 f82f 	bl	800b870 <__malloc_unlock>
 800b812:	f104 000b 	add.w	r0, r4, #11
 800b816:	1d23      	adds	r3, r4, #4
 800b818:	f020 0007 	bic.w	r0, r0, #7
 800b81c:	1ac2      	subs	r2, r0, r3
 800b81e:	bf1c      	itt	ne
 800b820:	1a1b      	subne	r3, r3, r0
 800b822:	50a3      	strne	r3, [r4, r2]
 800b824:	e7af      	b.n	800b786 <_malloc_r+0x22>
 800b826:	6862      	ldr	r2, [r4, #4]
 800b828:	42a3      	cmp	r3, r4
 800b82a:	bf0c      	ite	eq
 800b82c:	f8c8 2000 	streq.w	r2, [r8]
 800b830:	605a      	strne	r2, [r3, #4]
 800b832:	e7eb      	b.n	800b80c <_malloc_r+0xa8>
 800b834:	4623      	mov	r3, r4
 800b836:	6864      	ldr	r4, [r4, #4]
 800b838:	e7ae      	b.n	800b798 <_malloc_r+0x34>
 800b83a:	463c      	mov	r4, r7
 800b83c:	687f      	ldr	r7, [r7, #4]
 800b83e:	e7b6      	b.n	800b7ae <_malloc_r+0x4a>
 800b840:	461a      	mov	r2, r3
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	42a3      	cmp	r3, r4
 800b846:	d1fb      	bne.n	800b840 <_malloc_r+0xdc>
 800b848:	2300      	movs	r3, #0
 800b84a:	6053      	str	r3, [r2, #4]
 800b84c:	e7de      	b.n	800b80c <_malloc_r+0xa8>
 800b84e:	230c      	movs	r3, #12
 800b850:	4630      	mov	r0, r6
 800b852:	6033      	str	r3, [r6, #0]
 800b854:	f000 f80c 	bl	800b870 <__malloc_unlock>
 800b858:	e794      	b.n	800b784 <_malloc_r+0x20>
 800b85a:	6005      	str	r5, [r0, #0]
 800b85c:	e7d6      	b.n	800b80c <_malloc_r+0xa8>
 800b85e:	bf00      	nop
 800b860:	20002630 	.word	0x20002630

0800b864 <__malloc_lock>:
 800b864:	4801      	ldr	r0, [pc, #4]	@ (800b86c <__malloc_lock+0x8>)
 800b866:	f000 be92 	b.w	800c58e <__retarget_lock_acquire_recursive>
 800b86a:	bf00      	nop
 800b86c:	20002774 	.word	0x20002774

0800b870 <__malloc_unlock>:
 800b870:	4801      	ldr	r0, [pc, #4]	@ (800b878 <__malloc_unlock+0x8>)
 800b872:	f000 be8d 	b.w	800c590 <__retarget_lock_release_recursive>
 800b876:	bf00      	nop
 800b878:	20002774 	.word	0x20002774

0800b87c <realloc>:
 800b87c:	4b02      	ldr	r3, [pc, #8]	@ (800b888 <realloc+0xc>)
 800b87e:	460a      	mov	r2, r1
 800b880:	4601      	mov	r1, r0
 800b882:	6818      	ldr	r0, [r3, #0]
 800b884:	f000 b802 	b.w	800b88c <_realloc_r>
 800b888:	2000004c 	.word	0x2000004c

0800b88c <_realloc_r>:
 800b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b890:	4680      	mov	r8, r0
 800b892:	4615      	mov	r5, r2
 800b894:	460c      	mov	r4, r1
 800b896:	b921      	cbnz	r1, 800b8a2 <_realloc_r+0x16>
 800b898:	4611      	mov	r1, r2
 800b89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b89e:	f7ff bf61 	b.w	800b764 <_malloc_r>
 800b8a2:	b92a      	cbnz	r2, 800b8b0 <_realloc_r+0x24>
 800b8a4:	f001 fce4 	bl	800d270 <_free_r>
 800b8a8:	2400      	movs	r4, #0
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b0:	f002 f8a6 	bl	800da00 <_malloc_usable_size_r>
 800b8b4:	4285      	cmp	r5, r0
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	d802      	bhi.n	800b8c0 <_realloc_r+0x34>
 800b8ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b8be:	d8f4      	bhi.n	800b8aa <_realloc_r+0x1e>
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	f7ff ff4e 	bl	800b764 <_malloc_r>
 800b8c8:	4607      	mov	r7, r0
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d0ec      	beq.n	800b8a8 <_realloc_r+0x1c>
 800b8ce:	42b5      	cmp	r5, r6
 800b8d0:	462a      	mov	r2, r5
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	bf28      	it	cs
 800b8d6:	4632      	movcs	r2, r6
 800b8d8:	f000 fe69 	bl	800c5ae <memcpy>
 800b8dc:	4621      	mov	r1, r4
 800b8de:	4640      	mov	r0, r8
 800b8e0:	f001 fcc6 	bl	800d270 <_free_r>
 800b8e4:	463c      	mov	r4, r7
 800b8e6:	e7e0      	b.n	800b8aa <_realloc_r+0x1e>

0800b8e8 <__cvt>:
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ee:	461d      	mov	r5, r3
 800b8f0:	bfbb      	ittet	lt
 800b8f2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b8f6:	461d      	movlt	r5, r3
 800b8f8:	2300      	movge	r3, #0
 800b8fa:	232d      	movlt	r3, #45	@ 0x2d
 800b8fc:	b088      	sub	sp, #32
 800b8fe:	4614      	mov	r4, r2
 800b900:	bfb8      	it	lt
 800b902:	4614      	movlt	r4, r2
 800b904:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b906:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b908:	7013      	strb	r3, [r2, #0]
 800b90a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b90c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b910:	f023 0820 	bic.w	r8, r3, #32
 800b914:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b918:	d005      	beq.n	800b926 <__cvt+0x3e>
 800b91a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b91e:	d100      	bne.n	800b922 <__cvt+0x3a>
 800b920:	3601      	adds	r6, #1
 800b922:	2302      	movs	r3, #2
 800b924:	e000      	b.n	800b928 <__cvt+0x40>
 800b926:	2303      	movs	r3, #3
 800b928:	aa07      	add	r2, sp, #28
 800b92a:	9204      	str	r2, [sp, #16]
 800b92c:	aa06      	add	r2, sp, #24
 800b92e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b932:	e9cd 3600 	strd	r3, r6, [sp]
 800b936:	4622      	mov	r2, r4
 800b938:	462b      	mov	r3, r5
 800b93a:	f000 fed1 	bl	800c6e0 <_dtoa_r>
 800b93e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b942:	4607      	mov	r7, r0
 800b944:	d119      	bne.n	800b97a <__cvt+0x92>
 800b946:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b948:	07db      	lsls	r3, r3, #31
 800b94a:	d50e      	bpl.n	800b96a <__cvt+0x82>
 800b94c:	eb00 0906 	add.w	r9, r0, r6
 800b950:	2200      	movs	r2, #0
 800b952:	2300      	movs	r3, #0
 800b954:	4620      	mov	r0, r4
 800b956:	4629      	mov	r1, r5
 800b958:	f7f5 f826 	bl	80009a8 <__aeabi_dcmpeq>
 800b95c:	b108      	cbz	r0, 800b962 <__cvt+0x7a>
 800b95e:	f8cd 901c 	str.w	r9, [sp, #28]
 800b962:	2230      	movs	r2, #48	@ 0x30
 800b964:	9b07      	ldr	r3, [sp, #28]
 800b966:	454b      	cmp	r3, r9
 800b968:	d31e      	bcc.n	800b9a8 <__cvt+0xc0>
 800b96a:	4638      	mov	r0, r7
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b970:	1bdb      	subs	r3, r3, r7
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	b008      	add	sp, #32
 800b976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b97e:	eb00 0906 	add.w	r9, r0, r6
 800b982:	d1e5      	bne.n	800b950 <__cvt+0x68>
 800b984:	7803      	ldrb	r3, [r0, #0]
 800b986:	2b30      	cmp	r3, #48	@ 0x30
 800b988:	d10a      	bne.n	800b9a0 <__cvt+0xb8>
 800b98a:	2200      	movs	r2, #0
 800b98c:	2300      	movs	r3, #0
 800b98e:	4620      	mov	r0, r4
 800b990:	4629      	mov	r1, r5
 800b992:	f7f5 f809 	bl	80009a8 <__aeabi_dcmpeq>
 800b996:	b918      	cbnz	r0, 800b9a0 <__cvt+0xb8>
 800b998:	f1c6 0601 	rsb	r6, r6, #1
 800b99c:	f8ca 6000 	str.w	r6, [sl]
 800b9a0:	f8da 3000 	ldr.w	r3, [sl]
 800b9a4:	4499      	add	r9, r3
 800b9a6:	e7d3      	b.n	800b950 <__cvt+0x68>
 800b9a8:	1c59      	adds	r1, r3, #1
 800b9aa:	9107      	str	r1, [sp, #28]
 800b9ac:	701a      	strb	r2, [r3, #0]
 800b9ae:	e7d9      	b.n	800b964 <__cvt+0x7c>

0800b9b0 <__exponent>:
 800b9b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9b2:	2900      	cmp	r1, #0
 800b9b4:	bfb6      	itet	lt
 800b9b6:	232d      	movlt	r3, #45	@ 0x2d
 800b9b8:	232b      	movge	r3, #43	@ 0x2b
 800b9ba:	4249      	neglt	r1, r1
 800b9bc:	2909      	cmp	r1, #9
 800b9be:	7002      	strb	r2, [r0, #0]
 800b9c0:	7043      	strb	r3, [r0, #1]
 800b9c2:	dd29      	ble.n	800ba18 <__exponent+0x68>
 800b9c4:	f10d 0307 	add.w	r3, sp, #7
 800b9c8:	461d      	mov	r5, r3
 800b9ca:	270a      	movs	r7, #10
 800b9cc:	fbb1 f6f7 	udiv	r6, r1, r7
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	fb07 1416 	mls	r4, r7, r6, r1
 800b9d6:	3430      	adds	r4, #48	@ 0x30
 800b9d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b9dc:	460c      	mov	r4, r1
 800b9de:	2c63      	cmp	r4, #99	@ 0x63
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b9e6:	dcf1      	bgt.n	800b9cc <__exponent+0x1c>
 800b9e8:	3130      	adds	r1, #48	@ 0x30
 800b9ea:	1e94      	subs	r4, r2, #2
 800b9ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9f0:	4623      	mov	r3, r4
 800b9f2:	1c41      	adds	r1, r0, #1
 800b9f4:	42ab      	cmp	r3, r5
 800b9f6:	d30a      	bcc.n	800ba0e <__exponent+0x5e>
 800b9f8:	f10d 0309 	add.w	r3, sp, #9
 800b9fc:	1a9b      	subs	r3, r3, r2
 800b9fe:	42ac      	cmp	r4, r5
 800ba00:	bf88      	it	hi
 800ba02:	2300      	movhi	r3, #0
 800ba04:	3302      	adds	r3, #2
 800ba06:	4403      	add	r3, r0
 800ba08:	1a18      	subs	r0, r3, r0
 800ba0a:	b003      	add	sp, #12
 800ba0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba0e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ba12:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ba16:	e7ed      	b.n	800b9f4 <__exponent+0x44>
 800ba18:	2330      	movs	r3, #48	@ 0x30
 800ba1a:	3130      	adds	r1, #48	@ 0x30
 800ba1c:	7083      	strb	r3, [r0, #2]
 800ba1e:	70c1      	strb	r1, [r0, #3]
 800ba20:	1d03      	adds	r3, r0, #4
 800ba22:	e7f1      	b.n	800ba08 <__exponent+0x58>

0800ba24 <_printf_float>:
 800ba24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba28:	b091      	sub	sp, #68	@ 0x44
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800ba30:	4616      	mov	r6, r2
 800ba32:	461f      	mov	r7, r3
 800ba34:	4605      	mov	r5, r0
 800ba36:	f000 fd11 	bl	800c45c <_localeconv_r>
 800ba3a:	6803      	ldr	r3, [r0, #0]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	9308      	str	r3, [sp, #32]
 800ba40:	f7f4 fb86 	bl	8000150 <strlen>
 800ba44:	2300      	movs	r3, #0
 800ba46:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba48:	f8d8 3000 	ldr.w	r3, [r8]
 800ba4c:	9009      	str	r0, [sp, #36]	@ 0x24
 800ba4e:	3307      	adds	r3, #7
 800ba50:	f023 0307 	bic.w	r3, r3, #7
 800ba54:	f103 0208 	add.w	r2, r3, #8
 800ba58:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba5c:	f8d4 b000 	ldr.w	fp, [r4]
 800ba60:	f8c8 2000 	str.w	r2, [r8]
 800ba64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba6e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ba72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba7e:	4b9c      	ldr	r3, [pc, #624]	@ (800bcf0 <_printf_float+0x2cc>)
 800ba80:	f7f4 ffc4 	bl	8000a0c <__aeabi_dcmpun>
 800ba84:	bb70      	cbnz	r0, 800bae4 <_printf_float+0xc0>
 800ba86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba8e:	4b98      	ldr	r3, [pc, #608]	@ (800bcf0 <_printf_float+0x2cc>)
 800ba90:	f7f4 ff9e 	bl	80009d0 <__aeabi_dcmple>
 800ba94:	bb30      	cbnz	r0, 800bae4 <_printf_float+0xc0>
 800ba96:	2200      	movs	r2, #0
 800ba98:	2300      	movs	r3, #0
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	4649      	mov	r1, r9
 800ba9e:	f7f4 ff8d 	bl	80009bc <__aeabi_dcmplt>
 800baa2:	b110      	cbz	r0, 800baaa <_printf_float+0x86>
 800baa4:	232d      	movs	r3, #45	@ 0x2d
 800baa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baaa:	4a92      	ldr	r2, [pc, #584]	@ (800bcf4 <_printf_float+0x2d0>)
 800baac:	4b92      	ldr	r3, [pc, #584]	@ (800bcf8 <_printf_float+0x2d4>)
 800baae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bab2:	bf94      	ite	ls
 800bab4:	4690      	movls	r8, r2
 800bab6:	4698      	movhi	r8, r3
 800bab8:	2303      	movs	r3, #3
 800baba:	f04f 0900 	mov.w	r9, #0
 800babe:	6123      	str	r3, [r4, #16]
 800bac0:	f02b 0304 	bic.w	r3, fp, #4
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	4633      	mov	r3, r6
 800bac8:	4621      	mov	r1, r4
 800baca:	4628      	mov	r0, r5
 800bacc:	9700      	str	r7, [sp, #0]
 800bace:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bad0:	f000 f9d4 	bl	800be7c <_printf_common>
 800bad4:	3001      	adds	r0, #1
 800bad6:	f040 8090 	bne.w	800bbfa <_printf_float+0x1d6>
 800bada:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bade:	b011      	add	sp, #68	@ 0x44
 800bae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae4:	4642      	mov	r2, r8
 800bae6:	464b      	mov	r3, r9
 800bae8:	4640      	mov	r0, r8
 800baea:	4649      	mov	r1, r9
 800baec:	f7f4 ff8e 	bl	8000a0c <__aeabi_dcmpun>
 800baf0:	b148      	cbz	r0, 800bb06 <_printf_float+0xe2>
 800baf2:	464b      	mov	r3, r9
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	bfb8      	it	lt
 800baf8:	232d      	movlt	r3, #45	@ 0x2d
 800bafa:	4a80      	ldr	r2, [pc, #512]	@ (800bcfc <_printf_float+0x2d8>)
 800bafc:	bfb8      	it	lt
 800bafe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bb02:	4b7f      	ldr	r3, [pc, #508]	@ (800bd00 <_printf_float+0x2dc>)
 800bb04:	e7d3      	b.n	800baae <_printf_float+0x8a>
 800bb06:	6863      	ldr	r3, [r4, #4]
 800bb08:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800bb0c:	1c5a      	adds	r2, r3, #1
 800bb0e:	d13f      	bne.n	800bb90 <_printf_float+0x16c>
 800bb10:	2306      	movs	r3, #6
 800bb12:	6063      	str	r3, [r4, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800bb1a:	6023      	str	r3, [r4, #0]
 800bb1c:	9206      	str	r2, [sp, #24]
 800bb1e:	aa0e      	add	r2, sp, #56	@ 0x38
 800bb20:	e9cd a204 	strd	sl, r2, [sp, #16]
 800bb24:	aa0d      	add	r2, sp, #52	@ 0x34
 800bb26:	9203      	str	r2, [sp, #12]
 800bb28:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800bb2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bb30:	6863      	ldr	r3, [r4, #4]
 800bb32:	4642      	mov	r2, r8
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	4628      	mov	r0, r5
 800bb38:	464b      	mov	r3, r9
 800bb3a:	910a      	str	r1, [sp, #40]	@ 0x28
 800bb3c:	f7ff fed4 	bl	800b8e8 <__cvt>
 800bb40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb42:	4680      	mov	r8, r0
 800bb44:	2947      	cmp	r1, #71	@ 0x47
 800bb46:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800bb48:	d128      	bne.n	800bb9c <_printf_float+0x178>
 800bb4a:	1cc8      	adds	r0, r1, #3
 800bb4c:	db02      	blt.n	800bb54 <_printf_float+0x130>
 800bb4e:	6863      	ldr	r3, [r4, #4]
 800bb50:	4299      	cmp	r1, r3
 800bb52:	dd40      	ble.n	800bbd6 <_printf_float+0x1b2>
 800bb54:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb58:	fa5f fa8a 	uxtb.w	sl, sl
 800bb5c:	4652      	mov	r2, sl
 800bb5e:	3901      	subs	r1, #1
 800bb60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb64:	910d      	str	r1, [sp, #52]	@ 0x34
 800bb66:	f7ff ff23 	bl	800b9b0 <__exponent>
 800bb6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb6c:	4681      	mov	r9, r0
 800bb6e:	1813      	adds	r3, r2, r0
 800bb70:	2a01      	cmp	r2, #1
 800bb72:	6123      	str	r3, [r4, #16]
 800bb74:	dc02      	bgt.n	800bb7c <_printf_float+0x158>
 800bb76:	6822      	ldr	r2, [r4, #0]
 800bb78:	07d2      	lsls	r2, r2, #31
 800bb7a:	d501      	bpl.n	800bb80 <_printf_float+0x15c>
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	6123      	str	r3, [r4, #16]
 800bb80:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d09e      	beq.n	800bac6 <_printf_float+0xa2>
 800bb88:	232d      	movs	r3, #45	@ 0x2d
 800bb8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb8e:	e79a      	b.n	800bac6 <_printf_float+0xa2>
 800bb90:	2947      	cmp	r1, #71	@ 0x47
 800bb92:	d1bf      	bne.n	800bb14 <_printf_float+0xf0>
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1bd      	bne.n	800bb14 <_printf_float+0xf0>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e7ba      	b.n	800bb12 <_printf_float+0xee>
 800bb9c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bba0:	d9dc      	bls.n	800bb5c <_printf_float+0x138>
 800bba2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bba6:	d118      	bne.n	800bbda <_printf_float+0x1b6>
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	6863      	ldr	r3, [r4, #4]
 800bbac:	dd0b      	ble.n	800bbc6 <_printf_float+0x1a2>
 800bbae:	6121      	str	r1, [r4, #16]
 800bbb0:	b913      	cbnz	r3, 800bbb8 <_printf_float+0x194>
 800bbb2:	6822      	ldr	r2, [r4, #0]
 800bbb4:	07d0      	lsls	r0, r2, #31
 800bbb6:	d502      	bpl.n	800bbbe <_printf_float+0x19a>
 800bbb8:	3301      	adds	r3, #1
 800bbba:	440b      	add	r3, r1
 800bbbc:	6123      	str	r3, [r4, #16]
 800bbbe:	f04f 0900 	mov.w	r9, #0
 800bbc2:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bbc4:	e7dc      	b.n	800bb80 <_printf_float+0x15c>
 800bbc6:	b913      	cbnz	r3, 800bbce <_printf_float+0x1aa>
 800bbc8:	6822      	ldr	r2, [r4, #0]
 800bbca:	07d2      	lsls	r2, r2, #31
 800bbcc:	d501      	bpl.n	800bbd2 <_printf_float+0x1ae>
 800bbce:	3302      	adds	r3, #2
 800bbd0:	e7f4      	b.n	800bbbc <_printf_float+0x198>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e7f2      	b.n	800bbbc <_printf_float+0x198>
 800bbd6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bbda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbdc:	4299      	cmp	r1, r3
 800bbde:	db05      	blt.n	800bbec <_printf_float+0x1c8>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	6121      	str	r1, [r4, #16]
 800bbe4:	07d8      	lsls	r0, r3, #31
 800bbe6:	d5ea      	bpl.n	800bbbe <_printf_float+0x19a>
 800bbe8:	1c4b      	adds	r3, r1, #1
 800bbea:	e7e7      	b.n	800bbbc <_printf_float+0x198>
 800bbec:	2900      	cmp	r1, #0
 800bbee:	bfcc      	ite	gt
 800bbf0:	2201      	movgt	r2, #1
 800bbf2:	f1c1 0202 	rsble	r2, r1, #2
 800bbf6:	4413      	add	r3, r2
 800bbf8:	e7e0      	b.n	800bbbc <_printf_float+0x198>
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	055a      	lsls	r2, r3, #21
 800bbfe:	d407      	bmi.n	800bc10 <_printf_float+0x1ec>
 800bc00:	6923      	ldr	r3, [r4, #16]
 800bc02:	4642      	mov	r2, r8
 800bc04:	4631      	mov	r1, r6
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b8      	blx	r7
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	d12b      	bne.n	800bc66 <_printf_float+0x242>
 800bc0e:	e764      	b.n	800bada <_printf_float+0xb6>
 800bc10:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc14:	f240 80dc 	bls.w	800bdd0 <_printf_float+0x3ac>
 800bc18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f7f4 fec2 	bl	80009a8 <__aeabi_dcmpeq>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d033      	beq.n	800bc90 <_printf_float+0x26c>
 800bc28:	2301      	movs	r3, #1
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	4a35      	ldr	r2, [pc, #212]	@ (800bd04 <_printf_float+0x2e0>)
 800bc30:	47b8      	blx	r7
 800bc32:	3001      	adds	r0, #1
 800bc34:	f43f af51 	beq.w	800bada <_printf_float+0xb6>
 800bc38:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800bc3c:	4543      	cmp	r3, r8
 800bc3e:	db02      	blt.n	800bc46 <_printf_float+0x222>
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	07d8      	lsls	r0, r3, #31
 800bc44:	d50f      	bpl.n	800bc66 <_printf_float+0x242>
 800bc46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	47b8      	blx	r7
 800bc50:	3001      	adds	r0, #1
 800bc52:	f43f af42 	beq.w	800bada <_printf_float+0xb6>
 800bc56:	f04f 0900 	mov.w	r9, #0
 800bc5a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bc5e:	f104 0a1a 	add.w	sl, r4, #26
 800bc62:	45c8      	cmp	r8, r9
 800bc64:	dc09      	bgt.n	800bc7a <_printf_float+0x256>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	079b      	lsls	r3, r3, #30
 800bc6a:	f100 8102 	bmi.w	800be72 <_printf_float+0x44e>
 800bc6e:	68e0      	ldr	r0, [r4, #12]
 800bc70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc72:	4298      	cmp	r0, r3
 800bc74:	bfb8      	it	lt
 800bc76:	4618      	movlt	r0, r3
 800bc78:	e731      	b.n	800bade <_printf_float+0xba>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	4652      	mov	r2, sl
 800bc7e:	4631      	mov	r1, r6
 800bc80:	4628      	mov	r0, r5
 800bc82:	47b8      	blx	r7
 800bc84:	3001      	adds	r0, #1
 800bc86:	f43f af28 	beq.w	800bada <_printf_float+0xb6>
 800bc8a:	f109 0901 	add.w	r9, r9, #1
 800bc8e:	e7e8      	b.n	800bc62 <_printf_float+0x23e>
 800bc90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dc38      	bgt.n	800bd08 <_printf_float+0x2e4>
 800bc96:	2301      	movs	r3, #1
 800bc98:	4631      	mov	r1, r6
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	4a19      	ldr	r2, [pc, #100]	@ (800bd04 <_printf_float+0x2e0>)
 800bc9e:	47b8      	blx	r7
 800bca0:	3001      	adds	r0, #1
 800bca2:	f43f af1a 	beq.w	800bada <_printf_float+0xb6>
 800bca6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800bcaa:	ea59 0303 	orrs.w	r3, r9, r3
 800bcae:	d102      	bne.n	800bcb6 <_printf_float+0x292>
 800bcb0:	6823      	ldr	r3, [r4, #0]
 800bcb2:	07d9      	lsls	r1, r3, #31
 800bcb4:	d5d7      	bpl.n	800bc66 <_printf_float+0x242>
 800bcb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	47b8      	blx	r7
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	f43f af0a 	beq.w	800bada <_printf_float+0xb6>
 800bcc6:	f04f 0a00 	mov.w	sl, #0
 800bcca:	f104 0b1a 	add.w	fp, r4, #26
 800bcce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcd0:	425b      	negs	r3, r3
 800bcd2:	4553      	cmp	r3, sl
 800bcd4:	dc01      	bgt.n	800bcda <_printf_float+0x2b6>
 800bcd6:	464b      	mov	r3, r9
 800bcd8:	e793      	b.n	800bc02 <_printf_float+0x1de>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	465a      	mov	r2, fp
 800bcde:	4631      	mov	r1, r6
 800bce0:	4628      	mov	r0, r5
 800bce2:	47b8      	blx	r7
 800bce4:	3001      	adds	r0, #1
 800bce6:	f43f aef8 	beq.w	800bada <_printf_float+0xb6>
 800bcea:	f10a 0a01 	add.w	sl, sl, #1
 800bcee:	e7ee      	b.n	800bcce <_printf_float+0x2aa>
 800bcf0:	7fefffff 	.word	0x7fefffff
 800bcf4:	0800e808 	.word	0x0800e808
 800bcf8:	0800e80c 	.word	0x0800e80c
 800bcfc:	0800e810 	.word	0x0800e810
 800bd00:	0800e814 	.word	0x0800e814
 800bd04:	0800e818 	.word	0x0800e818
 800bd08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd0a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bd0e:	4553      	cmp	r3, sl
 800bd10:	bfa8      	it	ge
 800bd12:	4653      	movge	r3, sl
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	4699      	mov	r9, r3
 800bd18:	dc36      	bgt.n	800bd88 <_printf_float+0x364>
 800bd1a:	f04f 0b00 	mov.w	fp, #0
 800bd1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd22:	f104 021a 	add.w	r2, r4, #26
 800bd26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd28:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd2a:	eba3 0309 	sub.w	r3, r3, r9
 800bd2e:	455b      	cmp	r3, fp
 800bd30:	dc31      	bgt.n	800bd96 <_printf_float+0x372>
 800bd32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd34:	459a      	cmp	sl, r3
 800bd36:	dc3a      	bgt.n	800bdae <_printf_float+0x38a>
 800bd38:	6823      	ldr	r3, [r4, #0]
 800bd3a:	07da      	lsls	r2, r3, #31
 800bd3c:	d437      	bmi.n	800bdae <_printf_float+0x38a>
 800bd3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd40:	ebaa 0903 	sub.w	r9, sl, r3
 800bd44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd46:	ebaa 0303 	sub.w	r3, sl, r3
 800bd4a:	4599      	cmp	r9, r3
 800bd4c:	bfa8      	it	ge
 800bd4e:	4699      	movge	r9, r3
 800bd50:	f1b9 0f00 	cmp.w	r9, #0
 800bd54:	dc33      	bgt.n	800bdbe <_printf_float+0x39a>
 800bd56:	f04f 0800 	mov.w	r8, #0
 800bd5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd5e:	f104 0b1a 	add.w	fp, r4, #26
 800bd62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd64:	ebaa 0303 	sub.w	r3, sl, r3
 800bd68:	eba3 0309 	sub.w	r3, r3, r9
 800bd6c:	4543      	cmp	r3, r8
 800bd6e:	f77f af7a 	ble.w	800bc66 <_printf_float+0x242>
 800bd72:	2301      	movs	r3, #1
 800bd74:	465a      	mov	r2, fp
 800bd76:	4631      	mov	r1, r6
 800bd78:	4628      	mov	r0, r5
 800bd7a:	47b8      	blx	r7
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	f43f aeac 	beq.w	800bada <_printf_float+0xb6>
 800bd82:	f108 0801 	add.w	r8, r8, #1
 800bd86:	e7ec      	b.n	800bd62 <_printf_float+0x33e>
 800bd88:	4642      	mov	r2, r8
 800bd8a:	4631      	mov	r1, r6
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	47b8      	blx	r7
 800bd90:	3001      	adds	r0, #1
 800bd92:	d1c2      	bne.n	800bd1a <_printf_float+0x2f6>
 800bd94:	e6a1      	b.n	800bada <_printf_float+0xb6>
 800bd96:	2301      	movs	r3, #1
 800bd98:	4631      	mov	r1, r6
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	920a      	str	r2, [sp, #40]	@ 0x28
 800bd9e:	47b8      	blx	r7
 800bda0:	3001      	adds	r0, #1
 800bda2:	f43f ae9a 	beq.w	800bada <_printf_float+0xb6>
 800bda6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bda8:	f10b 0b01 	add.w	fp, fp, #1
 800bdac:	e7bb      	b.n	800bd26 <_printf_float+0x302>
 800bdae:	4631      	mov	r1, r6
 800bdb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	47b8      	blx	r7
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d1c0      	bne.n	800bd3e <_printf_float+0x31a>
 800bdbc:	e68d      	b.n	800bada <_printf_float+0xb6>
 800bdbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdc0:	464b      	mov	r3, r9
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	4442      	add	r2, r8
 800bdc8:	47b8      	blx	r7
 800bdca:	3001      	adds	r0, #1
 800bdcc:	d1c3      	bne.n	800bd56 <_printf_float+0x332>
 800bdce:	e684      	b.n	800bada <_printf_float+0xb6>
 800bdd0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bdd4:	f1ba 0f01 	cmp.w	sl, #1
 800bdd8:	dc01      	bgt.n	800bdde <_printf_float+0x3ba>
 800bdda:	07db      	lsls	r3, r3, #31
 800bddc:	d536      	bpl.n	800be4c <_printf_float+0x428>
 800bdde:	2301      	movs	r3, #1
 800bde0:	4642      	mov	r2, r8
 800bde2:	4631      	mov	r1, r6
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b8      	blx	r7
 800bde8:	3001      	adds	r0, #1
 800bdea:	f43f ae76 	beq.w	800bada <_printf_float+0xb6>
 800bdee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	47b8      	blx	r7
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	f43f ae6e 	beq.w	800bada <_printf_float+0xb6>
 800bdfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be02:	2200      	movs	r2, #0
 800be04:	2300      	movs	r3, #0
 800be06:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800be0a:	f7f4 fdcd 	bl	80009a8 <__aeabi_dcmpeq>
 800be0e:	b9c0      	cbnz	r0, 800be42 <_printf_float+0x41e>
 800be10:	4653      	mov	r3, sl
 800be12:	f108 0201 	add.w	r2, r8, #1
 800be16:	4631      	mov	r1, r6
 800be18:	4628      	mov	r0, r5
 800be1a:	47b8      	blx	r7
 800be1c:	3001      	adds	r0, #1
 800be1e:	d10c      	bne.n	800be3a <_printf_float+0x416>
 800be20:	e65b      	b.n	800bada <_printf_float+0xb6>
 800be22:	2301      	movs	r3, #1
 800be24:	465a      	mov	r2, fp
 800be26:	4631      	mov	r1, r6
 800be28:	4628      	mov	r0, r5
 800be2a:	47b8      	blx	r7
 800be2c:	3001      	adds	r0, #1
 800be2e:	f43f ae54 	beq.w	800bada <_printf_float+0xb6>
 800be32:	f108 0801 	add.w	r8, r8, #1
 800be36:	45d0      	cmp	r8, sl
 800be38:	dbf3      	blt.n	800be22 <_printf_float+0x3fe>
 800be3a:	464b      	mov	r3, r9
 800be3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be40:	e6e0      	b.n	800bc04 <_printf_float+0x1e0>
 800be42:	f04f 0800 	mov.w	r8, #0
 800be46:	f104 0b1a 	add.w	fp, r4, #26
 800be4a:	e7f4      	b.n	800be36 <_printf_float+0x412>
 800be4c:	2301      	movs	r3, #1
 800be4e:	4642      	mov	r2, r8
 800be50:	e7e1      	b.n	800be16 <_printf_float+0x3f2>
 800be52:	2301      	movs	r3, #1
 800be54:	464a      	mov	r2, r9
 800be56:	4631      	mov	r1, r6
 800be58:	4628      	mov	r0, r5
 800be5a:	47b8      	blx	r7
 800be5c:	3001      	adds	r0, #1
 800be5e:	f43f ae3c 	beq.w	800bada <_printf_float+0xb6>
 800be62:	f108 0801 	add.w	r8, r8, #1
 800be66:	68e3      	ldr	r3, [r4, #12]
 800be68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800be6a:	1a5b      	subs	r3, r3, r1
 800be6c:	4543      	cmp	r3, r8
 800be6e:	dcf0      	bgt.n	800be52 <_printf_float+0x42e>
 800be70:	e6fd      	b.n	800bc6e <_printf_float+0x24a>
 800be72:	f04f 0800 	mov.w	r8, #0
 800be76:	f104 0919 	add.w	r9, r4, #25
 800be7a:	e7f4      	b.n	800be66 <_printf_float+0x442>

0800be7c <_printf_common>:
 800be7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be80:	4616      	mov	r6, r2
 800be82:	4698      	mov	r8, r3
 800be84:	688a      	ldr	r2, [r1, #8]
 800be86:	690b      	ldr	r3, [r1, #16]
 800be88:	4607      	mov	r7, r0
 800be8a:	4293      	cmp	r3, r2
 800be8c:	bfb8      	it	lt
 800be8e:	4613      	movlt	r3, r2
 800be90:	6033      	str	r3, [r6, #0]
 800be92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be96:	460c      	mov	r4, r1
 800be98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be9c:	b10a      	cbz	r2, 800bea2 <_printf_common+0x26>
 800be9e:	3301      	adds	r3, #1
 800bea0:	6033      	str	r3, [r6, #0]
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	0699      	lsls	r1, r3, #26
 800bea6:	bf42      	ittt	mi
 800bea8:	6833      	ldrmi	r3, [r6, #0]
 800beaa:	3302      	addmi	r3, #2
 800beac:	6033      	strmi	r3, [r6, #0]
 800beae:	6825      	ldr	r5, [r4, #0]
 800beb0:	f015 0506 	ands.w	r5, r5, #6
 800beb4:	d106      	bne.n	800bec4 <_printf_common+0x48>
 800beb6:	f104 0a19 	add.w	sl, r4, #25
 800beba:	68e3      	ldr	r3, [r4, #12]
 800bebc:	6832      	ldr	r2, [r6, #0]
 800bebe:	1a9b      	subs	r3, r3, r2
 800bec0:	42ab      	cmp	r3, r5
 800bec2:	dc2b      	bgt.n	800bf1c <_printf_common+0xa0>
 800bec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bec8:	6822      	ldr	r2, [r4, #0]
 800beca:	3b00      	subs	r3, #0
 800becc:	bf18      	it	ne
 800bece:	2301      	movne	r3, #1
 800bed0:	0692      	lsls	r2, r2, #26
 800bed2:	d430      	bmi.n	800bf36 <_printf_common+0xba>
 800bed4:	4641      	mov	r1, r8
 800bed6:	4638      	mov	r0, r7
 800bed8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bedc:	47c8      	blx	r9
 800bede:	3001      	adds	r0, #1
 800bee0:	d023      	beq.n	800bf2a <_printf_common+0xae>
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	6922      	ldr	r2, [r4, #16]
 800bee6:	f003 0306 	and.w	r3, r3, #6
 800beea:	2b04      	cmp	r3, #4
 800beec:	bf14      	ite	ne
 800beee:	2500      	movne	r5, #0
 800bef0:	6833      	ldreq	r3, [r6, #0]
 800bef2:	f04f 0600 	mov.w	r6, #0
 800bef6:	bf08      	it	eq
 800bef8:	68e5      	ldreq	r5, [r4, #12]
 800befa:	f104 041a 	add.w	r4, r4, #26
 800befe:	bf08      	it	eq
 800bf00:	1aed      	subeq	r5, r5, r3
 800bf02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bf06:	bf08      	it	eq
 800bf08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	bfc4      	itt	gt
 800bf10:	1a9b      	subgt	r3, r3, r2
 800bf12:	18ed      	addgt	r5, r5, r3
 800bf14:	42b5      	cmp	r5, r6
 800bf16:	d11a      	bne.n	800bf4e <_printf_common+0xd2>
 800bf18:	2000      	movs	r0, #0
 800bf1a:	e008      	b.n	800bf2e <_printf_common+0xb2>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	4652      	mov	r2, sl
 800bf20:	4641      	mov	r1, r8
 800bf22:	4638      	mov	r0, r7
 800bf24:	47c8      	blx	r9
 800bf26:	3001      	adds	r0, #1
 800bf28:	d103      	bne.n	800bf32 <_printf_common+0xb6>
 800bf2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf32:	3501      	adds	r5, #1
 800bf34:	e7c1      	b.n	800beba <_printf_common+0x3e>
 800bf36:	2030      	movs	r0, #48	@ 0x30
 800bf38:	18e1      	adds	r1, r4, r3
 800bf3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf44:	4422      	add	r2, r4
 800bf46:	3302      	adds	r3, #2
 800bf48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf4c:	e7c2      	b.n	800bed4 <_printf_common+0x58>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	4622      	mov	r2, r4
 800bf52:	4641      	mov	r1, r8
 800bf54:	4638      	mov	r0, r7
 800bf56:	47c8      	blx	r9
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d0e6      	beq.n	800bf2a <_printf_common+0xae>
 800bf5c:	3601      	adds	r6, #1
 800bf5e:	e7d9      	b.n	800bf14 <_printf_common+0x98>

0800bf60 <_printf_i>:
 800bf60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf64:	7e0f      	ldrb	r7, [r1, #24]
 800bf66:	4691      	mov	r9, r2
 800bf68:	2f78      	cmp	r7, #120	@ 0x78
 800bf6a:	4680      	mov	r8, r0
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	469a      	mov	sl, r3
 800bf70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf76:	d807      	bhi.n	800bf88 <_printf_i+0x28>
 800bf78:	2f62      	cmp	r7, #98	@ 0x62
 800bf7a:	d80a      	bhi.n	800bf92 <_printf_i+0x32>
 800bf7c:	2f00      	cmp	r7, #0
 800bf7e:	f000 80d3 	beq.w	800c128 <_printf_i+0x1c8>
 800bf82:	2f58      	cmp	r7, #88	@ 0x58
 800bf84:	f000 80ba 	beq.w	800c0fc <_printf_i+0x19c>
 800bf88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf90:	e03a      	b.n	800c008 <_printf_i+0xa8>
 800bf92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf96:	2b15      	cmp	r3, #21
 800bf98:	d8f6      	bhi.n	800bf88 <_printf_i+0x28>
 800bf9a:	a101      	add	r1, pc, #4	@ (adr r1, 800bfa0 <_printf_i+0x40>)
 800bf9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfa0:	0800bff9 	.word	0x0800bff9
 800bfa4:	0800c00d 	.word	0x0800c00d
 800bfa8:	0800bf89 	.word	0x0800bf89
 800bfac:	0800bf89 	.word	0x0800bf89
 800bfb0:	0800bf89 	.word	0x0800bf89
 800bfb4:	0800bf89 	.word	0x0800bf89
 800bfb8:	0800c00d 	.word	0x0800c00d
 800bfbc:	0800bf89 	.word	0x0800bf89
 800bfc0:	0800bf89 	.word	0x0800bf89
 800bfc4:	0800bf89 	.word	0x0800bf89
 800bfc8:	0800bf89 	.word	0x0800bf89
 800bfcc:	0800c10f 	.word	0x0800c10f
 800bfd0:	0800c037 	.word	0x0800c037
 800bfd4:	0800c0c9 	.word	0x0800c0c9
 800bfd8:	0800bf89 	.word	0x0800bf89
 800bfdc:	0800bf89 	.word	0x0800bf89
 800bfe0:	0800c131 	.word	0x0800c131
 800bfe4:	0800bf89 	.word	0x0800bf89
 800bfe8:	0800c037 	.word	0x0800c037
 800bfec:	0800bf89 	.word	0x0800bf89
 800bff0:	0800bf89 	.word	0x0800bf89
 800bff4:	0800c0d1 	.word	0x0800c0d1
 800bff8:	6833      	ldr	r3, [r6, #0]
 800bffa:	1d1a      	adds	r2, r3, #4
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6032      	str	r2, [r6, #0]
 800c000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c008:	2301      	movs	r3, #1
 800c00a:	e09e      	b.n	800c14a <_printf_i+0x1ea>
 800c00c:	6833      	ldr	r3, [r6, #0]
 800c00e:	6820      	ldr	r0, [r4, #0]
 800c010:	1d19      	adds	r1, r3, #4
 800c012:	6031      	str	r1, [r6, #0]
 800c014:	0606      	lsls	r6, r0, #24
 800c016:	d501      	bpl.n	800c01c <_printf_i+0xbc>
 800c018:	681d      	ldr	r5, [r3, #0]
 800c01a:	e003      	b.n	800c024 <_printf_i+0xc4>
 800c01c:	0645      	lsls	r5, r0, #25
 800c01e:	d5fb      	bpl.n	800c018 <_printf_i+0xb8>
 800c020:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c024:	2d00      	cmp	r5, #0
 800c026:	da03      	bge.n	800c030 <_printf_i+0xd0>
 800c028:	232d      	movs	r3, #45	@ 0x2d
 800c02a:	426d      	negs	r5, r5
 800c02c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c030:	230a      	movs	r3, #10
 800c032:	4859      	ldr	r0, [pc, #356]	@ (800c198 <_printf_i+0x238>)
 800c034:	e011      	b.n	800c05a <_printf_i+0xfa>
 800c036:	6821      	ldr	r1, [r4, #0]
 800c038:	6833      	ldr	r3, [r6, #0]
 800c03a:	0608      	lsls	r0, r1, #24
 800c03c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c040:	d402      	bmi.n	800c048 <_printf_i+0xe8>
 800c042:	0649      	lsls	r1, r1, #25
 800c044:	bf48      	it	mi
 800c046:	b2ad      	uxthmi	r5, r5
 800c048:	2f6f      	cmp	r7, #111	@ 0x6f
 800c04a:	6033      	str	r3, [r6, #0]
 800c04c:	bf14      	ite	ne
 800c04e:	230a      	movne	r3, #10
 800c050:	2308      	moveq	r3, #8
 800c052:	4851      	ldr	r0, [pc, #324]	@ (800c198 <_printf_i+0x238>)
 800c054:	2100      	movs	r1, #0
 800c056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c05a:	6866      	ldr	r6, [r4, #4]
 800c05c:	2e00      	cmp	r6, #0
 800c05e:	bfa8      	it	ge
 800c060:	6821      	ldrge	r1, [r4, #0]
 800c062:	60a6      	str	r6, [r4, #8]
 800c064:	bfa4      	itt	ge
 800c066:	f021 0104 	bicge.w	r1, r1, #4
 800c06a:	6021      	strge	r1, [r4, #0]
 800c06c:	b90d      	cbnz	r5, 800c072 <_printf_i+0x112>
 800c06e:	2e00      	cmp	r6, #0
 800c070:	d04b      	beq.n	800c10a <_printf_i+0x1aa>
 800c072:	4616      	mov	r6, r2
 800c074:	fbb5 f1f3 	udiv	r1, r5, r3
 800c078:	fb03 5711 	mls	r7, r3, r1, r5
 800c07c:	5dc7      	ldrb	r7, [r0, r7]
 800c07e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c082:	462f      	mov	r7, r5
 800c084:	42bb      	cmp	r3, r7
 800c086:	460d      	mov	r5, r1
 800c088:	d9f4      	bls.n	800c074 <_printf_i+0x114>
 800c08a:	2b08      	cmp	r3, #8
 800c08c:	d10b      	bne.n	800c0a6 <_printf_i+0x146>
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	07df      	lsls	r7, r3, #31
 800c092:	d508      	bpl.n	800c0a6 <_printf_i+0x146>
 800c094:	6923      	ldr	r3, [r4, #16]
 800c096:	6861      	ldr	r1, [r4, #4]
 800c098:	4299      	cmp	r1, r3
 800c09a:	bfde      	ittt	le
 800c09c:	2330      	movle	r3, #48	@ 0x30
 800c09e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0a2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c0a6:	1b92      	subs	r2, r2, r6
 800c0a8:	6122      	str	r2, [r4, #16]
 800c0aa:	464b      	mov	r3, r9
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	f8cd a000 	str.w	sl, [sp]
 800c0b4:	aa03      	add	r2, sp, #12
 800c0b6:	f7ff fee1 	bl	800be7c <_printf_common>
 800c0ba:	3001      	adds	r0, #1
 800c0bc:	d14a      	bne.n	800c154 <_printf_i+0x1f4>
 800c0be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0c2:	b004      	add	sp, #16
 800c0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c8:	6823      	ldr	r3, [r4, #0]
 800c0ca:	f043 0320 	orr.w	r3, r3, #32
 800c0ce:	6023      	str	r3, [r4, #0]
 800c0d0:	2778      	movs	r7, #120	@ 0x78
 800c0d2:	4832      	ldr	r0, [pc, #200]	@ (800c19c <_printf_i+0x23c>)
 800c0d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	6831      	ldr	r1, [r6, #0]
 800c0dc:	061f      	lsls	r7, r3, #24
 800c0de:	f851 5b04 	ldr.w	r5, [r1], #4
 800c0e2:	d402      	bmi.n	800c0ea <_printf_i+0x18a>
 800c0e4:	065f      	lsls	r7, r3, #25
 800c0e6:	bf48      	it	mi
 800c0e8:	b2ad      	uxthmi	r5, r5
 800c0ea:	6031      	str	r1, [r6, #0]
 800c0ec:	07d9      	lsls	r1, r3, #31
 800c0ee:	bf44      	itt	mi
 800c0f0:	f043 0320 	orrmi.w	r3, r3, #32
 800c0f4:	6023      	strmi	r3, [r4, #0]
 800c0f6:	b11d      	cbz	r5, 800c100 <_printf_i+0x1a0>
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	e7ab      	b.n	800c054 <_printf_i+0xf4>
 800c0fc:	4826      	ldr	r0, [pc, #152]	@ (800c198 <_printf_i+0x238>)
 800c0fe:	e7e9      	b.n	800c0d4 <_printf_i+0x174>
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	f023 0320 	bic.w	r3, r3, #32
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	e7f6      	b.n	800c0f8 <_printf_i+0x198>
 800c10a:	4616      	mov	r6, r2
 800c10c:	e7bd      	b.n	800c08a <_printf_i+0x12a>
 800c10e:	6833      	ldr	r3, [r6, #0]
 800c110:	6825      	ldr	r5, [r4, #0]
 800c112:	1d18      	adds	r0, r3, #4
 800c114:	6961      	ldr	r1, [r4, #20]
 800c116:	6030      	str	r0, [r6, #0]
 800c118:	062e      	lsls	r6, r5, #24
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	d501      	bpl.n	800c122 <_printf_i+0x1c2>
 800c11e:	6019      	str	r1, [r3, #0]
 800c120:	e002      	b.n	800c128 <_printf_i+0x1c8>
 800c122:	0668      	lsls	r0, r5, #25
 800c124:	d5fb      	bpl.n	800c11e <_printf_i+0x1be>
 800c126:	8019      	strh	r1, [r3, #0]
 800c128:	2300      	movs	r3, #0
 800c12a:	4616      	mov	r6, r2
 800c12c:	6123      	str	r3, [r4, #16]
 800c12e:	e7bc      	b.n	800c0aa <_printf_i+0x14a>
 800c130:	6833      	ldr	r3, [r6, #0]
 800c132:	2100      	movs	r1, #0
 800c134:	1d1a      	adds	r2, r3, #4
 800c136:	6032      	str	r2, [r6, #0]
 800c138:	681e      	ldr	r6, [r3, #0]
 800c13a:	6862      	ldr	r2, [r4, #4]
 800c13c:	4630      	mov	r0, r6
 800c13e:	f000 fa28 	bl	800c592 <memchr>
 800c142:	b108      	cbz	r0, 800c148 <_printf_i+0x1e8>
 800c144:	1b80      	subs	r0, r0, r6
 800c146:	6060      	str	r0, [r4, #4]
 800c148:	6863      	ldr	r3, [r4, #4]
 800c14a:	6123      	str	r3, [r4, #16]
 800c14c:	2300      	movs	r3, #0
 800c14e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c152:	e7aa      	b.n	800c0aa <_printf_i+0x14a>
 800c154:	4632      	mov	r2, r6
 800c156:	4649      	mov	r1, r9
 800c158:	4640      	mov	r0, r8
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	47d0      	blx	sl
 800c15e:	3001      	adds	r0, #1
 800c160:	d0ad      	beq.n	800c0be <_printf_i+0x15e>
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	079b      	lsls	r3, r3, #30
 800c166:	d413      	bmi.n	800c190 <_printf_i+0x230>
 800c168:	68e0      	ldr	r0, [r4, #12]
 800c16a:	9b03      	ldr	r3, [sp, #12]
 800c16c:	4298      	cmp	r0, r3
 800c16e:	bfb8      	it	lt
 800c170:	4618      	movlt	r0, r3
 800c172:	e7a6      	b.n	800c0c2 <_printf_i+0x162>
 800c174:	2301      	movs	r3, #1
 800c176:	4632      	mov	r2, r6
 800c178:	4649      	mov	r1, r9
 800c17a:	4640      	mov	r0, r8
 800c17c:	47d0      	blx	sl
 800c17e:	3001      	adds	r0, #1
 800c180:	d09d      	beq.n	800c0be <_printf_i+0x15e>
 800c182:	3501      	adds	r5, #1
 800c184:	68e3      	ldr	r3, [r4, #12]
 800c186:	9903      	ldr	r1, [sp, #12]
 800c188:	1a5b      	subs	r3, r3, r1
 800c18a:	42ab      	cmp	r3, r5
 800c18c:	dcf2      	bgt.n	800c174 <_printf_i+0x214>
 800c18e:	e7eb      	b.n	800c168 <_printf_i+0x208>
 800c190:	2500      	movs	r5, #0
 800c192:	f104 0619 	add.w	r6, r4, #25
 800c196:	e7f5      	b.n	800c184 <_printf_i+0x224>
 800c198:	0800e81a 	.word	0x0800e81a
 800c19c:	0800e82b 	.word	0x0800e82b

0800c1a0 <std>:
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	b510      	push	{r4, lr}
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c1aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1ae:	6083      	str	r3, [r0, #8]
 800c1b0:	8181      	strh	r1, [r0, #12]
 800c1b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c1b4:	81c2      	strh	r2, [r0, #14]
 800c1b6:	6183      	str	r3, [r0, #24]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	2208      	movs	r2, #8
 800c1bc:	305c      	adds	r0, #92	@ 0x5c
 800c1be:	f000 f914 	bl	800c3ea <memset>
 800c1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c1f8 <std+0x58>)
 800c1c4:	6224      	str	r4, [r4, #32]
 800c1c6:	6263      	str	r3, [r4, #36]	@ 0x24
 800c1c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c1fc <std+0x5c>)
 800c1ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c200 <std+0x60>)
 800c1ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c204 <std+0x64>)
 800c1d2:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c208 <std+0x68>)
 800c1d6:	429c      	cmp	r4, r3
 800c1d8:	d006      	beq.n	800c1e8 <std+0x48>
 800c1da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c1de:	4294      	cmp	r4, r2
 800c1e0:	d002      	beq.n	800c1e8 <std+0x48>
 800c1e2:	33d0      	adds	r3, #208	@ 0xd0
 800c1e4:	429c      	cmp	r4, r3
 800c1e6:	d105      	bne.n	800c1f4 <std+0x54>
 800c1e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1f0:	f000 b9cc 	b.w	800c58c <__retarget_lock_init_recursive>
 800c1f4:	bd10      	pop	{r4, pc}
 800c1f6:	bf00      	nop
 800c1f8:	0800c365 	.word	0x0800c365
 800c1fc:	0800c387 	.word	0x0800c387
 800c200:	0800c3bf 	.word	0x0800c3bf
 800c204:	0800c3e3 	.word	0x0800c3e3
 800c208:	20002634 	.word	0x20002634

0800c20c <stdio_exit_handler>:
 800c20c:	4a02      	ldr	r2, [pc, #8]	@ (800c218 <stdio_exit_handler+0xc>)
 800c20e:	4903      	ldr	r1, [pc, #12]	@ (800c21c <stdio_exit_handler+0x10>)
 800c210:	4803      	ldr	r0, [pc, #12]	@ (800c220 <stdio_exit_handler+0x14>)
 800c212:	f000 b869 	b.w	800c2e8 <_fwalk_sglue>
 800c216:	bf00      	nop
 800c218:	20000040 	.word	0x20000040
 800c21c:	0800ddc1 	.word	0x0800ddc1
 800c220:	20000050 	.word	0x20000050

0800c224 <cleanup_stdio>:
 800c224:	6841      	ldr	r1, [r0, #4]
 800c226:	4b0c      	ldr	r3, [pc, #48]	@ (800c258 <cleanup_stdio+0x34>)
 800c228:	b510      	push	{r4, lr}
 800c22a:	4299      	cmp	r1, r3
 800c22c:	4604      	mov	r4, r0
 800c22e:	d001      	beq.n	800c234 <cleanup_stdio+0x10>
 800c230:	f001 fdc6 	bl	800ddc0 <_fflush_r>
 800c234:	68a1      	ldr	r1, [r4, #8]
 800c236:	4b09      	ldr	r3, [pc, #36]	@ (800c25c <cleanup_stdio+0x38>)
 800c238:	4299      	cmp	r1, r3
 800c23a:	d002      	beq.n	800c242 <cleanup_stdio+0x1e>
 800c23c:	4620      	mov	r0, r4
 800c23e:	f001 fdbf 	bl	800ddc0 <_fflush_r>
 800c242:	68e1      	ldr	r1, [r4, #12]
 800c244:	4b06      	ldr	r3, [pc, #24]	@ (800c260 <cleanup_stdio+0x3c>)
 800c246:	4299      	cmp	r1, r3
 800c248:	d004      	beq.n	800c254 <cleanup_stdio+0x30>
 800c24a:	4620      	mov	r0, r4
 800c24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c250:	f001 bdb6 	b.w	800ddc0 <_fflush_r>
 800c254:	bd10      	pop	{r4, pc}
 800c256:	bf00      	nop
 800c258:	20002634 	.word	0x20002634
 800c25c:	2000269c 	.word	0x2000269c
 800c260:	20002704 	.word	0x20002704

0800c264 <global_stdio_init.part.0>:
 800c264:	b510      	push	{r4, lr}
 800c266:	4b0b      	ldr	r3, [pc, #44]	@ (800c294 <global_stdio_init.part.0+0x30>)
 800c268:	4c0b      	ldr	r4, [pc, #44]	@ (800c298 <global_stdio_init.part.0+0x34>)
 800c26a:	4a0c      	ldr	r2, [pc, #48]	@ (800c29c <global_stdio_init.part.0+0x38>)
 800c26c:	4620      	mov	r0, r4
 800c26e:	601a      	str	r2, [r3, #0]
 800c270:	2104      	movs	r1, #4
 800c272:	2200      	movs	r2, #0
 800c274:	f7ff ff94 	bl	800c1a0 <std>
 800c278:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c27c:	2201      	movs	r2, #1
 800c27e:	2109      	movs	r1, #9
 800c280:	f7ff ff8e 	bl	800c1a0 <std>
 800c284:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c288:	2202      	movs	r2, #2
 800c28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c28e:	2112      	movs	r1, #18
 800c290:	f7ff bf86 	b.w	800c1a0 <std>
 800c294:	2000276c 	.word	0x2000276c
 800c298:	20002634 	.word	0x20002634
 800c29c:	0800c20d 	.word	0x0800c20d

0800c2a0 <__sfp_lock_acquire>:
 800c2a0:	4801      	ldr	r0, [pc, #4]	@ (800c2a8 <__sfp_lock_acquire+0x8>)
 800c2a2:	f000 b974 	b.w	800c58e <__retarget_lock_acquire_recursive>
 800c2a6:	bf00      	nop
 800c2a8:	20002775 	.word	0x20002775

0800c2ac <__sfp_lock_release>:
 800c2ac:	4801      	ldr	r0, [pc, #4]	@ (800c2b4 <__sfp_lock_release+0x8>)
 800c2ae:	f000 b96f 	b.w	800c590 <__retarget_lock_release_recursive>
 800c2b2:	bf00      	nop
 800c2b4:	20002775 	.word	0x20002775

0800c2b8 <__sinit>:
 800c2b8:	b510      	push	{r4, lr}
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	f7ff fff0 	bl	800c2a0 <__sfp_lock_acquire>
 800c2c0:	6a23      	ldr	r3, [r4, #32]
 800c2c2:	b11b      	cbz	r3, 800c2cc <__sinit+0x14>
 800c2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2c8:	f7ff bff0 	b.w	800c2ac <__sfp_lock_release>
 800c2cc:	4b04      	ldr	r3, [pc, #16]	@ (800c2e0 <__sinit+0x28>)
 800c2ce:	6223      	str	r3, [r4, #32]
 800c2d0:	4b04      	ldr	r3, [pc, #16]	@ (800c2e4 <__sinit+0x2c>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1f5      	bne.n	800c2c4 <__sinit+0xc>
 800c2d8:	f7ff ffc4 	bl	800c264 <global_stdio_init.part.0>
 800c2dc:	e7f2      	b.n	800c2c4 <__sinit+0xc>
 800c2de:	bf00      	nop
 800c2e0:	0800c225 	.word	0x0800c225
 800c2e4:	2000276c 	.word	0x2000276c

0800c2e8 <_fwalk_sglue>:
 800c2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2ec:	4607      	mov	r7, r0
 800c2ee:	4688      	mov	r8, r1
 800c2f0:	4614      	mov	r4, r2
 800c2f2:	2600      	movs	r6, #0
 800c2f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2f8:	f1b9 0901 	subs.w	r9, r9, #1
 800c2fc:	d505      	bpl.n	800c30a <_fwalk_sglue+0x22>
 800c2fe:	6824      	ldr	r4, [r4, #0]
 800c300:	2c00      	cmp	r4, #0
 800c302:	d1f7      	bne.n	800c2f4 <_fwalk_sglue+0xc>
 800c304:	4630      	mov	r0, r6
 800c306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30a:	89ab      	ldrh	r3, [r5, #12]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d907      	bls.n	800c320 <_fwalk_sglue+0x38>
 800c310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c314:	3301      	adds	r3, #1
 800c316:	d003      	beq.n	800c320 <_fwalk_sglue+0x38>
 800c318:	4629      	mov	r1, r5
 800c31a:	4638      	mov	r0, r7
 800c31c:	47c0      	blx	r8
 800c31e:	4306      	orrs	r6, r0
 800c320:	3568      	adds	r5, #104	@ 0x68
 800c322:	e7e9      	b.n	800c2f8 <_fwalk_sglue+0x10>

0800c324 <siprintf>:
 800c324:	b40e      	push	{r1, r2, r3}
 800c326:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c32a:	b500      	push	{lr}
 800c32c:	b09c      	sub	sp, #112	@ 0x70
 800c32e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c330:	9002      	str	r0, [sp, #8]
 800c332:	9006      	str	r0, [sp, #24]
 800c334:	9107      	str	r1, [sp, #28]
 800c336:	9104      	str	r1, [sp, #16]
 800c338:	4808      	ldr	r0, [pc, #32]	@ (800c35c <siprintf+0x38>)
 800c33a:	4909      	ldr	r1, [pc, #36]	@ (800c360 <siprintf+0x3c>)
 800c33c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c340:	9105      	str	r1, [sp, #20]
 800c342:	6800      	ldr	r0, [r0, #0]
 800c344:	a902      	add	r1, sp, #8
 800c346:	9301      	str	r3, [sp, #4]
 800c348:	f001 fbbe 	bl	800dac8 <_svfiprintf_r>
 800c34c:	2200      	movs	r2, #0
 800c34e:	9b02      	ldr	r3, [sp, #8]
 800c350:	701a      	strb	r2, [r3, #0]
 800c352:	b01c      	add	sp, #112	@ 0x70
 800c354:	f85d eb04 	ldr.w	lr, [sp], #4
 800c358:	b003      	add	sp, #12
 800c35a:	4770      	bx	lr
 800c35c:	2000004c 	.word	0x2000004c
 800c360:	ffff0208 	.word	0xffff0208

0800c364 <__sread>:
 800c364:	b510      	push	{r4, lr}
 800c366:	460c      	mov	r4, r1
 800c368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c36c:	f000 f89c 	bl	800c4a8 <_read_r>
 800c370:	2800      	cmp	r0, #0
 800c372:	bfab      	itete	ge
 800c374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c376:	89a3      	ldrhlt	r3, [r4, #12]
 800c378:	181b      	addge	r3, r3, r0
 800c37a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c37e:	bfac      	ite	ge
 800c380:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c382:	81a3      	strhlt	r3, [r4, #12]
 800c384:	bd10      	pop	{r4, pc}

0800c386 <__swrite>:
 800c386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38a:	461f      	mov	r7, r3
 800c38c:	898b      	ldrh	r3, [r1, #12]
 800c38e:	4605      	mov	r5, r0
 800c390:	05db      	lsls	r3, r3, #23
 800c392:	460c      	mov	r4, r1
 800c394:	4616      	mov	r6, r2
 800c396:	d505      	bpl.n	800c3a4 <__swrite+0x1e>
 800c398:	2302      	movs	r3, #2
 800c39a:	2200      	movs	r2, #0
 800c39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a0:	f000 f870 	bl	800c484 <_lseek_r>
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	4632      	mov	r2, r6
 800c3a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3ac:	81a3      	strh	r3, [r4, #12]
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	463b      	mov	r3, r7
 800c3b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ba:	f000 b8ab 	b.w	800c514 <_write_r>

0800c3be <__sseek>:
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c6:	f000 f85d 	bl	800c484 <_lseek_r>
 800c3ca:	1c43      	adds	r3, r0, #1
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	bf15      	itete	ne
 800c3d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c3d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c3d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c3da:	81a3      	strheq	r3, [r4, #12]
 800c3dc:	bf18      	it	ne
 800c3de:	81a3      	strhne	r3, [r4, #12]
 800c3e0:	bd10      	pop	{r4, pc}

0800c3e2 <__sclose>:
 800c3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e6:	f000 b83d 	b.w	800c464 <_close_r>

0800c3ea <memset>:
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	4402      	add	r2, r0
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d100      	bne.n	800c3f4 <memset+0xa>
 800c3f2:	4770      	bx	lr
 800c3f4:	f803 1b01 	strb.w	r1, [r3], #1
 800c3f8:	e7f9      	b.n	800c3ee <memset+0x4>

0800c3fa <_raise_r>:
 800c3fa:	291f      	cmp	r1, #31
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4605      	mov	r5, r0
 800c400:	460c      	mov	r4, r1
 800c402:	d904      	bls.n	800c40e <_raise_r+0x14>
 800c404:	2316      	movs	r3, #22
 800c406:	6003      	str	r3, [r0, #0]
 800c408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c40c:	bd38      	pop	{r3, r4, r5, pc}
 800c40e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c410:	b112      	cbz	r2, 800c418 <_raise_r+0x1e>
 800c412:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c416:	b94b      	cbnz	r3, 800c42c <_raise_r+0x32>
 800c418:	4628      	mov	r0, r5
 800c41a:	f000 f869 	bl	800c4f0 <_getpid_r>
 800c41e:	4622      	mov	r2, r4
 800c420:	4601      	mov	r1, r0
 800c422:	4628      	mov	r0, r5
 800c424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c428:	f000 b850 	b.w	800c4cc <_kill_r>
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d00a      	beq.n	800c446 <_raise_r+0x4c>
 800c430:	1c59      	adds	r1, r3, #1
 800c432:	d103      	bne.n	800c43c <_raise_r+0x42>
 800c434:	2316      	movs	r3, #22
 800c436:	6003      	str	r3, [r0, #0]
 800c438:	2001      	movs	r0, #1
 800c43a:	e7e7      	b.n	800c40c <_raise_r+0x12>
 800c43c:	2100      	movs	r1, #0
 800c43e:	4620      	mov	r0, r4
 800c440:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c444:	4798      	blx	r3
 800c446:	2000      	movs	r0, #0
 800c448:	e7e0      	b.n	800c40c <_raise_r+0x12>
	...

0800c44c <raise>:
 800c44c:	4b02      	ldr	r3, [pc, #8]	@ (800c458 <raise+0xc>)
 800c44e:	4601      	mov	r1, r0
 800c450:	6818      	ldr	r0, [r3, #0]
 800c452:	f7ff bfd2 	b.w	800c3fa <_raise_r>
 800c456:	bf00      	nop
 800c458:	2000004c 	.word	0x2000004c

0800c45c <_localeconv_r>:
 800c45c:	4800      	ldr	r0, [pc, #0]	@ (800c460 <_localeconv_r+0x4>)
 800c45e:	4770      	bx	lr
 800c460:	2000018c 	.word	0x2000018c

0800c464 <_close_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	2300      	movs	r3, #0
 800c468:	4d05      	ldr	r5, [pc, #20]	@ (800c480 <_close_r+0x1c>)
 800c46a:	4604      	mov	r4, r0
 800c46c:	4608      	mov	r0, r1
 800c46e:	602b      	str	r3, [r5, #0]
 800c470:	f7f7 fc45 	bl	8003cfe <_close>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_close_r+0x1a>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_close_r+0x1a>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	20002770 	.word	0x20002770

0800c484 <_lseek_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	4604      	mov	r4, r0
 800c488:	4608      	mov	r0, r1
 800c48a:	4611      	mov	r1, r2
 800c48c:	2200      	movs	r2, #0
 800c48e:	4d05      	ldr	r5, [pc, #20]	@ (800c4a4 <_lseek_r+0x20>)
 800c490:	602a      	str	r2, [r5, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	f7f7 fc57 	bl	8003d46 <_lseek>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_lseek_r+0x1e>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_lseek_r+0x1e>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	20002770 	.word	0x20002770

0800c4a8 <_read_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	4d05      	ldr	r5, [pc, #20]	@ (800c4c8 <_read_r+0x20>)
 800c4b4:	602a      	str	r2, [r5, #0]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f7f7 fbe8 	bl	8003c8c <_read>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_read_r+0x1e>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_read_r+0x1e>
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	20002770 	.word	0x20002770

0800c4cc <_kill_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	4d06      	ldr	r5, [pc, #24]	@ (800c4ec <_kill_r+0x20>)
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	602b      	str	r3, [r5, #0]
 800c4da:	f7f7 fbbc 	bl	8003c56 <_kill>
 800c4de:	1c43      	adds	r3, r0, #1
 800c4e0:	d102      	bne.n	800c4e8 <_kill_r+0x1c>
 800c4e2:	682b      	ldr	r3, [r5, #0]
 800c4e4:	b103      	cbz	r3, 800c4e8 <_kill_r+0x1c>
 800c4e6:	6023      	str	r3, [r4, #0]
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20002770 	.word	0x20002770

0800c4f0 <_getpid_r>:
 800c4f0:	f7f7 bbaa 	b.w	8003c48 <_getpid>

0800c4f4 <_sbrk_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	4d05      	ldr	r5, [pc, #20]	@ (800c510 <_sbrk_r+0x1c>)
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	602b      	str	r3, [r5, #0]
 800c500:	f7f7 fc2e 	bl	8003d60 <_sbrk>
 800c504:	1c43      	adds	r3, r0, #1
 800c506:	d102      	bne.n	800c50e <_sbrk_r+0x1a>
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	b103      	cbz	r3, 800c50e <_sbrk_r+0x1a>
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	bd38      	pop	{r3, r4, r5, pc}
 800c510:	20002770 	.word	0x20002770

0800c514 <_write_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	4611      	mov	r1, r2
 800c51c:	2200      	movs	r2, #0
 800c51e:	4d05      	ldr	r5, [pc, #20]	@ (800c534 <_write_r+0x20>)
 800c520:	602a      	str	r2, [r5, #0]
 800c522:	461a      	mov	r2, r3
 800c524:	f7f7 fbcf 	bl	8003cc6 <_write>
 800c528:	1c43      	adds	r3, r0, #1
 800c52a:	d102      	bne.n	800c532 <_write_r+0x1e>
 800c52c:	682b      	ldr	r3, [r5, #0]
 800c52e:	b103      	cbz	r3, 800c532 <_write_r+0x1e>
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	20002770 	.word	0x20002770

0800c538 <__errno>:
 800c538:	4b01      	ldr	r3, [pc, #4]	@ (800c540 <__errno+0x8>)
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	2000004c 	.word	0x2000004c

0800c544 <__libc_init_array>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	2600      	movs	r6, #0
 800c548:	4d0c      	ldr	r5, [pc, #48]	@ (800c57c <__libc_init_array+0x38>)
 800c54a:	4c0d      	ldr	r4, [pc, #52]	@ (800c580 <__libc_init_array+0x3c>)
 800c54c:	1b64      	subs	r4, r4, r5
 800c54e:	10a4      	asrs	r4, r4, #2
 800c550:	42a6      	cmp	r6, r4
 800c552:	d109      	bne.n	800c568 <__libc_init_array+0x24>
 800c554:	f001 ff32 	bl	800e3bc <_init>
 800c558:	2600      	movs	r6, #0
 800c55a:	4d0a      	ldr	r5, [pc, #40]	@ (800c584 <__libc_init_array+0x40>)
 800c55c:	4c0a      	ldr	r4, [pc, #40]	@ (800c588 <__libc_init_array+0x44>)
 800c55e:	1b64      	subs	r4, r4, r5
 800c560:	10a4      	asrs	r4, r4, #2
 800c562:	42a6      	cmp	r6, r4
 800c564:	d105      	bne.n	800c572 <__libc_init_array+0x2e>
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	f855 3b04 	ldr.w	r3, [r5], #4
 800c56c:	4798      	blx	r3
 800c56e:	3601      	adds	r6, #1
 800c570:	e7ee      	b.n	800c550 <__libc_init_array+0xc>
 800c572:	f855 3b04 	ldr.w	r3, [r5], #4
 800c576:	4798      	blx	r3
 800c578:	3601      	adds	r6, #1
 800c57a:	e7f2      	b.n	800c562 <__libc_init_array+0x1e>
 800c57c:	0800eb80 	.word	0x0800eb80
 800c580:	0800eb80 	.word	0x0800eb80
 800c584:	0800eb80 	.word	0x0800eb80
 800c588:	0800eb88 	.word	0x0800eb88

0800c58c <__retarget_lock_init_recursive>:
 800c58c:	4770      	bx	lr

0800c58e <__retarget_lock_acquire_recursive>:
 800c58e:	4770      	bx	lr

0800c590 <__retarget_lock_release_recursive>:
 800c590:	4770      	bx	lr

0800c592 <memchr>:
 800c592:	4603      	mov	r3, r0
 800c594:	b510      	push	{r4, lr}
 800c596:	b2c9      	uxtb	r1, r1
 800c598:	4402      	add	r2, r0
 800c59a:	4293      	cmp	r3, r2
 800c59c:	4618      	mov	r0, r3
 800c59e:	d101      	bne.n	800c5a4 <memchr+0x12>
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	e003      	b.n	800c5ac <memchr+0x1a>
 800c5a4:	7804      	ldrb	r4, [r0, #0]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	428c      	cmp	r4, r1
 800c5aa:	d1f6      	bne.n	800c59a <memchr+0x8>
 800c5ac:	bd10      	pop	{r4, pc}

0800c5ae <memcpy>:
 800c5ae:	440a      	add	r2, r1
 800c5b0:	4291      	cmp	r1, r2
 800c5b2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c5b6:	d100      	bne.n	800c5ba <memcpy+0xc>
 800c5b8:	4770      	bx	lr
 800c5ba:	b510      	push	{r4, lr}
 800c5bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5c0:	4291      	cmp	r1, r2
 800c5c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5c6:	d1f9      	bne.n	800c5bc <memcpy+0xe>
 800c5c8:	bd10      	pop	{r4, pc}

0800c5ca <quorem>:
 800c5ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ce:	6903      	ldr	r3, [r0, #16]
 800c5d0:	690c      	ldr	r4, [r1, #16]
 800c5d2:	4607      	mov	r7, r0
 800c5d4:	42a3      	cmp	r3, r4
 800c5d6:	db7e      	blt.n	800c6d6 <quorem+0x10c>
 800c5d8:	3c01      	subs	r4, #1
 800c5da:	00a3      	lsls	r3, r4, #2
 800c5dc:	f100 0514 	add.w	r5, r0, #20
 800c5e0:	f101 0814 	add.w	r8, r1, #20
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5ea:	9301      	str	r3, [sp, #4]
 800c5ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c600:	d32e      	bcc.n	800c660 <quorem+0x96>
 800c602:	f04f 0a00 	mov.w	sl, #0
 800c606:	46c4      	mov	ip, r8
 800c608:	46ae      	mov	lr, r5
 800c60a:	46d3      	mov	fp, sl
 800c60c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c610:	b298      	uxth	r0, r3
 800c612:	fb06 a000 	mla	r0, r6, r0, sl
 800c616:	0c1b      	lsrs	r3, r3, #16
 800c618:	0c02      	lsrs	r2, r0, #16
 800c61a:	fb06 2303 	mla	r3, r6, r3, r2
 800c61e:	f8de 2000 	ldr.w	r2, [lr]
 800c622:	b280      	uxth	r0, r0
 800c624:	b292      	uxth	r2, r2
 800c626:	1a12      	subs	r2, r2, r0
 800c628:	445a      	add	r2, fp
 800c62a:	f8de 0000 	ldr.w	r0, [lr]
 800c62e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c632:	b29b      	uxth	r3, r3
 800c634:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c638:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c63c:	b292      	uxth	r2, r2
 800c63e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c642:	45e1      	cmp	r9, ip
 800c644:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c648:	f84e 2b04 	str.w	r2, [lr], #4
 800c64c:	d2de      	bcs.n	800c60c <quorem+0x42>
 800c64e:	9b00      	ldr	r3, [sp, #0]
 800c650:	58eb      	ldr	r3, [r5, r3]
 800c652:	b92b      	cbnz	r3, 800c660 <quorem+0x96>
 800c654:	9b01      	ldr	r3, [sp, #4]
 800c656:	3b04      	subs	r3, #4
 800c658:	429d      	cmp	r5, r3
 800c65a:	461a      	mov	r2, r3
 800c65c:	d32f      	bcc.n	800c6be <quorem+0xf4>
 800c65e:	613c      	str	r4, [r7, #16]
 800c660:	4638      	mov	r0, r7
 800c662:	f001 f8c5 	bl	800d7f0 <__mcmp>
 800c666:	2800      	cmp	r0, #0
 800c668:	db25      	blt.n	800c6b6 <quorem+0xec>
 800c66a:	4629      	mov	r1, r5
 800c66c:	2000      	movs	r0, #0
 800c66e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c672:	f8d1 c000 	ldr.w	ip, [r1]
 800c676:	fa1f fe82 	uxth.w	lr, r2
 800c67a:	fa1f f38c 	uxth.w	r3, ip
 800c67e:	eba3 030e 	sub.w	r3, r3, lr
 800c682:	4403      	add	r3, r0
 800c684:	0c12      	lsrs	r2, r2, #16
 800c686:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c68a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c68e:	b29b      	uxth	r3, r3
 800c690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c694:	45c1      	cmp	r9, r8
 800c696:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c69a:	f841 3b04 	str.w	r3, [r1], #4
 800c69e:	d2e6      	bcs.n	800c66e <quorem+0xa4>
 800c6a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6a8:	b922      	cbnz	r2, 800c6b4 <quorem+0xea>
 800c6aa:	3b04      	subs	r3, #4
 800c6ac:	429d      	cmp	r5, r3
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	d30b      	bcc.n	800c6ca <quorem+0x100>
 800c6b2:	613c      	str	r4, [r7, #16]
 800c6b4:	3601      	adds	r6, #1
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	b003      	add	sp, #12
 800c6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6be:	6812      	ldr	r2, [r2, #0]
 800c6c0:	3b04      	subs	r3, #4
 800c6c2:	2a00      	cmp	r2, #0
 800c6c4:	d1cb      	bne.n	800c65e <quorem+0x94>
 800c6c6:	3c01      	subs	r4, #1
 800c6c8:	e7c6      	b.n	800c658 <quorem+0x8e>
 800c6ca:	6812      	ldr	r2, [r2, #0]
 800c6cc:	3b04      	subs	r3, #4
 800c6ce:	2a00      	cmp	r2, #0
 800c6d0:	d1ef      	bne.n	800c6b2 <quorem+0xe8>
 800c6d2:	3c01      	subs	r4, #1
 800c6d4:	e7ea      	b.n	800c6ac <quorem+0xe2>
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	e7ee      	b.n	800c6b8 <quorem+0xee>
 800c6da:	0000      	movs	r0, r0
 800c6dc:	0000      	movs	r0, r0
	...

0800c6e0 <_dtoa_r>:
 800c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e4:	4614      	mov	r4, r2
 800c6e6:	461d      	mov	r5, r3
 800c6e8:	69c7      	ldr	r7, [r0, #28]
 800c6ea:	b097      	sub	sp, #92	@ 0x5c
 800c6ec:	4683      	mov	fp, r0
 800c6ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c6f2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c6f4:	b97f      	cbnz	r7, 800c716 <_dtoa_r+0x36>
 800c6f6:	2010      	movs	r0, #16
 800c6f8:	f7ff f802 	bl	800b700 <malloc>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	f8cb 001c 	str.w	r0, [fp, #28]
 800c702:	b920      	cbnz	r0, 800c70e <_dtoa_r+0x2e>
 800c704:	21ef      	movs	r1, #239	@ 0xef
 800c706:	4ba8      	ldr	r3, [pc, #672]	@ (800c9a8 <_dtoa_r+0x2c8>)
 800c708:	48a8      	ldr	r0, [pc, #672]	@ (800c9ac <_dtoa_r+0x2cc>)
 800c70a:	f001 fb9b 	bl	800de44 <__assert_func>
 800c70e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c712:	6007      	str	r7, [r0, #0]
 800c714:	60c7      	str	r7, [r0, #12]
 800c716:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c71a:	6819      	ldr	r1, [r3, #0]
 800c71c:	b159      	cbz	r1, 800c736 <_dtoa_r+0x56>
 800c71e:	685a      	ldr	r2, [r3, #4]
 800c720:	2301      	movs	r3, #1
 800c722:	4093      	lsls	r3, r2
 800c724:	604a      	str	r2, [r1, #4]
 800c726:	608b      	str	r3, [r1, #8]
 800c728:	4658      	mov	r0, fp
 800c72a:	f000 fe29 	bl	800d380 <_Bfree>
 800c72e:	2200      	movs	r2, #0
 800c730:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	1e2b      	subs	r3, r5, #0
 800c738:	bfaf      	iteee	ge
 800c73a:	2300      	movge	r3, #0
 800c73c:	2201      	movlt	r2, #1
 800c73e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c742:	9303      	strlt	r3, [sp, #12]
 800c744:	bfa8      	it	ge
 800c746:	6033      	strge	r3, [r6, #0]
 800c748:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c74c:	4b98      	ldr	r3, [pc, #608]	@ (800c9b0 <_dtoa_r+0x2d0>)
 800c74e:	bfb8      	it	lt
 800c750:	6032      	strlt	r2, [r6, #0]
 800c752:	ea33 0308 	bics.w	r3, r3, r8
 800c756:	d112      	bne.n	800c77e <_dtoa_r+0x9e>
 800c758:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c75c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c764:	4323      	orrs	r3, r4
 800c766:	f000 8550 	beq.w	800d20a <_dtoa_r+0xb2a>
 800c76a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c76c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c9b4 <_dtoa_r+0x2d4>
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 8552 	beq.w	800d21a <_dtoa_r+0xb3a>
 800c776:	f10a 0303 	add.w	r3, sl, #3
 800c77a:	f000 bd4c 	b.w	800d216 <_dtoa_r+0xb36>
 800c77e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c782:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c78a:	2200      	movs	r2, #0
 800c78c:	2300      	movs	r3, #0
 800c78e:	f7f4 f90b 	bl	80009a8 <__aeabi_dcmpeq>
 800c792:	4607      	mov	r7, r0
 800c794:	b158      	cbz	r0, 800c7ae <_dtoa_r+0xce>
 800c796:	2301      	movs	r3, #1
 800c798:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c79a:	6013      	str	r3, [r2, #0]
 800c79c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c79e:	b113      	cbz	r3, 800c7a6 <_dtoa_r+0xc6>
 800c7a0:	4b85      	ldr	r3, [pc, #532]	@ (800c9b8 <_dtoa_r+0x2d8>)
 800c7a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c7a4:	6013      	str	r3, [r2, #0]
 800c7a6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c9bc <_dtoa_r+0x2dc>
 800c7aa:	f000 bd36 	b.w	800d21a <_dtoa_r+0xb3a>
 800c7ae:	ab14      	add	r3, sp, #80	@ 0x50
 800c7b0:	9301      	str	r3, [sp, #4]
 800c7b2:	ab15      	add	r3, sp, #84	@ 0x54
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	4658      	mov	r0, fp
 800c7b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c7bc:	f001 f8c8 	bl	800d950 <__d2b>
 800c7c0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c7c4:	4681      	mov	r9, r0
 800c7c6:	2e00      	cmp	r6, #0
 800c7c8:	d077      	beq.n	800c8ba <_dtoa_r+0x1da>
 800c7ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7d0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c7d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7d8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c7dc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c7e0:	9712      	str	r7, [sp, #72]	@ 0x48
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	4b76      	ldr	r3, [pc, #472]	@ (800c9c0 <_dtoa_r+0x2e0>)
 800c7e8:	f7f3 fcbe 	bl	8000168 <__aeabi_dsub>
 800c7ec:	a368      	add	r3, pc, #416	@ (adr r3, 800c990 <_dtoa_r+0x2b0>)
 800c7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f2:	f7f3 fe71 	bl	80004d8 <__aeabi_dmul>
 800c7f6:	a368      	add	r3, pc, #416	@ (adr r3, 800c998 <_dtoa_r+0x2b8>)
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f7f3 fcb6 	bl	800016c <__adddf3>
 800c800:	4604      	mov	r4, r0
 800c802:	4630      	mov	r0, r6
 800c804:	460d      	mov	r5, r1
 800c806:	f7f3 fdfd 	bl	8000404 <__aeabi_i2d>
 800c80a:	a365      	add	r3, pc, #404	@ (adr r3, 800c9a0 <_dtoa_r+0x2c0>)
 800c80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c810:	f7f3 fe62 	bl	80004d8 <__aeabi_dmul>
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	4620      	mov	r0, r4
 800c81a:	4629      	mov	r1, r5
 800c81c:	f7f3 fca6 	bl	800016c <__adddf3>
 800c820:	4604      	mov	r4, r0
 800c822:	460d      	mov	r5, r1
 800c824:	f7f4 f908 	bl	8000a38 <__aeabi_d2iz>
 800c828:	2200      	movs	r2, #0
 800c82a:	4607      	mov	r7, r0
 800c82c:	2300      	movs	r3, #0
 800c82e:	4620      	mov	r0, r4
 800c830:	4629      	mov	r1, r5
 800c832:	f7f4 f8c3 	bl	80009bc <__aeabi_dcmplt>
 800c836:	b140      	cbz	r0, 800c84a <_dtoa_r+0x16a>
 800c838:	4638      	mov	r0, r7
 800c83a:	f7f3 fde3 	bl	8000404 <__aeabi_i2d>
 800c83e:	4622      	mov	r2, r4
 800c840:	462b      	mov	r3, r5
 800c842:	f7f4 f8b1 	bl	80009a8 <__aeabi_dcmpeq>
 800c846:	b900      	cbnz	r0, 800c84a <_dtoa_r+0x16a>
 800c848:	3f01      	subs	r7, #1
 800c84a:	2f16      	cmp	r7, #22
 800c84c:	d853      	bhi.n	800c8f6 <_dtoa_r+0x216>
 800c84e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c852:	4b5c      	ldr	r3, [pc, #368]	@ (800c9c4 <_dtoa_r+0x2e4>)
 800c854:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	f7f4 f8ae 	bl	80009bc <__aeabi_dcmplt>
 800c860:	2800      	cmp	r0, #0
 800c862:	d04a      	beq.n	800c8fa <_dtoa_r+0x21a>
 800c864:	2300      	movs	r3, #0
 800c866:	3f01      	subs	r7, #1
 800c868:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c86a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c86c:	1b9b      	subs	r3, r3, r6
 800c86e:	1e5a      	subs	r2, r3, #1
 800c870:	bf46      	itte	mi
 800c872:	f1c3 0801 	rsbmi	r8, r3, #1
 800c876:	2300      	movmi	r3, #0
 800c878:	f04f 0800 	movpl.w	r8, #0
 800c87c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c87e:	bf48      	it	mi
 800c880:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c882:	2f00      	cmp	r7, #0
 800c884:	db3b      	blt.n	800c8fe <_dtoa_r+0x21e>
 800c886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c888:	970e      	str	r7, [sp, #56]	@ 0x38
 800c88a:	443b      	add	r3, r7
 800c88c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c88e:	2300      	movs	r3, #0
 800c890:	930a      	str	r3, [sp, #40]	@ 0x28
 800c892:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c894:	2b09      	cmp	r3, #9
 800c896:	d866      	bhi.n	800c966 <_dtoa_r+0x286>
 800c898:	2b05      	cmp	r3, #5
 800c89a:	bfc4      	itt	gt
 800c89c:	3b04      	subgt	r3, #4
 800c89e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c8a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c8a2:	bfc8      	it	gt
 800c8a4:	2400      	movgt	r4, #0
 800c8a6:	f1a3 0302 	sub.w	r3, r3, #2
 800c8aa:	bfd8      	it	le
 800c8ac:	2401      	movle	r4, #1
 800c8ae:	2b03      	cmp	r3, #3
 800c8b0:	d864      	bhi.n	800c97c <_dtoa_r+0x29c>
 800c8b2:	e8df f003 	tbb	[pc, r3]
 800c8b6:	382b      	.short	0x382b
 800c8b8:	5636      	.short	0x5636
 800c8ba:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c8be:	441e      	add	r6, r3
 800c8c0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c8c4:	2b20      	cmp	r3, #32
 800c8c6:	bfc1      	itttt	gt
 800c8c8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c8cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800c8d0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c8d4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c8d8:	bfd6      	itet	le
 800c8da:	f1c3 0320 	rsble	r3, r3, #32
 800c8de:	ea48 0003 	orrgt.w	r0, r8, r3
 800c8e2:	fa04 f003 	lslle.w	r0, r4, r3
 800c8e6:	f7f3 fd7d 	bl	80003e4 <__aeabi_ui2d>
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c8f0:	3e01      	subs	r6, #1
 800c8f2:	9212      	str	r2, [sp, #72]	@ 0x48
 800c8f4:	e775      	b.n	800c7e2 <_dtoa_r+0x102>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e7b6      	b.n	800c868 <_dtoa_r+0x188>
 800c8fa:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c8fc:	e7b5      	b.n	800c86a <_dtoa_r+0x18a>
 800c8fe:	427b      	negs	r3, r7
 800c900:	930a      	str	r3, [sp, #40]	@ 0x28
 800c902:	2300      	movs	r3, #0
 800c904:	eba8 0807 	sub.w	r8, r8, r7
 800c908:	930e      	str	r3, [sp, #56]	@ 0x38
 800c90a:	e7c2      	b.n	800c892 <_dtoa_r+0x1b2>
 800c90c:	2300      	movs	r3, #0
 800c90e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c910:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c912:	2b00      	cmp	r3, #0
 800c914:	dc35      	bgt.n	800c982 <_dtoa_r+0x2a2>
 800c916:	2301      	movs	r3, #1
 800c918:	461a      	mov	r2, r3
 800c91a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c91e:	9221      	str	r2, [sp, #132]	@ 0x84
 800c920:	e00b      	b.n	800c93a <_dtoa_r+0x25a>
 800c922:	2301      	movs	r3, #1
 800c924:	e7f3      	b.n	800c90e <_dtoa_r+0x22e>
 800c926:	2300      	movs	r3, #0
 800c928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c92a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c92c:	18fb      	adds	r3, r7, r3
 800c92e:	9308      	str	r3, [sp, #32]
 800c930:	3301      	adds	r3, #1
 800c932:	2b01      	cmp	r3, #1
 800c934:	9307      	str	r3, [sp, #28]
 800c936:	bfb8      	it	lt
 800c938:	2301      	movlt	r3, #1
 800c93a:	2100      	movs	r1, #0
 800c93c:	2204      	movs	r2, #4
 800c93e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c942:	f102 0514 	add.w	r5, r2, #20
 800c946:	429d      	cmp	r5, r3
 800c948:	d91f      	bls.n	800c98a <_dtoa_r+0x2aa>
 800c94a:	6041      	str	r1, [r0, #4]
 800c94c:	4658      	mov	r0, fp
 800c94e:	f000 fcd7 	bl	800d300 <_Balloc>
 800c952:	4682      	mov	sl, r0
 800c954:	2800      	cmp	r0, #0
 800c956:	d139      	bne.n	800c9cc <_dtoa_r+0x2ec>
 800c958:	4602      	mov	r2, r0
 800c95a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c95e:	4b1a      	ldr	r3, [pc, #104]	@ (800c9c8 <_dtoa_r+0x2e8>)
 800c960:	e6d2      	b.n	800c708 <_dtoa_r+0x28>
 800c962:	2301      	movs	r3, #1
 800c964:	e7e0      	b.n	800c928 <_dtoa_r+0x248>
 800c966:	2401      	movs	r4, #1
 800c968:	2300      	movs	r3, #0
 800c96a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c96c:	9320      	str	r3, [sp, #128]	@ 0x80
 800c96e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c972:	2200      	movs	r2, #0
 800c974:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c978:	2312      	movs	r3, #18
 800c97a:	e7d0      	b.n	800c91e <_dtoa_r+0x23e>
 800c97c:	2301      	movs	r3, #1
 800c97e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c980:	e7f5      	b.n	800c96e <_dtoa_r+0x28e>
 800c982:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c984:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c988:	e7d7      	b.n	800c93a <_dtoa_r+0x25a>
 800c98a:	3101      	adds	r1, #1
 800c98c:	0052      	lsls	r2, r2, #1
 800c98e:	e7d8      	b.n	800c942 <_dtoa_r+0x262>
 800c990:	636f4361 	.word	0x636f4361
 800c994:	3fd287a7 	.word	0x3fd287a7
 800c998:	8b60c8b3 	.word	0x8b60c8b3
 800c99c:	3fc68a28 	.word	0x3fc68a28
 800c9a0:	509f79fb 	.word	0x509f79fb
 800c9a4:	3fd34413 	.word	0x3fd34413
 800c9a8:	0800e849 	.word	0x0800e849
 800c9ac:	0800e860 	.word	0x0800e860
 800c9b0:	7ff00000 	.word	0x7ff00000
 800c9b4:	0800e845 	.word	0x0800e845
 800c9b8:	0800e819 	.word	0x0800e819
 800c9bc:	0800e818 	.word	0x0800e818
 800c9c0:	3ff80000 	.word	0x3ff80000
 800c9c4:	0800e958 	.word	0x0800e958
 800c9c8:	0800e8b8 	.word	0x0800e8b8
 800c9cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9d0:	6018      	str	r0, [r3, #0]
 800c9d2:	9b07      	ldr	r3, [sp, #28]
 800c9d4:	2b0e      	cmp	r3, #14
 800c9d6:	f200 80a4 	bhi.w	800cb22 <_dtoa_r+0x442>
 800c9da:	2c00      	cmp	r4, #0
 800c9dc:	f000 80a1 	beq.w	800cb22 <_dtoa_r+0x442>
 800c9e0:	2f00      	cmp	r7, #0
 800c9e2:	dd33      	ble.n	800ca4c <_dtoa_r+0x36c>
 800c9e4:	4b86      	ldr	r3, [pc, #536]	@ (800cc00 <_dtoa_r+0x520>)
 800c9e6:	f007 020f 	and.w	r2, r7, #15
 800c9ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9ee:	05f8      	lsls	r0, r7, #23
 800c9f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c9f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c9f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c9fc:	d516      	bpl.n	800ca2c <_dtoa_r+0x34c>
 800c9fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca02:	4b80      	ldr	r3, [pc, #512]	@ (800cc04 <_dtoa_r+0x524>)
 800ca04:	2603      	movs	r6, #3
 800ca06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca0a:	f7f3 fe8f 	bl	800072c <__aeabi_ddiv>
 800ca0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca12:	f004 040f 	and.w	r4, r4, #15
 800ca16:	4d7b      	ldr	r5, [pc, #492]	@ (800cc04 <_dtoa_r+0x524>)
 800ca18:	b954      	cbnz	r4, 800ca30 <_dtoa_r+0x350>
 800ca1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca22:	f7f3 fe83 	bl	800072c <__aeabi_ddiv>
 800ca26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca2a:	e028      	b.n	800ca7e <_dtoa_r+0x39e>
 800ca2c:	2602      	movs	r6, #2
 800ca2e:	e7f2      	b.n	800ca16 <_dtoa_r+0x336>
 800ca30:	07e1      	lsls	r1, r4, #31
 800ca32:	d508      	bpl.n	800ca46 <_dtoa_r+0x366>
 800ca34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca3c:	f7f3 fd4c 	bl	80004d8 <__aeabi_dmul>
 800ca40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca44:	3601      	adds	r6, #1
 800ca46:	1064      	asrs	r4, r4, #1
 800ca48:	3508      	adds	r5, #8
 800ca4a:	e7e5      	b.n	800ca18 <_dtoa_r+0x338>
 800ca4c:	f000 80d2 	beq.w	800cbf4 <_dtoa_r+0x514>
 800ca50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca54:	427c      	negs	r4, r7
 800ca56:	4b6a      	ldr	r3, [pc, #424]	@ (800cc00 <_dtoa_r+0x520>)
 800ca58:	f004 020f 	and.w	r2, r4, #15
 800ca5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	f7f3 fd38 	bl	80004d8 <__aeabi_dmul>
 800ca68:	2602      	movs	r6, #2
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca70:	4d64      	ldr	r5, [pc, #400]	@ (800cc04 <_dtoa_r+0x524>)
 800ca72:	1124      	asrs	r4, r4, #4
 800ca74:	2c00      	cmp	r4, #0
 800ca76:	f040 80b2 	bne.w	800cbde <_dtoa_r+0x4fe>
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1d3      	bne.n	800ca26 <_dtoa_r+0x346>
 800ca7e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f000 80b7 	beq.w	800cbf8 <_dtoa_r+0x518>
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	4629      	mov	r1, r5
 800ca90:	4b5d      	ldr	r3, [pc, #372]	@ (800cc08 <_dtoa_r+0x528>)
 800ca92:	f7f3 ff93 	bl	80009bc <__aeabi_dcmplt>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	f000 80ae 	beq.w	800cbf8 <_dtoa_r+0x518>
 800ca9c:	9b07      	ldr	r3, [sp, #28]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f000 80aa 	beq.w	800cbf8 <_dtoa_r+0x518>
 800caa4:	9b08      	ldr	r3, [sp, #32]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	dd37      	ble.n	800cb1a <_dtoa_r+0x43a>
 800caaa:	1e7b      	subs	r3, r7, #1
 800caac:	4620      	mov	r0, r4
 800caae:	9304      	str	r3, [sp, #16]
 800cab0:	2200      	movs	r2, #0
 800cab2:	4629      	mov	r1, r5
 800cab4:	4b55      	ldr	r3, [pc, #340]	@ (800cc0c <_dtoa_r+0x52c>)
 800cab6:	f7f3 fd0f 	bl	80004d8 <__aeabi_dmul>
 800caba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cabe:	9c08      	ldr	r4, [sp, #32]
 800cac0:	3601      	adds	r6, #1
 800cac2:	4630      	mov	r0, r6
 800cac4:	f7f3 fc9e 	bl	8000404 <__aeabi_i2d>
 800cac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cacc:	f7f3 fd04 	bl	80004d8 <__aeabi_dmul>
 800cad0:	2200      	movs	r2, #0
 800cad2:	4b4f      	ldr	r3, [pc, #316]	@ (800cc10 <_dtoa_r+0x530>)
 800cad4:	f7f3 fb4a 	bl	800016c <__adddf3>
 800cad8:	4605      	mov	r5, r0
 800cada:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cade:	2c00      	cmp	r4, #0
 800cae0:	f040 809a 	bne.w	800cc18 <_dtoa_r+0x538>
 800cae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae8:	2200      	movs	r2, #0
 800caea:	4b4a      	ldr	r3, [pc, #296]	@ (800cc14 <_dtoa_r+0x534>)
 800caec:	f7f3 fb3c 	bl	8000168 <__aeabi_dsub>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800caf8:	462a      	mov	r2, r5
 800cafa:	4633      	mov	r3, r6
 800cafc:	f7f3 ff7c 	bl	80009f8 <__aeabi_dcmpgt>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	f040 828e 	bne.w	800d022 <_dtoa_r+0x942>
 800cb06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb0a:	462a      	mov	r2, r5
 800cb0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cb10:	f7f3 ff54 	bl	80009bc <__aeabi_dcmplt>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	f040 8127 	bne.w	800cd68 <_dtoa_r+0x688>
 800cb1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cb1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cb22:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f2c0 8163 	blt.w	800cdf0 <_dtoa_r+0x710>
 800cb2a:	2f0e      	cmp	r7, #14
 800cb2c:	f300 8160 	bgt.w	800cdf0 <_dtoa_r+0x710>
 800cb30:	4b33      	ldr	r3, [pc, #204]	@ (800cc00 <_dtoa_r+0x520>)
 800cb32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb36:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cb3a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cb3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	da03      	bge.n	800cb4c <_dtoa_r+0x46c>
 800cb44:	9b07      	ldr	r3, [sp, #28]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f340 8100 	ble.w	800cd4c <_dtoa_r+0x66c>
 800cb4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cb50:	4656      	mov	r6, sl
 800cb52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb56:	4620      	mov	r0, r4
 800cb58:	4629      	mov	r1, r5
 800cb5a:	f7f3 fde7 	bl	800072c <__aeabi_ddiv>
 800cb5e:	f7f3 ff6b 	bl	8000a38 <__aeabi_d2iz>
 800cb62:	4680      	mov	r8, r0
 800cb64:	f7f3 fc4e 	bl	8000404 <__aeabi_i2d>
 800cb68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb6c:	f7f3 fcb4 	bl	80004d8 <__aeabi_dmul>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4620      	mov	r0, r4
 800cb76:	4629      	mov	r1, r5
 800cb78:	f7f3 faf6 	bl	8000168 <__aeabi_dsub>
 800cb7c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cb80:	9d07      	ldr	r5, [sp, #28]
 800cb82:	f806 4b01 	strb.w	r4, [r6], #1
 800cb86:	eba6 040a 	sub.w	r4, r6, sl
 800cb8a:	42a5      	cmp	r5, r4
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	f040 8116 	bne.w	800cdc0 <_dtoa_r+0x6e0>
 800cb94:	f7f3 faea 	bl	800016c <__adddf3>
 800cb98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	460d      	mov	r5, r1
 800cba0:	f7f3 ff2a 	bl	80009f8 <__aeabi_dcmpgt>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	f040 80f8 	bne.w	800cd9a <_dtoa_r+0x6ba>
 800cbaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbae:	4620      	mov	r0, r4
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	f7f3 fef9 	bl	80009a8 <__aeabi_dcmpeq>
 800cbb6:	b118      	cbz	r0, 800cbc0 <_dtoa_r+0x4e0>
 800cbb8:	f018 0f01 	tst.w	r8, #1
 800cbbc:	f040 80ed 	bne.w	800cd9a <_dtoa_r+0x6ba>
 800cbc0:	4649      	mov	r1, r9
 800cbc2:	4658      	mov	r0, fp
 800cbc4:	f000 fbdc 	bl	800d380 <_Bfree>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	7033      	strb	r3, [r6, #0]
 800cbcc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cbce:	3701      	adds	r7, #1
 800cbd0:	601f      	str	r7, [r3, #0]
 800cbd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f000 8320 	beq.w	800d21a <_dtoa_r+0xb3a>
 800cbda:	601e      	str	r6, [r3, #0]
 800cbdc:	e31d      	b.n	800d21a <_dtoa_r+0xb3a>
 800cbde:	07e2      	lsls	r2, r4, #31
 800cbe0:	d505      	bpl.n	800cbee <_dtoa_r+0x50e>
 800cbe2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cbe6:	f7f3 fc77 	bl	80004d8 <__aeabi_dmul>
 800cbea:	2301      	movs	r3, #1
 800cbec:	3601      	adds	r6, #1
 800cbee:	1064      	asrs	r4, r4, #1
 800cbf0:	3508      	adds	r5, #8
 800cbf2:	e73f      	b.n	800ca74 <_dtoa_r+0x394>
 800cbf4:	2602      	movs	r6, #2
 800cbf6:	e742      	b.n	800ca7e <_dtoa_r+0x39e>
 800cbf8:	9c07      	ldr	r4, [sp, #28]
 800cbfa:	9704      	str	r7, [sp, #16]
 800cbfc:	e761      	b.n	800cac2 <_dtoa_r+0x3e2>
 800cbfe:	bf00      	nop
 800cc00:	0800e958 	.word	0x0800e958
 800cc04:	0800e930 	.word	0x0800e930
 800cc08:	3ff00000 	.word	0x3ff00000
 800cc0c:	40240000 	.word	0x40240000
 800cc10:	401c0000 	.word	0x401c0000
 800cc14:	40140000 	.word	0x40140000
 800cc18:	4b70      	ldr	r3, [pc, #448]	@ (800cddc <_dtoa_r+0x6fc>)
 800cc1a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cc1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc24:	4454      	add	r4, sl
 800cc26:	2900      	cmp	r1, #0
 800cc28:	d045      	beq.n	800ccb6 <_dtoa_r+0x5d6>
 800cc2a:	2000      	movs	r0, #0
 800cc2c:	496c      	ldr	r1, [pc, #432]	@ (800cde0 <_dtoa_r+0x700>)
 800cc2e:	f7f3 fd7d 	bl	800072c <__aeabi_ddiv>
 800cc32:	4633      	mov	r3, r6
 800cc34:	462a      	mov	r2, r5
 800cc36:	f7f3 fa97 	bl	8000168 <__aeabi_dsub>
 800cc3a:	4656      	mov	r6, sl
 800cc3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc44:	f7f3 fef8 	bl	8000a38 <__aeabi_d2iz>
 800cc48:	4605      	mov	r5, r0
 800cc4a:	f7f3 fbdb 	bl	8000404 <__aeabi_i2d>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	460b      	mov	r3, r1
 800cc52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc56:	f7f3 fa87 	bl	8000168 <__aeabi_dsub>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	3530      	adds	r5, #48	@ 0x30
 800cc60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc68:	f806 5b01 	strb.w	r5, [r6], #1
 800cc6c:	f7f3 fea6 	bl	80009bc <__aeabi_dcmplt>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d163      	bne.n	800cd3c <_dtoa_r+0x65c>
 800cc74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc78:	2000      	movs	r0, #0
 800cc7a:	495a      	ldr	r1, [pc, #360]	@ (800cde4 <_dtoa_r+0x704>)
 800cc7c:	f7f3 fa74 	bl	8000168 <__aeabi_dsub>
 800cc80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc84:	f7f3 fe9a 	bl	80009bc <__aeabi_dcmplt>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	f040 8087 	bne.w	800cd9c <_dtoa_r+0x6bc>
 800cc8e:	42a6      	cmp	r6, r4
 800cc90:	f43f af43 	beq.w	800cb1a <_dtoa_r+0x43a>
 800cc94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc98:	2200      	movs	r2, #0
 800cc9a:	4b53      	ldr	r3, [pc, #332]	@ (800cde8 <_dtoa_r+0x708>)
 800cc9c:	f7f3 fc1c 	bl	80004d8 <__aeabi_dmul>
 800cca0:	2200      	movs	r2, #0
 800cca2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccaa:	4b4f      	ldr	r3, [pc, #316]	@ (800cde8 <_dtoa_r+0x708>)
 800ccac:	f7f3 fc14 	bl	80004d8 <__aeabi_dmul>
 800ccb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccb4:	e7c4      	b.n	800cc40 <_dtoa_r+0x560>
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f7f3 fc0d 	bl	80004d8 <__aeabi_dmul>
 800ccbe:	4656      	mov	r6, sl
 800ccc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ccc4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ccc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccca:	f7f3 feb5 	bl	8000a38 <__aeabi_d2iz>
 800ccce:	4605      	mov	r5, r0
 800ccd0:	f7f3 fb98 	bl	8000404 <__aeabi_i2d>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccdc:	f7f3 fa44 	bl	8000168 <__aeabi_dsub>
 800cce0:	4602      	mov	r2, r0
 800cce2:	460b      	mov	r3, r1
 800cce4:	3530      	adds	r5, #48	@ 0x30
 800cce6:	f806 5b01 	strb.w	r5, [r6], #1
 800ccea:	42a6      	cmp	r6, r4
 800ccec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccf0:	f04f 0200 	mov.w	r2, #0
 800ccf4:	d124      	bne.n	800cd40 <_dtoa_r+0x660>
 800ccf6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ccfa:	4b39      	ldr	r3, [pc, #228]	@ (800cde0 <_dtoa_r+0x700>)
 800ccfc:	f7f3 fa36 	bl	800016c <__adddf3>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd08:	f7f3 fe76 	bl	80009f8 <__aeabi_dcmpgt>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d145      	bne.n	800cd9c <_dtoa_r+0x6bc>
 800cd10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cd14:	2000      	movs	r0, #0
 800cd16:	4932      	ldr	r1, [pc, #200]	@ (800cde0 <_dtoa_r+0x700>)
 800cd18:	f7f3 fa26 	bl	8000168 <__aeabi_dsub>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd24:	f7f3 fe4a 	bl	80009bc <__aeabi_dcmplt>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	f43f aef6 	beq.w	800cb1a <_dtoa_r+0x43a>
 800cd2e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cd30:	1e73      	subs	r3, r6, #1
 800cd32:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cd38:	2b30      	cmp	r3, #48	@ 0x30
 800cd3a:	d0f8      	beq.n	800cd2e <_dtoa_r+0x64e>
 800cd3c:	9f04      	ldr	r7, [sp, #16]
 800cd3e:	e73f      	b.n	800cbc0 <_dtoa_r+0x4e0>
 800cd40:	4b29      	ldr	r3, [pc, #164]	@ (800cde8 <_dtoa_r+0x708>)
 800cd42:	f7f3 fbc9 	bl	80004d8 <__aeabi_dmul>
 800cd46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd4a:	e7bc      	b.n	800ccc6 <_dtoa_r+0x5e6>
 800cd4c:	d10c      	bne.n	800cd68 <_dtoa_r+0x688>
 800cd4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd52:	2200      	movs	r2, #0
 800cd54:	4b25      	ldr	r3, [pc, #148]	@ (800cdec <_dtoa_r+0x70c>)
 800cd56:	f7f3 fbbf 	bl	80004d8 <__aeabi_dmul>
 800cd5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd5e:	f7f3 fe41 	bl	80009e4 <__aeabi_dcmpge>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	f000 815b 	beq.w	800d01e <_dtoa_r+0x93e>
 800cd68:	2400      	movs	r4, #0
 800cd6a:	4625      	mov	r5, r4
 800cd6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd6e:	4656      	mov	r6, sl
 800cd70:	43db      	mvns	r3, r3
 800cd72:	9304      	str	r3, [sp, #16]
 800cd74:	2700      	movs	r7, #0
 800cd76:	4621      	mov	r1, r4
 800cd78:	4658      	mov	r0, fp
 800cd7a:	f000 fb01 	bl	800d380 <_Bfree>
 800cd7e:	2d00      	cmp	r5, #0
 800cd80:	d0dc      	beq.n	800cd3c <_dtoa_r+0x65c>
 800cd82:	b12f      	cbz	r7, 800cd90 <_dtoa_r+0x6b0>
 800cd84:	42af      	cmp	r7, r5
 800cd86:	d003      	beq.n	800cd90 <_dtoa_r+0x6b0>
 800cd88:	4639      	mov	r1, r7
 800cd8a:	4658      	mov	r0, fp
 800cd8c:	f000 faf8 	bl	800d380 <_Bfree>
 800cd90:	4629      	mov	r1, r5
 800cd92:	4658      	mov	r0, fp
 800cd94:	f000 faf4 	bl	800d380 <_Bfree>
 800cd98:	e7d0      	b.n	800cd3c <_dtoa_r+0x65c>
 800cd9a:	9704      	str	r7, [sp, #16]
 800cd9c:	4633      	mov	r3, r6
 800cd9e:	461e      	mov	r6, r3
 800cda0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cda4:	2a39      	cmp	r2, #57	@ 0x39
 800cda6:	d107      	bne.n	800cdb8 <_dtoa_r+0x6d8>
 800cda8:	459a      	cmp	sl, r3
 800cdaa:	d1f8      	bne.n	800cd9e <_dtoa_r+0x6be>
 800cdac:	9a04      	ldr	r2, [sp, #16]
 800cdae:	3201      	adds	r2, #1
 800cdb0:	9204      	str	r2, [sp, #16]
 800cdb2:	2230      	movs	r2, #48	@ 0x30
 800cdb4:	f88a 2000 	strb.w	r2, [sl]
 800cdb8:	781a      	ldrb	r2, [r3, #0]
 800cdba:	3201      	adds	r2, #1
 800cdbc:	701a      	strb	r2, [r3, #0]
 800cdbe:	e7bd      	b.n	800cd3c <_dtoa_r+0x65c>
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	4b09      	ldr	r3, [pc, #36]	@ (800cde8 <_dtoa_r+0x708>)
 800cdc4:	f7f3 fb88 	bl	80004d8 <__aeabi_dmul>
 800cdc8:	2200      	movs	r2, #0
 800cdca:	2300      	movs	r3, #0
 800cdcc:	4604      	mov	r4, r0
 800cdce:	460d      	mov	r5, r1
 800cdd0:	f7f3 fdea 	bl	80009a8 <__aeabi_dcmpeq>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	f43f aebc 	beq.w	800cb52 <_dtoa_r+0x472>
 800cdda:	e6f1      	b.n	800cbc0 <_dtoa_r+0x4e0>
 800cddc:	0800e958 	.word	0x0800e958
 800cde0:	3fe00000 	.word	0x3fe00000
 800cde4:	3ff00000 	.word	0x3ff00000
 800cde8:	40240000 	.word	0x40240000
 800cdec:	40140000 	.word	0x40140000
 800cdf0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cdf2:	2a00      	cmp	r2, #0
 800cdf4:	f000 80db 	beq.w	800cfae <_dtoa_r+0x8ce>
 800cdf8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdfa:	2a01      	cmp	r2, #1
 800cdfc:	f300 80bf 	bgt.w	800cf7e <_dtoa_r+0x89e>
 800ce00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ce02:	2a00      	cmp	r2, #0
 800ce04:	f000 80b7 	beq.w	800cf76 <_dtoa_r+0x896>
 800ce08:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ce0c:	4646      	mov	r6, r8
 800ce0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ce10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce12:	2101      	movs	r1, #1
 800ce14:	441a      	add	r2, r3
 800ce16:	4658      	mov	r0, fp
 800ce18:	4498      	add	r8, r3
 800ce1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce1c:	f000 fb64 	bl	800d4e8 <__i2b>
 800ce20:	4605      	mov	r5, r0
 800ce22:	b15e      	cbz	r6, 800ce3c <_dtoa_r+0x75c>
 800ce24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	dd08      	ble.n	800ce3c <_dtoa_r+0x75c>
 800ce2a:	42b3      	cmp	r3, r6
 800ce2c:	bfa8      	it	ge
 800ce2e:	4633      	movge	r3, r6
 800ce30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce32:	eba8 0803 	sub.w	r8, r8, r3
 800ce36:	1af6      	subs	r6, r6, r3
 800ce38:	1ad3      	subs	r3, r2, r3
 800ce3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce3e:	b1f3      	cbz	r3, 800ce7e <_dtoa_r+0x79e>
 800ce40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f000 80b7 	beq.w	800cfb6 <_dtoa_r+0x8d6>
 800ce48:	b18c      	cbz	r4, 800ce6e <_dtoa_r+0x78e>
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	4622      	mov	r2, r4
 800ce4e:	4658      	mov	r0, fp
 800ce50:	f000 fc08 	bl	800d664 <__pow5mult>
 800ce54:	464a      	mov	r2, r9
 800ce56:	4601      	mov	r1, r0
 800ce58:	4605      	mov	r5, r0
 800ce5a:	4658      	mov	r0, fp
 800ce5c:	f000 fb5a 	bl	800d514 <__multiply>
 800ce60:	4649      	mov	r1, r9
 800ce62:	9004      	str	r0, [sp, #16]
 800ce64:	4658      	mov	r0, fp
 800ce66:	f000 fa8b 	bl	800d380 <_Bfree>
 800ce6a:	9b04      	ldr	r3, [sp, #16]
 800ce6c:	4699      	mov	r9, r3
 800ce6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce70:	1b1a      	subs	r2, r3, r4
 800ce72:	d004      	beq.n	800ce7e <_dtoa_r+0x79e>
 800ce74:	4649      	mov	r1, r9
 800ce76:	4658      	mov	r0, fp
 800ce78:	f000 fbf4 	bl	800d664 <__pow5mult>
 800ce7c:	4681      	mov	r9, r0
 800ce7e:	2101      	movs	r1, #1
 800ce80:	4658      	mov	r0, fp
 800ce82:	f000 fb31 	bl	800d4e8 <__i2b>
 800ce86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce88:	4604      	mov	r4, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f000 81c9 	beq.w	800d222 <_dtoa_r+0xb42>
 800ce90:	461a      	mov	r2, r3
 800ce92:	4601      	mov	r1, r0
 800ce94:	4658      	mov	r0, fp
 800ce96:	f000 fbe5 	bl	800d664 <__pow5mult>
 800ce9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	f300 808f 	bgt.w	800cfc2 <_dtoa_r+0x8e2>
 800cea4:	9b02      	ldr	r3, [sp, #8]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f040 8087 	bne.w	800cfba <_dtoa_r+0x8da>
 800ceac:	9b03      	ldr	r3, [sp, #12]
 800ceae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f040 8083 	bne.w	800cfbe <_dtoa_r+0x8de>
 800ceb8:	9b03      	ldr	r3, [sp, #12]
 800ceba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cebe:	0d1b      	lsrs	r3, r3, #20
 800cec0:	051b      	lsls	r3, r3, #20
 800cec2:	b12b      	cbz	r3, 800ced0 <_dtoa_r+0x7f0>
 800cec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec6:	f108 0801 	add.w	r8, r8, #1
 800ceca:	3301      	adds	r3, #1
 800cecc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cece:	2301      	movs	r3, #1
 800ced0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ced2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f000 81aa 	beq.w	800d22e <_dtoa_r+0xb4e>
 800ceda:	6923      	ldr	r3, [r4, #16]
 800cedc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cee0:	6918      	ldr	r0, [r3, #16]
 800cee2:	f000 fab5 	bl	800d450 <__hi0bits>
 800cee6:	f1c0 0020 	rsb	r0, r0, #32
 800ceea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceec:	4418      	add	r0, r3
 800ceee:	f010 001f 	ands.w	r0, r0, #31
 800cef2:	d071      	beq.n	800cfd8 <_dtoa_r+0x8f8>
 800cef4:	f1c0 0320 	rsb	r3, r0, #32
 800cef8:	2b04      	cmp	r3, #4
 800cefa:	dd65      	ble.n	800cfc8 <_dtoa_r+0x8e8>
 800cefc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cefe:	f1c0 001c 	rsb	r0, r0, #28
 800cf02:	4403      	add	r3, r0
 800cf04:	4480      	add	r8, r0
 800cf06:	4406      	add	r6, r0
 800cf08:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf0a:	f1b8 0f00 	cmp.w	r8, #0
 800cf0e:	dd05      	ble.n	800cf1c <_dtoa_r+0x83c>
 800cf10:	4649      	mov	r1, r9
 800cf12:	4642      	mov	r2, r8
 800cf14:	4658      	mov	r0, fp
 800cf16:	f000 fbff 	bl	800d718 <__lshift>
 800cf1a:	4681      	mov	r9, r0
 800cf1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	dd05      	ble.n	800cf2e <_dtoa_r+0x84e>
 800cf22:	4621      	mov	r1, r4
 800cf24:	461a      	mov	r2, r3
 800cf26:	4658      	mov	r0, fp
 800cf28:	f000 fbf6 	bl	800d718 <__lshift>
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d053      	beq.n	800cfdc <_dtoa_r+0x8fc>
 800cf34:	4621      	mov	r1, r4
 800cf36:	4648      	mov	r0, r9
 800cf38:	f000 fc5a 	bl	800d7f0 <__mcmp>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	da4d      	bge.n	800cfdc <_dtoa_r+0x8fc>
 800cf40:	1e7b      	subs	r3, r7, #1
 800cf42:	4649      	mov	r1, r9
 800cf44:	9304      	str	r3, [sp, #16]
 800cf46:	220a      	movs	r2, #10
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4658      	mov	r0, fp
 800cf4c:	f000 fa3a 	bl	800d3c4 <__multadd>
 800cf50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf52:	4681      	mov	r9, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f000 816c 	beq.w	800d232 <_dtoa_r+0xb52>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	220a      	movs	r2, #10
 800cf60:	4658      	mov	r0, fp
 800cf62:	f000 fa2f 	bl	800d3c4 <__multadd>
 800cf66:	9b08      	ldr	r3, [sp, #32]
 800cf68:	4605      	mov	r5, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	dc61      	bgt.n	800d032 <_dtoa_r+0x952>
 800cf6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	dc3b      	bgt.n	800cfec <_dtoa_r+0x90c>
 800cf74:	e05d      	b.n	800d032 <_dtoa_r+0x952>
 800cf76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cf78:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cf7c:	e746      	b.n	800ce0c <_dtoa_r+0x72c>
 800cf7e:	9b07      	ldr	r3, [sp, #28]
 800cf80:	1e5c      	subs	r4, r3, #1
 800cf82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf84:	42a3      	cmp	r3, r4
 800cf86:	bfbf      	itttt	lt
 800cf88:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cf8a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800cf8c:	1ae3      	sublt	r3, r4, r3
 800cf8e:	18d2      	addlt	r2, r2, r3
 800cf90:	bfa8      	it	ge
 800cf92:	1b1c      	subge	r4, r3, r4
 800cf94:	9b07      	ldr	r3, [sp, #28]
 800cf96:	bfbe      	ittt	lt
 800cf98:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cf9a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800cf9c:	2400      	movlt	r4, #0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	bfb5      	itete	lt
 800cfa2:	eba8 0603 	sublt.w	r6, r8, r3
 800cfa6:	4646      	movge	r6, r8
 800cfa8:	2300      	movlt	r3, #0
 800cfaa:	9b07      	ldrge	r3, [sp, #28]
 800cfac:	e730      	b.n	800ce10 <_dtoa_r+0x730>
 800cfae:	4646      	mov	r6, r8
 800cfb0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cfb2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cfb4:	e735      	b.n	800ce22 <_dtoa_r+0x742>
 800cfb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cfb8:	e75c      	b.n	800ce74 <_dtoa_r+0x794>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	e788      	b.n	800ced0 <_dtoa_r+0x7f0>
 800cfbe:	9b02      	ldr	r3, [sp, #8]
 800cfc0:	e786      	b.n	800ced0 <_dtoa_r+0x7f0>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfc6:	e788      	b.n	800ceda <_dtoa_r+0x7fa>
 800cfc8:	d09f      	beq.n	800cf0a <_dtoa_r+0x82a>
 800cfca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfcc:	331c      	adds	r3, #28
 800cfce:	441a      	add	r2, r3
 800cfd0:	4498      	add	r8, r3
 800cfd2:	441e      	add	r6, r3
 800cfd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfd6:	e798      	b.n	800cf0a <_dtoa_r+0x82a>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	e7f6      	b.n	800cfca <_dtoa_r+0x8ea>
 800cfdc:	9b07      	ldr	r3, [sp, #28]
 800cfde:	9704      	str	r7, [sp, #16]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	dc20      	bgt.n	800d026 <_dtoa_r+0x946>
 800cfe4:	9308      	str	r3, [sp, #32]
 800cfe6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	dd1e      	ble.n	800d02a <_dtoa_r+0x94a>
 800cfec:	9b08      	ldr	r3, [sp, #32]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f47f aebc 	bne.w	800cd6c <_dtoa_r+0x68c>
 800cff4:	4621      	mov	r1, r4
 800cff6:	2205      	movs	r2, #5
 800cff8:	4658      	mov	r0, fp
 800cffa:	f000 f9e3 	bl	800d3c4 <__multadd>
 800cffe:	4601      	mov	r1, r0
 800d000:	4604      	mov	r4, r0
 800d002:	4648      	mov	r0, r9
 800d004:	f000 fbf4 	bl	800d7f0 <__mcmp>
 800d008:	2800      	cmp	r0, #0
 800d00a:	f77f aeaf 	ble.w	800cd6c <_dtoa_r+0x68c>
 800d00e:	2331      	movs	r3, #49	@ 0x31
 800d010:	4656      	mov	r6, sl
 800d012:	f806 3b01 	strb.w	r3, [r6], #1
 800d016:	9b04      	ldr	r3, [sp, #16]
 800d018:	3301      	adds	r3, #1
 800d01a:	9304      	str	r3, [sp, #16]
 800d01c:	e6aa      	b.n	800cd74 <_dtoa_r+0x694>
 800d01e:	9c07      	ldr	r4, [sp, #28]
 800d020:	9704      	str	r7, [sp, #16]
 800d022:	4625      	mov	r5, r4
 800d024:	e7f3      	b.n	800d00e <_dtoa_r+0x92e>
 800d026:	9b07      	ldr	r3, [sp, #28]
 800d028:	9308      	str	r3, [sp, #32]
 800d02a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f000 8104 	beq.w	800d23a <_dtoa_r+0xb5a>
 800d032:	2e00      	cmp	r6, #0
 800d034:	dd05      	ble.n	800d042 <_dtoa_r+0x962>
 800d036:	4629      	mov	r1, r5
 800d038:	4632      	mov	r2, r6
 800d03a:	4658      	mov	r0, fp
 800d03c:	f000 fb6c 	bl	800d718 <__lshift>
 800d040:	4605      	mov	r5, r0
 800d042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d044:	2b00      	cmp	r3, #0
 800d046:	d05a      	beq.n	800d0fe <_dtoa_r+0xa1e>
 800d048:	4658      	mov	r0, fp
 800d04a:	6869      	ldr	r1, [r5, #4]
 800d04c:	f000 f958 	bl	800d300 <_Balloc>
 800d050:	4606      	mov	r6, r0
 800d052:	b928      	cbnz	r0, 800d060 <_dtoa_r+0x980>
 800d054:	4602      	mov	r2, r0
 800d056:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d05a:	4b83      	ldr	r3, [pc, #524]	@ (800d268 <_dtoa_r+0xb88>)
 800d05c:	f7ff bb54 	b.w	800c708 <_dtoa_r+0x28>
 800d060:	692a      	ldr	r2, [r5, #16]
 800d062:	f105 010c 	add.w	r1, r5, #12
 800d066:	3202      	adds	r2, #2
 800d068:	0092      	lsls	r2, r2, #2
 800d06a:	300c      	adds	r0, #12
 800d06c:	f7ff fa9f 	bl	800c5ae <memcpy>
 800d070:	2201      	movs	r2, #1
 800d072:	4631      	mov	r1, r6
 800d074:	4658      	mov	r0, fp
 800d076:	f000 fb4f 	bl	800d718 <__lshift>
 800d07a:	462f      	mov	r7, r5
 800d07c:	4605      	mov	r5, r0
 800d07e:	f10a 0301 	add.w	r3, sl, #1
 800d082:	9307      	str	r3, [sp, #28]
 800d084:	9b08      	ldr	r3, [sp, #32]
 800d086:	4453      	add	r3, sl
 800d088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d08a:	9b02      	ldr	r3, [sp, #8]
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	930a      	str	r3, [sp, #40]	@ 0x28
 800d092:	9b07      	ldr	r3, [sp, #28]
 800d094:	4621      	mov	r1, r4
 800d096:	3b01      	subs	r3, #1
 800d098:	4648      	mov	r0, r9
 800d09a:	9302      	str	r3, [sp, #8]
 800d09c:	f7ff fa95 	bl	800c5ca <quorem>
 800d0a0:	4639      	mov	r1, r7
 800d0a2:	9008      	str	r0, [sp, #32]
 800d0a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d0a8:	4648      	mov	r0, r9
 800d0aa:	f000 fba1 	bl	800d7f0 <__mcmp>
 800d0ae:	462a      	mov	r2, r5
 800d0b0:	9009      	str	r0, [sp, #36]	@ 0x24
 800d0b2:	4621      	mov	r1, r4
 800d0b4:	4658      	mov	r0, fp
 800d0b6:	f000 fbb7 	bl	800d828 <__mdiff>
 800d0ba:	68c2      	ldr	r2, [r0, #12]
 800d0bc:	4606      	mov	r6, r0
 800d0be:	bb02      	cbnz	r2, 800d102 <_dtoa_r+0xa22>
 800d0c0:	4601      	mov	r1, r0
 800d0c2:	4648      	mov	r0, r9
 800d0c4:	f000 fb94 	bl	800d7f0 <__mcmp>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	4631      	mov	r1, r6
 800d0cc:	4658      	mov	r0, fp
 800d0ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800d0d0:	f000 f956 	bl	800d380 <_Bfree>
 800d0d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d0d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0d8:	9e07      	ldr	r6, [sp, #28]
 800d0da:	ea43 0102 	orr.w	r1, r3, r2
 800d0de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0e0:	4319      	orrs	r1, r3
 800d0e2:	d110      	bne.n	800d106 <_dtoa_r+0xa26>
 800d0e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d0e8:	d029      	beq.n	800d13e <_dtoa_r+0xa5e>
 800d0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	dd02      	ble.n	800d0f6 <_dtoa_r+0xa16>
 800d0f0:	9b08      	ldr	r3, [sp, #32]
 800d0f2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d0f6:	9b02      	ldr	r3, [sp, #8]
 800d0f8:	f883 8000 	strb.w	r8, [r3]
 800d0fc:	e63b      	b.n	800cd76 <_dtoa_r+0x696>
 800d0fe:	4628      	mov	r0, r5
 800d100:	e7bb      	b.n	800d07a <_dtoa_r+0x99a>
 800d102:	2201      	movs	r2, #1
 800d104:	e7e1      	b.n	800d0ca <_dtoa_r+0x9ea>
 800d106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d108:	2b00      	cmp	r3, #0
 800d10a:	db04      	blt.n	800d116 <_dtoa_r+0xa36>
 800d10c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800d10e:	430b      	orrs	r3, r1
 800d110:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d112:	430b      	orrs	r3, r1
 800d114:	d120      	bne.n	800d158 <_dtoa_r+0xa78>
 800d116:	2a00      	cmp	r2, #0
 800d118:	dded      	ble.n	800d0f6 <_dtoa_r+0xa16>
 800d11a:	4649      	mov	r1, r9
 800d11c:	2201      	movs	r2, #1
 800d11e:	4658      	mov	r0, fp
 800d120:	f000 fafa 	bl	800d718 <__lshift>
 800d124:	4621      	mov	r1, r4
 800d126:	4681      	mov	r9, r0
 800d128:	f000 fb62 	bl	800d7f0 <__mcmp>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	dc03      	bgt.n	800d138 <_dtoa_r+0xa58>
 800d130:	d1e1      	bne.n	800d0f6 <_dtoa_r+0xa16>
 800d132:	f018 0f01 	tst.w	r8, #1
 800d136:	d0de      	beq.n	800d0f6 <_dtoa_r+0xa16>
 800d138:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d13c:	d1d8      	bne.n	800d0f0 <_dtoa_r+0xa10>
 800d13e:	2339      	movs	r3, #57	@ 0x39
 800d140:	9a02      	ldr	r2, [sp, #8]
 800d142:	7013      	strb	r3, [r2, #0]
 800d144:	4633      	mov	r3, r6
 800d146:	461e      	mov	r6, r3
 800d148:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d14c:	3b01      	subs	r3, #1
 800d14e:	2a39      	cmp	r2, #57	@ 0x39
 800d150:	d052      	beq.n	800d1f8 <_dtoa_r+0xb18>
 800d152:	3201      	adds	r2, #1
 800d154:	701a      	strb	r2, [r3, #0]
 800d156:	e60e      	b.n	800cd76 <_dtoa_r+0x696>
 800d158:	2a00      	cmp	r2, #0
 800d15a:	dd07      	ble.n	800d16c <_dtoa_r+0xa8c>
 800d15c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d160:	d0ed      	beq.n	800d13e <_dtoa_r+0xa5e>
 800d162:	9a02      	ldr	r2, [sp, #8]
 800d164:	f108 0301 	add.w	r3, r8, #1
 800d168:	7013      	strb	r3, [r2, #0]
 800d16a:	e604      	b.n	800cd76 <_dtoa_r+0x696>
 800d16c:	9b07      	ldr	r3, [sp, #28]
 800d16e:	9a07      	ldr	r2, [sp, #28]
 800d170:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d176:	4293      	cmp	r3, r2
 800d178:	d028      	beq.n	800d1cc <_dtoa_r+0xaec>
 800d17a:	4649      	mov	r1, r9
 800d17c:	2300      	movs	r3, #0
 800d17e:	220a      	movs	r2, #10
 800d180:	4658      	mov	r0, fp
 800d182:	f000 f91f 	bl	800d3c4 <__multadd>
 800d186:	42af      	cmp	r7, r5
 800d188:	4681      	mov	r9, r0
 800d18a:	f04f 0300 	mov.w	r3, #0
 800d18e:	f04f 020a 	mov.w	r2, #10
 800d192:	4639      	mov	r1, r7
 800d194:	4658      	mov	r0, fp
 800d196:	d107      	bne.n	800d1a8 <_dtoa_r+0xac8>
 800d198:	f000 f914 	bl	800d3c4 <__multadd>
 800d19c:	4607      	mov	r7, r0
 800d19e:	4605      	mov	r5, r0
 800d1a0:	9b07      	ldr	r3, [sp, #28]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	9307      	str	r3, [sp, #28]
 800d1a6:	e774      	b.n	800d092 <_dtoa_r+0x9b2>
 800d1a8:	f000 f90c 	bl	800d3c4 <__multadd>
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	4607      	mov	r7, r0
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	220a      	movs	r2, #10
 800d1b4:	4658      	mov	r0, fp
 800d1b6:	f000 f905 	bl	800d3c4 <__multadd>
 800d1ba:	4605      	mov	r5, r0
 800d1bc:	e7f0      	b.n	800d1a0 <_dtoa_r+0xac0>
 800d1be:	9b08      	ldr	r3, [sp, #32]
 800d1c0:	2700      	movs	r7, #0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	bfcc      	ite	gt
 800d1c6:	461e      	movgt	r6, r3
 800d1c8:	2601      	movle	r6, #1
 800d1ca:	4456      	add	r6, sl
 800d1cc:	4649      	mov	r1, r9
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	4658      	mov	r0, fp
 800d1d2:	f000 faa1 	bl	800d718 <__lshift>
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	4681      	mov	r9, r0
 800d1da:	f000 fb09 	bl	800d7f0 <__mcmp>
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	dcb0      	bgt.n	800d144 <_dtoa_r+0xa64>
 800d1e2:	d102      	bne.n	800d1ea <_dtoa_r+0xb0a>
 800d1e4:	f018 0f01 	tst.w	r8, #1
 800d1e8:	d1ac      	bne.n	800d144 <_dtoa_r+0xa64>
 800d1ea:	4633      	mov	r3, r6
 800d1ec:	461e      	mov	r6, r3
 800d1ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1f2:	2a30      	cmp	r2, #48	@ 0x30
 800d1f4:	d0fa      	beq.n	800d1ec <_dtoa_r+0xb0c>
 800d1f6:	e5be      	b.n	800cd76 <_dtoa_r+0x696>
 800d1f8:	459a      	cmp	sl, r3
 800d1fa:	d1a4      	bne.n	800d146 <_dtoa_r+0xa66>
 800d1fc:	9b04      	ldr	r3, [sp, #16]
 800d1fe:	3301      	adds	r3, #1
 800d200:	9304      	str	r3, [sp, #16]
 800d202:	2331      	movs	r3, #49	@ 0x31
 800d204:	f88a 3000 	strb.w	r3, [sl]
 800d208:	e5b5      	b.n	800cd76 <_dtoa_r+0x696>
 800d20a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d20c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d26c <_dtoa_r+0xb8c>
 800d210:	b11b      	cbz	r3, 800d21a <_dtoa_r+0xb3a>
 800d212:	f10a 0308 	add.w	r3, sl, #8
 800d216:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d218:	6013      	str	r3, [r2, #0]
 800d21a:	4650      	mov	r0, sl
 800d21c:	b017      	add	sp, #92	@ 0x5c
 800d21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d222:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d224:	2b01      	cmp	r3, #1
 800d226:	f77f ae3d 	ble.w	800cea4 <_dtoa_r+0x7c4>
 800d22a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d22c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d22e:	2001      	movs	r0, #1
 800d230:	e65b      	b.n	800ceea <_dtoa_r+0x80a>
 800d232:	9b08      	ldr	r3, [sp, #32]
 800d234:	2b00      	cmp	r3, #0
 800d236:	f77f aed6 	ble.w	800cfe6 <_dtoa_r+0x906>
 800d23a:	4656      	mov	r6, sl
 800d23c:	4621      	mov	r1, r4
 800d23e:	4648      	mov	r0, r9
 800d240:	f7ff f9c3 	bl	800c5ca <quorem>
 800d244:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d248:	9b08      	ldr	r3, [sp, #32]
 800d24a:	f806 8b01 	strb.w	r8, [r6], #1
 800d24e:	eba6 020a 	sub.w	r2, r6, sl
 800d252:	4293      	cmp	r3, r2
 800d254:	ddb3      	ble.n	800d1be <_dtoa_r+0xade>
 800d256:	4649      	mov	r1, r9
 800d258:	2300      	movs	r3, #0
 800d25a:	220a      	movs	r2, #10
 800d25c:	4658      	mov	r0, fp
 800d25e:	f000 f8b1 	bl	800d3c4 <__multadd>
 800d262:	4681      	mov	r9, r0
 800d264:	e7ea      	b.n	800d23c <_dtoa_r+0xb5c>
 800d266:	bf00      	nop
 800d268:	0800e8b8 	.word	0x0800e8b8
 800d26c:	0800e83c 	.word	0x0800e83c

0800d270 <_free_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4605      	mov	r5, r0
 800d274:	2900      	cmp	r1, #0
 800d276:	d040      	beq.n	800d2fa <_free_r+0x8a>
 800d278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d27c:	1f0c      	subs	r4, r1, #4
 800d27e:	2b00      	cmp	r3, #0
 800d280:	bfb8      	it	lt
 800d282:	18e4      	addlt	r4, r4, r3
 800d284:	f7fe faee 	bl	800b864 <__malloc_lock>
 800d288:	4a1c      	ldr	r2, [pc, #112]	@ (800d2fc <_free_r+0x8c>)
 800d28a:	6813      	ldr	r3, [r2, #0]
 800d28c:	b933      	cbnz	r3, 800d29c <_free_r+0x2c>
 800d28e:	6063      	str	r3, [r4, #4]
 800d290:	6014      	str	r4, [r2, #0]
 800d292:	4628      	mov	r0, r5
 800d294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d298:	f7fe baea 	b.w	800b870 <__malloc_unlock>
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	d908      	bls.n	800d2b2 <_free_r+0x42>
 800d2a0:	6820      	ldr	r0, [r4, #0]
 800d2a2:	1821      	adds	r1, r4, r0
 800d2a4:	428b      	cmp	r3, r1
 800d2a6:	bf01      	itttt	eq
 800d2a8:	6819      	ldreq	r1, [r3, #0]
 800d2aa:	685b      	ldreq	r3, [r3, #4]
 800d2ac:	1809      	addeq	r1, r1, r0
 800d2ae:	6021      	streq	r1, [r4, #0]
 800d2b0:	e7ed      	b.n	800d28e <_free_r+0x1e>
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	b10b      	cbz	r3, 800d2bc <_free_r+0x4c>
 800d2b8:	42a3      	cmp	r3, r4
 800d2ba:	d9fa      	bls.n	800d2b2 <_free_r+0x42>
 800d2bc:	6811      	ldr	r1, [r2, #0]
 800d2be:	1850      	adds	r0, r2, r1
 800d2c0:	42a0      	cmp	r0, r4
 800d2c2:	d10b      	bne.n	800d2dc <_free_r+0x6c>
 800d2c4:	6820      	ldr	r0, [r4, #0]
 800d2c6:	4401      	add	r1, r0
 800d2c8:	1850      	adds	r0, r2, r1
 800d2ca:	4283      	cmp	r3, r0
 800d2cc:	6011      	str	r1, [r2, #0]
 800d2ce:	d1e0      	bne.n	800d292 <_free_r+0x22>
 800d2d0:	6818      	ldr	r0, [r3, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	4408      	add	r0, r1
 800d2d6:	6010      	str	r0, [r2, #0]
 800d2d8:	6053      	str	r3, [r2, #4]
 800d2da:	e7da      	b.n	800d292 <_free_r+0x22>
 800d2dc:	d902      	bls.n	800d2e4 <_free_r+0x74>
 800d2de:	230c      	movs	r3, #12
 800d2e0:	602b      	str	r3, [r5, #0]
 800d2e2:	e7d6      	b.n	800d292 <_free_r+0x22>
 800d2e4:	6820      	ldr	r0, [r4, #0]
 800d2e6:	1821      	adds	r1, r4, r0
 800d2e8:	428b      	cmp	r3, r1
 800d2ea:	bf01      	itttt	eq
 800d2ec:	6819      	ldreq	r1, [r3, #0]
 800d2ee:	685b      	ldreq	r3, [r3, #4]
 800d2f0:	1809      	addeq	r1, r1, r0
 800d2f2:	6021      	streq	r1, [r4, #0]
 800d2f4:	6063      	str	r3, [r4, #4]
 800d2f6:	6054      	str	r4, [r2, #4]
 800d2f8:	e7cb      	b.n	800d292 <_free_r+0x22>
 800d2fa:	bd38      	pop	{r3, r4, r5, pc}
 800d2fc:	20002630 	.word	0x20002630

0800d300 <_Balloc>:
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	69c6      	ldr	r6, [r0, #28]
 800d304:	4604      	mov	r4, r0
 800d306:	460d      	mov	r5, r1
 800d308:	b976      	cbnz	r6, 800d328 <_Balloc+0x28>
 800d30a:	2010      	movs	r0, #16
 800d30c:	f7fe f9f8 	bl	800b700 <malloc>
 800d310:	4602      	mov	r2, r0
 800d312:	61e0      	str	r0, [r4, #28]
 800d314:	b920      	cbnz	r0, 800d320 <_Balloc+0x20>
 800d316:	216b      	movs	r1, #107	@ 0x6b
 800d318:	4b17      	ldr	r3, [pc, #92]	@ (800d378 <_Balloc+0x78>)
 800d31a:	4818      	ldr	r0, [pc, #96]	@ (800d37c <_Balloc+0x7c>)
 800d31c:	f000 fd92 	bl	800de44 <__assert_func>
 800d320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d324:	6006      	str	r6, [r0, #0]
 800d326:	60c6      	str	r6, [r0, #12]
 800d328:	69e6      	ldr	r6, [r4, #28]
 800d32a:	68f3      	ldr	r3, [r6, #12]
 800d32c:	b183      	cbz	r3, 800d350 <_Balloc+0x50>
 800d32e:	69e3      	ldr	r3, [r4, #28]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d336:	b9b8      	cbnz	r0, 800d368 <_Balloc+0x68>
 800d338:	2101      	movs	r1, #1
 800d33a:	fa01 f605 	lsl.w	r6, r1, r5
 800d33e:	1d72      	adds	r2, r6, #5
 800d340:	4620      	mov	r0, r4
 800d342:	0092      	lsls	r2, r2, #2
 800d344:	f000 fd9c 	bl	800de80 <_calloc_r>
 800d348:	b160      	cbz	r0, 800d364 <_Balloc+0x64>
 800d34a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d34e:	e00e      	b.n	800d36e <_Balloc+0x6e>
 800d350:	2221      	movs	r2, #33	@ 0x21
 800d352:	2104      	movs	r1, #4
 800d354:	4620      	mov	r0, r4
 800d356:	f000 fd93 	bl	800de80 <_calloc_r>
 800d35a:	69e3      	ldr	r3, [r4, #28]
 800d35c:	60f0      	str	r0, [r6, #12]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d1e4      	bne.n	800d32e <_Balloc+0x2e>
 800d364:	2000      	movs	r0, #0
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	6802      	ldr	r2, [r0, #0]
 800d36a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d36e:	2300      	movs	r3, #0
 800d370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d374:	e7f7      	b.n	800d366 <_Balloc+0x66>
 800d376:	bf00      	nop
 800d378:	0800e849 	.word	0x0800e849
 800d37c:	0800e8c9 	.word	0x0800e8c9

0800d380 <_Bfree>:
 800d380:	b570      	push	{r4, r5, r6, lr}
 800d382:	69c6      	ldr	r6, [r0, #28]
 800d384:	4605      	mov	r5, r0
 800d386:	460c      	mov	r4, r1
 800d388:	b976      	cbnz	r6, 800d3a8 <_Bfree+0x28>
 800d38a:	2010      	movs	r0, #16
 800d38c:	f7fe f9b8 	bl	800b700 <malloc>
 800d390:	4602      	mov	r2, r0
 800d392:	61e8      	str	r0, [r5, #28]
 800d394:	b920      	cbnz	r0, 800d3a0 <_Bfree+0x20>
 800d396:	218f      	movs	r1, #143	@ 0x8f
 800d398:	4b08      	ldr	r3, [pc, #32]	@ (800d3bc <_Bfree+0x3c>)
 800d39a:	4809      	ldr	r0, [pc, #36]	@ (800d3c0 <_Bfree+0x40>)
 800d39c:	f000 fd52 	bl	800de44 <__assert_func>
 800d3a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3a4:	6006      	str	r6, [r0, #0]
 800d3a6:	60c6      	str	r6, [r0, #12]
 800d3a8:	b13c      	cbz	r4, 800d3ba <_Bfree+0x3a>
 800d3aa:	69eb      	ldr	r3, [r5, #28]
 800d3ac:	6862      	ldr	r2, [r4, #4]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3b4:	6021      	str	r1, [r4, #0]
 800d3b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3ba:	bd70      	pop	{r4, r5, r6, pc}
 800d3bc:	0800e849 	.word	0x0800e849
 800d3c0:	0800e8c9 	.word	0x0800e8c9

0800d3c4 <__multadd>:
 800d3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c8:	4607      	mov	r7, r0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	461e      	mov	r6, r3
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	690d      	ldr	r5, [r1, #16]
 800d3d2:	f101 0c14 	add.w	ip, r1, #20
 800d3d6:	f8dc 3000 	ldr.w	r3, [ip]
 800d3da:	3001      	adds	r0, #1
 800d3dc:	b299      	uxth	r1, r3
 800d3de:	fb02 6101 	mla	r1, r2, r1, r6
 800d3e2:	0c1e      	lsrs	r6, r3, #16
 800d3e4:	0c0b      	lsrs	r3, r1, #16
 800d3e6:	fb02 3306 	mla	r3, r2, r6, r3
 800d3ea:	b289      	uxth	r1, r1
 800d3ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3f0:	4285      	cmp	r5, r0
 800d3f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3f6:	f84c 1b04 	str.w	r1, [ip], #4
 800d3fa:	dcec      	bgt.n	800d3d6 <__multadd+0x12>
 800d3fc:	b30e      	cbz	r6, 800d442 <__multadd+0x7e>
 800d3fe:	68a3      	ldr	r3, [r4, #8]
 800d400:	42ab      	cmp	r3, r5
 800d402:	dc19      	bgt.n	800d438 <__multadd+0x74>
 800d404:	6861      	ldr	r1, [r4, #4]
 800d406:	4638      	mov	r0, r7
 800d408:	3101      	adds	r1, #1
 800d40a:	f7ff ff79 	bl	800d300 <_Balloc>
 800d40e:	4680      	mov	r8, r0
 800d410:	b928      	cbnz	r0, 800d41e <__multadd+0x5a>
 800d412:	4602      	mov	r2, r0
 800d414:	21ba      	movs	r1, #186	@ 0xba
 800d416:	4b0c      	ldr	r3, [pc, #48]	@ (800d448 <__multadd+0x84>)
 800d418:	480c      	ldr	r0, [pc, #48]	@ (800d44c <__multadd+0x88>)
 800d41a:	f000 fd13 	bl	800de44 <__assert_func>
 800d41e:	6922      	ldr	r2, [r4, #16]
 800d420:	f104 010c 	add.w	r1, r4, #12
 800d424:	3202      	adds	r2, #2
 800d426:	0092      	lsls	r2, r2, #2
 800d428:	300c      	adds	r0, #12
 800d42a:	f7ff f8c0 	bl	800c5ae <memcpy>
 800d42e:	4621      	mov	r1, r4
 800d430:	4638      	mov	r0, r7
 800d432:	f7ff ffa5 	bl	800d380 <_Bfree>
 800d436:	4644      	mov	r4, r8
 800d438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d43c:	3501      	adds	r5, #1
 800d43e:	615e      	str	r6, [r3, #20]
 800d440:	6125      	str	r5, [r4, #16]
 800d442:	4620      	mov	r0, r4
 800d444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d448:	0800e8b8 	.word	0x0800e8b8
 800d44c:	0800e8c9 	.word	0x0800e8c9

0800d450 <__hi0bits>:
 800d450:	4603      	mov	r3, r0
 800d452:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d456:	bf3a      	itte	cc
 800d458:	0403      	lslcc	r3, r0, #16
 800d45a:	2010      	movcc	r0, #16
 800d45c:	2000      	movcs	r0, #0
 800d45e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d462:	bf3c      	itt	cc
 800d464:	021b      	lslcc	r3, r3, #8
 800d466:	3008      	addcc	r0, #8
 800d468:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d46c:	bf3c      	itt	cc
 800d46e:	011b      	lslcc	r3, r3, #4
 800d470:	3004      	addcc	r0, #4
 800d472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d476:	bf3c      	itt	cc
 800d478:	009b      	lslcc	r3, r3, #2
 800d47a:	3002      	addcc	r0, #2
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	db05      	blt.n	800d48c <__hi0bits+0x3c>
 800d480:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d484:	f100 0001 	add.w	r0, r0, #1
 800d488:	bf08      	it	eq
 800d48a:	2020      	moveq	r0, #32
 800d48c:	4770      	bx	lr

0800d48e <__lo0bits>:
 800d48e:	6803      	ldr	r3, [r0, #0]
 800d490:	4602      	mov	r2, r0
 800d492:	f013 0007 	ands.w	r0, r3, #7
 800d496:	d00b      	beq.n	800d4b0 <__lo0bits+0x22>
 800d498:	07d9      	lsls	r1, r3, #31
 800d49a:	d421      	bmi.n	800d4e0 <__lo0bits+0x52>
 800d49c:	0798      	lsls	r0, r3, #30
 800d49e:	bf49      	itett	mi
 800d4a0:	085b      	lsrmi	r3, r3, #1
 800d4a2:	089b      	lsrpl	r3, r3, #2
 800d4a4:	2001      	movmi	r0, #1
 800d4a6:	6013      	strmi	r3, [r2, #0]
 800d4a8:	bf5c      	itt	pl
 800d4aa:	2002      	movpl	r0, #2
 800d4ac:	6013      	strpl	r3, [r2, #0]
 800d4ae:	4770      	bx	lr
 800d4b0:	b299      	uxth	r1, r3
 800d4b2:	b909      	cbnz	r1, 800d4b8 <__lo0bits+0x2a>
 800d4b4:	2010      	movs	r0, #16
 800d4b6:	0c1b      	lsrs	r3, r3, #16
 800d4b8:	b2d9      	uxtb	r1, r3
 800d4ba:	b909      	cbnz	r1, 800d4c0 <__lo0bits+0x32>
 800d4bc:	3008      	adds	r0, #8
 800d4be:	0a1b      	lsrs	r3, r3, #8
 800d4c0:	0719      	lsls	r1, r3, #28
 800d4c2:	bf04      	itt	eq
 800d4c4:	091b      	lsreq	r3, r3, #4
 800d4c6:	3004      	addeq	r0, #4
 800d4c8:	0799      	lsls	r1, r3, #30
 800d4ca:	bf04      	itt	eq
 800d4cc:	089b      	lsreq	r3, r3, #2
 800d4ce:	3002      	addeq	r0, #2
 800d4d0:	07d9      	lsls	r1, r3, #31
 800d4d2:	d403      	bmi.n	800d4dc <__lo0bits+0x4e>
 800d4d4:	085b      	lsrs	r3, r3, #1
 800d4d6:	f100 0001 	add.w	r0, r0, #1
 800d4da:	d003      	beq.n	800d4e4 <__lo0bits+0x56>
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	4770      	bx	lr
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	4770      	bx	lr
 800d4e4:	2020      	movs	r0, #32
 800d4e6:	4770      	bx	lr

0800d4e8 <__i2b>:
 800d4e8:	b510      	push	{r4, lr}
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	2101      	movs	r1, #1
 800d4ee:	f7ff ff07 	bl	800d300 <_Balloc>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	b928      	cbnz	r0, 800d502 <__i2b+0x1a>
 800d4f6:	f240 1145 	movw	r1, #325	@ 0x145
 800d4fa:	4b04      	ldr	r3, [pc, #16]	@ (800d50c <__i2b+0x24>)
 800d4fc:	4804      	ldr	r0, [pc, #16]	@ (800d510 <__i2b+0x28>)
 800d4fe:	f000 fca1 	bl	800de44 <__assert_func>
 800d502:	2301      	movs	r3, #1
 800d504:	6144      	str	r4, [r0, #20]
 800d506:	6103      	str	r3, [r0, #16]
 800d508:	bd10      	pop	{r4, pc}
 800d50a:	bf00      	nop
 800d50c:	0800e8b8 	.word	0x0800e8b8
 800d510:	0800e8c9 	.word	0x0800e8c9

0800d514 <__multiply>:
 800d514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d518:	4614      	mov	r4, r2
 800d51a:	690a      	ldr	r2, [r1, #16]
 800d51c:	6923      	ldr	r3, [r4, #16]
 800d51e:	460f      	mov	r7, r1
 800d520:	429a      	cmp	r2, r3
 800d522:	bfa2      	ittt	ge
 800d524:	4623      	movge	r3, r4
 800d526:	460c      	movge	r4, r1
 800d528:	461f      	movge	r7, r3
 800d52a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d52e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d532:	68a3      	ldr	r3, [r4, #8]
 800d534:	6861      	ldr	r1, [r4, #4]
 800d536:	eb0a 0609 	add.w	r6, sl, r9
 800d53a:	42b3      	cmp	r3, r6
 800d53c:	b085      	sub	sp, #20
 800d53e:	bfb8      	it	lt
 800d540:	3101      	addlt	r1, #1
 800d542:	f7ff fedd 	bl	800d300 <_Balloc>
 800d546:	b930      	cbnz	r0, 800d556 <__multiply+0x42>
 800d548:	4602      	mov	r2, r0
 800d54a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d54e:	4b43      	ldr	r3, [pc, #268]	@ (800d65c <__multiply+0x148>)
 800d550:	4843      	ldr	r0, [pc, #268]	@ (800d660 <__multiply+0x14c>)
 800d552:	f000 fc77 	bl	800de44 <__assert_func>
 800d556:	f100 0514 	add.w	r5, r0, #20
 800d55a:	462b      	mov	r3, r5
 800d55c:	2200      	movs	r2, #0
 800d55e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d562:	4543      	cmp	r3, r8
 800d564:	d321      	bcc.n	800d5aa <__multiply+0x96>
 800d566:	f107 0114 	add.w	r1, r7, #20
 800d56a:	f104 0214 	add.w	r2, r4, #20
 800d56e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d572:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d576:	9302      	str	r3, [sp, #8]
 800d578:	1b13      	subs	r3, r2, r4
 800d57a:	3b15      	subs	r3, #21
 800d57c:	f023 0303 	bic.w	r3, r3, #3
 800d580:	3304      	adds	r3, #4
 800d582:	f104 0715 	add.w	r7, r4, #21
 800d586:	42ba      	cmp	r2, r7
 800d588:	bf38      	it	cc
 800d58a:	2304      	movcc	r3, #4
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	9b02      	ldr	r3, [sp, #8]
 800d590:	9103      	str	r1, [sp, #12]
 800d592:	428b      	cmp	r3, r1
 800d594:	d80c      	bhi.n	800d5b0 <__multiply+0x9c>
 800d596:	2e00      	cmp	r6, #0
 800d598:	dd03      	ble.n	800d5a2 <__multiply+0x8e>
 800d59a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d05a      	beq.n	800d658 <__multiply+0x144>
 800d5a2:	6106      	str	r6, [r0, #16]
 800d5a4:	b005      	add	sp, #20
 800d5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5aa:	f843 2b04 	str.w	r2, [r3], #4
 800d5ae:	e7d8      	b.n	800d562 <__multiply+0x4e>
 800d5b0:	f8b1 a000 	ldrh.w	sl, [r1]
 800d5b4:	f1ba 0f00 	cmp.w	sl, #0
 800d5b8:	d023      	beq.n	800d602 <__multiply+0xee>
 800d5ba:	46a9      	mov	r9, r5
 800d5bc:	f04f 0c00 	mov.w	ip, #0
 800d5c0:	f104 0e14 	add.w	lr, r4, #20
 800d5c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d5c8:	f8d9 3000 	ldr.w	r3, [r9]
 800d5cc:	fa1f fb87 	uxth.w	fp, r7
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	fb0a 330b 	mla	r3, sl, fp, r3
 800d5d6:	4463      	add	r3, ip
 800d5d8:	f8d9 c000 	ldr.w	ip, [r9]
 800d5dc:	0c3f      	lsrs	r7, r7, #16
 800d5de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d5e2:	fb0a c707 	mla	r7, sl, r7, ip
 800d5e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d5f0:	4572      	cmp	r2, lr
 800d5f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d5f6:	f849 3b04 	str.w	r3, [r9], #4
 800d5fa:	d8e3      	bhi.n	800d5c4 <__multiply+0xb0>
 800d5fc:	9b01      	ldr	r3, [sp, #4]
 800d5fe:	f845 c003 	str.w	ip, [r5, r3]
 800d602:	9b03      	ldr	r3, [sp, #12]
 800d604:	3104      	adds	r1, #4
 800d606:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d60a:	f1b9 0f00 	cmp.w	r9, #0
 800d60e:	d021      	beq.n	800d654 <__multiply+0x140>
 800d610:	46ae      	mov	lr, r5
 800d612:	f04f 0a00 	mov.w	sl, #0
 800d616:	682b      	ldr	r3, [r5, #0]
 800d618:	f104 0c14 	add.w	ip, r4, #20
 800d61c:	f8bc b000 	ldrh.w	fp, [ip]
 800d620:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d624:	b29b      	uxth	r3, r3
 800d626:	fb09 770b 	mla	r7, r9, fp, r7
 800d62a:	4457      	add	r7, sl
 800d62c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d630:	f84e 3b04 	str.w	r3, [lr], #4
 800d634:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d638:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d63c:	f8be 3000 	ldrh.w	r3, [lr]
 800d640:	4562      	cmp	r2, ip
 800d642:	fb09 330a 	mla	r3, r9, sl, r3
 800d646:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d64a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d64e:	d8e5      	bhi.n	800d61c <__multiply+0x108>
 800d650:	9f01      	ldr	r7, [sp, #4]
 800d652:	51eb      	str	r3, [r5, r7]
 800d654:	3504      	adds	r5, #4
 800d656:	e79a      	b.n	800d58e <__multiply+0x7a>
 800d658:	3e01      	subs	r6, #1
 800d65a:	e79c      	b.n	800d596 <__multiply+0x82>
 800d65c:	0800e8b8 	.word	0x0800e8b8
 800d660:	0800e8c9 	.word	0x0800e8c9

0800d664 <__pow5mult>:
 800d664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d668:	4615      	mov	r5, r2
 800d66a:	f012 0203 	ands.w	r2, r2, #3
 800d66e:	4607      	mov	r7, r0
 800d670:	460e      	mov	r6, r1
 800d672:	d007      	beq.n	800d684 <__pow5mult+0x20>
 800d674:	4c25      	ldr	r4, [pc, #148]	@ (800d70c <__pow5mult+0xa8>)
 800d676:	3a01      	subs	r2, #1
 800d678:	2300      	movs	r3, #0
 800d67a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d67e:	f7ff fea1 	bl	800d3c4 <__multadd>
 800d682:	4606      	mov	r6, r0
 800d684:	10ad      	asrs	r5, r5, #2
 800d686:	d03d      	beq.n	800d704 <__pow5mult+0xa0>
 800d688:	69fc      	ldr	r4, [r7, #28]
 800d68a:	b97c      	cbnz	r4, 800d6ac <__pow5mult+0x48>
 800d68c:	2010      	movs	r0, #16
 800d68e:	f7fe f837 	bl	800b700 <malloc>
 800d692:	4602      	mov	r2, r0
 800d694:	61f8      	str	r0, [r7, #28]
 800d696:	b928      	cbnz	r0, 800d6a4 <__pow5mult+0x40>
 800d698:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d69c:	4b1c      	ldr	r3, [pc, #112]	@ (800d710 <__pow5mult+0xac>)
 800d69e:	481d      	ldr	r0, [pc, #116]	@ (800d714 <__pow5mult+0xb0>)
 800d6a0:	f000 fbd0 	bl	800de44 <__assert_func>
 800d6a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6a8:	6004      	str	r4, [r0, #0]
 800d6aa:	60c4      	str	r4, [r0, #12]
 800d6ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d6b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6b4:	b94c      	cbnz	r4, 800d6ca <__pow5mult+0x66>
 800d6b6:	f240 2171 	movw	r1, #625	@ 0x271
 800d6ba:	4638      	mov	r0, r7
 800d6bc:	f7ff ff14 	bl	800d4e8 <__i2b>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6c8:	6003      	str	r3, [r0, #0]
 800d6ca:	f04f 0900 	mov.w	r9, #0
 800d6ce:	07eb      	lsls	r3, r5, #31
 800d6d0:	d50a      	bpl.n	800d6e8 <__pow5mult+0x84>
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4622      	mov	r2, r4
 800d6d6:	4638      	mov	r0, r7
 800d6d8:	f7ff ff1c 	bl	800d514 <__multiply>
 800d6dc:	4680      	mov	r8, r0
 800d6de:	4631      	mov	r1, r6
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	f7ff fe4d 	bl	800d380 <_Bfree>
 800d6e6:	4646      	mov	r6, r8
 800d6e8:	106d      	asrs	r5, r5, #1
 800d6ea:	d00b      	beq.n	800d704 <__pow5mult+0xa0>
 800d6ec:	6820      	ldr	r0, [r4, #0]
 800d6ee:	b938      	cbnz	r0, 800d700 <__pow5mult+0x9c>
 800d6f0:	4622      	mov	r2, r4
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	f7ff ff0d 	bl	800d514 <__multiply>
 800d6fa:	6020      	str	r0, [r4, #0]
 800d6fc:	f8c0 9000 	str.w	r9, [r0]
 800d700:	4604      	mov	r4, r0
 800d702:	e7e4      	b.n	800d6ce <__pow5mult+0x6a>
 800d704:	4630      	mov	r0, r6
 800d706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d70a:	bf00      	nop
 800d70c:	0800e924 	.word	0x0800e924
 800d710:	0800e849 	.word	0x0800e849
 800d714:	0800e8c9 	.word	0x0800e8c9

0800d718 <__lshift>:
 800d718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d71c:	460c      	mov	r4, r1
 800d71e:	4607      	mov	r7, r0
 800d720:	4691      	mov	r9, r2
 800d722:	6923      	ldr	r3, [r4, #16]
 800d724:	6849      	ldr	r1, [r1, #4]
 800d726:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d72a:	68a3      	ldr	r3, [r4, #8]
 800d72c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d730:	f108 0601 	add.w	r6, r8, #1
 800d734:	42b3      	cmp	r3, r6
 800d736:	db0b      	blt.n	800d750 <__lshift+0x38>
 800d738:	4638      	mov	r0, r7
 800d73a:	f7ff fde1 	bl	800d300 <_Balloc>
 800d73e:	4605      	mov	r5, r0
 800d740:	b948      	cbnz	r0, 800d756 <__lshift+0x3e>
 800d742:	4602      	mov	r2, r0
 800d744:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d748:	4b27      	ldr	r3, [pc, #156]	@ (800d7e8 <__lshift+0xd0>)
 800d74a:	4828      	ldr	r0, [pc, #160]	@ (800d7ec <__lshift+0xd4>)
 800d74c:	f000 fb7a 	bl	800de44 <__assert_func>
 800d750:	3101      	adds	r1, #1
 800d752:	005b      	lsls	r3, r3, #1
 800d754:	e7ee      	b.n	800d734 <__lshift+0x1c>
 800d756:	2300      	movs	r3, #0
 800d758:	f100 0114 	add.w	r1, r0, #20
 800d75c:	f100 0210 	add.w	r2, r0, #16
 800d760:	4618      	mov	r0, r3
 800d762:	4553      	cmp	r3, sl
 800d764:	db33      	blt.n	800d7ce <__lshift+0xb6>
 800d766:	6920      	ldr	r0, [r4, #16]
 800d768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d76c:	f104 0314 	add.w	r3, r4, #20
 800d770:	f019 091f 	ands.w	r9, r9, #31
 800d774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d77c:	d02b      	beq.n	800d7d6 <__lshift+0xbe>
 800d77e:	468a      	mov	sl, r1
 800d780:	2200      	movs	r2, #0
 800d782:	f1c9 0e20 	rsb	lr, r9, #32
 800d786:	6818      	ldr	r0, [r3, #0]
 800d788:	fa00 f009 	lsl.w	r0, r0, r9
 800d78c:	4310      	orrs	r0, r2
 800d78e:	f84a 0b04 	str.w	r0, [sl], #4
 800d792:	f853 2b04 	ldr.w	r2, [r3], #4
 800d796:	459c      	cmp	ip, r3
 800d798:	fa22 f20e 	lsr.w	r2, r2, lr
 800d79c:	d8f3      	bhi.n	800d786 <__lshift+0x6e>
 800d79e:	ebac 0304 	sub.w	r3, ip, r4
 800d7a2:	3b15      	subs	r3, #21
 800d7a4:	f023 0303 	bic.w	r3, r3, #3
 800d7a8:	3304      	adds	r3, #4
 800d7aa:	f104 0015 	add.w	r0, r4, #21
 800d7ae:	4584      	cmp	ip, r0
 800d7b0:	bf38      	it	cc
 800d7b2:	2304      	movcc	r3, #4
 800d7b4:	50ca      	str	r2, [r1, r3]
 800d7b6:	b10a      	cbz	r2, 800d7bc <__lshift+0xa4>
 800d7b8:	f108 0602 	add.w	r6, r8, #2
 800d7bc:	3e01      	subs	r6, #1
 800d7be:	4638      	mov	r0, r7
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	612e      	str	r6, [r5, #16]
 800d7c4:	f7ff fddc 	bl	800d380 <_Bfree>
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	e7c5      	b.n	800d762 <__lshift+0x4a>
 800d7d6:	3904      	subs	r1, #4
 800d7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7dc:	459c      	cmp	ip, r3
 800d7de:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7e2:	d8f9      	bhi.n	800d7d8 <__lshift+0xc0>
 800d7e4:	e7ea      	b.n	800d7bc <__lshift+0xa4>
 800d7e6:	bf00      	nop
 800d7e8:	0800e8b8 	.word	0x0800e8b8
 800d7ec:	0800e8c9 	.word	0x0800e8c9

0800d7f0 <__mcmp>:
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	690a      	ldr	r2, [r1, #16]
 800d7f4:	6900      	ldr	r0, [r0, #16]
 800d7f6:	b530      	push	{r4, r5, lr}
 800d7f8:	1a80      	subs	r0, r0, r2
 800d7fa:	d10e      	bne.n	800d81a <__mcmp+0x2a>
 800d7fc:	3314      	adds	r3, #20
 800d7fe:	3114      	adds	r1, #20
 800d800:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d804:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d808:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d80c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d810:	4295      	cmp	r5, r2
 800d812:	d003      	beq.n	800d81c <__mcmp+0x2c>
 800d814:	d205      	bcs.n	800d822 <__mcmp+0x32>
 800d816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d81a:	bd30      	pop	{r4, r5, pc}
 800d81c:	42a3      	cmp	r3, r4
 800d81e:	d3f3      	bcc.n	800d808 <__mcmp+0x18>
 800d820:	e7fb      	b.n	800d81a <__mcmp+0x2a>
 800d822:	2001      	movs	r0, #1
 800d824:	e7f9      	b.n	800d81a <__mcmp+0x2a>
	...

0800d828 <__mdiff>:
 800d828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	4689      	mov	r9, r1
 800d82e:	4606      	mov	r6, r0
 800d830:	4611      	mov	r1, r2
 800d832:	4648      	mov	r0, r9
 800d834:	4614      	mov	r4, r2
 800d836:	f7ff ffdb 	bl	800d7f0 <__mcmp>
 800d83a:	1e05      	subs	r5, r0, #0
 800d83c:	d112      	bne.n	800d864 <__mdiff+0x3c>
 800d83e:	4629      	mov	r1, r5
 800d840:	4630      	mov	r0, r6
 800d842:	f7ff fd5d 	bl	800d300 <_Balloc>
 800d846:	4602      	mov	r2, r0
 800d848:	b928      	cbnz	r0, 800d856 <__mdiff+0x2e>
 800d84a:	f240 2137 	movw	r1, #567	@ 0x237
 800d84e:	4b3e      	ldr	r3, [pc, #248]	@ (800d948 <__mdiff+0x120>)
 800d850:	483e      	ldr	r0, [pc, #248]	@ (800d94c <__mdiff+0x124>)
 800d852:	f000 faf7 	bl	800de44 <__assert_func>
 800d856:	2301      	movs	r3, #1
 800d858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d85c:	4610      	mov	r0, r2
 800d85e:	b003      	add	sp, #12
 800d860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d864:	bfbc      	itt	lt
 800d866:	464b      	movlt	r3, r9
 800d868:	46a1      	movlt	r9, r4
 800d86a:	4630      	mov	r0, r6
 800d86c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d870:	bfba      	itte	lt
 800d872:	461c      	movlt	r4, r3
 800d874:	2501      	movlt	r5, #1
 800d876:	2500      	movge	r5, #0
 800d878:	f7ff fd42 	bl	800d300 <_Balloc>
 800d87c:	4602      	mov	r2, r0
 800d87e:	b918      	cbnz	r0, 800d888 <__mdiff+0x60>
 800d880:	f240 2145 	movw	r1, #581	@ 0x245
 800d884:	4b30      	ldr	r3, [pc, #192]	@ (800d948 <__mdiff+0x120>)
 800d886:	e7e3      	b.n	800d850 <__mdiff+0x28>
 800d888:	f100 0b14 	add.w	fp, r0, #20
 800d88c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d890:	f109 0310 	add.w	r3, r9, #16
 800d894:	60c5      	str	r5, [r0, #12]
 800d896:	f04f 0c00 	mov.w	ip, #0
 800d89a:	f109 0514 	add.w	r5, r9, #20
 800d89e:	46d9      	mov	r9, fp
 800d8a0:	6926      	ldr	r6, [r4, #16]
 800d8a2:	f104 0e14 	add.w	lr, r4, #20
 800d8a6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d8aa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d8ae:	9301      	str	r3, [sp, #4]
 800d8b0:	9b01      	ldr	r3, [sp, #4]
 800d8b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d8b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d8ba:	b281      	uxth	r1, r0
 800d8bc:	9301      	str	r3, [sp, #4]
 800d8be:	fa1f f38a 	uxth.w	r3, sl
 800d8c2:	1a5b      	subs	r3, r3, r1
 800d8c4:	0c00      	lsrs	r0, r0, #16
 800d8c6:	4463      	add	r3, ip
 800d8c8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d8cc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d8d6:	4576      	cmp	r6, lr
 800d8d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8dc:	f849 3b04 	str.w	r3, [r9], #4
 800d8e0:	d8e6      	bhi.n	800d8b0 <__mdiff+0x88>
 800d8e2:	1b33      	subs	r3, r6, r4
 800d8e4:	3b15      	subs	r3, #21
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	3415      	adds	r4, #21
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	42a6      	cmp	r6, r4
 800d8f0:	bf38      	it	cc
 800d8f2:	2304      	movcc	r3, #4
 800d8f4:	441d      	add	r5, r3
 800d8f6:	445b      	add	r3, fp
 800d8f8:	461e      	mov	r6, r3
 800d8fa:	462c      	mov	r4, r5
 800d8fc:	4544      	cmp	r4, r8
 800d8fe:	d30e      	bcc.n	800d91e <__mdiff+0xf6>
 800d900:	f108 0103 	add.w	r1, r8, #3
 800d904:	1b49      	subs	r1, r1, r5
 800d906:	f021 0103 	bic.w	r1, r1, #3
 800d90a:	3d03      	subs	r5, #3
 800d90c:	45a8      	cmp	r8, r5
 800d90e:	bf38      	it	cc
 800d910:	2100      	movcc	r1, #0
 800d912:	440b      	add	r3, r1
 800d914:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d918:	b199      	cbz	r1, 800d942 <__mdiff+0x11a>
 800d91a:	6117      	str	r7, [r2, #16]
 800d91c:	e79e      	b.n	800d85c <__mdiff+0x34>
 800d91e:	46e6      	mov	lr, ip
 800d920:	f854 1b04 	ldr.w	r1, [r4], #4
 800d924:	fa1f fc81 	uxth.w	ip, r1
 800d928:	44f4      	add	ip, lr
 800d92a:	0c08      	lsrs	r0, r1, #16
 800d92c:	4471      	add	r1, lr
 800d92e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d932:	b289      	uxth	r1, r1
 800d934:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d938:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d93c:	f846 1b04 	str.w	r1, [r6], #4
 800d940:	e7dc      	b.n	800d8fc <__mdiff+0xd4>
 800d942:	3f01      	subs	r7, #1
 800d944:	e7e6      	b.n	800d914 <__mdiff+0xec>
 800d946:	bf00      	nop
 800d948:	0800e8b8 	.word	0x0800e8b8
 800d94c:	0800e8c9 	.word	0x0800e8c9

0800d950 <__d2b>:
 800d950:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d954:	2101      	movs	r1, #1
 800d956:	4690      	mov	r8, r2
 800d958:	4699      	mov	r9, r3
 800d95a:	9e08      	ldr	r6, [sp, #32]
 800d95c:	f7ff fcd0 	bl	800d300 <_Balloc>
 800d960:	4604      	mov	r4, r0
 800d962:	b930      	cbnz	r0, 800d972 <__d2b+0x22>
 800d964:	4602      	mov	r2, r0
 800d966:	f240 310f 	movw	r1, #783	@ 0x30f
 800d96a:	4b23      	ldr	r3, [pc, #140]	@ (800d9f8 <__d2b+0xa8>)
 800d96c:	4823      	ldr	r0, [pc, #140]	@ (800d9fc <__d2b+0xac>)
 800d96e:	f000 fa69 	bl	800de44 <__assert_func>
 800d972:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d976:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d97a:	b10d      	cbz	r5, 800d980 <__d2b+0x30>
 800d97c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d980:	9301      	str	r3, [sp, #4]
 800d982:	f1b8 0300 	subs.w	r3, r8, #0
 800d986:	d024      	beq.n	800d9d2 <__d2b+0x82>
 800d988:	4668      	mov	r0, sp
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	f7ff fd7f 	bl	800d48e <__lo0bits>
 800d990:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d994:	b1d8      	cbz	r0, 800d9ce <__d2b+0x7e>
 800d996:	f1c0 0320 	rsb	r3, r0, #32
 800d99a:	fa02 f303 	lsl.w	r3, r2, r3
 800d99e:	430b      	orrs	r3, r1
 800d9a0:	40c2      	lsrs	r2, r0
 800d9a2:	6163      	str	r3, [r4, #20]
 800d9a4:	9201      	str	r2, [sp, #4]
 800d9a6:	9b01      	ldr	r3, [sp, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	bf0c      	ite	eq
 800d9ac:	2201      	moveq	r2, #1
 800d9ae:	2202      	movne	r2, #2
 800d9b0:	61a3      	str	r3, [r4, #24]
 800d9b2:	6122      	str	r2, [r4, #16]
 800d9b4:	b1ad      	cbz	r5, 800d9e2 <__d2b+0x92>
 800d9b6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d9ba:	4405      	add	r5, r0
 800d9bc:	6035      	str	r5, [r6, #0]
 800d9be:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9c4:	6018      	str	r0, [r3, #0]
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	b002      	add	sp, #8
 800d9ca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d9ce:	6161      	str	r1, [r4, #20]
 800d9d0:	e7e9      	b.n	800d9a6 <__d2b+0x56>
 800d9d2:	a801      	add	r0, sp, #4
 800d9d4:	f7ff fd5b 	bl	800d48e <__lo0bits>
 800d9d8:	9b01      	ldr	r3, [sp, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	6163      	str	r3, [r4, #20]
 800d9de:	3020      	adds	r0, #32
 800d9e0:	e7e7      	b.n	800d9b2 <__d2b+0x62>
 800d9e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d9e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9ea:	6030      	str	r0, [r6, #0]
 800d9ec:	6918      	ldr	r0, [r3, #16]
 800d9ee:	f7ff fd2f 	bl	800d450 <__hi0bits>
 800d9f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9f6:	e7e4      	b.n	800d9c2 <__d2b+0x72>
 800d9f8:	0800e8b8 	.word	0x0800e8b8
 800d9fc:	0800e8c9 	.word	0x0800e8c9

0800da00 <_malloc_usable_size_r>:
 800da00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da04:	1f18      	subs	r0, r3, #4
 800da06:	2b00      	cmp	r3, #0
 800da08:	bfbc      	itt	lt
 800da0a:	580b      	ldrlt	r3, [r1, r0]
 800da0c:	18c0      	addlt	r0, r0, r3
 800da0e:	4770      	bx	lr

0800da10 <__ssputs_r>:
 800da10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da14:	461f      	mov	r7, r3
 800da16:	688e      	ldr	r6, [r1, #8]
 800da18:	4682      	mov	sl, r0
 800da1a:	42be      	cmp	r6, r7
 800da1c:	460c      	mov	r4, r1
 800da1e:	4690      	mov	r8, r2
 800da20:	680b      	ldr	r3, [r1, #0]
 800da22:	d82d      	bhi.n	800da80 <__ssputs_r+0x70>
 800da24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da2c:	d026      	beq.n	800da7c <__ssputs_r+0x6c>
 800da2e:	6965      	ldr	r5, [r4, #20]
 800da30:	6909      	ldr	r1, [r1, #16]
 800da32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da36:	eba3 0901 	sub.w	r9, r3, r1
 800da3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da3e:	1c7b      	adds	r3, r7, #1
 800da40:	444b      	add	r3, r9
 800da42:	106d      	asrs	r5, r5, #1
 800da44:	429d      	cmp	r5, r3
 800da46:	bf38      	it	cc
 800da48:	461d      	movcc	r5, r3
 800da4a:	0553      	lsls	r3, r2, #21
 800da4c:	d527      	bpl.n	800da9e <__ssputs_r+0x8e>
 800da4e:	4629      	mov	r1, r5
 800da50:	f7fd fe88 	bl	800b764 <_malloc_r>
 800da54:	4606      	mov	r6, r0
 800da56:	b360      	cbz	r0, 800dab2 <__ssputs_r+0xa2>
 800da58:	464a      	mov	r2, r9
 800da5a:	6921      	ldr	r1, [r4, #16]
 800da5c:	f7fe fda7 	bl	800c5ae <memcpy>
 800da60:	89a3      	ldrh	r3, [r4, #12]
 800da62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da6a:	81a3      	strh	r3, [r4, #12]
 800da6c:	6126      	str	r6, [r4, #16]
 800da6e:	444e      	add	r6, r9
 800da70:	6026      	str	r6, [r4, #0]
 800da72:	463e      	mov	r6, r7
 800da74:	6165      	str	r5, [r4, #20]
 800da76:	eba5 0509 	sub.w	r5, r5, r9
 800da7a:	60a5      	str	r5, [r4, #8]
 800da7c:	42be      	cmp	r6, r7
 800da7e:	d900      	bls.n	800da82 <__ssputs_r+0x72>
 800da80:	463e      	mov	r6, r7
 800da82:	4632      	mov	r2, r6
 800da84:	4641      	mov	r1, r8
 800da86:	6820      	ldr	r0, [r4, #0]
 800da88:	f000 f9c2 	bl	800de10 <memmove>
 800da8c:	2000      	movs	r0, #0
 800da8e:	68a3      	ldr	r3, [r4, #8]
 800da90:	1b9b      	subs	r3, r3, r6
 800da92:	60a3      	str	r3, [r4, #8]
 800da94:	6823      	ldr	r3, [r4, #0]
 800da96:	4433      	add	r3, r6
 800da98:	6023      	str	r3, [r4, #0]
 800da9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da9e:	462a      	mov	r2, r5
 800daa0:	f7fd fef4 	bl	800b88c <_realloc_r>
 800daa4:	4606      	mov	r6, r0
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d1e0      	bne.n	800da6c <__ssputs_r+0x5c>
 800daaa:	4650      	mov	r0, sl
 800daac:	6921      	ldr	r1, [r4, #16]
 800daae:	f7ff fbdf 	bl	800d270 <_free_r>
 800dab2:	230c      	movs	r3, #12
 800dab4:	f8ca 3000 	str.w	r3, [sl]
 800dab8:	89a3      	ldrh	r3, [r4, #12]
 800daba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dabe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dac2:	81a3      	strh	r3, [r4, #12]
 800dac4:	e7e9      	b.n	800da9a <__ssputs_r+0x8a>
	...

0800dac8 <_svfiprintf_r>:
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dacc:	4698      	mov	r8, r3
 800dace:	898b      	ldrh	r3, [r1, #12]
 800dad0:	4607      	mov	r7, r0
 800dad2:	061b      	lsls	r3, r3, #24
 800dad4:	460d      	mov	r5, r1
 800dad6:	4614      	mov	r4, r2
 800dad8:	b09d      	sub	sp, #116	@ 0x74
 800dada:	d510      	bpl.n	800dafe <_svfiprintf_r+0x36>
 800dadc:	690b      	ldr	r3, [r1, #16]
 800dade:	b973      	cbnz	r3, 800dafe <_svfiprintf_r+0x36>
 800dae0:	2140      	movs	r1, #64	@ 0x40
 800dae2:	f7fd fe3f 	bl	800b764 <_malloc_r>
 800dae6:	6028      	str	r0, [r5, #0]
 800dae8:	6128      	str	r0, [r5, #16]
 800daea:	b930      	cbnz	r0, 800dafa <_svfiprintf_r+0x32>
 800daec:	230c      	movs	r3, #12
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800daf4:	b01d      	add	sp, #116	@ 0x74
 800daf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafa:	2340      	movs	r3, #64	@ 0x40
 800dafc:	616b      	str	r3, [r5, #20]
 800dafe:	2300      	movs	r3, #0
 800db00:	9309      	str	r3, [sp, #36]	@ 0x24
 800db02:	2320      	movs	r3, #32
 800db04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db08:	2330      	movs	r3, #48	@ 0x30
 800db0a:	f04f 0901 	mov.w	r9, #1
 800db0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800db12:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dcac <_svfiprintf_r+0x1e4>
 800db16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db1a:	4623      	mov	r3, r4
 800db1c:	469a      	mov	sl, r3
 800db1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db22:	b10a      	cbz	r2, 800db28 <_svfiprintf_r+0x60>
 800db24:	2a25      	cmp	r2, #37	@ 0x25
 800db26:	d1f9      	bne.n	800db1c <_svfiprintf_r+0x54>
 800db28:	ebba 0b04 	subs.w	fp, sl, r4
 800db2c:	d00b      	beq.n	800db46 <_svfiprintf_r+0x7e>
 800db2e:	465b      	mov	r3, fp
 800db30:	4622      	mov	r2, r4
 800db32:	4629      	mov	r1, r5
 800db34:	4638      	mov	r0, r7
 800db36:	f7ff ff6b 	bl	800da10 <__ssputs_r>
 800db3a:	3001      	adds	r0, #1
 800db3c:	f000 80a7 	beq.w	800dc8e <_svfiprintf_r+0x1c6>
 800db40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db42:	445a      	add	r2, fp
 800db44:	9209      	str	r2, [sp, #36]	@ 0x24
 800db46:	f89a 3000 	ldrb.w	r3, [sl]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f000 809f 	beq.w	800dc8e <_svfiprintf_r+0x1c6>
 800db50:	2300      	movs	r3, #0
 800db52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db5a:	f10a 0a01 	add.w	sl, sl, #1
 800db5e:	9304      	str	r3, [sp, #16]
 800db60:	9307      	str	r3, [sp, #28]
 800db62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db66:	931a      	str	r3, [sp, #104]	@ 0x68
 800db68:	4654      	mov	r4, sl
 800db6a:	2205      	movs	r2, #5
 800db6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db70:	484e      	ldr	r0, [pc, #312]	@ (800dcac <_svfiprintf_r+0x1e4>)
 800db72:	f7fe fd0e 	bl	800c592 <memchr>
 800db76:	9a04      	ldr	r2, [sp, #16]
 800db78:	b9d8      	cbnz	r0, 800dbb2 <_svfiprintf_r+0xea>
 800db7a:	06d0      	lsls	r0, r2, #27
 800db7c:	bf44      	itt	mi
 800db7e:	2320      	movmi	r3, #32
 800db80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db84:	0711      	lsls	r1, r2, #28
 800db86:	bf44      	itt	mi
 800db88:	232b      	movmi	r3, #43	@ 0x2b
 800db8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db8e:	f89a 3000 	ldrb.w	r3, [sl]
 800db92:	2b2a      	cmp	r3, #42	@ 0x2a
 800db94:	d015      	beq.n	800dbc2 <_svfiprintf_r+0xfa>
 800db96:	4654      	mov	r4, sl
 800db98:	2000      	movs	r0, #0
 800db9a:	f04f 0c0a 	mov.w	ip, #10
 800db9e:	9a07      	ldr	r2, [sp, #28]
 800dba0:	4621      	mov	r1, r4
 800dba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dba6:	3b30      	subs	r3, #48	@ 0x30
 800dba8:	2b09      	cmp	r3, #9
 800dbaa:	d94b      	bls.n	800dc44 <_svfiprintf_r+0x17c>
 800dbac:	b1b0      	cbz	r0, 800dbdc <_svfiprintf_r+0x114>
 800dbae:	9207      	str	r2, [sp, #28]
 800dbb0:	e014      	b.n	800dbdc <_svfiprintf_r+0x114>
 800dbb2:	eba0 0308 	sub.w	r3, r0, r8
 800dbb6:	fa09 f303 	lsl.w	r3, r9, r3
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	46a2      	mov	sl, r4
 800dbbe:	9304      	str	r3, [sp, #16]
 800dbc0:	e7d2      	b.n	800db68 <_svfiprintf_r+0xa0>
 800dbc2:	9b03      	ldr	r3, [sp, #12]
 800dbc4:	1d19      	adds	r1, r3, #4
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	9103      	str	r1, [sp, #12]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	bfbb      	ittet	lt
 800dbce:	425b      	neglt	r3, r3
 800dbd0:	f042 0202 	orrlt.w	r2, r2, #2
 800dbd4:	9307      	strge	r3, [sp, #28]
 800dbd6:	9307      	strlt	r3, [sp, #28]
 800dbd8:	bfb8      	it	lt
 800dbda:	9204      	strlt	r2, [sp, #16]
 800dbdc:	7823      	ldrb	r3, [r4, #0]
 800dbde:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbe0:	d10a      	bne.n	800dbf8 <_svfiprintf_r+0x130>
 800dbe2:	7863      	ldrb	r3, [r4, #1]
 800dbe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbe6:	d132      	bne.n	800dc4e <_svfiprintf_r+0x186>
 800dbe8:	9b03      	ldr	r3, [sp, #12]
 800dbea:	3402      	adds	r4, #2
 800dbec:	1d1a      	adds	r2, r3, #4
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	9203      	str	r2, [sp, #12]
 800dbf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbf6:	9305      	str	r3, [sp, #20]
 800dbf8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dcb0 <_svfiprintf_r+0x1e8>
 800dbfc:	2203      	movs	r2, #3
 800dbfe:	4650      	mov	r0, sl
 800dc00:	7821      	ldrb	r1, [r4, #0]
 800dc02:	f7fe fcc6 	bl	800c592 <memchr>
 800dc06:	b138      	cbz	r0, 800dc18 <_svfiprintf_r+0x150>
 800dc08:	2240      	movs	r2, #64	@ 0x40
 800dc0a:	9b04      	ldr	r3, [sp, #16]
 800dc0c:	eba0 000a 	sub.w	r0, r0, sl
 800dc10:	4082      	lsls	r2, r0
 800dc12:	4313      	orrs	r3, r2
 800dc14:	3401      	adds	r4, #1
 800dc16:	9304      	str	r3, [sp, #16]
 800dc18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc1c:	2206      	movs	r2, #6
 800dc1e:	4825      	ldr	r0, [pc, #148]	@ (800dcb4 <_svfiprintf_r+0x1ec>)
 800dc20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc24:	f7fe fcb5 	bl	800c592 <memchr>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d036      	beq.n	800dc9a <_svfiprintf_r+0x1d2>
 800dc2c:	4b22      	ldr	r3, [pc, #136]	@ (800dcb8 <_svfiprintf_r+0x1f0>)
 800dc2e:	bb1b      	cbnz	r3, 800dc78 <_svfiprintf_r+0x1b0>
 800dc30:	9b03      	ldr	r3, [sp, #12]
 800dc32:	3307      	adds	r3, #7
 800dc34:	f023 0307 	bic.w	r3, r3, #7
 800dc38:	3308      	adds	r3, #8
 800dc3a:	9303      	str	r3, [sp, #12]
 800dc3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc3e:	4433      	add	r3, r6
 800dc40:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc42:	e76a      	b.n	800db1a <_svfiprintf_r+0x52>
 800dc44:	460c      	mov	r4, r1
 800dc46:	2001      	movs	r0, #1
 800dc48:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc4c:	e7a8      	b.n	800dba0 <_svfiprintf_r+0xd8>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	f04f 0c0a 	mov.w	ip, #10
 800dc54:	4619      	mov	r1, r3
 800dc56:	3401      	adds	r4, #1
 800dc58:	9305      	str	r3, [sp, #20]
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc60:	3a30      	subs	r2, #48	@ 0x30
 800dc62:	2a09      	cmp	r2, #9
 800dc64:	d903      	bls.n	800dc6e <_svfiprintf_r+0x1a6>
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d0c6      	beq.n	800dbf8 <_svfiprintf_r+0x130>
 800dc6a:	9105      	str	r1, [sp, #20]
 800dc6c:	e7c4      	b.n	800dbf8 <_svfiprintf_r+0x130>
 800dc6e:	4604      	mov	r4, r0
 800dc70:	2301      	movs	r3, #1
 800dc72:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc76:	e7f0      	b.n	800dc5a <_svfiprintf_r+0x192>
 800dc78:	ab03      	add	r3, sp, #12
 800dc7a:	9300      	str	r3, [sp, #0]
 800dc7c:	462a      	mov	r2, r5
 800dc7e:	4638      	mov	r0, r7
 800dc80:	4b0e      	ldr	r3, [pc, #56]	@ (800dcbc <_svfiprintf_r+0x1f4>)
 800dc82:	a904      	add	r1, sp, #16
 800dc84:	f7fd fece 	bl	800ba24 <_printf_float>
 800dc88:	1c42      	adds	r2, r0, #1
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	d1d6      	bne.n	800dc3c <_svfiprintf_r+0x174>
 800dc8e:	89ab      	ldrh	r3, [r5, #12]
 800dc90:	065b      	lsls	r3, r3, #25
 800dc92:	f53f af2d 	bmi.w	800daf0 <_svfiprintf_r+0x28>
 800dc96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc98:	e72c      	b.n	800daf4 <_svfiprintf_r+0x2c>
 800dc9a:	ab03      	add	r3, sp, #12
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	462a      	mov	r2, r5
 800dca0:	4638      	mov	r0, r7
 800dca2:	4b06      	ldr	r3, [pc, #24]	@ (800dcbc <_svfiprintf_r+0x1f4>)
 800dca4:	a904      	add	r1, sp, #16
 800dca6:	f7fe f95b 	bl	800bf60 <_printf_i>
 800dcaa:	e7ed      	b.n	800dc88 <_svfiprintf_r+0x1c0>
 800dcac:	0800ea20 	.word	0x0800ea20
 800dcb0:	0800ea26 	.word	0x0800ea26
 800dcb4:	0800ea2a 	.word	0x0800ea2a
 800dcb8:	0800ba25 	.word	0x0800ba25
 800dcbc:	0800da11 	.word	0x0800da11

0800dcc0 <__sflush_r>:
 800dcc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	0716      	lsls	r6, r2, #28
 800dcc8:	4605      	mov	r5, r0
 800dcca:	460c      	mov	r4, r1
 800dccc:	d454      	bmi.n	800dd78 <__sflush_r+0xb8>
 800dcce:	684b      	ldr	r3, [r1, #4]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	dc02      	bgt.n	800dcda <__sflush_r+0x1a>
 800dcd4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	dd48      	ble.n	800dd6c <__sflush_r+0xac>
 800dcda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dcdc:	2e00      	cmp	r6, #0
 800dcde:	d045      	beq.n	800dd6c <__sflush_r+0xac>
 800dce0:	2300      	movs	r3, #0
 800dce2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dce6:	682f      	ldr	r7, [r5, #0]
 800dce8:	6a21      	ldr	r1, [r4, #32]
 800dcea:	602b      	str	r3, [r5, #0]
 800dcec:	d030      	beq.n	800dd50 <__sflush_r+0x90>
 800dcee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	0759      	lsls	r1, r3, #29
 800dcf4:	d505      	bpl.n	800dd02 <__sflush_r+0x42>
 800dcf6:	6863      	ldr	r3, [r4, #4]
 800dcf8:	1ad2      	subs	r2, r2, r3
 800dcfa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dcfc:	b10b      	cbz	r3, 800dd02 <__sflush_r+0x42>
 800dcfe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd00:	1ad2      	subs	r2, r2, r3
 800dd02:	2300      	movs	r3, #0
 800dd04:	4628      	mov	r0, r5
 800dd06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd08:	6a21      	ldr	r1, [r4, #32]
 800dd0a:	47b0      	blx	r6
 800dd0c:	1c43      	adds	r3, r0, #1
 800dd0e:	89a3      	ldrh	r3, [r4, #12]
 800dd10:	d106      	bne.n	800dd20 <__sflush_r+0x60>
 800dd12:	6829      	ldr	r1, [r5, #0]
 800dd14:	291d      	cmp	r1, #29
 800dd16:	d82b      	bhi.n	800dd70 <__sflush_r+0xb0>
 800dd18:	4a28      	ldr	r2, [pc, #160]	@ (800ddbc <__sflush_r+0xfc>)
 800dd1a:	410a      	asrs	r2, r1
 800dd1c:	07d6      	lsls	r6, r2, #31
 800dd1e:	d427      	bmi.n	800dd70 <__sflush_r+0xb0>
 800dd20:	2200      	movs	r2, #0
 800dd22:	6062      	str	r2, [r4, #4]
 800dd24:	6922      	ldr	r2, [r4, #16]
 800dd26:	04d9      	lsls	r1, r3, #19
 800dd28:	6022      	str	r2, [r4, #0]
 800dd2a:	d504      	bpl.n	800dd36 <__sflush_r+0x76>
 800dd2c:	1c42      	adds	r2, r0, #1
 800dd2e:	d101      	bne.n	800dd34 <__sflush_r+0x74>
 800dd30:	682b      	ldr	r3, [r5, #0]
 800dd32:	b903      	cbnz	r3, 800dd36 <__sflush_r+0x76>
 800dd34:	6560      	str	r0, [r4, #84]	@ 0x54
 800dd36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd38:	602f      	str	r7, [r5, #0]
 800dd3a:	b1b9      	cbz	r1, 800dd6c <__sflush_r+0xac>
 800dd3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd40:	4299      	cmp	r1, r3
 800dd42:	d002      	beq.n	800dd4a <__sflush_r+0x8a>
 800dd44:	4628      	mov	r0, r5
 800dd46:	f7ff fa93 	bl	800d270 <_free_r>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd4e:	e00d      	b.n	800dd6c <__sflush_r+0xac>
 800dd50:	2301      	movs	r3, #1
 800dd52:	4628      	mov	r0, r5
 800dd54:	47b0      	blx	r6
 800dd56:	4602      	mov	r2, r0
 800dd58:	1c50      	adds	r0, r2, #1
 800dd5a:	d1c9      	bne.n	800dcf0 <__sflush_r+0x30>
 800dd5c:	682b      	ldr	r3, [r5, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d0c6      	beq.n	800dcf0 <__sflush_r+0x30>
 800dd62:	2b1d      	cmp	r3, #29
 800dd64:	d001      	beq.n	800dd6a <__sflush_r+0xaa>
 800dd66:	2b16      	cmp	r3, #22
 800dd68:	d11d      	bne.n	800dda6 <__sflush_r+0xe6>
 800dd6a:	602f      	str	r7, [r5, #0]
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	e021      	b.n	800ddb4 <__sflush_r+0xf4>
 800dd70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd74:	b21b      	sxth	r3, r3
 800dd76:	e01a      	b.n	800ddae <__sflush_r+0xee>
 800dd78:	690f      	ldr	r7, [r1, #16]
 800dd7a:	2f00      	cmp	r7, #0
 800dd7c:	d0f6      	beq.n	800dd6c <__sflush_r+0xac>
 800dd7e:	0793      	lsls	r3, r2, #30
 800dd80:	bf18      	it	ne
 800dd82:	2300      	movne	r3, #0
 800dd84:	680e      	ldr	r6, [r1, #0]
 800dd86:	bf08      	it	eq
 800dd88:	694b      	ldreq	r3, [r1, #20]
 800dd8a:	1bf6      	subs	r6, r6, r7
 800dd8c:	600f      	str	r7, [r1, #0]
 800dd8e:	608b      	str	r3, [r1, #8]
 800dd90:	2e00      	cmp	r6, #0
 800dd92:	ddeb      	ble.n	800dd6c <__sflush_r+0xac>
 800dd94:	4633      	mov	r3, r6
 800dd96:	463a      	mov	r2, r7
 800dd98:	4628      	mov	r0, r5
 800dd9a:	6a21      	ldr	r1, [r4, #32]
 800dd9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800dda0:	47e0      	blx	ip
 800dda2:	2800      	cmp	r0, #0
 800dda4:	dc07      	bgt.n	800ddb6 <__sflush_r+0xf6>
 800dda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddb2:	81a3      	strh	r3, [r4, #12]
 800ddb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddb6:	4407      	add	r7, r0
 800ddb8:	1a36      	subs	r6, r6, r0
 800ddba:	e7e9      	b.n	800dd90 <__sflush_r+0xd0>
 800ddbc:	dfbffffe 	.word	0xdfbffffe

0800ddc0 <_fflush_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	690b      	ldr	r3, [r1, #16]
 800ddc4:	4605      	mov	r5, r0
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	b913      	cbnz	r3, 800ddd0 <_fflush_r+0x10>
 800ddca:	2500      	movs	r5, #0
 800ddcc:	4628      	mov	r0, r5
 800ddce:	bd38      	pop	{r3, r4, r5, pc}
 800ddd0:	b118      	cbz	r0, 800ddda <_fflush_r+0x1a>
 800ddd2:	6a03      	ldr	r3, [r0, #32]
 800ddd4:	b90b      	cbnz	r3, 800ddda <_fflush_r+0x1a>
 800ddd6:	f7fe fa6f 	bl	800c2b8 <__sinit>
 800ddda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d0f3      	beq.n	800ddca <_fflush_r+0xa>
 800dde2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dde4:	07d0      	lsls	r0, r2, #31
 800dde6:	d404      	bmi.n	800ddf2 <_fflush_r+0x32>
 800dde8:	0599      	lsls	r1, r3, #22
 800ddea:	d402      	bmi.n	800ddf2 <_fflush_r+0x32>
 800ddec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddee:	f7fe fbce 	bl	800c58e <__retarget_lock_acquire_recursive>
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	f7ff ff63 	bl	800dcc0 <__sflush_r>
 800ddfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddfc:	4605      	mov	r5, r0
 800ddfe:	07da      	lsls	r2, r3, #31
 800de00:	d4e4      	bmi.n	800ddcc <_fflush_r+0xc>
 800de02:	89a3      	ldrh	r3, [r4, #12]
 800de04:	059b      	lsls	r3, r3, #22
 800de06:	d4e1      	bmi.n	800ddcc <_fflush_r+0xc>
 800de08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de0a:	f7fe fbc1 	bl	800c590 <__retarget_lock_release_recursive>
 800de0e:	e7dd      	b.n	800ddcc <_fflush_r+0xc>

0800de10 <memmove>:
 800de10:	4288      	cmp	r0, r1
 800de12:	b510      	push	{r4, lr}
 800de14:	eb01 0402 	add.w	r4, r1, r2
 800de18:	d902      	bls.n	800de20 <memmove+0x10>
 800de1a:	4284      	cmp	r4, r0
 800de1c:	4623      	mov	r3, r4
 800de1e:	d807      	bhi.n	800de30 <memmove+0x20>
 800de20:	1e43      	subs	r3, r0, #1
 800de22:	42a1      	cmp	r1, r4
 800de24:	d008      	beq.n	800de38 <memmove+0x28>
 800de26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de2e:	e7f8      	b.n	800de22 <memmove+0x12>
 800de30:	4601      	mov	r1, r0
 800de32:	4402      	add	r2, r0
 800de34:	428a      	cmp	r2, r1
 800de36:	d100      	bne.n	800de3a <memmove+0x2a>
 800de38:	bd10      	pop	{r4, pc}
 800de3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de42:	e7f7      	b.n	800de34 <memmove+0x24>

0800de44 <__assert_func>:
 800de44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de46:	4614      	mov	r4, r2
 800de48:	461a      	mov	r2, r3
 800de4a:	4b09      	ldr	r3, [pc, #36]	@ (800de70 <__assert_func+0x2c>)
 800de4c:	4605      	mov	r5, r0
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68d8      	ldr	r0, [r3, #12]
 800de52:	b954      	cbnz	r4, 800de6a <__assert_func+0x26>
 800de54:	4b07      	ldr	r3, [pc, #28]	@ (800de74 <__assert_func+0x30>)
 800de56:	461c      	mov	r4, r3
 800de58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de5c:	9100      	str	r1, [sp, #0]
 800de5e:	462b      	mov	r3, r5
 800de60:	4905      	ldr	r1, [pc, #20]	@ (800de78 <__assert_func+0x34>)
 800de62:	f000 f841 	bl	800dee8 <fiprintf>
 800de66:	f7fd fc43 	bl	800b6f0 <abort>
 800de6a:	4b04      	ldr	r3, [pc, #16]	@ (800de7c <__assert_func+0x38>)
 800de6c:	e7f4      	b.n	800de58 <__assert_func+0x14>
 800de6e:	bf00      	nop
 800de70:	2000004c 	.word	0x2000004c
 800de74:	0800ea76 	.word	0x0800ea76
 800de78:	0800ea48 	.word	0x0800ea48
 800de7c:	0800ea3b 	.word	0x0800ea3b

0800de80 <_calloc_r>:
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	fba1 5402 	umull	r5, r4, r1, r2
 800de86:	b93c      	cbnz	r4, 800de98 <_calloc_r+0x18>
 800de88:	4629      	mov	r1, r5
 800de8a:	f7fd fc6b 	bl	800b764 <_malloc_r>
 800de8e:	4606      	mov	r6, r0
 800de90:	b928      	cbnz	r0, 800de9e <_calloc_r+0x1e>
 800de92:	2600      	movs	r6, #0
 800de94:	4630      	mov	r0, r6
 800de96:	bd70      	pop	{r4, r5, r6, pc}
 800de98:	220c      	movs	r2, #12
 800de9a:	6002      	str	r2, [r0, #0]
 800de9c:	e7f9      	b.n	800de92 <_calloc_r+0x12>
 800de9e:	462a      	mov	r2, r5
 800dea0:	4621      	mov	r1, r4
 800dea2:	f7fe faa2 	bl	800c3ea <memset>
 800dea6:	e7f5      	b.n	800de94 <_calloc_r+0x14>

0800dea8 <__ascii_mbtowc>:
 800dea8:	b082      	sub	sp, #8
 800deaa:	b901      	cbnz	r1, 800deae <__ascii_mbtowc+0x6>
 800deac:	a901      	add	r1, sp, #4
 800deae:	b142      	cbz	r2, 800dec2 <__ascii_mbtowc+0x1a>
 800deb0:	b14b      	cbz	r3, 800dec6 <__ascii_mbtowc+0x1e>
 800deb2:	7813      	ldrb	r3, [r2, #0]
 800deb4:	600b      	str	r3, [r1, #0]
 800deb6:	7812      	ldrb	r2, [r2, #0]
 800deb8:	1e10      	subs	r0, r2, #0
 800deba:	bf18      	it	ne
 800debc:	2001      	movne	r0, #1
 800debe:	b002      	add	sp, #8
 800dec0:	4770      	bx	lr
 800dec2:	4610      	mov	r0, r2
 800dec4:	e7fb      	b.n	800debe <__ascii_mbtowc+0x16>
 800dec6:	f06f 0001 	mvn.w	r0, #1
 800deca:	e7f8      	b.n	800debe <__ascii_mbtowc+0x16>

0800decc <__ascii_wctomb>:
 800decc:	4603      	mov	r3, r0
 800dece:	4608      	mov	r0, r1
 800ded0:	b141      	cbz	r1, 800dee4 <__ascii_wctomb+0x18>
 800ded2:	2aff      	cmp	r2, #255	@ 0xff
 800ded4:	d904      	bls.n	800dee0 <__ascii_wctomb+0x14>
 800ded6:	228a      	movs	r2, #138	@ 0x8a
 800ded8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dedc:	601a      	str	r2, [r3, #0]
 800dede:	4770      	bx	lr
 800dee0:	2001      	movs	r0, #1
 800dee2:	700a      	strb	r2, [r1, #0]
 800dee4:	4770      	bx	lr
	...

0800dee8 <fiprintf>:
 800dee8:	b40e      	push	{r1, r2, r3}
 800deea:	b503      	push	{r0, r1, lr}
 800deec:	4601      	mov	r1, r0
 800deee:	ab03      	add	r3, sp, #12
 800def0:	4805      	ldr	r0, [pc, #20]	@ (800df08 <fiprintf+0x20>)
 800def2:	f853 2b04 	ldr.w	r2, [r3], #4
 800def6:	6800      	ldr	r0, [r0, #0]
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	f000 f82f 	bl	800df5c <_vfiprintf_r>
 800defe:	b002      	add	sp, #8
 800df00:	f85d eb04 	ldr.w	lr, [sp], #4
 800df04:	b003      	add	sp, #12
 800df06:	4770      	bx	lr
 800df08:	2000004c 	.word	0x2000004c

0800df0c <__sfputc_r>:
 800df0c:	6893      	ldr	r3, [r2, #8]
 800df0e:	b410      	push	{r4}
 800df10:	3b01      	subs	r3, #1
 800df12:	2b00      	cmp	r3, #0
 800df14:	6093      	str	r3, [r2, #8]
 800df16:	da07      	bge.n	800df28 <__sfputc_r+0x1c>
 800df18:	6994      	ldr	r4, [r2, #24]
 800df1a:	42a3      	cmp	r3, r4
 800df1c:	db01      	blt.n	800df22 <__sfputc_r+0x16>
 800df1e:	290a      	cmp	r1, #10
 800df20:	d102      	bne.n	800df28 <__sfputc_r+0x1c>
 800df22:	bc10      	pop	{r4}
 800df24:	f000 b932 	b.w	800e18c <__swbuf_r>
 800df28:	6813      	ldr	r3, [r2, #0]
 800df2a:	1c58      	adds	r0, r3, #1
 800df2c:	6010      	str	r0, [r2, #0]
 800df2e:	7019      	strb	r1, [r3, #0]
 800df30:	4608      	mov	r0, r1
 800df32:	bc10      	pop	{r4}
 800df34:	4770      	bx	lr

0800df36 <__sfputs_r>:
 800df36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df38:	4606      	mov	r6, r0
 800df3a:	460f      	mov	r7, r1
 800df3c:	4614      	mov	r4, r2
 800df3e:	18d5      	adds	r5, r2, r3
 800df40:	42ac      	cmp	r4, r5
 800df42:	d101      	bne.n	800df48 <__sfputs_r+0x12>
 800df44:	2000      	movs	r0, #0
 800df46:	e007      	b.n	800df58 <__sfputs_r+0x22>
 800df48:	463a      	mov	r2, r7
 800df4a:	4630      	mov	r0, r6
 800df4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df50:	f7ff ffdc 	bl	800df0c <__sfputc_r>
 800df54:	1c43      	adds	r3, r0, #1
 800df56:	d1f3      	bne.n	800df40 <__sfputs_r+0xa>
 800df58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df5c <_vfiprintf_r>:
 800df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df60:	460d      	mov	r5, r1
 800df62:	4614      	mov	r4, r2
 800df64:	4698      	mov	r8, r3
 800df66:	4606      	mov	r6, r0
 800df68:	b09d      	sub	sp, #116	@ 0x74
 800df6a:	b118      	cbz	r0, 800df74 <_vfiprintf_r+0x18>
 800df6c:	6a03      	ldr	r3, [r0, #32]
 800df6e:	b90b      	cbnz	r3, 800df74 <_vfiprintf_r+0x18>
 800df70:	f7fe f9a2 	bl	800c2b8 <__sinit>
 800df74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df76:	07d9      	lsls	r1, r3, #31
 800df78:	d405      	bmi.n	800df86 <_vfiprintf_r+0x2a>
 800df7a:	89ab      	ldrh	r3, [r5, #12]
 800df7c:	059a      	lsls	r2, r3, #22
 800df7e:	d402      	bmi.n	800df86 <_vfiprintf_r+0x2a>
 800df80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df82:	f7fe fb04 	bl	800c58e <__retarget_lock_acquire_recursive>
 800df86:	89ab      	ldrh	r3, [r5, #12]
 800df88:	071b      	lsls	r3, r3, #28
 800df8a:	d501      	bpl.n	800df90 <_vfiprintf_r+0x34>
 800df8c:	692b      	ldr	r3, [r5, #16]
 800df8e:	b99b      	cbnz	r3, 800dfb8 <_vfiprintf_r+0x5c>
 800df90:	4629      	mov	r1, r5
 800df92:	4630      	mov	r0, r6
 800df94:	f000 f938 	bl	800e208 <__swsetup_r>
 800df98:	b170      	cbz	r0, 800dfb8 <_vfiprintf_r+0x5c>
 800df9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df9c:	07dc      	lsls	r4, r3, #31
 800df9e:	d504      	bpl.n	800dfaa <_vfiprintf_r+0x4e>
 800dfa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dfa4:	b01d      	add	sp, #116	@ 0x74
 800dfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfaa:	89ab      	ldrh	r3, [r5, #12]
 800dfac:	0598      	lsls	r0, r3, #22
 800dfae:	d4f7      	bmi.n	800dfa0 <_vfiprintf_r+0x44>
 800dfb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfb2:	f7fe faed 	bl	800c590 <__retarget_lock_release_recursive>
 800dfb6:	e7f3      	b.n	800dfa0 <_vfiprintf_r+0x44>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfbc:	2320      	movs	r3, #32
 800dfbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfc2:	2330      	movs	r3, #48	@ 0x30
 800dfc4:	f04f 0901 	mov.w	r9, #1
 800dfc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfcc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e178 <_vfiprintf_r+0x21c>
 800dfd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfd4:	4623      	mov	r3, r4
 800dfd6:	469a      	mov	sl, r3
 800dfd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfdc:	b10a      	cbz	r2, 800dfe2 <_vfiprintf_r+0x86>
 800dfde:	2a25      	cmp	r2, #37	@ 0x25
 800dfe0:	d1f9      	bne.n	800dfd6 <_vfiprintf_r+0x7a>
 800dfe2:	ebba 0b04 	subs.w	fp, sl, r4
 800dfe6:	d00b      	beq.n	800e000 <_vfiprintf_r+0xa4>
 800dfe8:	465b      	mov	r3, fp
 800dfea:	4622      	mov	r2, r4
 800dfec:	4629      	mov	r1, r5
 800dfee:	4630      	mov	r0, r6
 800dff0:	f7ff ffa1 	bl	800df36 <__sfputs_r>
 800dff4:	3001      	adds	r0, #1
 800dff6:	f000 80a7 	beq.w	800e148 <_vfiprintf_r+0x1ec>
 800dffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dffc:	445a      	add	r2, fp
 800dffe:	9209      	str	r2, [sp, #36]	@ 0x24
 800e000:	f89a 3000 	ldrb.w	r3, [sl]
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 809f 	beq.w	800e148 <_vfiprintf_r+0x1ec>
 800e00a:	2300      	movs	r3, #0
 800e00c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e014:	f10a 0a01 	add.w	sl, sl, #1
 800e018:	9304      	str	r3, [sp, #16]
 800e01a:	9307      	str	r3, [sp, #28]
 800e01c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e020:	931a      	str	r3, [sp, #104]	@ 0x68
 800e022:	4654      	mov	r4, sl
 800e024:	2205      	movs	r2, #5
 800e026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e02a:	4853      	ldr	r0, [pc, #332]	@ (800e178 <_vfiprintf_r+0x21c>)
 800e02c:	f7fe fab1 	bl	800c592 <memchr>
 800e030:	9a04      	ldr	r2, [sp, #16]
 800e032:	b9d8      	cbnz	r0, 800e06c <_vfiprintf_r+0x110>
 800e034:	06d1      	lsls	r1, r2, #27
 800e036:	bf44      	itt	mi
 800e038:	2320      	movmi	r3, #32
 800e03a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e03e:	0713      	lsls	r3, r2, #28
 800e040:	bf44      	itt	mi
 800e042:	232b      	movmi	r3, #43	@ 0x2b
 800e044:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e048:	f89a 3000 	ldrb.w	r3, [sl]
 800e04c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e04e:	d015      	beq.n	800e07c <_vfiprintf_r+0x120>
 800e050:	4654      	mov	r4, sl
 800e052:	2000      	movs	r0, #0
 800e054:	f04f 0c0a 	mov.w	ip, #10
 800e058:	9a07      	ldr	r2, [sp, #28]
 800e05a:	4621      	mov	r1, r4
 800e05c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e060:	3b30      	subs	r3, #48	@ 0x30
 800e062:	2b09      	cmp	r3, #9
 800e064:	d94b      	bls.n	800e0fe <_vfiprintf_r+0x1a2>
 800e066:	b1b0      	cbz	r0, 800e096 <_vfiprintf_r+0x13a>
 800e068:	9207      	str	r2, [sp, #28]
 800e06a:	e014      	b.n	800e096 <_vfiprintf_r+0x13a>
 800e06c:	eba0 0308 	sub.w	r3, r0, r8
 800e070:	fa09 f303 	lsl.w	r3, r9, r3
 800e074:	4313      	orrs	r3, r2
 800e076:	46a2      	mov	sl, r4
 800e078:	9304      	str	r3, [sp, #16]
 800e07a:	e7d2      	b.n	800e022 <_vfiprintf_r+0xc6>
 800e07c:	9b03      	ldr	r3, [sp, #12]
 800e07e:	1d19      	adds	r1, r3, #4
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	9103      	str	r1, [sp, #12]
 800e084:	2b00      	cmp	r3, #0
 800e086:	bfbb      	ittet	lt
 800e088:	425b      	neglt	r3, r3
 800e08a:	f042 0202 	orrlt.w	r2, r2, #2
 800e08e:	9307      	strge	r3, [sp, #28]
 800e090:	9307      	strlt	r3, [sp, #28]
 800e092:	bfb8      	it	lt
 800e094:	9204      	strlt	r2, [sp, #16]
 800e096:	7823      	ldrb	r3, [r4, #0]
 800e098:	2b2e      	cmp	r3, #46	@ 0x2e
 800e09a:	d10a      	bne.n	800e0b2 <_vfiprintf_r+0x156>
 800e09c:	7863      	ldrb	r3, [r4, #1]
 800e09e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0a0:	d132      	bne.n	800e108 <_vfiprintf_r+0x1ac>
 800e0a2:	9b03      	ldr	r3, [sp, #12]
 800e0a4:	3402      	adds	r4, #2
 800e0a6:	1d1a      	adds	r2, r3, #4
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	9203      	str	r2, [sp, #12]
 800e0ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0b0:	9305      	str	r3, [sp, #20]
 800e0b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e17c <_vfiprintf_r+0x220>
 800e0b6:	2203      	movs	r2, #3
 800e0b8:	4650      	mov	r0, sl
 800e0ba:	7821      	ldrb	r1, [r4, #0]
 800e0bc:	f7fe fa69 	bl	800c592 <memchr>
 800e0c0:	b138      	cbz	r0, 800e0d2 <_vfiprintf_r+0x176>
 800e0c2:	2240      	movs	r2, #64	@ 0x40
 800e0c4:	9b04      	ldr	r3, [sp, #16]
 800e0c6:	eba0 000a 	sub.w	r0, r0, sl
 800e0ca:	4082      	lsls	r2, r0
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	3401      	adds	r4, #1
 800e0d0:	9304      	str	r3, [sp, #16]
 800e0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d6:	2206      	movs	r2, #6
 800e0d8:	4829      	ldr	r0, [pc, #164]	@ (800e180 <_vfiprintf_r+0x224>)
 800e0da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0de:	f7fe fa58 	bl	800c592 <memchr>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	d03f      	beq.n	800e166 <_vfiprintf_r+0x20a>
 800e0e6:	4b27      	ldr	r3, [pc, #156]	@ (800e184 <_vfiprintf_r+0x228>)
 800e0e8:	bb1b      	cbnz	r3, 800e132 <_vfiprintf_r+0x1d6>
 800e0ea:	9b03      	ldr	r3, [sp, #12]
 800e0ec:	3307      	adds	r3, #7
 800e0ee:	f023 0307 	bic.w	r3, r3, #7
 800e0f2:	3308      	adds	r3, #8
 800e0f4:	9303      	str	r3, [sp, #12]
 800e0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f8:	443b      	add	r3, r7
 800e0fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0fc:	e76a      	b.n	800dfd4 <_vfiprintf_r+0x78>
 800e0fe:	460c      	mov	r4, r1
 800e100:	2001      	movs	r0, #1
 800e102:	fb0c 3202 	mla	r2, ip, r2, r3
 800e106:	e7a8      	b.n	800e05a <_vfiprintf_r+0xfe>
 800e108:	2300      	movs	r3, #0
 800e10a:	f04f 0c0a 	mov.w	ip, #10
 800e10e:	4619      	mov	r1, r3
 800e110:	3401      	adds	r4, #1
 800e112:	9305      	str	r3, [sp, #20]
 800e114:	4620      	mov	r0, r4
 800e116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e11a:	3a30      	subs	r2, #48	@ 0x30
 800e11c:	2a09      	cmp	r2, #9
 800e11e:	d903      	bls.n	800e128 <_vfiprintf_r+0x1cc>
 800e120:	2b00      	cmp	r3, #0
 800e122:	d0c6      	beq.n	800e0b2 <_vfiprintf_r+0x156>
 800e124:	9105      	str	r1, [sp, #20]
 800e126:	e7c4      	b.n	800e0b2 <_vfiprintf_r+0x156>
 800e128:	4604      	mov	r4, r0
 800e12a:	2301      	movs	r3, #1
 800e12c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e130:	e7f0      	b.n	800e114 <_vfiprintf_r+0x1b8>
 800e132:	ab03      	add	r3, sp, #12
 800e134:	9300      	str	r3, [sp, #0]
 800e136:	462a      	mov	r2, r5
 800e138:	4630      	mov	r0, r6
 800e13a:	4b13      	ldr	r3, [pc, #76]	@ (800e188 <_vfiprintf_r+0x22c>)
 800e13c:	a904      	add	r1, sp, #16
 800e13e:	f7fd fc71 	bl	800ba24 <_printf_float>
 800e142:	4607      	mov	r7, r0
 800e144:	1c78      	adds	r0, r7, #1
 800e146:	d1d6      	bne.n	800e0f6 <_vfiprintf_r+0x19a>
 800e148:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e14a:	07d9      	lsls	r1, r3, #31
 800e14c:	d405      	bmi.n	800e15a <_vfiprintf_r+0x1fe>
 800e14e:	89ab      	ldrh	r3, [r5, #12]
 800e150:	059a      	lsls	r2, r3, #22
 800e152:	d402      	bmi.n	800e15a <_vfiprintf_r+0x1fe>
 800e154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e156:	f7fe fa1b 	bl	800c590 <__retarget_lock_release_recursive>
 800e15a:	89ab      	ldrh	r3, [r5, #12]
 800e15c:	065b      	lsls	r3, r3, #25
 800e15e:	f53f af1f 	bmi.w	800dfa0 <_vfiprintf_r+0x44>
 800e162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e164:	e71e      	b.n	800dfa4 <_vfiprintf_r+0x48>
 800e166:	ab03      	add	r3, sp, #12
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	462a      	mov	r2, r5
 800e16c:	4630      	mov	r0, r6
 800e16e:	4b06      	ldr	r3, [pc, #24]	@ (800e188 <_vfiprintf_r+0x22c>)
 800e170:	a904      	add	r1, sp, #16
 800e172:	f7fd fef5 	bl	800bf60 <_printf_i>
 800e176:	e7e4      	b.n	800e142 <_vfiprintf_r+0x1e6>
 800e178:	0800ea20 	.word	0x0800ea20
 800e17c:	0800ea26 	.word	0x0800ea26
 800e180:	0800ea2a 	.word	0x0800ea2a
 800e184:	0800ba25 	.word	0x0800ba25
 800e188:	0800df37 	.word	0x0800df37

0800e18c <__swbuf_r>:
 800e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18e:	460e      	mov	r6, r1
 800e190:	4614      	mov	r4, r2
 800e192:	4605      	mov	r5, r0
 800e194:	b118      	cbz	r0, 800e19e <__swbuf_r+0x12>
 800e196:	6a03      	ldr	r3, [r0, #32]
 800e198:	b90b      	cbnz	r3, 800e19e <__swbuf_r+0x12>
 800e19a:	f7fe f88d 	bl	800c2b8 <__sinit>
 800e19e:	69a3      	ldr	r3, [r4, #24]
 800e1a0:	60a3      	str	r3, [r4, #8]
 800e1a2:	89a3      	ldrh	r3, [r4, #12]
 800e1a4:	071a      	lsls	r2, r3, #28
 800e1a6:	d501      	bpl.n	800e1ac <__swbuf_r+0x20>
 800e1a8:	6923      	ldr	r3, [r4, #16]
 800e1aa:	b943      	cbnz	r3, 800e1be <__swbuf_r+0x32>
 800e1ac:	4621      	mov	r1, r4
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	f000 f82a 	bl	800e208 <__swsetup_r>
 800e1b4:	b118      	cbz	r0, 800e1be <__swbuf_r+0x32>
 800e1b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e1ba:	4638      	mov	r0, r7
 800e1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1be:	6823      	ldr	r3, [r4, #0]
 800e1c0:	6922      	ldr	r2, [r4, #16]
 800e1c2:	b2f6      	uxtb	r6, r6
 800e1c4:	1a98      	subs	r0, r3, r2
 800e1c6:	6963      	ldr	r3, [r4, #20]
 800e1c8:	4637      	mov	r7, r6
 800e1ca:	4283      	cmp	r3, r0
 800e1cc:	dc05      	bgt.n	800e1da <__swbuf_r+0x4e>
 800e1ce:	4621      	mov	r1, r4
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	f7ff fdf5 	bl	800ddc0 <_fflush_r>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d1ed      	bne.n	800e1b6 <__swbuf_r+0x2a>
 800e1da:	68a3      	ldr	r3, [r4, #8]
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	60a3      	str	r3, [r4, #8]
 800e1e0:	6823      	ldr	r3, [r4, #0]
 800e1e2:	1c5a      	adds	r2, r3, #1
 800e1e4:	6022      	str	r2, [r4, #0]
 800e1e6:	701e      	strb	r6, [r3, #0]
 800e1e8:	6962      	ldr	r2, [r4, #20]
 800e1ea:	1c43      	adds	r3, r0, #1
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d004      	beq.n	800e1fa <__swbuf_r+0x6e>
 800e1f0:	89a3      	ldrh	r3, [r4, #12]
 800e1f2:	07db      	lsls	r3, r3, #31
 800e1f4:	d5e1      	bpl.n	800e1ba <__swbuf_r+0x2e>
 800e1f6:	2e0a      	cmp	r6, #10
 800e1f8:	d1df      	bne.n	800e1ba <__swbuf_r+0x2e>
 800e1fa:	4621      	mov	r1, r4
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	f7ff fddf 	bl	800ddc0 <_fflush_r>
 800e202:	2800      	cmp	r0, #0
 800e204:	d0d9      	beq.n	800e1ba <__swbuf_r+0x2e>
 800e206:	e7d6      	b.n	800e1b6 <__swbuf_r+0x2a>

0800e208 <__swsetup_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4b29      	ldr	r3, [pc, #164]	@ (800e2b0 <__swsetup_r+0xa8>)
 800e20c:	4605      	mov	r5, r0
 800e20e:	6818      	ldr	r0, [r3, #0]
 800e210:	460c      	mov	r4, r1
 800e212:	b118      	cbz	r0, 800e21c <__swsetup_r+0x14>
 800e214:	6a03      	ldr	r3, [r0, #32]
 800e216:	b90b      	cbnz	r3, 800e21c <__swsetup_r+0x14>
 800e218:	f7fe f84e 	bl	800c2b8 <__sinit>
 800e21c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e220:	0719      	lsls	r1, r3, #28
 800e222:	d422      	bmi.n	800e26a <__swsetup_r+0x62>
 800e224:	06da      	lsls	r2, r3, #27
 800e226:	d407      	bmi.n	800e238 <__swsetup_r+0x30>
 800e228:	2209      	movs	r2, #9
 800e22a:	602a      	str	r2, [r5, #0]
 800e22c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e234:	81a3      	strh	r3, [r4, #12]
 800e236:	e033      	b.n	800e2a0 <__swsetup_r+0x98>
 800e238:	0758      	lsls	r0, r3, #29
 800e23a:	d512      	bpl.n	800e262 <__swsetup_r+0x5a>
 800e23c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e23e:	b141      	cbz	r1, 800e252 <__swsetup_r+0x4a>
 800e240:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e244:	4299      	cmp	r1, r3
 800e246:	d002      	beq.n	800e24e <__swsetup_r+0x46>
 800e248:	4628      	mov	r0, r5
 800e24a:	f7ff f811 	bl	800d270 <_free_r>
 800e24e:	2300      	movs	r3, #0
 800e250:	6363      	str	r3, [r4, #52]	@ 0x34
 800e252:	89a3      	ldrh	r3, [r4, #12]
 800e254:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e258:	81a3      	strh	r3, [r4, #12]
 800e25a:	2300      	movs	r3, #0
 800e25c:	6063      	str	r3, [r4, #4]
 800e25e:	6923      	ldr	r3, [r4, #16]
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	f043 0308 	orr.w	r3, r3, #8
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	6923      	ldr	r3, [r4, #16]
 800e26c:	b94b      	cbnz	r3, 800e282 <__swsetup_r+0x7a>
 800e26e:	89a3      	ldrh	r3, [r4, #12]
 800e270:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e278:	d003      	beq.n	800e282 <__swsetup_r+0x7a>
 800e27a:	4621      	mov	r1, r4
 800e27c:	4628      	mov	r0, r5
 800e27e:	f000 f83e 	bl	800e2fe <__smakebuf_r>
 800e282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e286:	f013 0201 	ands.w	r2, r3, #1
 800e28a:	d00a      	beq.n	800e2a2 <__swsetup_r+0x9a>
 800e28c:	2200      	movs	r2, #0
 800e28e:	60a2      	str	r2, [r4, #8]
 800e290:	6962      	ldr	r2, [r4, #20]
 800e292:	4252      	negs	r2, r2
 800e294:	61a2      	str	r2, [r4, #24]
 800e296:	6922      	ldr	r2, [r4, #16]
 800e298:	b942      	cbnz	r2, 800e2ac <__swsetup_r+0xa4>
 800e29a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e29e:	d1c5      	bne.n	800e22c <__swsetup_r+0x24>
 800e2a0:	bd38      	pop	{r3, r4, r5, pc}
 800e2a2:	0799      	lsls	r1, r3, #30
 800e2a4:	bf58      	it	pl
 800e2a6:	6962      	ldrpl	r2, [r4, #20]
 800e2a8:	60a2      	str	r2, [r4, #8]
 800e2aa:	e7f4      	b.n	800e296 <__swsetup_r+0x8e>
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	e7f7      	b.n	800e2a0 <__swsetup_r+0x98>
 800e2b0:	2000004c 	.word	0x2000004c

0800e2b4 <__swhatbuf_r>:
 800e2b4:	b570      	push	{r4, r5, r6, lr}
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2bc:	4615      	mov	r5, r2
 800e2be:	2900      	cmp	r1, #0
 800e2c0:	461e      	mov	r6, r3
 800e2c2:	b096      	sub	sp, #88	@ 0x58
 800e2c4:	da0c      	bge.n	800e2e0 <__swhatbuf_r+0x2c>
 800e2c6:	89a3      	ldrh	r3, [r4, #12]
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e2ce:	bf14      	ite	ne
 800e2d0:	2340      	movne	r3, #64	@ 0x40
 800e2d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	6031      	str	r1, [r6, #0]
 800e2da:	602b      	str	r3, [r5, #0]
 800e2dc:	b016      	add	sp, #88	@ 0x58
 800e2de:	bd70      	pop	{r4, r5, r6, pc}
 800e2e0:	466a      	mov	r2, sp
 800e2e2:	f000 f849 	bl	800e378 <_fstat_r>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	dbed      	blt.n	800e2c6 <__swhatbuf_r+0x12>
 800e2ea:	9901      	ldr	r1, [sp, #4]
 800e2ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e2f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e2f4:	4259      	negs	r1, r3
 800e2f6:	4159      	adcs	r1, r3
 800e2f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2fc:	e7eb      	b.n	800e2d6 <__swhatbuf_r+0x22>

0800e2fe <__smakebuf_r>:
 800e2fe:	898b      	ldrh	r3, [r1, #12]
 800e300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e302:	079d      	lsls	r5, r3, #30
 800e304:	4606      	mov	r6, r0
 800e306:	460c      	mov	r4, r1
 800e308:	d507      	bpl.n	800e31a <__smakebuf_r+0x1c>
 800e30a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e30e:	6023      	str	r3, [r4, #0]
 800e310:	6123      	str	r3, [r4, #16]
 800e312:	2301      	movs	r3, #1
 800e314:	6163      	str	r3, [r4, #20]
 800e316:	b003      	add	sp, #12
 800e318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e31a:	466a      	mov	r2, sp
 800e31c:	ab01      	add	r3, sp, #4
 800e31e:	f7ff ffc9 	bl	800e2b4 <__swhatbuf_r>
 800e322:	9f00      	ldr	r7, [sp, #0]
 800e324:	4605      	mov	r5, r0
 800e326:	4639      	mov	r1, r7
 800e328:	4630      	mov	r0, r6
 800e32a:	f7fd fa1b 	bl	800b764 <_malloc_r>
 800e32e:	b948      	cbnz	r0, 800e344 <__smakebuf_r+0x46>
 800e330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e334:	059a      	lsls	r2, r3, #22
 800e336:	d4ee      	bmi.n	800e316 <__smakebuf_r+0x18>
 800e338:	f023 0303 	bic.w	r3, r3, #3
 800e33c:	f043 0302 	orr.w	r3, r3, #2
 800e340:	81a3      	strh	r3, [r4, #12]
 800e342:	e7e2      	b.n	800e30a <__smakebuf_r+0xc>
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e34e:	81a3      	strh	r3, [r4, #12]
 800e350:	9b01      	ldr	r3, [sp, #4]
 800e352:	6020      	str	r0, [r4, #0]
 800e354:	b15b      	cbz	r3, 800e36e <__smakebuf_r+0x70>
 800e356:	4630      	mov	r0, r6
 800e358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e35c:	f000 f81e 	bl	800e39c <_isatty_r>
 800e360:	b128      	cbz	r0, 800e36e <__smakebuf_r+0x70>
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	f023 0303 	bic.w	r3, r3, #3
 800e368:	f043 0301 	orr.w	r3, r3, #1
 800e36c:	81a3      	strh	r3, [r4, #12]
 800e36e:	89a3      	ldrh	r3, [r4, #12]
 800e370:	431d      	orrs	r5, r3
 800e372:	81a5      	strh	r5, [r4, #12]
 800e374:	e7cf      	b.n	800e316 <__smakebuf_r+0x18>
	...

0800e378 <_fstat_r>:
 800e378:	b538      	push	{r3, r4, r5, lr}
 800e37a:	2300      	movs	r3, #0
 800e37c:	4d06      	ldr	r5, [pc, #24]	@ (800e398 <_fstat_r+0x20>)
 800e37e:	4604      	mov	r4, r0
 800e380:	4608      	mov	r0, r1
 800e382:	4611      	mov	r1, r2
 800e384:	602b      	str	r3, [r5, #0]
 800e386:	f7f5 fcc5 	bl	8003d14 <_fstat>
 800e38a:	1c43      	adds	r3, r0, #1
 800e38c:	d102      	bne.n	800e394 <_fstat_r+0x1c>
 800e38e:	682b      	ldr	r3, [r5, #0]
 800e390:	b103      	cbz	r3, 800e394 <_fstat_r+0x1c>
 800e392:	6023      	str	r3, [r4, #0]
 800e394:	bd38      	pop	{r3, r4, r5, pc}
 800e396:	bf00      	nop
 800e398:	20002770 	.word	0x20002770

0800e39c <_isatty_r>:
 800e39c:	b538      	push	{r3, r4, r5, lr}
 800e39e:	2300      	movs	r3, #0
 800e3a0:	4d05      	ldr	r5, [pc, #20]	@ (800e3b8 <_isatty_r+0x1c>)
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	4608      	mov	r0, r1
 800e3a6:	602b      	str	r3, [r5, #0]
 800e3a8:	f7f5 fcc3 	bl	8003d32 <_isatty>
 800e3ac:	1c43      	adds	r3, r0, #1
 800e3ae:	d102      	bne.n	800e3b6 <_isatty_r+0x1a>
 800e3b0:	682b      	ldr	r3, [r5, #0]
 800e3b2:	b103      	cbz	r3, 800e3b6 <_isatty_r+0x1a>
 800e3b4:	6023      	str	r3, [r4, #0]
 800e3b6:	bd38      	pop	{r3, r4, r5, pc}
 800e3b8:	20002770 	.word	0x20002770

0800e3bc <_init>:
 800e3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3be:	bf00      	nop
 800e3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3c2:	bc08      	pop	{r3}
 800e3c4:	469e      	mov	lr, r3
 800e3c6:	4770      	bx	lr

0800e3c8 <_fini>:
 800e3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ca:	bf00      	nop
 800e3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ce:	bc08      	pop	{r3}
 800e3d0:	469e      	mov	lr, r3
 800e3d2:	4770      	bx	lr
