
my_ros_project_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1e4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  0800e2f8  0800e2f8  0000f2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea98  0800ea98  00010208  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea98  0800ea98  0000fa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eaa0  0800eaa0  00010208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800eaa0  0800eaa0  0000faa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eaa8  0800eaa8  0000faa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800eaac  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002568  20000208  0800ecb4  00010208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002770  0800ecb4  00010770  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022152  00000000  00000000  00010231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c9d  00000000  00000000  00032383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00037020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000126d  00000000  00000000  00038808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000141ce  00000000  00000000  00039a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000f12d  00000000  00000000  0004dc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0005cd70  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007774  00000000  00000000  0005cdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005a  00000000  00000000  00064528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e2dc 	.word	0x0800e2dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800e2dc 	.word	0x0800e2dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <MX_DMA_Init+0x48>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <MX_DMA_Init+0x48>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6153      	str	r3, [r2, #20]
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <MX_DMA_Init+0x48>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2105      	movs	r1, #5
 8000da6:	200e      	movs	r0, #14
 8000da8:	f003 fc6d 	bl	8004686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000dac:	200e      	movs	r0, #14
 8000dae:	f003 fc86 	bl	80046be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2105      	movs	r1, #5
 8000db6:	200f      	movs	r0, #15
 8000db8:	f003 fc65 	bl	8004686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000dbc:	200f      	movs	r0, #15
 8000dbe:	f003 fc7e 	bl	80046be <HAL_NVIC_EnableIRQ>

}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <vApplicationGetIdleTaskMemory+0x28>)
 8000de0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <vApplicationGetIdleTaskMemory+0x2c>)
 8000de6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	20000234 	.word	0x20000234
 8000dfc:	20000288 	.word	0x20000288

08000e00 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <vApplicationGetTimerTaskMemory+0x2c>)
 8000e10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <vApplicationGetTimerTaskMemory+0x30>)
 8000e16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e1e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000488 	.word	0x20000488
 8000e30:	200004dc 	.word	0x200004dc

08000e34 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myPIDTimer01 */
  osTimerDef(myPIDTimer01, Callback01);
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <MX_FREERTOS_Init+0x68>)
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  myPIDTimer01Handle = osTimerCreate(osTimer(myPIDTimer01), osTimerPeriodic, NULL);
 8000e42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 fffc 	bl	8007e48 <osTimerCreate>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a13      	ldr	r2, [pc, #76]	@ (8000ea0 <MX_FREERTOS_Init+0x6c>)
 8000e54:	6013      	str	r3, [r2, #0]

  /* definition and creation of myROSTimer02 */
  osTimerDef(myROSTimer02, Callback02);
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <MX_FREERTOS_Init+0x70>)
 8000e58:	623b      	str	r3, [r7, #32]
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  myROSTimer02Handle = osTimerCreate(osTimer(myROSTimer02), osTimerPeriodic, NULL);
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	2200      	movs	r2, #0
 8000e64:	2101      	movs	r1, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 ffee 	bl	8007e48 <osTimerCreate>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <MX_FREERTOS_Init+0x74>)
 8000e70:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultROSTask */
  osThreadDef(defaultROSTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_FREERTOS_Init+0x78>)
 8000e74:	1d3c      	adds	r4, r7, #4
 8000e76:	461d      	mov	r5, r3
 8000e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultROSTaskHandle = osThreadCreate(osThread(defaultROSTask), NULL);
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 ff7c 	bl	8007d86 <osThreadCreate>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a07      	ldr	r2, [pc, #28]	@ (8000eb0 <MX_FREERTOS_Init+0x7c>)
 8000e92:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000e94:	bf00      	nop
 8000e96:	3730      	adds	r7, #48	@ 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9c:	08000ee5 	.word	0x08000ee5
 8000ea0:	2000022c 	.word	0x2000022c
 8000ea4:	0800104d 	.word	0x0800104d
 8000ea8:	20000230 	.word	0x20000230
 8000eac:	0800e308 	.word	0x0800e308
 8000eb0:	20000228 	.word	0x20000228

08000eb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	osTimerStart (myPIDTimer01Handle,PID_LOOP_PERIOD_MS );
 8000ebc:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <StartDefaultTask+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	210a      	movs	r1, #10
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f006 fff4 	bl	8007eb0 <osTimerStart>
	osTimerStart (myROSTimer02Handle,ROS_LOOP_PERIOD_MS );
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <StartDefaultTask+0x2c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2164      	movs	r1, #100	@ 0x64
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 ffee 	bl	8007eb0 <osTimerStart>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f006 ffa2 	bl	8007e1e <osDelay>
 8000eda:	e7fb      	b.n	8000ed4 <StartDefaultTask+0x20>
 8000edc:	2000022c 	.word	0x2000022c
 8000ee0:	20000230 	.word	0x20000230

08000ee4 <Callback01>:
  /* USER CODE END StartDefaultTask */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	update_encoder_count_per_sampling_period(&left_motor_dynamics,((int)(TIM3->CNT) >> 2));
 8000eec:	4b48      	ldr	r3, [pc, #288]	@ (8001010 <Callback01+0x12c>)
 8000eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef0:	109b      	asrs	r3, r3, #2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fa86 	bl	8000404 <__aeabi_i2d>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4845      	ldr	r0, [pc, #276]	@ (8001014 <Callback01+0x130>)
 8000efe:	f006 fcf7 	bl	80078f0 <update_encoder_count_per_sampling_period>
	update_encoder_count_per_sampling_period(&right_motor_dynamics,((int)(TIM4->CNT) >> 2));
 8000f02:	4b45      	ldr	r3, [pc, #276]	@ (8001018 <Callback01+0x134>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f06:	109b      	asrs	r3, r3, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fa7b 	bl	8000404 <__aeabi_i2d>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4842      	ldr	r0, [pc, #264]	@ (800101c <Callback01+0x138>)
 8000f14:	f006 fcec 	bl	80078f0 <update_encoder_count_per_sampling_period>

	//if(osSemaphoreWait (myVelWriteBinarySem01Handle,  0) == pdTRUE){
		pid_controller_left_motor.target_value = left_vel;
 8000f18:	4b41      	ldr	r3, [pc, #260]	@ (8001020 <Callback01+0x13c>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	4941      	ldr	r1, [pc, #260]	@ (8001024 <Callback01+0x140>)
 8000f20:	e9c1 2300 	strd	r2, r3, [r1]
		pid_controller_right_motor.target_value = right_vel;
 8000f24:	4b40      	ldr	r3, [pc, #256]	@ (8001028 <Callback01+0x144>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	4940      	ldr	r1, [pc, #256]	@ (800102c <Callback01+0x148>)
 8000f2c:	e9c1 2300 	strd	r2, r3, [r1]
		internal_command = command;
 8000f30:	4b3f      	ldr	r3, [pc, #252]	@ (8001030 <Callback01+0x14c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b3f      	ldr	r3, [pc, #252]	@ (8001034 <Callback01+0x150>)
 8000f38:	601a      	str	r2, [r3, #0]

	//}

	if(internal_command != 0)
 8000f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001034 <Callback01+0x150>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d048      	beq.n	8000fd4 <Callback01+0xf0>
	{

		pid_controller_left_motor.current_value = get_speed_count(&left_motor_dynamics);
 8000f42:	4834      	ldr	r0, [pc, #208]	@ (8001014 <Callback01+0x130>)
 8000f44:	f006 fd08 	bl	8007958 <get_speed_count>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fa5a 	bl	8000404 <__aeabi_i2d>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4933      	ldr	r1, [pc, #204]	@ (8001024 <Callback01+0x140>)
 8000f56:	e9c1 2302 	strd	r2, r3, [r1, #8]
		pid_controller_right_motor.current_value = get_speed_count(&right_motor_dynamics);
 8000f5a:	4830      	ldr	r0, [pc, #192]	@ (800101c <Callback01+0x138>)
 8000f5c:	f006 fcfc 	bl	8007958 <get_speed_count>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fa4e 	bl	8000404 <__aeabi_i2d>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	492f      	ldr	r1, [pc, #188]	@ (800102c <Callback01+0x148>)
 8000f6e:	e9c1 2302 	strd	r2, r3, [r1, #8]

		real_left_vel = get_speed_rpm(&left_motor_dynamics);
 8000f72:	4828      	ldr	r0, [pc, #160]	@ (8001014 <Callback01+0x130>)
 8000f74:	f006 fd14 	bl	80079a0 <get_speed_rpm>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	492e      	ldr	r1, [pc, #184]	@ (8001038 <Callback01+0x154>)
 8000f7e:	e9c1 2300 	strd	r2, r3, [r1]
		real_right_vel = get_speed_rpm(&right_motor_dynamics);
 8000f82:	4826      	ldr	r0, [pc, #152]	@ (800101c <Callback01+0x138>)
 8000f84:	f006 fd0c 	bl	80079a0 <get_speed_rpm>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	492b      	ldr	r1, [pc, #172]	@ (800103c <Callback01+0x158>)
 8000f8e:	e9c1 2300 	strd	r2, r3, [r1]

		//osSemaphoreRelease (myVelReadBinarySem02Handle);

		PID_calculate(&pid_controller_left_motor);
 8000f92:	4824      	ldr	r0, [pc, #144]	@ (8001024 <Callback01+0x140>)
 8000f94:	f006 fe0b 	bl	8007bae <PID_calculate>
		PID_calculate(&pid_controller_right_motor);
 8000f98:	4824      	ldr	r0, [pc, #144]	@ (800102c <Callback01+0x148>)
 8000f9a:	f006 fe08 	bl	8007bae <PID_calculate>

		motor_run(&motor2,pid_controller_left_motor.output/1024.0);
 8000f9e:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <Callback01+0x140>)
 8000fa0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <Callback01+0x15c>)
 8000faa:	f7ff fbbf 	bl	800072c <__aeabi_ddiv>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4824      	ldr	r0, [pc, #144]	@ (8001044 <Callback01+0x160>)
 8000fb4:	f006 fb2a 	bl	800760c <motor_run>
		motor_run(&motor1,pid_controller_right_motor.output/1024.0);
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <Callback01+0x148>)
 8000fba:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <Callback01+0x15c>)
 8000fc4:	f7ff fbb2 	bl	800072c <__aeabi_ddiv>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	481e      	ldr	r0, [pc, #120]	@ (8001048 <Callback01+0x164>)
 8000fce:	f006 fb1d 	bl	800760c <motor_run>
		motor_stop(&motor1);
		PID_reset(&pid_controller_left_motor);
		PID_reset(&pid_controller_right_motor);
	}
  /* USER CODE END Callback01 */
}
 8000fd2:	e019      	b.n	8001008 <Callback01+0x124>
		real_left_vel = 0;
 8000fd4:	4918      	ldr	r1, [pc, #96]	@ (8001038 <Callback01+0x154>)
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	e9c1 2300 	strd	r2, r3, [r1]
		real_right_vel = 0;
 8000fe2:	4916      	ldr	r1, [pc, #88]	@ (800103c <Callback01+0x158>)
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c1 2300 	strd	r2, r3, [r1]
		motor_stop(&motor2);
 8000ff0:	4814      	ldr	r0, [pc, #80]	@ (8001044 <Callback01+0x160>)
 8000ff2:	f006 fbb5 	bl	8007760 <motor_stop>
		motor_stop(&motor1);
 8000ff6:	4814      	ldr	r0, [pc, #80]	@ (8001048 <Callback01+0x164>)
 8000ff8:	f006 fbb2 	bl	8007760 <motor_stop>
		PID_reset(&pid_controller_left_motor);
 8000ffc:	4809      	ldr	r0, [pc, #36]	@ (8001024 <Callback01+0x140>)
 8000ffe:	f006 fe6e 	bl	8007cde <PID_reset>
		PID_reset(&pid_controller_right_motor);
 8001002:	480a      	ldr	r0, [pc, #40]	@ (800102c <Callback01+0x148>)
 8001004:	f006 fe6b 	bl	8007cde <PID_reset>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40000400 	.word	0x40000400
 8001014:	200008e0 	.word	0x200008e0
 8001018:	40000800 	.word	0x40000800
 800101c:	20000930 	.word	0x20000930
 8001020:	20000b30 	.word	0x20000b30
 8001024:	20000a58 	.word	0x20000a58
 8001028:	20000b38 	.word	0x20000b38
 800102c:	20000ac0 	.word	0x20000ac0
 8001030:	20000b28 	.word	0x20000b28
 8001034:	20000224 	.word	0x20000224
 8001038:	20000b48 	.word	0x20000b48
 800103c:	20000b50 	.word	0x20000b50
 8001040:	40900000 	.word	0x40900000
 8001044:	20000010 	.word	0x20000010
 8001048:	20000000 	.word	0x20000000

0800104c <Callback02>:

/* Callback02 function */
void Callback02(void const * argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
	loop();
 8001054:	f001 ff20 	bl	8002e98 <loop>
  /* USER CODE END Callback02 */
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	4b2e      	ldr	r3, [pc, #184]	@ (8001130 <MX_GPIO_Init+0xd0>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a2d      	ldr	r2, [pc, #180]	@ (8001130 <MX_GPIO_Init+0xd0>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b2b      	ldr	r3, [pc, #172]	@ (8001130 <MX_GPIO_Init+0xd0>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108c:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <MX_GPIO_Init+0xd0>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a27      	ldr	r2, [pc, #156]	@ (8001130 <MX_GPIO_Init+0xd0>)
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <MX_GPIO_Init+0xd0>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0320 	and.w	r3, r3, #32
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <MX_GPIO_Init+0xd0>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a21      	ldr	r2, [pc, #132]	@ (8001130 <MX_GPIO_Init+0xd0>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <MX_GPIO_Init+0xd0>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <MX_GPIO_Init+0xd0>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001130 <MX_GPIO_Init+0xd0>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_GPIO_Init+0xd0>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010da:	4816      	ldr	r0, [pc, #88]	@ (8001134 <MX_GPIO_Init+0xd4>)
 80010dc:	f003 ff24 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80010e6:	4814      	ldr	r0, [pc, #80]	@ (8001138 <MX_GPIO_Init+0xd8>)
 80010e8:	f003 ff1e 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4619      	mov	r1, r3
 8001104:	480b      	ldr	r0, [pc, #44]	@ (8001134 <MX_GPIO_Init+0xd4>)
 8001106:	f003 fd8b 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800110a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800110e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2302      	movs	r3, #2
 800111a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4619      	mov	r1, r3
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_GPIO_Init+0xd8>)
 8001124:	f003 fd7c 	bl	8004c20 <HAL_GPIO_Init>

}
 8001128:	bf00      	nop
 800112a:	3720      	adds	r7, #32
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000
 8001134:	40011000 	.word	0x40011000
 8001138:	40010c00 	.word	0x40010c00
 800113c:	00000000 	.word	0x00000000

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f003 f9b7 	bl	80044b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f8bb 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f7ff ff87 	bl	8001060 <MX_GPIO_Init>
  MX_DMA_Init();
 8001152:	f7ff fe17 	bl	8000d84 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001156:	f003 f853 	bl	8004200 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800115a:	f002 fe51 	bl	8003e00 <MX_TIM2_Init>
  MX_TIM3_Init();
 800115e:	f002 fec3 	bl	8003ee8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001162:	f002 ff15 	bl	8003f90 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001166:	f003 f875 	bl	8004254 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  init_filter(&leftMotorAverageFilter, 100);
 800116a:	2164      	movs	r1, #100	@ 0x64
 800116c:	4846      	ldr	r0, [pc, #280]	@ (8001288 <main+0x148>)
 800116e:	f006 fcb4 	bl	8007ada <init_filter>
  init_filter(&rightMotorAverageFilter, 100);
 8001172:	2164      	movs	r1, #100	@ 0x64
 8001174:	4845      	ldr	r0, [pc, #276]	@ (800128c <main+0x14c>)
 8001176:	f006 fcb0 	bl	8007ada <init_filter>

  PID_Init(&pid_controller_left_motor,KP,KI,KD,DT,PWM_MIN,PWM_MAX);
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b44      	ldr	r3, [pc, #272]	@ (8001290 <main+0x150>)
 8001180:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001190:	a337      	add	r3, pc, #220	@ (adr r3, 8001270 <main+0x130>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800119a:	a337      	add	r3, pc, #220	@ (adr r3, 8001278 <main+0x138>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001294 <main+0x154>)
 80011aa:	e9cd 2300 	strd	r2, r3, [sp]
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <main+0x158>)
 80011b4:	4839      	ldr	r0, [pc, #228]	@ (800129c <main+0x15c>)
 80011b6:	f006 fcb5 	bl	8007b24 <PID_Init>
  PID_Init(&pid_controller_right_motor,KP,KI,KD,DT,PWM_MIN,PWM_MAX);
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b34      	ldr	r3, [pc, #208]	@ (8001290 <main+0x150>)
 80011c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80011d0:	a327      	add	r3, pc, #156	@ (adr r3, 8001270 <main+0x130>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011da:	a327      	add	r3, pc, #156	@ (adr r3, 8001278 <main+0x138>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <main+0x154>)
 80011ea:	e9cd 2300 	strd	r2, r3, [sp]
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <main+0x158>)
 80011f4:	482a      	ldr	r0, [pc, #168]	@ (80012a0 <main+0x160>)
 80011f6:	f006 fc95 	bl	8007b24 <PID_Init>


  /* Enable motors */
  enable_motor(&motor1);
 80011fa:	482a      	ldr	r0, [pc, #168]	@ (80012a4 <main+0x164>)
 80011fc:	f006 faec 	bl	80077d8 <enable_motor>
  enable_motor(&motor2);
 8001200:	4829      	ldr	r0, [pc, #164]	@ (80012a8 <main+0x168>)
 8001202:	f006 fae9 	bl	80077d8 <enable_motor>

  init_motor_dynamics(&left_motor_dynamics , 0.060 , 45 , 11,&leftMotorAverageFilter);
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <main+0x148>)
 8001208:	9304      	str	r3, [sp, #16]
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <main+0x16c>)
 8001210:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <main+0x170>)
 800121a:	e9cd 2300 	strd	r2, r3, [sp]
 800121e:	a318      	add	r3, pc, #96	@ (adr r3, 8001280 <main+0x140>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	4823      	ldr	r0, [pc, #140]	@ (80012b4 <main+0x174>)
 8001226:	f006 fb23 	bl	8007870 <init_motor_dynamics>
  init_motor_dynamics(&right_motor_dynamics , 0.060 , 45 , 11, &rightMotorAverageFilter);
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <main+0x14c>)
 800122c:	9304      	str	r3, [sp, #16]
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <main+0x16c>)
 8001234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <main+0x170>)
 800123e:	e9cd 2300 	strd	r2, r3, [sp]
 8001242:	a30f      	add	r3, pc, #60	@ (adr r3, 8001280 <main+0x140>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	481b      	ldr	r0, [pc, #108]	@ (80012b8 <main+0x178>)
 800124a:	f006 fb11 	bl	8007870 <init_motor_dynamics>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800124e:	213c      	movs	r1, #60	@ 0x3c
 8001250:	481a      	ldr	r0, [pc, #104]	@ (80012bc <main+0x17c>)
 8001252:	f004 fcff 	bl	8005c54 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001256:	213c      	movs	r1, #60	@ 0x3c
 8001258:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <main+0x180>)
 800125a:	f004 fcfb 	bl	8005c54 <HAL_TIM_Encoder_Start>

  setup();
 800125e:	f001 fe03 	bl	8002e68 <setup>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001262:	f7ff fde7 	bl	8000e34 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001266:	f006 fd87 	bl	8007d78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800126a:	bf00      	nop
 800126c:	e7fd      	b.n	800126a <main+0x12a>
 800126e:	bf00      	nop
 8001270:	47ae147b 	.word	0x47ae147b
 8001274:	3f847ae1 	.word	0x3f847ae1
 8001278:	eb1c432d 	.word	0xeb1c432d
 800127c:	3f1a36e2 	.word	0x3f1a36e2
 8001280:	eb851eb8 	.word	0xeb851eb8
 8001284:	3faeb851 	.word	0x3faeb851
 8001288:	20000980 	.word	0x20000980
 800128c:	200009ec 	.word	0x200009ec
 8001290:	40900000 	.word	0x40900000
 8001294:	40080000 	.word	0x40080000
 8001298:	3ff00000 	.word	0x3ff00000
 800129c:	20000a58 	.word	0x20000a58
 80012a0:	20000ac0 	.word	0x20000ac0
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000010 	.word	0x20000010
 80012ac:	40260000 	.word	0x40260000
 80012b0:	40468000 	.word	0x40468000
 80012b4:	200008e0 	.word	0x200008e0
 80012b8:	20000930 	.word	0x20000930
 80012bc:	200015ec 	.word	0x200015ec
 80012c0:	20001634 	.word	0x20001634

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b090      	sub	sp, #64	@ 0x40
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	2228      	movs	r2, #40	@ 0x28
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f00b f819 	bl	800c30a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f8:	2302      	movs	r3, #2
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001300:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001302:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	4618      	mov	r0, r3
 800130e:	f003 fe23 	bl	8004f58 <HAL_RCC_OscConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001318:	f000 f82c 	bl	8001374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131c:	230f      	movs	r3, #15
 800131e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001320:	2302      	movs	r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800132c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2102      	movs	r1, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f004 f890 	bl	800545c <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001342:	f000 f817 	bl	8001374 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3740      	adds	r7, #64	@ 0x40
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001362:	f003 f8bf 	bl	80044e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40012c00 	.word	0x40012c00

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <Error_Handler+0x8>

08001380 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <_ZN3ros3MsgC1Ev+0x1c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	0800e6bc 	.word	0x0800e6bc

080013c0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
      data()
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffe8 	bl	80013a0 <_ZN3ros3MsgC1Ev>
 80013d0:	4a06      	ldr	r2, [pc, #24]	@ (80013ec <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3304      	adds	r3, #4
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ffd0 	bl	8001380 <_ZN3ros4TimeC1Ev>
    {
    }
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	0800e6a4 	.word	0x0800e6a4

080013f0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6859      	ldr	r1, [r3, #4]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	b2ca      	uxtb	r2, r1
 800140a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	0a19      	lsrs	r1, r3, #8
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3301      	adds	r3, #1
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	4413      	add	r3, r2
 800141a:	b2ca      	uxtb	r2, r1
 800141c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	0c19      	lsrs	r1, r3, #16
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3302      	adds	r3, #2
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	4413      	add	r3, r2
 800142c:	b2ca      	uxtb	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	0e19      	lsrs	r1, r3, #24
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3303      	adds	r3, #3
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	4413      	add	r3, r2
 800143e:	b2ca      	uxtb	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3304      	adds	r3, #4
 8001446:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	4413      	add	r3, r2
 8001452:	b2ca      	uxtb	r2, r1
 8001454:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	0a19      	lsrs	r1, r3, #8
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	b2ca      	uxtb	r2, r1
 8001466:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	0c19      	lsrs	r1, r3, #16
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3302      	adds	r3, #2
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	4413      	add	r3, r2
 8001476:	b2ca      	uxtb	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	0e19      	lsrs	r1, r3, #24
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3303      	adds	r3, #3
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	4413      	add	r3, r2
 8001488:	b2ca      	uxtb	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3304      	adds	r3, #4
 8001490:	60fb      	str	r3, [r7, #12]
      return offset;
 8001492:	68fb      	ldr	r3, [r7, #12]
    }
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	440b      	add	r3, r1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3302      	adds	r3, #2
 80014d8:	6839      	ldr	r1, [r7, #0]
 80014da:	440b      	add	r3, r1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	041b      	lsls	r3, r3, #16
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3303      	adds	r3, #3
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	440b      	add	r3, r1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3304      	adds	r3, #4
 8001500:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3301      	adds	r3, #1
 8001518:	6839      	ldr	r1, [r7, #0]
 800151a:	440b      	add	r3, r1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3302      	adds	r3, #2
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	440b      	add	r3, r1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3303      	adds	r3, #3
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	440b      	add	r3, r1
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	061b      	lsls	r3, r3, #24
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3304      	adds	r3, #4
 8001556:	60fb      	str	r3, [r7, #12]
     return offset;
 8001558:	68fb      	ldr	r3, [r7, #12]
    }
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	4b02      	ldr	r3, [pc, #8]	@ (8001578 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	0800e324 	.word	0x0800e324

0800157c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	4b02      	ldr	r3, [pc, #8]	@ (8001590 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	0800e334 	.word	0x0800e334

08001594 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fefe 	bl	80013a0 <_ZN3ros3MsgC1Ev>
 80015a4:	4a0b      	ldr	r2, [pc, #44]	@ (80015d4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a09      	ldr	r2, [pc, #36]	@ (80015d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015b4:	609a      	str	r2, [r3, #8]
      message_type(""),
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a07      	ldr	r2, [pc, #28]	@ (80015d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015ba:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a06      	ldr	r2, [pc, #24]	@ (80015d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015c0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
    {
    }
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	0800e68c 	.word	0x0800e68c
 80015d8:	0800e358 	.word	0x0800e358

080015dc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	8899      	ldrh	r1, [r3, #4]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	b2ca      	uxtb	r2, r1
 80015f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	889b      	ldrh	r3, [r3, #4]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	b299      	uxth	r1, r3
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	3301      	adds	r3, #1
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	b2ca      	uxtb	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	3302      	adds	r3, #2
 8001610:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe fd9a 	bl	8000150 <strlen>
 800161c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	4413      	add	r3, r2
 8001624:	69b9      	ldr	r1, [r7, #24]
 8001626:	4618      	mov	r0, r3
 8001628:	f001 fc9a 	bl	8002f60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	3304      	adds	r3, #4
 8001630:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	18d0      	adds	r0, r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4619      	mov	r1, r3
 8001640:	f00a ff45 	bl	800c4ce <memcpy>
      offset += length_topic_name;
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4413      	add	r3, r2
 800164a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fd7d 	bl	8000150 <strlen>
 8001656:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	4413      	add	r3, r2
 800165e:	6979      	ldr	r1, [r7, #20]
 8001660:	4618      	mov	r0, r3
 8001662:	f001 fc7d 	bl	8002f60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	18d0      	adds	r0, r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4619      	mov	r1, r3
 800167a:	f00a ff28 	bl	800c4ce <memcpy>
      offset += length_message_type;
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	4413      	add	r3, r2
 8001684:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fd60 	bl	8000150 <strlen>
 8001690:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	6939      	ldr	r1, [r7, #16]
 800169a:	4618      	mov	r0, r3
 800169c:	f001 fc60 	bl	8002f60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	3304      	adds	r3, #4
 80016a4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	18d0      	adds	r0, r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4619      	mov	r1, r3
 80016b4:	f00a ff0b 	bl	800c4ce <memcpy>
      offset += length_md5sum;
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4413      	add	r3, r2
 80016be:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80016c6:	68f9      	ldr	r1, [r7, #12]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	b2ca      	uxtb	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	0a19      	lsrs	r1, r3, #8
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3301      	adds	r3, #1
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	4413      	add	r3, r2
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	0c19      	lsrs	r1, r3, #16
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3302      	adds	r3, #2
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	4413      	add	r3, r2
 80016ee:	b2ca      	uxtb	r2, r1
 80016f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	0e19      	lsrs	r1, r3, #24
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3303      	adds	r3, #3
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	b2ca      	uxtb	r2, r1
 8001700:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3304      	adds	r3, #4
 8001706:	61fb      	str	r3, [r7, #28]
      return offset;
 8001708:	69fb      	ldr	r3, [r7, #28]
    }
 800170a:	4618      	mov	r0, r3
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001712:	b580      	push	{r7, lr}
 8001714:	b08a      	sub	sp, #40	@ 0x28
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	889b      	ldrh	r3, [r3, #4]
 8001732:	b21a      	sxth	r2, r3
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	3301      	adds	r3, #1
 8001738:	6839      	ldr	r1, [r7, #0]
 800173a:	440b      	add	r3, r1
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21b      	sxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b21b      	sxth	r3, r3
 8001746:	b29a      	uxth	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	3302      	adds	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	441a      	add	r2, r3
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fc1c 	bl	8002f9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	3304      	adds	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
 800176e:	e00b      	b.n	8001788 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	441a      	add	r2, r3
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	3b01      	subs	r3, #1
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	440b      	add	r3, r1
 800177e:	7812      	ldrb	r2, [r2, #0]
 8001780:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	3301      	adds	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	4413      	add	r3, r2
 800178e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001790:	429a      	cmp	r2, r3
 8001792:	d3ed      	bcc.n	8001770 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	4413      	add	r3, r2
 800179a:	3b01      	subs	r3, #1
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	441a      	add	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	4413      	add	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	441a      	add	r2, r3
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 fbe9 	bl	8002f9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	3304      	adds	r3, #4
 80017ce:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	623b      	str	r3, [r7, #32]
 80017d4:	e00b      	b.n	80017ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	441a      	add	r2, r3
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	440b      	add	r3, r1
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	3301      	adds	r3, #1
 80017ec:	623b      	str	r3, [r7, #32]
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4413      	add	r3, r2
 80017f4:	6a3a      	ldr	r2, [r7, #32]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3ed      	bcc.n	80017d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4413      	add	r3, r2
 8001800:	3b01      	subs	r3, #1
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	3b01      	subs	r3, #1
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	441a      	add	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4413      	add	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	441a      	add	r2, r3
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f001 fbb6 	bl	8002f9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	3304      	adds	r3, #4
 8001834:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e00b      	b.n	8001854 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	441a      	add	r2, r3
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b01      	subs	r3, #1
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	440b      	add	r3, r1
 800184a:	7812      	ldrb	r2, [r2, #0]
 800184c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	429a      	cmp	r2, r3
 800185e:	d3ed      	bcc.n	800183c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	3b01      	subs	r3, #1
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	4413      	add	r3, r2
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	3b01      	subs	r3, #1
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	441a      	add	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4413      	add	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	6839      	ldr	r1, [r7, #0]
 800188e:	440a      	add	r2, r1
 8001890:	7812      	ldrb	r2, [r2, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	3301      	adds	r3, #1
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	440b      	add	r3, r1
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	3302      	adds	r3, #2
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	440b      	add	r3, r1
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	3303      	adds	r3, #3
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	440b      	add	r3, r1
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	061b      	lsls	r3, r3, #24
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	3304      	adds	r3, #4
 80018d6:	61bb      	str	r3, [r7, #24]
     return offset;
 80018d8:	69bb      	ldr	r3, [r7, #24]
    }
 80018da:	4618      	mov	r0, r3
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	4b02      	ldr	r3, [pc, #8]	@ (80018f8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	0800e35c 	.word	0x0800e35c

080018fc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	4b02      	ldr	r3, [pc, #8]	@ (8001910 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	0800e378 	.word	0x0800e378

08001914 <_ZN14rosserial_msgs3LogC1Ev>:
	};
	enum {
		FATAL = 4
	};

	Log() :
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
			level(0), msg("") {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fd3e 	bl	80013a0 <_ZN3ros3MsgC1Ev>
 8001924:	4a06      	ldr	r2, [pc, #24]	@ (8001940 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	711a      	strb	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001934:	609a      	str	r2, [r3, #8]
	}
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	0800e674 	.word	0x0800e674
 8001944:	0800e358 	.word	0x0800e358

08001948 <_ZNK14rosserial_msgs3Log9serializeEPh>:

	virtual int serialize(unsigned char *outbuffer) const override
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
		*(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	7912      	ldrb	r2, [r2, #4]
 8001960:	701a      	strb	r2, [r3, #0]
		offset += sizeof(this->level);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3301      	adds	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
		uint32_t length_msg = strlen(this->msg);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fbef 	bl	8000150 <strlen>
 8001972:	60b8      	str	r0, [r7, #8]
		varToArr(outbuffer + offset, length_msg);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	4618      	mov	r0, r3
 800197e:	f001 faef 	bl	8002f60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
		offset += 4;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3304      	adds	r3, #4
 8001986:	60fb      	str	r3, [r7, #12]
		memcpy(outbuffer + offset, this->msg, length_msg);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	18d0      	adds	r0, r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	4619      	mov	r1, r3
 8001996:	f00a fd9a 	bl	800c4ce <memcpy>
		offset += length_msg;
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
		return offset;
 80019a2:	68fb      	ldr	r3, [r7, #12]
	}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_ZN14rosserial_msgs3Log11deserializeEPh>:

	virtual int deserialize(unsigned char *inbuffer) override
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
		this->level = ((uint8_t) (*(inbuffer + offset)));
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	711a      	strb	r2, [r3, #4]
		offset += sizeof(this->level);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3301      	adds	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
		uint32_t length_msg;
		arrToVar(length_msg, (inbuffer + offset));
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	441a      	add	r2, r3
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f001 fadf 	bl	8002f9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
		offset += 4;
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	3304      	adds	r3, #4
 80019e2:	613b      	str	r3, [r7, #16]
		for (unsigned int k = offset; k < offset + length_msg; ++k) {
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00b      	b.n	8001a02 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
			inbuffer[k - 1] = inbuffer[k];
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	441a      	add	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	440b      	add	r3, r1
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	701a      	strb	r2, [r3, #0]
		for (unsigned int k = offset; k < offset + length_msg; ++k) {
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d3ed      	bcc.n	80019ea <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
		}
		inbuffer[offset + length_msg - 1] = 0;
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	3b01      	subs	r3, #1
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
		this->msg = (char*) (inbuffer + offset - 1);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	441a      	add	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]
		offset += length_msg;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
		return offset;
 8001a32:	693b      	ldr	r3, [r7, #16]
	}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_ZN14rosserial_msgs3Log7getTypeEv>:

	virtual const char* getType() override {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
		return "rosserial_msgs/Log";
 8001a44:	4b02      	ldr	r3, [pc, #8]	@ (8001a50 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
	}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	0800e39c 	.word	0x0800e39c

08001a54 <_ZN14rosserial_msgs3Log6getMD5Ev>:
	;
	virtual const char* getMD5() override {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
		return "11abd731c25933261cd6183bd12d6295";
 8001a5c:	4b02      	ldr	r3, [pc, #8]	@ (8001a68 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
	}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	0800e3b0 	.word	0x0800e3b0

08001a6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fc92 	bl	80013a0 <_ZN3ros3MsgC1Ev>
 8001a7c:	4a11      	ldr	r2, [pc, #68]	@ (8001ac4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	0800e65c 	.word	0x0800e65c

08001ac8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6859      	ldr	r1, [r3, #4]
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	b2ca      	uxtb	r2, r1
 8001ae2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	0a19      	lsrs	r1, r3, #8
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	3301      	adds	r3, #1
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	4413      	add	r3, r2
 8001af2:	b2ca      	uxtb	r2, r1
 8001af4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	0c19      	lsrs	r1, r3, #16
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	3302      	adds	r3, #2
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	b2ca      	uxtb	r2, r1
 8001b06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	0e19      	lsrs	r1, r3, #24
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	3303      	adds	r3, #3
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
 8001b24:	e02a      	b.n	8001b7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001b34:	6939      	ldr	r1, [r7, #16]
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	b2ca      	uxtb	r2, r1
 8001b3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	0a19      	lsrs	r1, r3, #8
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	3301      	adds	r3, #1
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b2ca      	uxtb	r2, r1
 8001b4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	0c19      	lsrs	r1, r3, #16
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	3302      	adds	r3, #2
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b2ca      	uxtb	r2, r1
 8001b5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	0e19      	lsrs	r1, r3, #24
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	3303      	adds	r3, #3
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	3304      	adds	r3, #4
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	623b      	str	r3, [r7, #32]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	6a3a      	ldr	r2, [r7, #32]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3cf      	bcc.n	8001b26 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6919      	ldr	r1, [r3, #16]
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	b2ca      	uxtb	r2, r1
 8001b92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	0a19      	lsrs	r1, r3, #8
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b2ca      	uxtb	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	0c19      	lsrs	r1, r3, #16
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	3302      	adds	r3, #2
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b2ca      	uxtb	r2, r1
 8001bb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	0e19      	lsrs	r1, r3, #24
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	3303      	adds	r3, #3
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	3304      	adds	r3, #4
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	e02a      	b.n	8001c2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001be4:	68f9      	ldr	r1, [r7, #12]
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	0a19      	lsrs	r1, r3, #8
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2ca      	uxtb	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	0c19      	lsrs	r1, r3, #16
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	3302      	adds	r3, #2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	0e19      	lsrs	r1, r3, #24
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	3303      	adds	r3, #3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	3304      	adds	r3, #4
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3cf      	bcc.n	8001bd6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69d9      	ldr	r1, [r3, #28]
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	b2ca      	uxtb	r2, r1
 8001c42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	0a19      	lsrs	r1, r3, #8
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	b2ca      	uxtb	r2, r1
 8001c54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	0c19      	lsrs	r1, r3, #16
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	3302      	adds	r3, #2
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	b2ca      	uxtb	r2, r1
 8001c66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	0e19      	lsrs	r1, r3, #24
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	3303      	adds	r3, #3
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	b2ca      	uxtb	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	e027      	b.n	8001cd6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fa5c 	bl	8000150 <strlen>
 8001c98:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	6979      	ldr	r1, [r7, #20]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f001 f95c 	bl	8002f60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	3304      	adds	r3, #4
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	18d0      	adds	r0, r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f00a fc03 	bl	800c4ce <memcpy>
      offset += length_stringsi;
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	4413      	add	r3, r2
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d3d2      	bcc.n	8001c86 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3728      	adds	r7, #40	@ 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b08e      	sub	sp, #56	@ 0x38
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d04:	3301      	adds	r3, #1
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	6a3a      	ldr	r2, [r7, #32]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d16:	3302      	adds	r3, #2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	6a3a      	ldr	r2, [r7, #32]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d28:	3303      	adds	r3, #3
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	061b      	lsls	r3, r3, #24
 8001d32:	6a3a      	ldr	r2, [r7, #32]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	6a3a      	ldr	r2, [r7, #32]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d90a      	bls.n	8001d5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f009 fd22 	bl	800b79c <realloc>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a3a      	ldr	r2, [r7, #32]
 8001d62:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d68:	e035      	b.n	8001dd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d72:	6839      	ldr	r1, [r7, #0]
 8001d74:	440a      	add	r2, r1
 8001d76:	7812      	ldrb	r2, [r2, #0]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d80:	3301      	adds	r3, #1
 8001d82:	6839      	ldr	r1, [r7, #0]
 8001d84:	440b      	add	r3, r1
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d92:	3302      	adds	r3, #2
 8001d94:	6839      	ldr	r1, [r7, #0]
 8001d96:	440b      	add	r3, r1
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	041b      	lsls	r3, r3, #16
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da4:	3303      	adds	r3, #3
 8001da6:	6839      	ldr	r1, [r7, #0]
 8001da8:	440b      	add	r3, r1
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dba:	3304      	adds	r3, #4
 8001dbc:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d3c4      	bcc.n	8001d6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dec:	3301      	adds	r3, #1
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dfe:	3302      	adds	r3, #2
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	041b      	lsls	r3, r3, #16
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e10:	3303      	adds	r3, #3
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e22:	3304      	adds	r3, #4
 8001e24:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d90a      	bls.n	8001e46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699a      	ldr	r2, [r3, #24]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f009 fcae 	bl	800b79c <realloc>
 8001e40:	4602      	mov	r2, r0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e50:	e035      	b.n	8001ebe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e5a:	6839      	ldr	r1, [r7, #0]
 8001e5c:	440a      	add	r2, r1
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e68:	3301      	adds	r3, #1
 8001e6a:	6839      	ldr	r1, [r7, #0]
 8001e6c:	440b      	add	r3, r1
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	440b      	add	r3, r1
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	440b      	add	r3, r1
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	3214      	adds	r2, #20
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eba:	3301      	adds	r3, #1
 8001ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d3c4      	bcc.n	8001e52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	4413      	add	r3, r2
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	041b      	lsls	r3, r3, #16
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef8:	3303      	adds	r3, #3
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d90a      	bls.n	8001f2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4619      	mov	r1, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f009 fc3a 	bl	800b79c <realloc>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f38:	e03e      	b.n	8001fb8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	441a      	add	r2, r3
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 f828 	bl	8002f9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4e:	3304      	adds	r3, #4
 8001f50:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f56:	e00b      	b.n	8001f70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	441a      	add	r2, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	3b01      	subs	r3, #1
 8001f62:	6839      	ldr	r1, [r7, #0]
 8001f64:	440b      	add	r3, r1
 8001f66:	7812      	ldrb	r2, [r2, #0]
 8001f68:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d3ed      	bcc.n	8001f58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001f7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4413      	add	r3, r2
 8001f82:	3b01      	subs	r3, #1
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	441a      	add	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001f98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	3220      	adds	r2, #32
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3bb      	bcc.n	8001f3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3738      	adds	r7, #56	@ 0x38
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	4b02      	ldr	r3, [pc, #8]	@ (8001fe0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	0800e580 	.word	0x0800e580

08001fe4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	4b02      	ldr	r3, [pc, #8]	@ (8001ff8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	0800e3d4 	.word	0x0800e3d4

08001ffc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	611a      	str	r2, [r3, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68d8      	ldr	r0, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6891      	ldr	r1, [r2, #8]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4798      	blx	r3
 8002046:	4603      	mov	r3, r0
  };
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
  }
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800207c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
	...

0800208c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <_ZN13STM32HardwareC1Ev+0x34>)
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	2000167c 	.word	0x2000167c

080020c4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f804 	bl	80020da <_ZN13STM32Hardware10reset_rbufEv>
    }
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3304      	adds	r3, #4
 80020ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ee:	4619      	mov	r1, r3
 80020f0:	f004 fb6a 	bl	80067c8 <HAL_UART_Receive_DMA>
    }
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_ZN13STM32Hardware4readEv>:

    int read(){
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002108:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ffa8 	bl	8002066 <_ZN13STM32Hardware10getRdmaIndEv>
 8002116:	4603      	mov	r3, r0
 8002118:	429c      	cmp	r4, r3
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d012      	beq.n	800214c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800212c:	1c59      	adds	r1, r3, #1
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	791b      	ldrb	r3, [r3, #4]
 800213a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 800214c:	68fb      	ldr	r3, [r7, #12]
    }
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}
	...

08002158 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b20      	cmp	r3, #32
 800216c:	d108      	bne.n	8002180 <_ZN13STM32Hardware5flushEv+0x28>
 800216e:	4b28      	ldr	r3, [pc, #160]	@ (8002210 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	f083 0301 	eor.w	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <_ZN13STM32Hardware5flushEv+0x28>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <_ZN13STM32Hardware5flushEv+0x2a>
 8002180:	2300      	movs	r3, #0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d03f      	beq.n	8002206 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002198:	429a      	cmp	r2, r3
 800219a:	d031      	beq.n	8002200 <_ZN13STM32Hardware5flushEv+0xa8>
            uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d20a      	bcs.n	80021c2 <_ZN13STM32Hardware5flushEv+0x6a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	b29b      	uxth	r3, r3
 80021c0:	e006      	b.n	80021d0 <_ZN13STM32Hardware5flushEv+0x78>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80021dc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	89fa      	ldrh	r2, [r7, #14]
 80021e6:	4619      	mov	r1, r3
 80021e8:	f004 fa7e 	bl	80066e8 <HAL_UART_Transmit_DMA>
            tfind = (tfind + len) & (tbuflen - 1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80021f2:	89fb      	ldrh	r3, [r7, #14]
 80021f4:	4413      	add	r3, r2
 80021f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
      }
    }
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000b40 	.word	0x20000b40

08002214 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
      uint16_t n = length;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	b29b      	uxth	r3, r3
 8002224:	82bb      	strh	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002226:	8abb      	ldrh	r3, [r7, #20]
 8002228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800222c:	d803      	bhi.n	8002236 <_ZN13STM32Hardware5writeEPhi+0x22>
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	e001      	b.n	800223a <_ZN13STM32Hardware5writeEPhi+0x26>
 8002236:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800223a:	82bb      	strh	r3, [r7, #20]

      uint16_t n_tail = n <= (tbuflen - twind) ? n : tbuflen - twind;
 800223c:	8abb      	ldrh	r3, [r7, #20]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002246:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800224a:	4293      	cmp	r3, r2
 800224c:	bf28      	it	cs
 800224e:	4613      	movcs	r3, r2
 8002250:	82fb      	strh	r3, [r7, #22]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002258:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	8afa      	ldrh	r2, [r7, #22]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f00a f932 	bl	800c4ce <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002270:	8aba      	ldrh	r2, [r7, #20]
 8002272:	4413      	add	r3, r2
 8002274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 800227e:	8abb      	ldrh	r3, [r7, #20]
 8002280:	8afa      	ldrh	r2, [r7, #22]
 8002282:	429a      	cmp	r2, r3
 8002284:	d00c      	beq.n	80022a0 <_ZN13STM32Hardware5writeEPhi+0x8c>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 800228c:	8afb      	ldrh	r3, [r7, #22]
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	18d1      	adds	r1, r2, r3
 8002292:	8abb      	ldrh	r3, [r7, #20]
 8002294:	461a      	mov	r2, r3
 8002296:	8afb      	ldrh	r3, [r7, #22]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	461a      	mov	r2, r3
 800229c:	f00a f917 	bl	800c4ce <memcpy>
      }

      flush();
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff ff59 	bl	8002158 <_ZN13STM32Hardware5flushEv>
    }
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	f002 f927 	bl	8004508 <HAL_GetTick>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZN8std_msgs6StringC1Ev>:
class String: public ros::Msg {
public:
	typedef const char *_data_type;
	_data_type data;

	String() :
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
			data("") {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f866 	bl	80013a0 <_ZN3ros3MsgC1Ev>
 80022d4:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <_ZN8std_msgs6StringC1Ev+0x28>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80022de:	605a      	str	r2, [r3, #4]
	}
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	0800e618 	.word	0x0800e618
 80022f0:	0800e358 	.word	0x0800e358

080022f4 <_ZNK8std_msgs6String9serializeEPh>:

	virtual int serialize(unsigned char *outbuffer) const override
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
		uint32_t length_data = strlen(this->data);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fd ff22 	bl	8000150 <strlen>
 800230c:	60b8      	str	r0, [r7, #8]
		varToArr(outbuffer + offset, length_data);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	4413      	add	r3, r2
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fe22 	bl	8002f60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
		offset += 4;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3304      	adds	r3, #4
 8002320:	60fb      	str	r3, [r7, #12]
		memcpy(outbuffer + offset, this->data, length_data);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	18d0      	adds	r0, r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	4619      	mov	r1, r3
 8002330:	f00a f8cd 	bl	800c4ce <memcpy>
		offset += length_data;
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	4413      	add	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
		return offset;
 800233c:	68fb      	ldr	r3, [r7, #12]
	}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_ZN8std_msgs6String11deserializeEPh>:

	virtual int deserialize(unsigned char *inbuffer) override
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
		uint32_t length_data;
		arrToVar(length_data, (inbuffer + offset));
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	441a      	add	r2, r3
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fe1b 	bl	8002f9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
		offset += 4;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	3304      	adds	r3, #4
 800236a:	613b      	str	r3, [r7, #16]
		for (unsigned int k = offset; k < offset + length_data; ++k) {
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e00b      	b.n	800238a <_ZN8std_msgs6String11deserializeEPh+0x44>
			inbuffer[k - 1] = inbuffer[k];
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	441a      	add	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3b01      	subs	r3, #1
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	440b      	add	r3, r1
 8002380:	7812      	ldrb	r2, [r2, #0]
 8002382:	701a      	strb	r2, [r3, #0]
		for (unsigned int k = offset; k < offset + length_data; ++k) {
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	429a      	cmp	r2, r3
 8002394:	d3ed      	bcc.n	8002372 <_ZN8std_msgs6String11deserializeEPh+0x2c>
		}
		inbuffer[offset + length_data - 1] = 0;
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	3b01      	subs	r3, #1
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
		this->data = (char*) (inbuffer + offset - 1);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	441a      	add	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	605a      	str	r2, [r3, #4]
		offset += length_data;
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
		return offset;
 80023ba:	693b      	ldr	r3, [r7, #16]
	}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZN8std_msgs6String7getTypeEv>:

	virtual const char* getType() override {
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
		return "std_msgs/String";
 80023cc:	4b02      	ldr	r3, [pc, #8]	@ (80023d8 <_ZN8std_msgs6String7getTypeEv+0x14>)
	}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	0800e3f8 	.word	0x0800e3f8

080023dc <_ZN8std_msgs6String6getMD5Ev>:
	;
	virtual const char* getMD5() override {
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
		return "992ce8a1687cec8c8bd883ec73ca41d1";
 80023e4:	4b02      	ldr	r3, [pc, #8]	@ (80023f0 <_ZN8std_msgs6String6getMD5Ev+0x14>)
	}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	0800e408 	.word	0x0800e408

080023f4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
	typedef uint32_t _size_type;
	_size_type size;
	typedef uint32_t _stride_type;
	_stride_type stride;

	MultiArrayDimension() :
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
			label(""), size(0), stride(0) {
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe ffce 	bl	80013a0 <_ZN3ros3MsgC1Ev>
 8002404:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a07      	ldr	r2, [pc, #28]	@ (800242c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	60da      	str	r2, [r3, #12]
	}
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	0800e600 	.word	0x0800e600
 800242c:	0800e358 	.word	0x0800e358

08002430 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

	virtual int serialize(unsigned char *outbuffer) const override
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
		uint32_t length_label = strlen(this->label);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fd fe84 	bl	8000150 <strlen>
 8002448:	60b8      	str	r0, [r7, #8]
		varToArr(outbuffer + offset, length_label);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fd84 	bl	8002f60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
		offset += 4;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3304      	adds	r3, #4
 800245c:	60fb      	str	r3, [r7, #12]
		memcpy(outbuffer + offset, this->label, length_label);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	18d0      	adds	r0, r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	4619      	mov	r1, r3
 800246c:	f00a f82f 	bl	800c4ce <memcpy>
		offset += length_label;
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4413      	add	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
		*(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6899      	ldr	r1, [r3, #8]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4413      	add	r3, r2
 8002482:	b2ca      	uxtb	r2, r1
 8002484:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0a19      	lsrs	r1, r3, #8
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3301      	adds	r3, #1
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	4413      	add	r3, r2
 8002494:	b2ca      	uxtb	r2, r1
 8002496:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	0c19      	lsrs	r1, r3, #16
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3302      	adds	r3, #2
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	b2ca      	uxtb	r2, r1
 80024a8:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0e19      	lsrs	r1, r3, #24
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3303      	adds	r3, #3
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	b2ca      	uxtb	r2, r1
 80024ba:	701a      	strb	r2, [r3, #0]
		offset += sizeof(this->size);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3304      	adds	r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
		*(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68d9      	ldr	r1, [r3, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	b2ca      	uxtb	r2, r1
 80024ce:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a19      	lsrs	r1, r3, #8
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3301      	adds	r3, #1
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	b2ca      	uxtb	r2, r1
 80024e0:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	0c19      	lsrs	r1, r3, #16
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3302      	adds	r3, #2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	b2ca      	uxtb	r2, r1
 80024f2:	701a      	strb	r2, [r3, #0]
		*(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0e19      	lsrs	r1, r3, #24
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3303      	adds	r3, #3
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4413      	add	r3, r2
 8002502:	b2ca      	uxtb	r2, r1
 8002504:	701a      	strb	r2, [r3, #0]
		offset += sizeof(this->stride);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3304      	adds	r3, #4
 800250a:	60fb      	str	r3, [r7, #12]
		return offset;
 800250c:	68fb      	ldr	r3, [r7, #12]
	}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

	virtual int deserialize(unsigned char *inbuffer) override
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
	{
		int offset = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
		uint32_t length_label;
		arrToVar(length_label, (inbuffer + offset));
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	441a      	add	r2, r3
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fd33 	bl	8002f9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
		offset += 4;
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	3304      	adds	r3, #4
 800253a:	613b      	str	r3, [r7, #16]
		for (unsigned int k = offset; k < offset + length_label; ++k) {
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e00b      	b.n	800255a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
			inbuffer[k - 1] = inbuffer[k];
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	441a      	add	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3b01      	subs	r3, #1
 800254c:	6839      	ldr	r1, [r7, #0]
 800254e:	440b      	add	r3, r1
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	701a      	strb	r2, [r3, #0]
		for (unsigned int k = offset; k < offset + length_label; ++k) {
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	429a      	cmp	r2, r3
 8002564:	d3ed      	bcc.n	8002542 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
		}
		inbuffer[offset + length_label - 1] = 0;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	3b01      	subs	r3, #1
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	4413      	add	r3, r2
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
		this->label = (char*) (inbuffer + offset - 1);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	3b01      	subs	r3, #1
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	441a      	add	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	605a      	str	r2, [r3, #4]
		offset += length_label;
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
		this->size = ((uint32_t) (*(inbuffer + offset)));
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	609a      	str	r2, [r3, #8]
		this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	3301      	adds	r3, #1
 80025a0:	6839      	ldr	r1, [r7, #0]
 80025a2:	440b      	add	r3, r1
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	609a      	str	r2, [r3, #8]
		this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	3302      	adds	r3, #2
 80025b6:	6839      	ldr	r1, [r7, #0]
 80025b8:	440b      	add	r3, r1
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	609a      	str	r2, [r3, #8]
		this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	3303      	adds	r3, #3
 80025cc:	6839      	ldr	r1, [r7, #0]
 80025ce:	440b      	add	r3, r1
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	061b      	lsls	r3, r3, #24
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	609a      	str	r2, [r3, #8]
		offset += sizeof(this->size);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	3304      	adds	r3, #4
 80025de:	613b      	str	r3, [r7, #16]
		this->stride = ((uint32_t) (*(inbuffer + offset)));
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	60da      	str	r2, [r3, #12]
		this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	3301      	adds	r3, #1
 80025f6:	6839      	ldr	r1, [r7, #0]
 80025f8:	440b      	add	r3, r1
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	60da      	str	r2, [r3, #12]
		this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	3302      	adds	r3, #2
 800260c:	6839      	ldr	r1, [r7, #0]
 800260e:	440b      	add	r3, r1
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60da      	str	r2, [r3, #12]
		this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	3303      	adds	r3, #3
 8002622:	6839      	ldr	r1, [r7, #0]
 8002624:	440b      	add	r3, r1
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	60da      	str	r2, [r3, #12]
		offset += sizeof(this->stride);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	3304      	adds	r3, #4
 8002634:	613b      	str	r3, [r7, #16]
		return offset;
 8002636:	693b      	ldr	r3, [r7, #16]
	}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

	virtual const char* getType() override {
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
		return "std_msgs/MultiArrayDimension";
 8002648:	4b02      	ldr	r3, [pc, #8]	@ (8002654 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x14>)
	}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	0800e42c 	.word	0x0800e42c

08002658 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
	;
	virtual const char* getMD5() override {
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
		return "4cd0c83a8683deae40ecdac60e53bfa8";
 8002660:	4b02      	ldr	r3, [pc, #8]	@ (800266c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x14>)
	}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	0800e44c 	.word	0x0800e44c

08002670 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fe90 	bl	80013a0 <_ZN3ros3MsgC1Ev>
 8002680:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3308      	adds	r3, #8
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff feaf 	bl	80023f4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
      data_offset(0)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
    {
    }
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	0800e5e8 	.word	0x0800e5e8

080026b0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	b2ca      	uxtb	r2, r1
 80026ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0a19      	lsrs	r1, r3, #8
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	b2ca      	uxtb	r2, r1
 80026dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0c19      	lsrs	r1, r3, #16
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3302      	adds	r3, #2
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	b2ca      	uxtb	r2, r1
 80026ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0e19      	lsrs	r1, r3, #24
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3303      	adds	r3, #3
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	b2ca      	uxtb	r2, r1
 8002700:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3304      	adds	r3, #4
 8002706:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	e017      	b.n	800273e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	18d0      	adds	r0, r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	4413      	add	r3, r2
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	6839      	ldr	r1, [r7, #0]
 800272a:	440a      	add	r2, r1
 800272c:	4611      	mov	r1, r2
 800272e:	4798      	blx	r3
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3301      	adds	r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	d3e2      	bcc.n	800270e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69d9      	ldr	r1, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	4413      	add	r3, r2
 8002752:	b2ca      	uxtb	r2, r1
 8002754:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	0a19      	lsrs	r1, r3, #8
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3301      	adds	r3, #1
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	4413      	add	r3, r2
 8002764:	b2ca      	uxtb	r2, r1
 8002766:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	0c19      	lsrs	r1, r3, #16
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3302      	adds	r3, #2
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	4413      	add	r3, r2
 8002776:	b2ca      	uxtb	r2, r1
 8002778:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	0e19      	lsrs	r1, r3, #24
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3303      	adds	r3, #3
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	4413      	add	r3, r2
 8002788:	b2ca      	uxtb	r2, r1
 800278a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3304      	adds	r3, #4
 8002790:	60fb      	str	r3, [r7, #12]
      return offset;
 8002792:	68fb      	ldr	r3, [r7, #12]
    }
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <_ZN3ros3MsgaSERKS0_>:
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <_ZN8std_msgs19MultiArrayDimensionaSERKS0_>:
class MultiArrayDimension: public ros::Msg {
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ffea 	bl	800279c <_ZN3ros3MsgaSERKS0_>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	60da      	str	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80027ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ec:	b087      	sub	sp, #28
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3302      	adds	r3, #2
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4413      	add	r3, r2
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3303      	adds	r3, #3
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

      offset += sizeof(this->dim_length);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3304      	adds	r3, #4
 800283c:	617b      	str	r3, [r7, #20]

      if(dim_lengthT > dim_length){
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d922      	bls.n	800288e <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xa4>
    	  delete[] this->dim;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x70>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4618      	mov	r0, r3
 8002856:	f007 ff89 	bl	800a76c <_ZdaPv>
    	  this->dim = new std_msgs::MultiArrayDimension[dim_lengthT];
 800285a:	68fc      	ldr	r4, [r7, #12]
 800285c:	f1b4 6f00 	cmp.w	r4, #134217728	@ 0x8000000
 8002860:	d201      	bcs.n	8002866 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7c>
 8002862:	0123      	lsls	r3, r4, #4
 8002864:	e001      	b.n	800286a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
 8002866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800286a:	4618      	mov	r0, r3
 800286c:	f007 ff80 	bl	800a770 <_Znaj>
 8002870:	4603      	mov	r3, r0
 8002872:	461e      	mov	r6, r3
 8002874:	4635      	mov	r5, r6
 8002876:	1e63      	subs	r3, r4, #1
 8002878:	461c      	mov	r4, r3
 800287a:	e004      	b.n	8002886 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x9c>
 800287c:	4628      	mov	r0, r5
 800287e:	f7ff fdb9 	bl	80023f4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002882:	3c01      	subs	r4, #1
 8002884:	3510      	adds	r5, #16
 8002886:	2c00      	cmp	r4, #0
 8002888:	daf8      	bge.n	800287c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x92>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	619e      	str	r6, [r3, #24]
      }

      dim_length = dim_lengthT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]

      for( uint32_t i = 0; i < dim_length; i++){
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	e01a      	b.n	80028d0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xe6>
    	  offset += this->st_dim.deserialize(inbuffer + offset);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f103 0008 	add.w	r0, r3, #8
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7ff fe35 	bl	8002516 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 80028ac:	4602      	mov	r2, r0
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	4413      	add	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
    	  this->dim[i] = this->st_dim;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	441a      	add	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3308      	adds	r3, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f7ff ff74 	bl	80027b2 <_ZN8std_msgs19MultiArrayDimensionaSERKS0_>
      for( uint32_t i = 0; i < dim_length; i++){
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	3301      	adds	r3, #1
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3df      	bcc.n	800289a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb0>
      }

      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	3301      	adds	r3, #1
 80028f0:	6839      	ldr	r1, [r7, #0]
 80028f2:	440b      	add	r3, r1
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3302      	adds	r3, #2
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	440b      	add	r3, r1
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	041b      	lsls	r3, r3, #16
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3303      	adds	r3, #3
 800291c:	6839      	ldr	r1, [r7, #0]
 800291e:	440b      	add	r3, r1
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	061b      	lsls	r3, r3, #24
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	61da      	str	r2, [r3, #28]

      offset += sizeof(this->data_offset);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3304      	adds	r3, #4
 800292e:	617b      	str	r3, [r7, #20]
      return offset;
 8002930:	697b      	ldr	r3, [r7, #20]
    }
 8002932:	4618      	mov	r0, r3
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800293c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	4b02      	ldr	r3, [pc, #8]	@ (8002950 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x14>)
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	0800e470 	.word	0x0800e470

08002954 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	4b02      	ldr	r3, [pc, #8]	@ (8002968 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x14>)
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	0800e48c 	.word	0x0800e48c

0800296c <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fd12 	bl	80013a0 <_ZN3ros3MsgC1Ev>
 800297c:	4a0b      	ldr	r2, [pc, #44]	@ (80029ac <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	601a      	str	r2, [r3, #0]
      layout(),
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fe72 	bl	8002670 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	629a      	str	r2, [r3, #40]	@ 0x28
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
    }
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	0800e5d0 	.word	0x0800e5d0

080029b0 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	1d18      	adds	r0, r3, #4
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	f7ff fe71 	bl	80026b0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80029ce:	4602      	mov	r2, r0
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	4413      	add	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	4413      	add	r3, r2
 80029e0:	b2ca      	uxtb	r2, r1
 80029e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	0a19      	lsrs	r1, r3, #8
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	b2ca      	uxtb	r2, r1
 80029f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	0c19      	lsrs	r1, r3, #16
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3302      	adds	r3, #2
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	b2ca      	uxtb	r2, r1
 8002a06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	0e19      	lsrs	r1, r3, #24
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3303      	adds	r3, #3
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	b2ca      	uxtb	r2, r1
 8002a18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	e02a      	b.n	8002a7c <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8002a34:	68f9      	ldr	r1, [r7, #12]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	b2ca      	uxtb	r2, r1
 8002a3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	0a19      	lsrs	r1, r3, #8
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3301      	adds	r3, #1
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	b2ca      	uxtb	r2, r1
 8002a4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	0c19      	lsrs	r1, r3, #16
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3302      	adds	r3, #2
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	b2ca      	uxtb	r2, r1
 8002a5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0e19      	lsrs	r1, r3, #24
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3303      	adds	r3, #3
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	b2ca      	uxtb	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3304      	adds	r3, #4
 8002a74:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d3cf      	bcc.n	8002a26 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8002a86:	697b      	ldr	r3, [r7, #20]
    }
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	1d18      	adds	r0, r3, #4
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f7ff fe9e 	bl	80027ea <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	3303      	adds	r3, #3
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	061b      	lsls	r3, r3, #24
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3304      	adds	r3, #4
 8002afa:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d90a      	bls.n	8002b1c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4610      	mov	r0, r2
 8002b12:	f008 fe43 	bl	800b79c <realloc>
 8002b16:	4602      	mov	r2, r0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      data_length = data_lengthT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	e035      	b.n	8002b94 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	6839      	ldr	r1, [r7, #0]
 8002b32:	440a      	add	r2, r1
 8002b34:	7812      	ldrb	r2, [r2, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	6839      	ldr	r1, [r7, #0]
 8002b42:	440b      	add	r3, r1
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3302      	adds	r3, #2
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	440b      	add	r3, r1
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3303      	adds	r3, #3
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	440b      	add	r3, r1
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	629a      	str	r2, [r3, #40]	@ 0x28
      offset += sizeof(this->st_data);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	3228      	adds	r2, #40	@ 0x28
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	3301      	adds	r3, #1
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d3c4      	bcc.n	8002b28 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8002b9e:	697b      	ldr	r3, [r7, #20]
    }
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	4b02      	ldr	r3, [pc, #8]	@ (8002bbc <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x14>)
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	0800e4b0 	.word	0x0800e4b0

08002bc0 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	4b02      	ldr	r3, [pc, #8]	@ (8002bd4 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x14>)
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	0800e4cc 	.word	0x0800e4cc

08002bd8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	0800e648 	.word	0x0800e648

08002bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ffe8 	bl	8002bd8 <_ZN3ros15NodeHandleBase_C1Ev>
 8002c08:	4a36      	ldr	r2, [pc, #216]	@ (8002ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3304      	adds	r3, #4
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fa3a 	bl	800208c <_ZN13STM32HardwareC1Ev>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8002c3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f009 fb60 	bl	800c30a <memset>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8002c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f009 fb57 	bl	800c30a <memset>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8002c62:	2264      	movs	r2, #100	@ 0x64
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f009 fb4f 	bl	800c30a <memset>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8002c72:	2264      	movs	r2, #100	@ 0x64
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f009 fb47 	bl	800c30a <memset>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe feca 	bl	8001a6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	0800e5bc 	.word	0x0800e5bc

08002ce8 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE>:

double vel_left = 0;
double vel_right = 0;

void stringCallback(const std_msgs::Float32MultiArray& msg)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

	double vel_left = msg.data[0];
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fb96 	bl	8000428 <__aeabi_f2d>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double vel_right = msg.data[1];
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	3304      	adds	r3, #4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fb8b 	bl	8000428 <__aeabi_f2d>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ((vel_left == 0) &&(vel_right == 0)){
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d26:	f7fd fe3f 	bl	80009a8 <__aeabi_dcmpeq>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01c      	beq.n	8002d6a <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x82>
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d3c:	f7fd fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d011      	beq.n	8002d6a <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x82>
		command = 0;
 8002d46:	4b32      	ldr	r3, [pc, #200]	@ (8002e10 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x128>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
		left_vel =0;
 8002d4c:	4931      	ldr	r1, [pc, #196]	@ (8002e14 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x12c>)
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	e9c1 2300 	strd	r2, r3, [r1]
		right_vel = 0;
 8002d5a:	492f      	ldr	r1, [pc, #188]	@ (8002e18 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x130>)
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9c1 2300 	strd	r2, r3, [r1]
 8002d68:	e049      	b.n	8002dfe <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x116>
	}
	else {
		command = 1;
 8002d6a:	4b29      	ldr	r3, [pc, #164]	@ (8002e10 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x128>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
		left_vel = roundf((vel_left/60)*495);
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	4b29      	ldr	r3, [pc, #164]	@ (8002e1c <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x134>)
 8002d76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d7a:	f7fd fcd7 	bl	800072c <__aeabi_ddiv>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	a320      	add	r3, pc, #128	@ (adr r3, 8002e08 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x120>)
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	f7fd fba4 	bl	80004d8 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7fd fe96 	bl	8000ac8 <__aeabi_d2f>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f007 fd72 	bl	800a888 <roundf>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fb3e 	bl	8000428 <__aeabi_f2d>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4918      	ldr	r1, [pc, #96]	@ (8002e14 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x12c>)
 8002db2:	e9c1 2300 	strd	r2, r3, [r1]
		right_vel = roundf((vel_right/60)*495);
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	4b18      	ldr	r3, [pc, #96]	@ (8002e1c <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x134>)
 8002dbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dc0:	f7fd fcb4 	bl	800072c <__aeabi_ddiv>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	a30e      	add	r3, pc, #56	@ (adr r3, 8002e08 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x120>)
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	f7fd fb81 	bl	80004d8 <__aeabi_dmul>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7fd fe73 	bl	8000ac8 <__aeabi_d2f>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f007 fd4f 	bl	800a888 <roundf>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fb1b 	bl	8000428 <__aeabi_f2d>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4908      	ldr	r1, [pc, #32]	@ (8002e18 <_Z14stringCallbackRKN8std_msgs17Float32MultiArrayE+0x130>)
 8002df8:	e9c1 2300 	strd	r2, r3, [r1]
	}

}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	407ef000 	.word	0x407ef000
 8002e10:	20000b28 	.word	0x20000b28
 8002e14:	20000b30 	.word	0x20000b30
 8002e18:	20000b38 	.word	0x20000b38
 8002e1c:	404e0000 	.word	0x404e0000

08002e20 <HAL_UART_TxCpltCallback>:

ros::Subscriber<std_msgs::Float32MultiArray> listener("wheel_velocity", &stringCallback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002e28:	4805      	ldr	r0, [pc, #20]	@ (8002e40 <HAL_UART_TxCpltCallback+0x20>)
 8002e2a:	f000 f911 	bl	8003050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f991 	bl	8002158 <_ZN13STM32Hardware5flushEv>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000b58 	.word	0x20000b58

08002e44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002e4c:	4805      	ldr	r0, [pc, #20]	@ (8002e64 <HAL_UART_RxCpltCallback+0x20>)
 8002e4e:	f000 f8ff 	bl	8003050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff f940 	bl	80020da <_ZN13STM32Hardware10reset_rbufEv>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000b58 	.word	0x20000b58

08002e68 <setup>:



void setup(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  nh.initNode();
 8002e6c:	4806      	ldr	r0, [pc, #24]	@ (8002e88 <setup+0x20>)
 8002e6e:	f000 f8fa 	bl	8003066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(listener);
 8002e72:	4906      	ldr	r1, [pc, #24]	@ (8002e8c <setup+0x24>)
 8002e74:	4804      	ldr	r0, [pc, #16]	@ (8002e88 <setup+0x20>)
 8002e76:	f000 f913 	bl	80030a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  nh.advertise(chatter);
 8002e7a:	4905      	ldr	r1, [pc, #20]	@ (8002e90 <setup+0x28>)
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <setup+0x20>)
 8002e7e:	f000 f939 	bl	80030f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000b58 	.word	0x20000b58
 8002e8c:	200014b0 	.word	0x200014b0
 8002e90:	2000149c 	.word	0x2000149c
 8002e94:	00000000 	.word	0x00000000

08002e98 <loop>:
double internal_real_left_vel = 0;
double internal_real_right_vel = 0;
char str[100];

void loop(void)
{
 8002e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af06      	add	r7, sp, #24

	std::sprintf(str, "[%f,%f],[%f,%f]", real_left_vel,real_right_vel,left_vel*60.0/495,right_vel*60.0/495);
 8002ea0:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <loop+0xa0>)
 8002ea2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ea6:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <loop+0xa4>)
 8002ea8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002eac:	4b24      	ldr	r3, [pc, #144]	@ (8002f40 <loop+0xa8>)
 8002eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <loop+0xac>)
 8002eb8:	f7fd fb0e 	bl	80004d8 <__aeabi_dmul>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	a31a      	add	r3, pc, #104	@ (adr r3, 8002f30 <loop+0x98>)
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f7fd fc2f 	bl	800072c <__aeabi_ddiv>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4692      	mov	sl, r2
 8002ed4:	469b      	mov	fp, r3
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <loop+0xb0>)
 8002ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	4b18      	ldr	r3, [pc, #96]	@ (8002f44 <loop+0xac>)
 8002ee2:	f7fd faf9 	bl	80004d8 <__aeabi_dmul>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	a310      	add	r3, pc, #64	@ (adr r3, 8002f30 <loop+0x98>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd fc1a 	bl	800072c <__aeabi_ddiv>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f00:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002f04:	e9cd 4500 	strd	r4, r5, [sp]
 8002f08:	4642      	mov	r2, r8
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	490f      	ldr	r1, [pc, #60]	@ (8002f4c <loop+0xb4>)
 8002f0e:	4810      	ldr	r0, [pc, #64]	@ (8002f50 <loop+0xb8>)
 8002f10:	f009 f998 	bl	800c244 <siprintf>
	str_msg.data = str;
 8002f14:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <loop+0xbc>)
 8002f16:	4a0e      	ldr	r2, [pc, #56]	@ (8002f50 <loop+0xb8>)
 8002f18:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 8002f1a:	490e      	ldr	r1, [pc, #56]	@ (8002f54 <loop+0xbc>)
 8002f1c:	480e      	ldr	r0, [pc, #56]	@ (8002f58 <loop+0xc0>)
 8002f1e:	f7ff f883 	bl	8002028 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 8002f22:	480e      	ldr	r0, [pc, #56]	@ (8002f5c <loop+0xc4>)
 8002f24:	f000 f915 	bl	8003152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f30:	00000000 	.word	0x00000000
 8002f34:	407ef000 	.word	0x407ef000
 8002f38:	20000b48 	.word	0x20000b48
 8002f3c:	20000b50 	.word	0x20000b50
 8002f40:	20000b30 	.word	0x20000b30
 8002f44:	404e0000 	.word	0x404e0000
 8002f48:	20000b38 	.word	0x20000b38
 8002f4c:	0800e4f0 	.word	0x0800e4f0
 8002f50:	200014f4 	.word	0x200014f4
 8002f54:	20001494 	.word	0x20001494
 8002f58:	2000149c 	.word	0x2000149c
 8002f5c:	20000b58 	.word	0x20000b58

08002f60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e00c      	b.n	8002f8a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	fa22 f103 	lsr.w	r1, r2, r3
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	b2ca      	uxtb	r2, r1
 8002f82:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d9ef      	bls.n	8002f70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e010      	b.n	8002fd4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	440a      	add	r2, r1
 8002fbc:	7812      	ldrb	r2, [r2, #0]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	00d2      	lsls	r2, r2, #3
 8002fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d9eb      	bls.n	8002fb2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
	...

08002fe8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	4a04      	ldr	r2, [pc, #16]	@ (8003004 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	0800e630 	.word	0x0800e630

08003008 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ffe5 	bl	8002fe8 <_ZN3ros11Subscriber_C1Ev>
 800301e:	4a0b      	ldr	r2, [pc, #44]	@ (800304c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	330c      	adds	r3, #12
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fc9f 	bl	800296c <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	63da      	str	r2, [r3, #60]	@ 0x3c
    endpoint_(endpoint)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40
  {
    topic_ = topic_name;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	609a      	str	r2, [r3, #8]
  };
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	0800e5a4 	.word	0x0800e5a4

08003050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
  }
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f826 	bl	80020c4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e018      	b.n	80030e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80030b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10d      	bne.n	80030dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]
        return true;
 80030d8:	2301      	movs	r3, #1
 80030da:	e006      	b.n	80030ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3301      	adds	r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b18      	cmp	r3, #24
 80030e6:	dde3      	ble.n	80030b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80030e8:	2300      	movs	r3, #0
  }
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	e01d      	b.n	8003140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d111      	bne.n	800313a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	60da      	str	r2, [r3, #12]
        return true;
 8003136:	2301      	movs	r3, #1
 8003138:	e006      	b.n	8003148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3301      	adds	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b18      	cmp	r3, #24
 8003144:	ddde      	ble.n	8003104 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8003146:	2300      	movs	r3, #0
  }
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f8a5 	bl	80022ae <_ZN13STM32Hardware4timeEv>
 8003164:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003174:	4293      	cmp	r3, r2
 8003176:	d903      	bls.n	8003180 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	429a      	cmp	r2, r3
 8003194:	d903      	bls.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d014      	beq.n	80031d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f87e 	bl	80022ae <_ZN13STM32Hardware4timeEv>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad2      	subs	r2, r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80031be:	429a      	cmp	r2, r3
 80031c0:	bf8c      	ite	hi
 80031c2:	2301      	movhi	r3, #1
 80031c4:	2300      	movls	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80031cc:	f06f 0301 	mvn.w	r3, #1
 80031d0:	e194      	b.n	80034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3304      	adds	r3, #4
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe ff90 	bl	80020fc <_ZN13STM32Hardware4readEv>
 80031dc:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f2c0 8174 	blt.w	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	441a      	add	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80031fc:	2b07      	cmp	r3, #7
 80031fe:	d11e      	bne.n	800323e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8003206:	1c59      	adds	r1, r3, #1
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	b2d1      	uxtb	r1, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	460a      	mov	r2, r1
 8003218:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8003222:	1e5a      	subs	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1b4      	bne.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2208      	movs	r2, #8
 8003238:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800323c:	e7af      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003244:	2b00      	cmp	r3, #0
 8003246:	d128      	bne.n	800329a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2bff      	cmp	r3, #255	@ 0xff
 800324c:	d10d      	bne.n	800326a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f103 0214 	add.w	r2, r3, #20
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8003268:	e799      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff f81d 	bl	80022ae <_ZN13STM32Hardware4timeEv>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	bf8c      	ite	hi
 8003282:	2301      	movhi	r3, #1
 8003284:	2300      	movls	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d088      	beq.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 8003294:	f06f 0301 	mvn.w	r3, #1
 8003298:	e130      	b.n	80034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d118      	bne.n	80032d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80032a8:	d107      	bne.n	80032ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80032b8:	e771      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f af68 	bne.w	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f918 	bl	8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80032d4:	e763      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d113      	bne.n	8003308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8003306:	e74a      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800330e:	2b03      	cmp	r3, #3
 8003310:	d110      	bne.n	8003334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003332:	e734      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800333a:	2b04      	cmp	r3, #4
 800333c:	d116      	bne.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8003344:	425a      	negs	r2, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	bf58      	it	pl
 800334c:	4253      	negpl	r3, r2
 800334e:	2bff      	cmp	r3, #255	@ 0xff
 8003350:	d107      	bne.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003360:	e71d      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800336a:	e718      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003372:	2b05      	cmp	r3, #5
 8003374:	d10f      	bne.n	8003396 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8003394:	e703      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800339c:	2b06      	cmp	r3, #6
 800339e:	d117      	bne.n	80033d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	441a      	add	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2207      	movs	r2, #7
 80033b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f47f aeec 	bne.w	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2208      	movs	r2, #8
 80033ca:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80033ce:	e6e6      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	f47f aee1 	bne.w	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80033ea:	425a      	negs	r2, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	bf58      	it	pl
 80033f2:	4253      	negpl	r3, r2
 80033f4:	2bff      	cmp	r3, #255	@ 0xff
 80033f6:	f47f aed2 	bne.w	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d110      	bne.n	8003426 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f87d 	bl	8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f898 	bl	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003424:	e06a      	b.n	80034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800342c:	2b0a      	cmp	r3, #10
 800342e:	d107      	bne.n	8003440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8003436:	4619      	mov	r1, r3
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f961 	bl	8003700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800343e:	e6ae      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003446:	2b06      	cmp	r3, #6
 8003448:	d10e      	bne.n	8003468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f7fe fc46 	bl	8001cea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8003466:	e69a      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800346e:	2b0b      	cmp	r3, #11
 8003470:	d104      	bne.n	800347c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 800347a:	e690      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003482:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f43f ae84 	beq.w	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800349c:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80034a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80034b0:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80034ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 80034c8:	4611      	mov	r1, r2
 80034ca:	4798      	blx	r3
    while (true)
 80034cc:	e667      	b.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80034ce:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00f      	beq.n	80034fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d906      	bls.n	80034fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f809 	bl	8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 80034fa:	2300      	movs	r3, #0
  }
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800350c:	f107 030c 	add.w	r3, r7, #12
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd ff55 	bl	80013c0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f107 020c 	add.w	r2, r7, #12
 8003520:	210a      	movs	r1, #10
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
    rt_time = hardware_.time();
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe febf 	bl	80022ae <_ZN13STM32Hardware4timeEv>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8003538:	bf00      	nop
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b08b      	sub	sp, #44	@ 0x2c
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003548:	f107 030c 	add.w	r3, r7, #12
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe f821 	bl	8001594 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
 8003556:	e062      	b.n	800361e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d056      	beq.n	8003618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	b29b      	uxth	r3, r3
 800357c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3308      	adds	r3, #8
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4608      	mov	r0, r1
 80035b8:	4798      	blx	r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	330c      	adds	r3, #12
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4608      	mov	r0, r1
 80035e6:	4798      	blx	r3
 80035e8:	4603      	mov	r3, r0
 80035ea:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80035ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035f0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681c      	ldr	r4, [r3, #0]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fd22 	bl	8002050 <_ZN3ros9Publisher15getEndpointTypeEv>
 800360c:	4601      	mov	r1, r0
 800360e:	f107 030c 	add.w	r3, r7, #12
 8003612:	461a      	mov	r2, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	3301      	adds	r3, #1
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	2b18      	cmp	r3, #24
 8003622:	dd99      	ble.n	8003558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003624:	2300      	movs	r3, #0
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
 8003628:	e05e      	b.n	80036e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d053      	beq.n	80036e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	b29b      	uxth	r3, r3
 800364a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003650:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003660:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3308      	adds	r3, #8
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4608      	mov	r0, r1
 800367c:	4798      	blx	r3
 800367e:	4603      	mov	r3, r0
 8003680:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003686:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800368a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003692:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	330c      	adds	r3, #12
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4608      	mov	r0, r1
 80036a2:	4798      	blx	r3
 80036a4:	4603      	mov	r3, r0
 80036a6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80036a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036ac:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681c      	ldr	r4, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b8:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80036bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3304      	adds	r3, #4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4608      	mov	r0, r1
 80036d4:	4798      	blx	r3
 80036d6:	4601      	mov	r1, r0
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	461a      	mov	r2, r3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	3301      	adds	r3, #1
 80036e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	2b18      	cmp	r3, #24
 80036ec:	dd9d      	ble.n	800362a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 80036f6:	bf00      	nop
 80036f8:	372c      	adds	r7, #44	@ 0x2c
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd90      	pop	{r4, r7, pc}
	...

08003700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800370a:	f107 0308 	add.w	r3, r7, #8
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd fe56 	bl	80013c0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fdc8 	bl	80022ae <_ZN13STM32Hardware4timeEv>
 800371e:	4602      	mov	r2, r0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	6839      	ldr	r1, [r7, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd feb4 	bl	800149e <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	4915      	ldr	r1, [pc, #84]	@ (8003790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800373c:	fba1 1303 	umull	r1, r3, r1, r3
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	4413      	add	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003746:	6939      	ldr	r1, [r7, #16]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4b11      	ldr	r3, [pc, #68]	@ (8003790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800374c:	fba3 0302 	umull	r0, r3, r3, r2
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003756:	fb00 f303 	mul.w	r3, r0, r3
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	4a0d      	ldr	r2, [pc, #52]	@ (8003794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	440b      	add	r3, r1
 8003764:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003766:	f107 0308 	add.w	r3, r7, #8
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8a6 	bl	80038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe fd98 	bl	80022ae <_ZN13STM32Hardware4timeEv>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	10624dd3 	.word	0x10624dd3
 8003794:	000f4240 	.word	0x000f4240

08003798 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b63      	cmp	r3, #99	@ 0x63
 80037a8:	dd09      	ble.n	80037be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80037b0:	f083 0301 	eor.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e079      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 80037ca:	3207      	adds	r2, #7
 80037cc:	4611      	mov	r1, r2
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
 80037d2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	22ff      	movs	r2, #255	@ 0xff
 80037d8:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	22fe      	movs	r2, #254	@ 0xfe
 80037e0:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 800380a:	4413      	add	r3, r2
 800380c:	b2db      	uxtb	r3, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	b21b      	sxth	r3, r3
 8003826:	121b      	asrs	r3, r3, #8
 8003828:	b21b      	sxth	r3, r3
 800382a:	b2da      	uxtb	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003836:	2305      	movs	r3, #5
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	e00c      	b.n	8003856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	4413      	add	r3, r2
 8003842:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	3301      	adds	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	3306      	adds	r3, #6
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	429a      	cmp	r2, r3
 800385e:	dded      	ble.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	3307      	adds	r3, #7
 8003864:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	425a      	negs	r2, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	bf58      	it	pl
 8003870:	4253      	negpl	r3, r2
 8003872:	b2da      	uxtb	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	1c59      	adds	r1, r3, #1
 8003878:	6179      	str	r1, [r7, #20]
 800387a:	43d2      	mvns	r2, r2
 800387c:	b2d1      	uxtb	r1, r2
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	460a      	mov	r2, r1
 8003884:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800388e:	dc0a      	bgt.n	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1d18      	adds	r0, r3, #4
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4619      	mov	r1, r3
 800389e:	f7fe fcb9 	bl	8002214 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	e005      	b.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80038a6:	4905      	ldr	r1, [pc, #20]	@ (80038bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f849 	bl	8003940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80038ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 80038b2:	4618      	mov	r0, r3
 80038b4:	3720      	adds	r7, #32
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	0800e500 	.word	0x0800e500

080038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fced 	bl	80022ae <_ZN13STM32Hardware4timeEv>
 80038d4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4915      	ldr	r1, [pc, #84]	@ (8003934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80038de:	fba1 1303 	umull	r1, r3, r1, r3
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	1e5a      	subs	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80038f6:	fba3 0302 	umull	r0, r3, r3, r2
 80038fa:	099b      	lsrs	r3, r3, #6
 80038fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003900:	fb00 f303 	mul.w	r3, r0, r3
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	4a0c      	ldr	r2, [pc, #48]	@ (8003938 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003908:	fb02 f303 	mul.w	r3, r2, r3
 800390c:	1aca      	subs	r2, r1, r3
 800390e:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003910:	4413      	add	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 fc3e 	bl	80041a8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	10624dd3 	.word	0x10624dd3
 8003938:	000f4240 	.word	0x000f4240
 800393c:	3b9aca00 	.word	0x3b9aca00

08003940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	2103      	movs	r1, #3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f804 	bl	800395c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	460b      	mov	r3, r1
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800396a:	f107 0314 	add.w	r3, r7, #20
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd ffd0 	bl	8001914 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003974:	7afb      	ldrb	r3, [r7, #11]
 8003976:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f107 0214 	add.w	r2, r7, #20
 8003986:	2107      	movs	r1, #7
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	4798      	blx	r3
  }
 800398c:	bf00      	nop
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <_Z41__static_initialization_and_destruction_0ii>:
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d116      	bne.n	80039d2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d111      	bne.n	80039d2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 80039ae:	480b      	ldr	r0, [pc, #44]	@ (80039dc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80039b0:	f7ff f922 	bl	8002bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80039b4:	480a      	ldr	r0, [pc, #40]	@ (80039e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80039b6:	f7fe fc85 	bl	80022c4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("stm32_to_pc", &str_msg);
 80039ba:	2300      	movs	r3, #0
 80039bc:	4a08      	ldr	r2, [pc, #32]	@ (80039e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80039be:	4909      	ldr	r1, [pc, #36]	@ (80039e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80039c0:	4809      	ldr	r0, [pc, #36]	@ (80039e8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80039c2:	f7fe fb1b 	bl	8001ffc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32MultiArray> listener("wheel_velocity", &stringCallback);
 80039c6:	2301      	movs	r3, #1
 80039c8:	4a08      	ldr	r2, [pc, #32]	@ (80039ec <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80039ca:	4909      	ldr	r1, [pc, #36]	@ (80039f0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80039cc:	4809      	ldr	r0, [pc, #36]	@ (80039f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80039ce:	f7ff fb1b 	bl	8003008 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000b58 	.word	0x20000b58
 80039e0:	20001494 	.word	0x20001494
 80039e4:	0800e53c 	.word	0x0800e53c
 80039e8:	2000149c 	.word	0x2000149c
 80039ec:	08002ce9 	.word	0x08002ce9
 80039f0:	0800e548 	.word	0x0800e548
 80039f4:	200014b0 	.word	0x200014b0

080039f8 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	330c      	adds	r3, #12
 8003a06:	6839      	ldr	r1, [r7, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff f841 	bl	8002a90 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	320c      	adds	r2, #12
 8003a16:	4610      	mov	r0, r2
 8003a18:	4798      	blx	r3
  }
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  }
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	330c      	adds	r3, #12
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff f8af 	bl	8002ba8 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8003a4a:	4603      	mov	r3, r0
  }
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff f8ad 	bl	8002bc0 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 8003a66:	4603      	mov	r3, r0
  }
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    return configured_;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <_GLOBAL__sub_I_real_left_vel>:
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003a90:	2001      	movs	r0, #1
 8003a92:	f7ff ff7f 	bl	8003994 <_Z41__static_initialization_and_destruction_0ii>
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a9e:	4b18      	ldr	r3, [pc, #96]	@ (8003b00 <HAL_MspInit+0x68>)
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	4a17      	ldr	r2, [pc, #92]	@ (8003b00 <HAL_MspInit+0x68>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6193      	str	r3, [r2, #24]
 8003aaa:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <HAL_MspInit+0x68>)
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	4b12      	ldr	r3, [pc, #72]	@ (8003b00 <HAL_MspInit+0x68>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4a11      	ldr	r2, [pc, #68]	@ (8003b00 <HAL_MspInit+0x68>)
 8003abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac0:	61d3      	str	r3, [r2, #28]
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <HAL_MspInit+0x68>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	607b      	str	r3, [r7, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	210f      	movs	r1, #15
 8003ad2:	f06f 0001 	mvn.w	r0, #1
 8003ad6:	f000 fdd6 	bl	8004686 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ada:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <HAL_MspInit+0x6c>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	4a04      	ldr	r2, [pc, #16]	@ (8003b04 <HAL_MspInit+0x6c>)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40010000 	.word	0x40010000

08003b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08c      	sub	sp, #48	@ 0x30
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8003bd8 <HAL_InitTick+0xd0>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd8 <HAL_InitTick+0xd0>)
 8003b24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b28:	6193      	str	r3, [r2, #24]
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd8 <HAL_InitTick+0xd0>)
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b36:	f107 020c 	add.w	r2, r7, #12
 8003b3a:	f107 0310 	add.w	r3, r7, #16
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 fdfb 	bl	800573c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b46:	f001 fde5 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8003b4a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4e:	4a23      	ldr	r2, [pc, #140]	@ (8003bdc <HAL_InitTick+0xd4>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	0c9b      	lsrs	r3, r3, #18
 8003b56:	3b01      	subs	r3, #1
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b5a:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <HAL_InitTick+0xd8>)
 8003b5c:	4a21      	ldr	r2, [pc, #132]	@ (8003be4 <HAL_InitTick+0xdc>)
 8003b5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003b60:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <HAL_InitTick+0xd8>)
 8003b62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b66:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b68:	4a1d      	ldr	r2, [pc, #116]	@ (8003be0 <HAL_InitTick+0xd8>)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003be0 <HAL_InitTick+0xd8>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b74:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <HAL_InitTick+0xd8>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b7a:	4b19      	ldr	r3, [pc, #100]	@ (8003be0 <HAL_InitTick+0xd8>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003b80:	4817      	ldr	r0, [pc, #92]	@ (8003be0 <HAL_InitTick+0xd8>)
 8003b82:	f001 fe29 	bl	80057d8 <HAL_TIM_Base_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11b      	bne.n	8003bcc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003b94:	4812      	ldr	r0, [pc, #72]	@ (8003be0 <HAL_InitTick+0xd8>)
 8003b96:	f001 fe77 	bl	8005888 <HAL_TIM_Base_Start_IT>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d111      	bne.n	8003bcc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003ba8:	2019      	movs	r0, #25
 8003baa:	f000 fd88 	bl	80046be <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b0f      	cmp	r3, #15
 8003bb2:	d808      	bhi.n	8003bc6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	2019      	movs	r0, #25
 8003bba:	f000 fd64 	bl	8004686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003be8 <HAL_InitTick+0xe0>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	e002      	b.n	8003bcc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3730      	adds	r7, #48	@ 0x30
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	431bde83 	.word	0x431bde83
 8003be0:	20001558 	.word	0x20001558
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	20000024 	.word	0x20000024

08003bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <NMI_Handler+0x4>

08003bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <HardFault_Handler+0x4>

08003bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <MemManage_Handler+0x4>

08003c04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c08:	bf00      	nop
 8003c0a:	e7fd      	b.n	8003c08 <BusFault_Handler+0x4>

08003c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c10:	bf00      	nop
 8003c12:	e7fd      	b.n	8003c10 <UsageFault_Handler+0x4>

08003c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c24:	4802      	ldr	r0, [pc, #8]	@ (8003c30 <DMA1_Channel4_IRQHandler+0x10>)
 8003c26:	f000 fec7 	bl	80049b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20001750 	.word	0x20001750

08003c34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c38:	4802      	ldr	r0, [pc, #8]	@ (8003c44 <DMA1_Channel5_IRQHandler+0x10>)
 8003c3a:	f000 febd 	bl	80049b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	2000170c 	.word	0x2000170c

08003c48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c4c:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <TIM1_UP_IRQHandler+0x10>)
 8003c4e:	f002 f88f 	bl	8005d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20001558 	.word	0x20001558

08003c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c60:	4802      	ldr	r0, [pc, #8]	@ (8003c6c <USART1_IRQHandler+0x10>)
 8003c62:	f002 fdd7 	bl	8006814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	2000167c 	.word	0x2000167c

08003c70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return 1;
 8003c74:	2301      	movs	r3, #1
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <_kill>:

int _kill(int pid, int sig)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c88:	f008 fbe6 	bl	800c458 <__errno>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2216      	movs	r2, #22
 8003c90:	601a      	str	r2, [r3, #0]
  return -1;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <_exit>:

void _exit (int status)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ca6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ffe7 	bl	8003c7e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <_exit+0x12>

08003cb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e00a      	b.n	8003cdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cc6:	f3af 8000 	nop.w
 8003cca:	4601      	mov	r1, r0
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	60ba      	str	r2, [r7, #8]
 8003cd2:	b2ca      	uxtb	r2, r1
 8003cd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	dbf0      	blt.n	8003cc6 <_read+0x12>
  }

  return len;
 8003ce4:	687b      	ldr	r3, [r7, #4]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e009      	b.n	8003d14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	60ba      	str	r2, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	3301      	adds	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	dbf1      	blt.n	8003d00 <_write+0x12>
  }
  return len;
 8003d1c:	687b      	ldr	r3, [r7, #4]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_close>:

int _close(int file)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d4c:	605a      	str	r2, [r3, #4]
  return 0;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <_isatty>:

int _isatty(int file)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d62:	2301      	movs	r3, #1
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr
	...

08003d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d90:	4a14      	ldr	r2, [pc, #80]	@ (8003de4 <_sbrk+0x5c>)
 8003d92:	4b15      	ldr	r3, [pc, #84]	@ (8003de8 <_sbrk+0x60>)
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d9c:	4b13      	ldr	r3, [pc, #76]	@ (8003dec <_sbrk+0x64>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003da4:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <_sbrk+0x64>)
 8003da6:	4a12      	ldr	r2, [pc, #72]	@ (8003df0 <_sbrk+0x68>)
 8003da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003daa:	4b10      	ldr	r3, [pc, #64]	@ (8003dec <_sbrk+0x64>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d207      	bcs.n	8003dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003db8:	f008 fb4e 	bl	800c458 <__errno>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	220c      	movs	r2, #12
 8003dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dc6:	e009      	b.n	8003ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dc8:	4b08      	ldr	r3, [pc, #32]	@ (8003dec <_sbrk+0x64>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dce:	4b07      	ldr	r3, [pc, #28]	@ (8003dec <_sbrk+0x64>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4a05      	ldr	r2, [pc, #20]	@ (8003dec <_sbrk+0x64>)
 8003dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dda:	68fb      	ldr	r3, [r7, #12]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20005000 	.word	0x20005000
 8003de8:	00000400 	.word	0x00000400
 8003dec:	200015a0 	.word	0x200015a0
 8003df0:	20002770 	.word	0x20002770

08003df4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08e      	sub	sp, #56	@ 0x38
 8003e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	PWM_Config pwm_config = {.pwm_resolution = 10, .pwm_freq = 1000, .pwm_input_freq = 72*1000000};
 8003e06:	4a36      	ldr	r2, [pc, #216]	@ (8003ee0 <MX_TIM2_Init+0xe0>)
 8003e08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t PSC_value, ARR_value;
	calculate_pwm_values(&pwm_config, &PSC_value, &ARR_value);
 8003e12:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003e16:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003e1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f003 fcf2 	bl	8007808 <calculate_pwm_values>
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e24:	f107 031c 	add.w	r3, r7, #28
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e2e:	463b      	mov	r3, r7
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
 8003e3c:	615a      	str	r2, [r3, #20]
 8003e3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e40:	4b28      	ldr	r3, [pc, #160]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003e42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003e48:	4b26      	ldr	r3, [pc, #152]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4e:	4b25      	ldr	r3, [pc, #148]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003e54:	4b23      	ldr	r3, [pc, #140]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003e56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e62:	4b20      	ldr	r3, [pc, #128]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e68:	481e      	ldr	r0, [pc, #120]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003e6a:	f001 fd5f 	bl	800592c <HAL_TIM_PWM_Init>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003e74:	f7fd fa7e 	bl	8001374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e80:	f107 031c 	add.w	r3, r7, #28
 8003e84:	4619      	mov	r1, r3
 8003e86:	4817      	ldr	r0, [pc, #92]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003e88:	f002 fb6e 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003e92:	f7fd fa6f 	bl	8001374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e96:	2360      	movs	r3, #96	@ 0x60
 8003e98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4619      	mov	r1, r3
 8003eac:	480d      	ldr	r0, [pc, #52]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003eae:	f002 f867 	bl	8005f80 <HAL_TIM_PWM_ConfigChannel>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8003eb8:	f7fd fa5c 	bl	8001374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4808      	ldr	r0, [pc, #32]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003ec4:	f002 f85c 	bl	8005f80 <HAL_TIM_PWM_ConfigChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8003ece:	f7fd fa51 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ed2:	4804      	ldr	r0, [pc, #16]	@ (8003ee4 <MX_TIM2_Init+0xe4>)
 8003ed4:	f000 f938 	bl	8004148 <HAL_TIM_MspPostInit>

}
 8003ed8:	bf00      	nop
 8003eda:	3738      	adds	r7, #56	@ 0x38
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	0800e558 	.word	0x0800e558
 8003ee4:	200015a4 	.word	0x200015a4

08003ee8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	@ 0x30
 8003eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	2224      	movs	r2, #36	@ 0x24
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f008 fa07 	bl	800c30a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003efc:	1d3b      	adds	r3, r7, #4
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f04:	4b20      	ldr	r3, [pc, #128]	@ (8003f88 <MX_TIM3_Init+0xa0>)
 8003f06:	4a21      	ldr	r2, [pc, #132]	@ (8003f8c <MX_TIM3_Init+0xa4>)
 8003f08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f88 <MX_TIM3_Init+0xa0>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f10:	4b1d      	ldr	r3, [pc, #116]	@ (8003f88 <MX_TIM3_Init+0xa0>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003f16:	4b1c      	ldr	r3, [pc, #112]	@ (8003f88 <MX_TIM3_Init+0xa0>)
 8003f18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f88 <MX_TIM3_Init+0xa0>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f24:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <MX_TIM3_Init+0xa0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f32:	2301      	movs	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f42:	2301      	movs	r3, #1
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f46:	2300      	movs	r3, #0
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003f4e:	f107 030c 	add.w	r3, r7, #12
 8003f52:	4619      	mov	r1, r3
 8003f54:	480c      	ldr	r0, [pc, #48]	@ (8003f88 <MX_TIM3_Init+0xa0>)
 8003f56:	f001 fddb 	bl	8005b10 <HAL_TIM_Encoder_Init>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003f60:	f7fd fa08 	bl	8001374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f64:	2300      	movs	r3, #0
 8003f66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4805      	ldr	r0, [pc, #20]	@ (8003f88 <MX_TIM3_Init+0xa0>)
 8003f72:	f002 faf9 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003f7c:	f7fd f9fa 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f80:	bf00      	nop
 8003f82:	3730      	adds	r7, #48	@ 0x30
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	200015ec 	.word	0x200015ec
 8003f8c:	40000400 	.word	0x40000400

08003f90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08c      	sub	sp, #48	@ 0x30
 8003f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f96:	f107 030c 	add.w	r3, r7, #12
 8003f9a:	2224      	movs	r2, #36	@ 0x24
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f008 f9b3 	bl	800c30a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa4:	1d3b      	adds	r3, r7, #4
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003fac:	4b20      	ldr	r3, [pc, #128]	@ (8004030 <MX_TIM4_Init+0xa0>)
 8003fae:	4a21      	ldr	r2, [pc, #132]	@ (8004034 <MX_TIM4_Init+0xa4>)
 8003fb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004030 <MX_TIM4_Init+0xa0>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004030 <MX_TIM4_Init+0xa0>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004030 <MX_TIM4_Init+0xa0>)
 8003fc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004030 <MX_TIM4_Init+0xa0>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fcc:	4b18      	ldr	r3, [pc, #96]	@ (8004030 <MX_TIM4_Init+0xa0>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fea:	2301      	movs	r3, #1
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ff6:	f107 030c 	add.w	r3, r7, #12
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	480c      	ldr	r0, [pc, #48]	@ (8004030 <MX_TIM4_Init+0xa0>)
 8003ffe:	f001 fd87 	bl	8005b10 <HAL_TIM_Encoder_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004008:	f7fd f9b4 	bl	8001374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800400c:	2300      	movs	r3, #0
 800400e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004010:	2300      	movs	r3, #0
 8004012:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4805      	ldr	r0, [pc, #20]	@ (8004030 <MX_TIM4_Init+0xa0>)
 800401a:	f002 faa5 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004024:	f7fd f9a6 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004028:	bf00      	nop
 800402a:	3730      	adds	r7, #48	@ 0x30
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20001634 	.word	0x20001634
 8004034:	40000800 	.word	0x40000800

08004038 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004048:	d10b      	bne.n	8004062 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800404a:	4b08      	ldr	r3, [pc, #32]	@ (800406c <HAL_TIM_PWM_MspInit+0x34>)
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	4a07      	ldr	r2, [pc, #28]	@ (800406c <HAL_TIM_PWM_MspInit+0x34>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	61d3      	str	r3, [r2, #28]
 8004056:	4b05      	ldr	r3, [pc, #20]	@ (800406c <HAL_TIM_PWM_MspInit+0x34>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	40021000 	.word	0x40021000

08004070 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	@ 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004078:	f107 0318 	add.w	r3, r7, #24
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2a      	ldr	r2, [pc, #168]	@ (8004134 <HAL_TIM_Encoder_MspInit+0xc4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d124      	bne.n	80040da <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004090:	4b29      	ldr	r3, [pc, #164]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4a28      	ldr	r2, [pc, #160]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004096:	f043 0302 	orr.w	r3, r3, #2
 800409a:	61d3      	str	r3, [r2, #28]
 800409c:	4b26      	ldr	r3, [pc, #152]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a8:	4b23      	ldr	r3, [pc, #140]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	4a22      	ldr	r2, [pc, #136]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	6193      	str	r3, [r2, #24]
 80040b4:	4b20      	ldr	r3, [pc, #128]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040c0:	23c0      	movs	r3, #192	@ 0xc0
 80040c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040cc:	f107 0318 	add.w	r3, r7, #24
 80040d0:	4619      	mov	r1, r3
 80040d2:	481a      	ldr	r0, [pc, #104]	@ (800413c <HAL_TIM_Encoder_MspInit+0xcc>)
 80040d4:	f000 fda4 	bl	8004c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80040d8:	e028      	b.n	800412c <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM4)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a18      	ldr	r2, [pc, #96]	@ (8004140 <HAL_TIM_Encoder_MspInit+0xd0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d123      	bne.n	800412c <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040e4:	4b14      	ldr	r3, [pc, #80]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	4a13      	ldr	r2, [pc, #76]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040ea:	f043 0304 	orr.w	r3, r3, #4
 80040ee:	61d3      	str	r3, [r2, #28]
 80040f0:	4b11      	ldr	r3, [pc, #68]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4a0d      	ldr	r2, [pc, #52]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004102:	f043 0308 	orr.w	r3, r3, #8
 8004106:	6193      	str	r3, [r2, #24]
 8004108:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <HAL_TIM_Encoder_MspInit+0xc8>)
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004114:	23c0      	movs	r3, #192	@ 0xc0
 8004116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004118:	2300      	movs	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411c:	2300      	movs	r3, #0
 800411e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004120:	f107 0318 	add.w	r3, r7, #24
 8004124:	4619      	mov	r1, r3
 8004126:	4807      	ldr	r0, [pc, #28]	@ (8004144 <HAL_TIM_Encoder_MspInit+0xd4>)
 8004128:	f000 fd7a 	bl	8004c20 <HAL_GPIO_Init>
}
 800412c:	bf00      	nop
 800412e:	3728      	adds	r7, #40	@ 0x28
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40000400 	.word	0x40000400
 8004138:	40021000 	.word	0x40021000
 800413c:	40010800 	.word	0x40010800
 8004140:	40000800 	.word	0x40000800
 8004144:	40010c00 	.word	0x40010c00

08004148 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004166:	d117      	bne.n	8004198 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004168:	4b0d      	ldr	r3, [pc, #52]	@ (80041a0 <HAL_TIM_MspPostInit+0x58>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	4a0c      	ldr	r2, [pc, #48]	@ (80041a0 <HAL_TIM_MspPostInit+0x58>)
 800416e:	f043 0304 	orr.w	r3, r3, #4
 8004172:	6193      	str	r3, [r2, #24]
 8004174:	4b0a      	ldr	r3, [pc, #40]	@ (80041a0 <HAL_TIM_MspPostInit+0x58>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004180:	2303      	movs	r3, #3
 8004182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004184:	2302      	movs	r3, #2
 8004186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004188:	2302      	movs	r3, #2
 800418a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418c:	f107 0310 	add.w	r3, r7, #16
 8004190:	4619      	mov	r1, r3
 8004192:	4804      	ldr	r0, [pc, #16]	@ (80041a4 <HAL_TIM_MspPostInit+0x5c>)
 8004194:	f000 fd44 	bl	8004c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004198:	bf00      	nop
 800419a:	3720      	adds	r7, #32
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40010800 	.word	0x40010800

080041a8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	0a5a      	lsrs	r2, r3, #9
 80041b8:	490f      	ldr	r1, [pc, #60]	@ (80041f8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80041ba:	fba1 1202 	umull	r1, r2, r1, r2
 80041be:	09d2      	lsrs	r2, r2, #7
 80041c0:	490e      	ldr	r1, [pc, #56]	@ (80041fc <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80041c2:	fb01 f202 	mul.w	r2, r1, r2
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	0a5b      	lsrs	r3, r3, #9
 80041d0:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	09db      	lsrs	r3, r3, #7
 80041d8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	441a      	add	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	00044b83 	.word	0x00044b83
 80041fc:	3b9aca00 	.word	0x3b9aca00

08004200 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004204:	4b11      	ldr	r3, [pc, #68]	@ (800424c <MX_USART1_UART_Init+0x4c>)
 8004206:	4a12      	ldr	r2, [pc, #72]	@ (8004250 <MX_USART1_UART_Init+0x50>)
 8004208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800420a:	4b10      	ldr	r3, [pc, #64]	@ (800424c <MX_USART1_UART_Init+0x4c>)
 800420c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8004210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004212:	4b0e      	ldr	r3, [pc, #56]	@ (800424c <MX_USART1_UART_Init+0x4c>)
 8004214:	2200      	movs	r2, #0
 8004216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004218:	4b0c      	ldr	r3, [pc, #48]	@ (800424c <MX_USART1_UART_Init+0x4c>)
 800421a:	2200      	movs	r2, #0
 800421c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800421e:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <MX_USART1_UART_Init+0x4c>)
 8004220:	2200      	movs	r2, #0
 8004222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004224:	4b09      	ldr	r3, [pc, #36]	@ (800424c <MX_USART1_UART_Init+0x4c>)
 8004226:	220c      	movs	r2, #12
 8004228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800422a:	4b08      	ldr	r3, [pc, #32]	@ (800424c <MX_USART1_UART_Init+0x4c>)
 800422c:	2200      	movs	r2, #0
 800422e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004230:	4b06      	ldr	r3, [pc, #24]	@ (800424c <MX_USART1_UART_Init+0x4c>)
 8004232:	2200      	movs	r2, #0
 8004234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004236:	4805      	ldr	r0, [pc, #20]	@ (800424c <MX_USART1_UART_Init+0x4c>)
 8004238:	f002 fa06 	bl	8006648 <HAL_UART_Init>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004242:	f7fd f897 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	2000167c 	.word	0x2000167c
 8004250:	40013800 	.word	0x40013800

08004254 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004258:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <MX_USART2_UART_Init+0x4c>)
 800425a:	4a12      	ldr	r2, [pc, #72]	@ (80042a4 <MX_USART2_UART_Init+0x50>)
 800425c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800425e:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <MX_USART2_UART_Init+0x4c>)
 8004260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004266:	4b0e      	ldr	r3, [pc, #56]	@ (80042a0 <MX_USART2_UART_Init+0x4c>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <MX_USART2_UART_Init+0x4c>)
 800426e:	2200      	movs	r2, #0
 8004270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004272:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <MX_USART2_UART_Init+0x4c>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004278:	4b09      	ldr	r3, [pc, #36]	@ (80042a0 <MX_USART2_UART_Init+0x4c>)
 800427a:	220c      	movs	r2, #12
 800427c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800427e:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <MX_USART2_UART_Init+0x4c>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004284:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <MX_USART2_UART_Init+0x4c>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800428a:	4805      	ldr	r0, [pc, #20]	@ (80042a0 <MX_USART2_UART_Init+0x4c>)
 800428c:	f002 f9dc 	bl	8006648 <HAL_UART_Init>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004296:	f7fd f86d 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200016c4 	.word	0x200016c4
 80042a4:	40004400 	.word	0x40004400

080042a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	@ 0x28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	f107 0318 	add.w	r3, r7, #24
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a62      	ldr	r2, [pc, #392]	@ (800444c <HAL_UART_MspInit+0x1a4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	f040 8087 	bne.w	80043d8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042ca:	4b61      	ldr	r3, [pc, #388]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	4a60      	ldr	r2, [pc, #384]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 80042d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042d4:	6193      	str	r3, [r2, #24]
 80042d6:	4b5e      	ldr	r3, [pc, #376]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	4a5a      	ldr	r2, [pc, #360]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 80042e8:	f043 0304 	orr.w	r3, r3, #4
 80042ec:	6193      	str	r3, [r2, #24]
 80042ee:	4b58      	ldr	r3, [pc, #352]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80042fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004300:	2302      	movs	r3, #2
 8004302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004304:	2303      	movs	r3, #3
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004308:	f107 0318 	add.w	r3, r7, #24
 800430c:	4619      	mov	r1, r3
 800430e:	4851      	ldr	r0, [pc, #324]	@ (8004454 <HAL_UART_MspInit+0x1ac>)
 8004310:	f000 fc86 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431e:	2300      	movs	r3, #0
 8004320:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004322:	f107 0318 	add.w	r3, r7, #24
 8004326:	4619      	mov	r1, r3
 8004328:	484a      	ldr	r0, [pc, #296]	@ (8004454 <HAL_UART_MspInit+0x1ac>)
 800432a:	f000 fc79 	bl	8004c20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800432e:	4b4a      	ldr	r3, [pc, #296]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 8004330:	4a4a      	ldr	r2, [pc, #296]	@ (800445c <HAL_UART_MspInit+0x1b4>)
 8004332:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004334:	4b48      	ldr	r3, [pc, #288]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800433a:	4b47      	ldr	r3, [pc, #284]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004340:	4b45      	ldr	r3, [pc, #276]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 8004342:	2280      	movs	r2, #128	@ 0x80
 8004344:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004346:	4b44      	ldr	r3, [pc, #272]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 8004348:	2200      	movs	r2, #0
 800434a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800434c:	4b42      	ldr	r3, [pc, #264]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 800434e:	2200      	movs	r2, #0
 8004350:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004352:	4b41      	ldr	r3, [pc, #260]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 8004354:	2200      	movs	r2, #0
 8004356:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004358:	4b3f      	ldr	r3, [pc, #252]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 800435a:	2200      	movs	r2, #0
 800435c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800435e:	483e      	ldr	r0, [pc, #248]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 8004360:	f000 f9bc 	bl	80046dc <HAL_DMA_Init>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800436a:	f7fd f803 	bl	8001374 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a39      	ldr	r2, [pc, #228]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 8004372:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004374:	4a38      	ldr	r2, [pc, #224]	@ (8004458 <HAL_UART_MspInit+0x1b0>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800437a:	4b39      	ldr	r3, [pc, #228]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 800437c:	4a39      	ldr	r2, [pc, #228]	@ (8004464 <HAL_UART_MspInit+0x1bc>)
 800437e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004380:	4b37      	ldr	r3, [pc, #220]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 8004382:	2210      	movs	r2, #16
 8004384:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004386:	4b36      	ldr	r3, [pc, #216]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 8004388:	2200      	movs	r2, #0
 800438a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800438c:	4b34      	ldr	r3, [pc, #208]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 800438e:	2280      	movs	r2, #128	@ 0x80
 8004390:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004392:	4b33      	ldr	r3, [pc, #204]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 8004394:	2200      	movs	r2, #0
 8004396:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004398:	4b31      	ldr	r3, [pc, #196]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 800439a:	2200      	movs	r2, #0
 800439c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800439e:	4b30      	ldr	r3, [pc, #192]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80043aa:	482d      	ldr	r0, [pc, #180]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 80043ac:	f000 f996 	bl	80046dc <HAL_DMA_Init>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80043b6:	f7fc ffdd 	bl	8001374 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a28      	ldr	r2, [pc, #160]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 80043be:	639a      	str	r2, [r3, #56]	@ 0x38
 80043c0:	4a27      	ldr	r2, [pc, #156]	@ (8004460 <HAL_UART_MspInit+0x1b8>)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2105      	movs	r1, #5
 80043ca:	2025      	movs	r0, #37	@ 0x25
 80043cc:	f000 f95b 	bl	8004686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043d0:	2025      	movs	r0, #37	@ 0x25
 80043d2:	f000 f974 	bl	80046be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80043d6:	e034      	b.n	8004442 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a22      	ldr	r2, [pc, #136]	@ (8004468 <HAL_UART_MspInit+0x1c0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d12f      	bne.n	8004442 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 80043e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ec:	61d3      	str	r3, [r2, #28]
 80043ee:	4b18      	ldr	r3, [pc, #96]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fa:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	4a14      	ldr	r2, [pc, #80]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6193      	str	r3, [r2, #24]
 8004406:	4b12      	ldr	r3, [pc, #72]	@ (8004450 <HAL_UART_MspInit+0x1a8>)
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004412:	2304      	movs	r3, #4
 8004414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004416:	2302      	movs	r3, #2
 8004418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800441a:	2303      	movs	r3, #3
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800441e:	f107 0318 	add.w	r3, r7, #24
 8004422:	4619      	mov	r1, r3
 8004424:	480b      	ldr	r0, [pc, #44]	@ (8004454 <HAL_UART_MspInit+0x1ac>)
 8004426:	f000 fbfb 	bl	8004c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800442a:	2308      	movs	r3, #8
 800442c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004432:	2300      	movs	r3, #0
 8004434:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004436:	f107 0318 	add.w	r3, r7, #24
 800443a:	4619      	mov	r1, r3
 800443c:	4805      	ldr	r0, [pc, #20]	@ (8004454 <HAL_UART_MspInit+0x1ac>)
 800443e:	f000 fbef 	bl	8004c20 <HAL_GPIO_Init>
}
 8004442:	bf00      	nop
 8004444:	3728      	adds	r7, #40	@ 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40013800 	.word	0x40013800
 8004450:	40021000 	.word	0x40021000
 8004454:	40010800 	.word	0x40010800
 8004458:	2000170c 	.word	0x2000170c
 800445c:	40020058 	.word	0x40020058
 8004460:	20001750 	.word	0x20001750
 8004464:	40020044 	.word	0x40020044
 8004468:	40004400 	.word	0x40004400

0800446c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800446c:	f7ff fcc2 	bl	8003df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004470:	480b      	ldr	r0, [pc, #44]	@ (80044a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004472:	490c      	ldr	r1, [pc, #48]	@ (80044a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004474:	4a0c      	ldr	r2, [pc, #48]	@ (80044a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004478:	e002      	b.n	8004480 <LoopCopyDataInit>

0800447a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800447a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800447c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800447e:	3304      	adds	r3, #4

08004480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004484:	d3f9      	bcc.n	800447a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004486:	4a09      	ldr	r2, [pc, #36]	@ (80044ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004488:	4c09      	ldr	r4, [pc, #36]	@ (80044b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800448a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800448c:	e001      	b.n	8004492 <LoopFillZerobss>

0800448e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800448e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004490:	3204      	adds	r2, #4

08004492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004494:	d3fb      	bcc.n	800448e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004496:	f007 ffe5 	bl	800c464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800449a:	f7fc fe51 	bl	8001140 <main>
  bx lr
 800449e:	4770      	bx	lr
  ldr r0, =_sdata
 80044a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044a4:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80044a8:	0800eaac 	.word	0x0800eaac
  ldr r2, =_sbss
 80044ac:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80044b0:	20002770 	.word	0x20002770

080044b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044b4:	e7fe      	b.n	80044b4 <ADC1_2_IRQHandler>
	...

080044b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044bc:	4b08      	ldr	r3, [pc, #32]	@ (80044e0 <HAL_Init+0x28>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a07      	ldr	r2, [pc, #28]	@ (80044e0 <HAL_Init+0x28>)
 80044c2:	f043 0310 	orr.w	r3, r3, #16
 80044c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044c8:	2003      	movs	r0, #3
 80044ca:	f000 f8d1 	bl	8004670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044ce:	200f      	movs	r0, #15
 80044d0:	f7ff fb1a 	bl	8003b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044d4:	f7ff fae0 	bl	8003a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40022000 	.word	0x40022000

080044e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <HAL_IncTick+0x1c>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <HAL_IncTick+0x20>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4413      	add	r3, r2
 80044f4:	4a03      	ldr	r2, [pc, #12]	@ (8004504 <HAL_IncTick+0x20>)
 80044f6:	6013      	str	r3, [r2, #0]
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	20000028 	.word	0x20000028
 8004504:	20001794 	.word	0x20001794

08004508 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return uwTick;
 800450c:	4b02      	ldr	r3, [pc, #8]	@ (8004518 <HAL_GetTick+0x10>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	20001794 	.word	0x20001794

0800451c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <__NVIC_SetPriorityGrouping+0x44>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004538:	4013      	ands	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800454c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800454e:	4a04      	ldr	r2, [pc, #16]	@ (8004560 <__NVIC_SetPriorityGrouping+0x44>)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	60d3      	str	r3, [r2, #12]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004568:	4b04      	ldr	r3, [pc, #16]	@ (800457c <__NVIC_GetPriorityGrouping+0x18>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	f003 0307 	and.w	r3, r3, #7
}
 8004572:	4618      	mov	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	2b00      	cmp	r3, #0
 8004590:	db0b      	blt.n	80045aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	f003 021f 	and.w	r2, r3, #31
 8004598:	4906      	ldr	r1, [pc, #24]	@ (80045b4 <__NVIC_EnableIRQ+0x34>)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2001      	movs	r0, #1
 80045a2:	fa00 f202 	lsl.w	r2, r0, r2
 80045a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	e000e100 	.word	0xe000e100

080045b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db0a      	blt.n	80045e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	490c      	ldr	r1, [pc, #48]	@ (8004604 <__NVIC_SetPriority+0x4c>)
 80045d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d6:	0112      	lsls	r2, r2, #4
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	440b      	add	r3, r1
 80045dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e0:	e00a      	b.n	80045f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4908      	ldr	r1, [pc, #32]	@ (8004608 <__NVIC_SetPriority+0x50>)
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	3b04      	subs	r3, #4
 80045f0:	0112      	lsls	r2, r2, #4
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	440b      	add	r3, r1
 80045f6:	761a      	strb	r2, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	e000e100 	.word	0xe000e100
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800460c:	b480      	push	{r7}
 800460e:	b089      	sub	sp, #36	@ 0x24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f1c3 0307 	rsb	r3, r3, #7
 8004626:	2b04      	cmp	r3, #4
 8004628:	bf28      	it	cs
 800462a:	2304      	movcs	r3, #4
 800462c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3304      	adds	r3, #4
 8004632:	2b06      	cmp	r3, #6
 8004634:	d902      	bls.n	800463c <NVIC_EncodePriority+0x30>
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3b03      	subs	r3, #3
 800463a:	e000      	b.n	800463e <NVIC_EncodePriority+0x32>
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	401a      	ands	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004654:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	43d9      	mvns	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004664:	4313      	orrs	r3, r2
         );
}
 8004666:	4618      	mov	r0, r3
 8004668:	3724      	adds	r7, #36	@ 0x24
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ff4f 	bl	800451c <__NVIC_SetPriorityGrouping>
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004686:	b580      	push	{r7, lr}
 8004688:	b086      	sub	sp, #24
 800468a:	af00      	add	r7, sp, #0
 800468c:	4603      	mov	r3, r0
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004698:	f7ff ff64 	bl	8004564 <__NVIC_GetPriorityGrouping>
 800469c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	6978      	ldr	r0, [r7, #20]
 80046a4:	f7ff ffb2 	bl	800460c <NVIC_EncodePriority>
 80046a8:	4602      	mov	r2, r0
 80046aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff81 	bl	80045b8 <__NVIC_SetPriority>
}
 80046b6:	bf00      	nop
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4603      	mov	r3, r0
 80046c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ff57 	bl	8004580 <__NVIC_EnableIRQ>
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e043      	b.n	800477a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	4b22      	ldr	r3, [pc, #136]	@ (8004784 <HAL_DMA_Init+0xa8>)
 80046fa:	4413      	add	r3, r2
 80046fc:	4a22      	ldr	r2, [pc, #136]	@ (8004788 <HAL_DMA_Init+0xac>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	009a      	lsls	r2, r3, #2
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <HAL_DMA_Init+0xb0>)
 800470e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004726:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800472a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800474c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr
 8004784:	bffdfff8 	.word	0xbffdfff8
 8004788:	cccccccd 	.word	0xcccccccd
 800478c:	40020000 	.word	0x40020000

08004790 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_DMA_Start_IT+0x20>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e04b      	b.n	8004848 <HAL_DMA_Start_IT+0xb8>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d13a      	bne.n	800483a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f9eb 	bl	8004bc4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 020e 	orr.w	r2, r2, #14
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e00f      	b.n	8004828 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 020a 	orr.w	r2, r2, #10
 8004826:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e005      	b.n	8004846 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004842:	2302      	movs	r3, #2
 8004844:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004846:	7dfb      	ldrb	r3, [r7, #23]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d008      	beq.n	800487a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2204      	movs	r2, #4
 800486c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e020      	b.n	80048bc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 020e 	bic.w	r2, r2, #14
 8004888:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a2:	2101      	movs	r1, #1
 80048a4:	fa01 f202 	lsl.w	r2, r1, r2
 80048a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
	...

080048c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d005      	beq.n	80048ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2204      	movs	r2, #4
 80048e4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	e051      	b.n	8004990 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 020e 	bic.w	r2, r2, #14
 80048fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a22      	ldr	r2, [pc, #136]	@ (800499c <HAL_DMA_Abort_IT+0xd4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d029      	beq.n	800496a <HAL_DMA_Abort_IT+0xa2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a21      	ldr	r2, [pc, #132]	@ (80049a0 <HAL_DMA_Abort_IT+0xd8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d022      	beq.n	8004966 <HAL_DMA_Abort_IT+0x9e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1f      	ldr	r2, [pc, #124]	@ (80049a4 <HAL_DMA_Abort_IT+0xdc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01a      	beq.n	8004960 <HAL_DMA_Abort_IT+0x98>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1e      	ldr	r2, [pc, #120]	@ (80049a8 <HAL_DMA_Abort_IT+0xe0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d012      	beq.n	800495a <HAL_DMA_Abort_IT+0x92>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1c      	ldr	r2, [pc, #112]	@ (80049ac <HAL_DMA_Abort_IT+0xe4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00a      	beq.n	8004954 <HAL_DMA_Abort_IT+0x8c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1b      	ldr	r2, [pc, #108]	@ (80049b0 <HAL_DMA_Abort_IT+0xe8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d102      	bne.n	800494e <HAL_DMA_Abort_IT+0x86>
 8004948:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800494c:	e00e      	b.n	800496c <HAL_DMA_Abort_IT+0xa4>
 800494e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004952:	e00b      	b.n	800496c <HAL_DMA_Abort_IT+0xa4>
 8004954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004958:	e008      	b.n	800496c <HAL_DMA_Abort_IT+0xa4>
 800495a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800495e:	e005      	b.n	800496c <HAL_DMA_Abort_IT+0xa4>
 8004960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004964:	e002      	b.n	800496c <HAL_DMA_Abort_IT+0xa4>
 8004966:	2310      	movs	r3, #16
 8004968:	e000      	b.n	800496c <HAL_DMA_Abort_IT+0xa4>
 800496a:	2301      	movs	r3, #1
 800496c:	4a11      	ldr	r2, [pc, #68]	@ (80049b4 <HAL_DMA_Abort_IT+0xec>)
 800496e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	4798      	blx	r3
    } 
  }
  return status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40020008 	.word	0x40020008
 80049a0:	4002001c 	.word	0x4002001c
 80049a4:	40020030 	.word	0x40020030
 80049a8:	40020044 	.word	0x40020044
 80049ac:	40020058 	.word	0x40020058
 80049b0:	4002006c 	.word	0x4002006c
 80049b4:	40020000 	.word	0x40020000

080049b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	2204      	movs	r2, #4
 80049d6:	409a      	lsls	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d04f      	beq.n	8004a80 <HAL_DMA_IRQHandler+0xc8>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d04a      	beq.n	8004a80 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d107      	bne.n	8004a08 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0204 	bic.w	r2, r2, #4
 8004a06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a66      	ldr	r2, [pc, #408]	@ (8004ba8 <HAL_DMA_IRQHandler+0x1f0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d029      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xae>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a65      	ldr	r2, [pc, #404]	@ (8004bac <HAL_DMA_IRQHandler+0x1f4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d022      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xaa>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a63      	ldr	r2, [pc, #396]	@ (8004bb0 <HAL_DMA_IRQHandler+0x1f8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01a      	beq.n	8004a5c <HAL_DMA_IRQHandler+0xa4>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a62      	ldr	r2, [pc, #392]	@ (8004bb4 <HAL_DMA_IRQHandler+0x1fc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d012      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x9e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a60      	ldr	r2, [pc, #384]	@ (8004bb8 <HAL_DMA_IRQHandler+0x200>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00a      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x98>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a5f      	ldr	r2, [pc, #380]	@ (8004bbc <HAL_DMA_IRQHandler+0x204>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d102      	bne.n	8004a4a <HAL_DMA_IRQHandler+0x92>
 8004a44:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a48:	e00e      	b.n	8004a68 <HAL_DMA_IRQHandler+0xb0>
 8004a4a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004a4e:	e00b      	b.n	8004a68 <HAL_DMA_IRQHandler+0xb0>
 8004a50:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004a54:	e008      	b.n	8004a68 <HAL_DMA_IRQHandler+0xb0>
 8004a56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a5a:	e005      	b.n	8004a68 <HAL_DMA_IRQHandler+0xb0>
 8004a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a60:	e002      	b.n	8004a68 <HAL_DMA_IRQHandler+0xb0>
 8004a62:	2340      	movs	r3, #64	@ 0x40
 8004a64:	e000      	b.n	8004a68 <HAL_DMA_IRQHandler+0xb0>
 8004a66:	2304      	movs	r3, #4
 8004a68:	4a55      	ldr	r2, [pc, #340]	@ (8004bc0 <HAL_DMA_IRQHandler+0x208>)
 8004a6a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8094 	beq.w	8004b9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004a7e:	e08e      	b.n	8004b9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	2202      	movs	r2, #2
 8004a86:	409a      	lsls	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d056      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x186>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d051      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 020a 	bic.w	r2, r2, #10
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a38      	ldr	r2, [pc, #224]	@ (8004ba8 <HAL_DMA_IRQHandler+0x1f0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d029      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x166>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a37      	ldr	r2, [pc, #220]	@ (8004bac <HAL_DMA_IRQHandler+0x1f4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d022      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x162>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a35      	ldr	r2, [pc, #212]	@ (8004bb0 <HAL_DMA_IRQHandler+0x1f8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d01a      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x15c>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a34      	ldr	r2, [pc, #208]	@ (8004bb4 <HAL_DMA_IRQHandler+0x1fc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d012      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x156>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a32      	ldr	r2, [pc, #200]	@ (8004bb8 <HAL_DMA_IRQHandler+0x200>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00a      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x150>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a31      	ldr	r2, [pc, #196]	@ (8004bbc <HAL_DMA_IRQHandler+0x204>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d102      	bne.n	8004b02 <HAL_DMA_IRQHandler+0x14a>
 8004afc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004b00:	e00e      	b.n	8004b20 <HAL_DMA_IRQHandler+0x168>
 8004b02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b06:	e00b      	b.n	8004b20 <HAL_DMA_IRQHandler+0x168>
 8004b08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b0c:	e008      	b.n	8004b20 <HAL_DMA_IRQHandler+0x168>
 8004b0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b12:	e005      	b.n	8004b20 <HAL_DMA_IRQHandler+0x168>
 8004b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b18:	e002      	b.n	8004b20 <HAL_DMA_IRQHandler+0x168>
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	e000      	b.n	8004b20 <HAL_DMA_IRQHandler+0x168>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	4a27      	ldr	r2, [pc, #156]	@ (8004bc0 <HAL_DMA_IRQHandler+0x208>)
 8004b22:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d034      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004b3c:	e02f      	b.n	8004b9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	2208      	movs	r2, #8
 8004b44:	409a      	lsls	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d028      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x1e8>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d023      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 020e 	bic.w	r2, r2, #14
 8004b66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	2101      	movs	r1, #1
 8004b72:	fa01 f202 	lsl.w	r2, r1, r2
 8004b76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
    }
  }
  return;
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
}
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40020008 	.word	0x40020008
 8004bac:	4002001c 	.word	0x4002001c
 8004bb0:	40020030 	.word	0x40020030
 8004bb4:	40020044 	.word	0x40020044
 8004bb8:	40020058 	.word	0x40020058
 8004bbc:	4002006c 	.word	0x4002006c
 8004bc0:	40020000 	.word	0x40020000

08004bc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bda:	2101      	movs	r1, #1
 8004bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004be0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b10      	cmp	r3, #16
 8004bf0:	d108      	bne.n	8004c04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c02:	e007      	b.n	8004c14 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	60da      	str	r2, [r3, #12]
}
 8004c14:	bf00      	nop
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b08b      	sub	sp, #44	@ 0x2c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c32:	e169      	b.n	8004f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c34:	2201      	movs	r2, #1
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	4013      	ands	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	f040 8158 	bne.w	8004f02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4a9a      	ldr	r2, [pc, #616]	@ (8004ec0 <HAL_GPIO_Init+0x2a0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d05e      	beq.n	8004d1a <HAL_GPIO_Init+0xfa>
 8004c5c:	4a98      	ldr	r2, [pc, #608]	@ (8004ec0 <HAL_GPIO_Init+0x2a0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d875      	bhi.n	8004d4e <HAL_GPIO_Init+0x12e>
 8004c62:	4a98      	ldr	r2, [pc, #608]	@ (8004ec4 <HAL_GPIO_Init+0x2a4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d058      	beq.n	8004d1a <HAL_GPIO_Init+0xfa>
 8004c68:	4a96      	ldr	r2, [pc, #600]	@ (8004ec4 <HAL_GPIO_Init+0x2a4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d86f      	bhi.n	8004d4e <HAL_GPIO_Init+0x12e>
 8004c6e:	4a96      	ldr	r2, [pc, #600]	@ (8004ec8 <HAL_GPIO_Init+0x2a8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d052      	beq.n	8004d1a <HAL_GPIO_Init+0xfa>
 8004c74:	4a94      	ldr	r2, [pc, #592]	@ (8004ec8 <HAL_GPIO_Init+0x2a8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d869      	bhi.n	8004d4e <HAL_GPIO_Init+0x12e>
 8004c7a:	4a94      	ldr	r2, [pc, #592]	@ (8004ecc <HAL_GPIO_Init+0x2ac>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d04c      	beq.n	8004d1a <HAL_GPIO_Init+0xfa>
 8004c80:	4a92      	ldr	r2, [pc, #584]	@ (8004ecc <HAL_GPIO_Init+0x2ac>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d863      	bhi.n	8004d4e <HAL_GPIO_Init+0x12e>
 8004c86:	4a92      	ldr	r2, [pc, #584]	@ (8004ed0 <HAL_GPIO_Init+0x2b0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d046      	beq.n	8004d1a <HAL_GPIO_Init+0xfa>
 8004c8c:	4a90      	ldr	r2, [pc, #576]	@ (8004ed0 <HAL_GPIO_Init+0x2b0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d85d      	bhi.n	8004d4e <HAL_GPIO_Init+0x12e>
 8004c92:	2b12      	cmp	r3, #18
 8004c94:	d82a      	bhi.n	8004cec <HAL_GPIO_Init+0xcc>
 8004c96:	2b12      	cmp	r3, #18
 8004c98:	d859      	bhi.n	8004d4e <HAL_GPIO_Init+0x12e>
 8004c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <HAL_GPIO_Init+0x80>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004d1b 	.word	0x08004d1b
 8004ca4:	08004cf5 	.word	0x08004cf5
 8004ca8:	08004d07 	.word	0x08004d07
 8004cac:	08004d49 	.word	0x08004d49
 8004cb0:	08004d4f 	.word	0x08004d4f
 8004cb4:	08004d4f 	.word	0x08004d4f
 8004cb8:	08004d4f 	.word	0x08004d4f
 8004cbc:	08004d4f 	.word	0x08004d4f
 8004cc0:	08004d4f 	.word	0x08004d4f
 8004cc4:	08004d4f 	.word	0x08004d4f
 8004cc8:	08004d4f 	.word	0x08004d4f
 8004ccc:	08004d4f 	.word	0x08004d4f
 8004cd0:	08004d4f 	.word	0x08004d4f
 8004cd4:	08004d4f 	.word	0x08004d4f
 8004cd8:	08004d4f 	.word	0x08004d4f
 8004cdc:	08004d4f 	.word	0x08004d4f
 8004ce0:	08004d4f 	.word	0x08004d4f
 8004ce4:	08004cfd 	.word	0x08004cfd
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	4a79      	ldr	r2, [pc, #484]	@ (8004ed4 <HAL_GPIO_Init+0x2b4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004cf2:	e02c      	b.n	8004d4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	623b      	str	r3, [r7, #32]
          break;
 8004cfa:	e029      	b.n	8004d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	3304      	adds	r3, #4
 8004d02:	623b      	str	r3, [r7, #32]
          break;
 8004d04:	e024      	b.n	8004d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	623b      	str	r3, [r7, #32]
          break;
 8004d0e:	e01f      	b.n	8004d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	330c      	adds	r3, #12
 8004d16:	623b      	str	r3, [r7, #32]
          break;
 8004d18:	e01a      	b.n	8004d50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004d22:	2304      	movs	r3, #4
 8004d24:	623b      	str	r3, [r7, #32]
          break;
 8004d26:	e013      	b.n	8004d50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d105      	bne.n	8004d3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d30:	2308      	movs	r3, #8
 8004d32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	611a      	str	r2, [r3, #16]
          break;
 8004d3a:	e009      	b.n	8004d50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	615a      	str	r2, [r3, #20]
          break;
 8004d46:	e003      	b.n	8004d50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	623b      	str	r3, [r7, #32]
          break;
 8004d4c:	e000      	b.n	8004d50 <HAL_GPIO_Init+0x130>
          break;
 8004d4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2bff      	cmp	r3, #255	@ 0xff
 8004d54:	d801      	bhi.n	8004d5a <HAL_GPIO_Init+0x13a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	e001      	b.n	8004d5e <HAL_GPIO_Init+0x13e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2bff      	cmp	r3, #255	@ 0xff
 8004d64:	d802      	bhi.n	8004d6c <HAL_GPIO_Init+0x14c>
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	e002      	b.n	8004d72 <HAL_GPIO_Init+0x152>
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	3b08      	subs	r3, #8
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	210f      	movs	r1, #15
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	401a      	ands	r2, r3
 8004d84:	6a39      	ldr	r1, [r7, #32]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80b1 	beq.w	8004f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004da0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ed8 <HAL_GPIO_Init+0x2b8>)
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	4a4c      	ldr	r2, [pc, #304]	@ (8004ed8 <HAL_GPIO_Init+0x2b8>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	6193      	str	r3, [r2, #24]
 8004dac:	4b4a      	ldr	r3, [pc, #296]	@ (8004ed8 <HAL_GPIO_Init+0x2b8>)
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004db8:	4a48      	ldr	r2, [pc, #288]	@ (8004edc <HAL_GPIO_Init+0x2bc>)
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	089b      	lsrs	r3, r3, #2
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	220f      	movs	r2, #15
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a40      	ldr	r2, [pc, #256]	@ (8004ee0 <HAL_GPIO_Init+0x2c0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <HAL_GPIO_Init+0x1ec>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ee4 <HAL_GPIO_Init+0x2c4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00d      	beq.n	8004e08 <HAL_GPIO_Init+0x1e8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3e      	ldr	r2, [pc, #248]	@ (8004ee8 <HAL_GPIO_Init+0x2c8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <HAL_GPIO_Init+0x1e4>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3d      	ldr	r2, [pc, #244]	@ (8004eec <HAL_GPIO_Init+0x2cc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <HAL_GPIO_Init+0x1e0>
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e006      	b.n	8004e0e <HAL_GPIO_Init+0x1ee>
 8004e00:	2304      	movs	r3, #4
 8004e02:	e004      	b.n	8004e0e <HAL_GPIO_Init+0x1ee>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e002      	b.n	8004e0e <HAL_GPIO_Init+0x1ee>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <HAL_GPIO_Init+0x1ee>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e10:	f002 0203 	and.w	r2, r2, #3
 8004e14:	0092      	lsls	r2, r2, #2
 8004e16:	4093      	lsls	r3, r2
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004e1e:	492f      	ldr	r1, [pc, #188]	@ (8004edc <HAL_GPIO_Init+0x2bc>)
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	3302      	adds	r3, #2
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d006      	beq.n	8004e46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e38:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	492c      	ldr	r1, [pc, #176]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]
 8004e44:	e006      	b.n	8004e54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004e46:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	4928      	ldr	r1, [pc, #160]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d006      	beq.n	8004e6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004e60:	4b23      	ldr	r3, [pc, #140]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	4922      	ldr	r1, [pc, #136]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60cb      	str	r3, [r1, #12]
 8004e6c:	e006      	b.n	8004e7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004e6e:	4b20      	ldr	r3, [pc, #128]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	491e      	ldr	r1, [pc, #120]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d006      	beq.n	8004e96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004e88:	4b19      	ldr	r3, [pc, #100]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	4918      	ldr	r1, [pc, #96]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	604b      	str	r3, [r1, #4]
 8004e94:	e006      	b.n	8004ea4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004e96:	4b16      	ldr	r3, [pc, #88]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	4914      	ldr	r1, [pc, #80]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d021      	beq.n	8004ef4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	490e      	ldr	r1, [pc, #56]	@ (8004ef0 <HAL_GPIO_Init+0x2d0>)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]
 8004ebc:	e021      	b.n	8004f02 <HAL_GPIO_Init+0x2e2>
 8004ebe:	bf00      	nop
 8004ec0:	10320000 	.word	0x10320000
 8004ec4:	10310000 	.word	0x10310000
 8004ec8:	10220000 	.word	0x10220000
 8004ecc:	10210000 	.word	0x10210000
 8004ed0:	10120000 	.word	0x10120000
 8004ed4:	10110000 	.word	0x10110000
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40010800 	.word	0x40010800
 8004ee4:	40010c00 	.word	0x40010c00
 8004ee8:	40011000 	.word	0x40011000
 8004eec:	40011400 	.word	0x40011400
 8004ef0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	43db      	mvns	r3, r3
 8004efc:	4909      	ldr	r1, [pc, #36]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	3301      	adds	r3, #1
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f47f ae8e 	bne.w	8004c34 <HAL_GPIO_Init+0x14>
  }
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	372c      	adds	r7, #44	@ 0x2c
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr
 8004f24:	40010400 	.word	0x40010400

08004f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
 8004f34:	4613      	mov	r3, r2
 8004f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f38:	787b      	ldrb	r3, [r7, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004f44:	e003      	b.n	8004f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f46:	887b      	ldrh	r3, [r7, #2]
 8004f48:	041a      	lsls	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e272      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 8087 	beq.w	8005086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f78:	4b92      	ldr	r3, [pc, #584]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d00c      	beq.n	8004f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f84:	4b8f      	ldr	r3, [pc, #572]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d112      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x5e>
 8004f90:	4b8c      	ldr	r3, [pc, #560]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9c:	d10b      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f9e:	4b89      	ldr	r3, [pc, #548]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d06c      	beq.n	8005084 <HAL_RCC_OscConfig+0x12c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d168      	bne.n	8005084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e24c      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_OscConfig+0x76>
 8004fc0:	4b80      	ldr	r3, [pc, #512]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a7f      	ldr	r2, [pc, #508]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e02e      	b.n	800502c <HAL_RCC_OscConfig+0xd4>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x98>
 8004fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a7a      	ldr	r2, [pc, #488]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4b78      	ldr	r3, [pc, #480]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a77      	ldr	r2, [pc, #476]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e01d      	b.n	800502c <HAL_RCC_OscConfig+0xd4>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCC_OscConfig+0xbc>
 8004ffa:	4b72      	ldr	r3, [pc, #456]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a71      	ldr	r2, [pc, #452]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b6f      	ldr	r3, [pc, #444]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6e      	ldr	r2, [pc, #440]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e00b      	b.n	800502c <HAL_RCC_OscConfig+0xd4>
 8005014:	4b6b      	ldr	r3, [pc, #428]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a6a      	ldr	r2, [pc, #424]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 800501a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	4b68      	ldr	r3, [pc, #416]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a67      	ldr	r2, [pc, #412]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800502a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d013      	beq.n	800505c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7ff fa68 	bl	8004508 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800503c:	f7ff fa64 	bl	8004508 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	@ 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e200      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504e:	4b5d      	ldr	r3, [pc, #372]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0xe4>
 800505a:	e014      	b.n	8005086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7ff fa54 	bl	8004508 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005064:	f7ff fa50 	bl	8004508 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	@ 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e1ec      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005076:	4b53      	ldr	r3, [pc, #332]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x10c>
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d063      	beq.n	800515a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005092:	4b4c      	ldr	r3, [pc, #304]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800509e:	4b49      	ldr	r3, [pc, #292]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d11c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x18c>
 80050aa:	4b46      	ldr	r3, [pc, #280]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d116      	bne.n	80050e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b6:	4b43      	ldr	r3, [pc, #268]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_RCC_OscConfig+0x176>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e1c0      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ce:	4b3d      	ldr	r3, [pc, #244]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4939      	ldr	r1, [pc, #228]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e2:	e03a      	b.n	800515a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d020      	beq.n	800512e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ec:	4b36      	ldr	r3, [pc, #216]	@ (80051c8 <HAL_RCC_OscConfig+0x270>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f2:	f7ff fa09 	bl	8004508 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050fa:	f7ff fa05 	bl	8004508 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e1a1      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510c:	4b2d      	ldr	r3, [pc, #180]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005118:	4b2a      	ldr	r3, [pc, #168]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4927      	ldr	r1, [pc, #156]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005128:	4313      	orrs	r3, r2
 800512a:	600b      	str	r3, [r1, #0]
 800512c:	e015      	b.n	800515a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512e:	4b26      	ldr	r3, [pc, #152]	@ (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7ff f9e8 	bl	8004508 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513c:	f7ff f9e4 	bl	8004508 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e180      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514e:	4b1d      	ldr	r3, [pc, #116]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d03a      	beq.n	80051dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d019      	beq.n	80051a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516e:	4b17      	ldr	r3, [pc, #92]	@ (80051cc <HAL_RCC_OscConfig+0x274>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005174:	f7ff f9c8 	bl	8004508 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800517c:	f7ff f9c4 	bl	8004508 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e160      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518e:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800519a:	2001      	movs	r0, #1
 800519c:	f000 fafe 	bl	800579c <RCC_Delay>
 80051a0:	e01c      	b.n	80051dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a2:	4b0a      	ldr	r3, [pc, #40]	@ (80051cc <HAL_RCC_OscConfig+0x274>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a8:	f7ff f9ae 	bl	8004508 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ae:	e00f      	b.n	80051d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b0:	f7ff f9aa 	bl	8004508 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d908      	bls.n	80051d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e146      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	42420000 	.word	0x42420000
 80051cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d0:	4b92      	ldr	r3, [pc, #584]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e9      	bne.n	80051b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80a6 	beq.w	8005336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ea:	2300      	movs	r3, #0
 80051ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ee:	4b8b      	ldr	r3, [pc, #556]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10d      	bne.n	8005216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fa:	4b88      	ldr	r3, [pc, #544]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	4a87      	ldr	r2, [pc, #540]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005204:	61d3      	str	r3, [r2, #28]
 8005206:	4b85      	ldr	r3, [pc, #532]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005216:	4b82      	ldr	r3, [pc, #520]	@ (8005420 <HAL_RCC_OscConfig+0x4c8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d118      	bne.n	8005254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005222:	4b7f      	ldr	r3, [pc, #508]	@ (8005420 <HAL_RCC_OscConfig+0x4c8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a7e      	ldr	r2, [pc, #504]	@ (8005420 <HAL_RCC_OscConfig+0x4c8>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800522c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800522e:	f7ff f96b 	bl	8004508 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005236:	f7ff f967 	bl	8004508 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b64      	cmp	r3, #100	@ 0x64
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e103      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005248:	4b75      	ldr	r3, [pc, #468]	@ (8005420 <HAL_RCC_OscConfig+0x4c8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d106      	bne.n	800526a <HAL_RCC_OscConfig+0x312>
 800525c:	4b6f      	ldr	r3, [pc, #444]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	4a6e      	ldr	r2, [pc, #440]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	6213      	str	r3, [r2, #32]
 8005268:	e02d      	b.n	80052c6 <HAL_RCC_OscConfig+0x36e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10c      	bne.n	800528c <HAL_RCC_OscConfig+0x334>
 8005272:	4b6a      	ldr	r3, [pc, #424]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	4a69      	ldr	r2, [pc, #420]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	6213      	str	r3, [r2, #32]
 800527e:	4b67      	ldr	r3, [pc, #412]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	4a66      	ldr	r2, [pc, #408]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005284:	f023 0304 	bic.w	r3, r3, #4
 8005288:	6213      	str	r3, [r2, #32]
 800528a:	e01c      	b.n	80052c6 <HAL_RCC_OscConfig+0x36e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b05      	cmp	r3, #5
 8005292:	d10c      	bne.n	80052ae <HAL_RCC_OscConfig+0x356>
 8005294:	4b61      	ldr	r3, [pc, #388]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	4a60      	ldr	r2, [pc, #384]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 800529a:	f043 0304 	orr.w	r3, r3, #4
 800529e:	6213      	str	r3, [r2, #32]
 80052a0:	4b5e      	ldr	r3, [pc, #376]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	4a5d      	ldr	r2, [pc, #372]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	6213      	str	r3, [r2, #32]
 80052ac:	e00b      	b.n	80052c6 <HAL_RCC_OscConfig+0x36e>
 80052ae:	4b5b      	ldr	r3, [pc, #364]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	4a5a      	ldr	r2, [pc, #360]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	6213      	str	r3, [r2, #32]
 80052ba:	4b58      	ldr	r3, [pc, #352]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	4a57      	ldr	r2, [pc, #348]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	f023 0304 	bic.w	r3, r3, #4
 80052c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d015      	beq.n	80052fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ce:	f7ff f91b 	bl	8004508 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d4:	e00a      	b.n	80052ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d6:	f7ff f917 	bl	8004508 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e0b1      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ec:	4b4b      	ldr	r3, [pc, #300]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ee      	beq.n	80052d6 <HAL_RCC_OscConfig+0x37e>
 80052f8:	e014      	b.n	8005324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fa:	f7ff f905 	bl	8004508 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005300:	e00a      	b.n	8005318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7ff f901 	bl	8004508 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e09b      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005318:	4b40      	ldr	r3, [pc, #256]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ee      	bne.n	8005302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d105      	bne.n	8005336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532a:	4b3c      	ldr	r3, [pc, #240]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	4a3b      	ldr	r2, [pc, #236]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8087 	beq.w	800544e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005340:	4b36      	ldr	r3, [pc, #216]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 030c 	and.w	r3, r3, #12
 8005348:	2b08      	cmp	r3, #8
 800534a:	d061      	beq.n	8005410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d146      	bne.n	80053e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005354:	4b33      	ldr	r3, [pc, #204]	@ (8005424 <HAL_RCC_OscConfig+0x4cc>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535a:	f7ff f8d5 	bl	8004508 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005362:	f7ff f8d1 	bl	8004508 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e06d      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005374:	4b29      	ldr	r3, [pc, #164]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f0      	bne.n	8005362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005388:	d108      	bne.n	800539c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800538a:	4b24      	ldr	r3, [pc, #144]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	4921      	ldr	r1, [pc, #132]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800539c:	4b1f      	ldr	r3, [pc, #124]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a19      	ldr	r1, [r3, #32]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ac:	430b      	orrs	r3, r1
 80053ae:	491b      	ldr	r1, [pc, #108]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <HAL_RCC_OscConfig+0x4cc>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ba:	f7ff f8a5 	bl	8004508 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c2:	f7ff f8a1 	bl	8004508 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e03d      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053d4:	4b11      	ldr	r3, [pc, #68]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x46a>
 80053e0:	e035      	b.n	800544e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <HAL_RCC_OscConfig+0x4cc>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7ff f88e 	bl	8004508 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f0:	f7ff f88a 	bl	8004508 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e026      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x498>
 800540e:	e01e      	b.n	800544e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e019      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
 800541c:	40021000 	.word	0x40021000
 8005420:	40007000 	.word	0x40007000
 8005424:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005428:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_OscConfig+0x500>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	429a      	cmp	r2, r3
 800543a:	d106      	bne.n	800544a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d001      	beq.n	800544e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40021000 	.word	0x40021000

0800545c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e0d0      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005470:	4b6a      	ldr	r3, [pc, #424]	@ (800561c <HAL_RCC_ClockConfig+0x1c0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d910      	bls.n	80054a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	4b67      	ldr	r3, [pc, #412]	@ (800561c <HAL_RCC_ClockConfig+0x1c0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 0207 	bic.w	r2, r3, #7
 8005486:	4965      	ldr	r1, [pc, #404]	@ (800561c <HAL_RCC_ClockConfig+0x1c0>)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	4313      	orrs	r3, r2
 800548c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	4b63      	ldr	r3, [pc, #396]	@ (800561c <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0b8      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d020      	beq.n	80054ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054b8:	4b59      	ldr	r3, [pc, #356]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a58      	ldr	r2, [pc, #352]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d0:	4b53      	ldr	r3, [pc, #332]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	4a52      	ldr	r2, [pc, #328]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80054da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054dc:	4b50      	ldr	r3, [pc, #320]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	494d      	ldr	r1, [pc, #308]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d040      	beq.n	800557c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d107      	bne.n	8005512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005502:	4b47      	ldr	r3, [pc, #284]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d115      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e07f      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d107      	bne.n	800552a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551a:	4b41      	ldr	r3, [pc, #260]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e073      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552a:	4b3d      	ldr	r3, [pc, #244]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e06b      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800553a:	4b39      	ldr	r3, [pc, #228]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f023 0203 	bic.w	r2, r3, #3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4936      	ldr	r1, [pc, #216]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 8005548:	4313      	orrs	r3, r2
 800554a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800554c:	f7fe ffdc 	bl	8004508 <HAL_GetTick>
 8005550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005552:	e00a      	b.n	800556a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005554:	f7fe ffd8 	bl	8004508 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e053      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556a:	4b2d      	ldr	r3, [pc, #180]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 020c 	and.w	r2, r3, #12
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	429a      	cmp	r2, r3
 800557a:	d1eb      	bne.n	8005554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800557c:	4b27      	ldr	r3, [pc, #156]	@ (800561c <HAL_RCC_ClockConfig+0x1c0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d210      	bcs.n	80055ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b24      	ldr	r3, [pc, #144]	@ (800561c <HAL_RCC_ClockConfig+0x1c0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 0207 	bic.w	r2, r3, #7
 8005592:	4922      	ldr	r1, [pc, #136]	@ (800561c <HAL_RCC_ClockConfig+0x1c0>)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	4313      	orrs	r3, r2
 8005598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559a:	4b20      	ldr	r3, [pc, #128]	@ (800561c <HAL_RCC_ClockConfig+0x1c0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e032      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055b8:	4b19      	ldr	r3, [pc, #100]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4916      	ldr	r1, [pc, #88]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055d6:	4b12      	ldr	r3, [pc, #72]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	490e      	ldr	r1, [pc, #56]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055ea:	f000 f821 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 80055ee:	4602      	mov	r2, r0
 80055f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	490a      	ldr	r1, [pc, #40]	@ (8005624 <HAL_RCC_ClockConfig+0x1c8>)
 80055fc:	5ccb      	ldrb	r3, [r1, r3]
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	4a09      	ldr	r2, [pc, #36]	@ (8005628 <HAL_RCC_ClockConfig+0x1cc>)
 8005604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005606:	4b09      	ldr	r3, [pc, #36]	@ (800562c <HAL_RCC_ClockConfig+0x1d0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe fa7c 	bl	8003b08 <HAL_InitTick>

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40022000 	.word	0x40022000
 8005620:	40021000 	.word	0x40021000
 8005624:	0800e6cc 	.word	0x0800e6cc
 8005628:	20000020 	.word	0x20000020
 800562c:	20000024 	.word	0x20000024

08005630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	2300      	movs	r3, #0
 8005644:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800564a:	4b1e      	ldr	r3, [pc, #120]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b04      	cmp	r3, #4
 8005658:	d002      	beq.n	8005660 <HAL_RCC_GetSysClockFreq+0x30>
 800565a:	2b08      	cmp	r3, #8
 800565c:	d003      	beq.n	8005666 <HAL_RCC_GetSysClockFreq+0x36>
 800565e:	e027      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005660:	4b19      	ldr	r3, [pc, #100]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005662:	613b      	str	r3, [r7, #16]
      break;
 8005664:	e027      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	0c9b      	lsrs	r3, r3, #18
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	4a17      	ldr	r2, [pc, #92]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005670:	5cd3      	ldrb	r3, [r2, r3]
 8005672:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d010      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800567e:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	0c5b      	lsrs	r3, r3, #17
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	4a11      	ldr	r2, [pc, #68]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800568a:	5cd3      	ldrb	r3, [r2, r3]
 800568c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a0d      	ldr	r2, [pc, #52]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005692:	fb03 f202 	mul.w	r2, r3, r2
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	fbb2 f3f3 	udiv	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e004      	b.n	80056aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a0c      	ldr	r2, [pc, #48]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056a4:	fb02 f303 	mul.w	r3, r2, r3
 80056a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	613b      	str	r3, [r7, #16]
      break;
 80056ae:	e002      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056b0:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80056b2:	613b      	str	r3, [r7, #16]
      break;
 80056b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056b6:	693b      	ldr	r3, [r7, #16]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40021000 	.word	0x40021000
 80056c8:	007a1200 	.word	0x007a1200
 80056cc:	0800e6e4 	.word	0x0800e6e4
 80056d0:	0800e6f4 	.word	0x0800e6f4
 80056d4:	003d0900 	.word	0x003d0900

080056d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056dc:	4b02      	ldr	r3, [pc, #8]	@ (80056e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80056de:	681b      	ldr	r3, [r3, #0]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	20000020 	.word	0x20000020

080056ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056f0:	f7ff fff2 	bl	80056d8 <HAL_RCC_GetHCLKFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b05      	ldr	r3, [pc, #20]	@ (800570c <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	0a1b      	lsrs	r3, r3, #8
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	4903      	ldr	r1, [pc, #12]	@ (8005710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40021000 	.word	0x40021000
 8005710:	0800e6dc 	.word	0x0800e6dc

08005714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005718:	f7ff ffde 	bl	80056d8 <HAL_RCC_GetHCLKFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b05      	ldr	r3, [pc, #20]	@ (8005734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	0adb      	lsrs	r3, r3, #11
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4903      	ldr	r1, [pc, #12]	@ (8005738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40021000 	.word	0x40021000
 8005738:	0800e6dc 	.word	0x0800e6dc

0800573c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	220f      	movs	r2, #15
 800574a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800574c:	4b11      	ldr	r3, [pc, #68]	@ (8005794 <HAL_RCC_GetClockConfig+0x58>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 0203 	and.w	r2, r3, #3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005758:	4b0e      	ldr	r3, [pc, #56]	@ (8005794 <HAL_RCC_GetClockConfig+0x58>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005764:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <HAL_RCC_GetClockConfig+0x58>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005770:	4b08      	ldr	r3, [pc, #32]	@ (8005794 <HAL_RCC_GetClockConfig+0x58>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	08db      	lsrs	r3, r3, #3
 8005776:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800577e:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <HAL_RCC_GetClockConfig+0x5c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0207 	and.w	r2, r3, #7
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	40021000 	.word	0x40021000
 8005798:	40022000 	.word	0x40022000

0800579c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057a4:	4b0a      	ldr	r3, [pc, #40]	@ (80057d0 <RCC_Delay+0x34>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a0a      	ldr	r2, [pc, #40]	@ (80057d4 <RCC_Delay+0x38>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	0a5b      	lsrs	r3, r3, #9
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057b8:	bf00      	nop
  }
  while (Delay --);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1e5a      	subs	r2, r3, #1
 80057be:	60fa      	str	r2, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f9      	bne.n	80057b8 <RCC_Delay+0x1c>
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr
 80057d0:	20000020 	.word	0x20000020
 80057d4:	10624dd3 	.word	0x10624dd3

080057d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e041      	b.n	800586e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f839 	bl	8005876 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f000 fc98 	bl	800614c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d001      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e03a      	b.n	8005916 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a18      	ldr	r2, [pc, #96]	@ (8005920 <HAL_TIM_Base_Start_IT+0x98>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00e      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0x58>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ca:	d009      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0x58>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a14      	ldr	r2, [pc, #80]	@ (8005924 <HAL_TIM_Base_Start_IT+0x9c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0x58>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a13      	ldr	r2, [pc, #76]	@ (8005928 <HAL_TIM_Base_Start_IT+0xa0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d111      	bne.n	8005904 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b06      	cmp	r3, #6
 80058f0:	d010      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	e007      	b.n	8005914 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr
 8005920:	40012c00 	.word	0x40012c00
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800

0800592c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e041      	b.n	80059c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fe fb70 	bl	8004038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f000 fbee 	bl	800614c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <HAL_TIM_PWM_Start+0x24>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	bf14      	ite	ne
 80059e8:	2301      	movne	r3, #1
 80059ea:	2300      	moveq	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	e022      	b.n	8005a36 <HAL_TIM_PWM_Start+0x6a>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d109      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x3e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	e015      	b.n	8005a36 <HAL_TIM_PWM_Start+0x6a>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d109      	bne.n	8005a24 <HAL_TIM_PWM_Start+0x58>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	bf14      	ite	ne
 8005a1c:	2301      	movne	r3, #1
 8005a1e:	2300      	moveq	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	e008      	b.n	8005a36 <HAL_TIM_PWM_Start+0x6a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e05e      	b.n	8005afc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_TIM_PWM_Start+0x82>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a4c:	e013      	b.n	8005a76 <HAL_TIM_PWM_Start+0xaa>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d104      	bne.n	8005a5e <HAL_TIM_PWM_Start+0x92>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a5c:	e00b      	b.n	8005a76 <HAL_TIM_PWM_Start+0xaa>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_PWM_Start+0xa2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a6c:	e003      	b.n	8005a76 <HAL_TIM_PWM_Start+0xaa>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fd4e 	bl	8006520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1e      	ldr	r2, [pc, #120]	@ (8005b04 <HAL_TIM_PWM_Start+0x138>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d107      	bne.n	8005a9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a18      	ldr	r2, [pc, #96]	@ (8005b04 <HAL_TIM_PWM_Start+0x138>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0xfa>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0xfa>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a14      	ldr	r2, [pc, #80]	@ (8005b08 <HAL_TIM_PWM_Start+0x13c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0xfa>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a12      	ldr	r2, [pc, #72]	@ (8005b0c <HAL_TIM_PWM_Start+0x140>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d111      	bne.n	8005aea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b06      	cmp	r3, #6
 8005ad6:	d010      	beq.n	8005afa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae8:	e007      	b.n	8005afa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40012c00 	.word	0x40012c00
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800

08005b10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e093      	b.n	8005c4c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fe fa99 	bl	8004070 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b54:	f023 0307 	bic.w	r3, r3, #7
 8005b58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4619      	mov	r1, r3
 8005b64:	4610      	mov	r0, r2
 8005b66:	f000 faf1 	bl	800614c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005bb0:	f023 030c 	bic.w	r3, r3, #12
 8005bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	011a      	lsls	r2, r3, #4
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	031b      	lsls	r3, r3, #12
 8005be0:	4313      	orrs	r3, r2
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005bee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d110      	bne.n	8005ca6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d102      	bne.n	8005c90 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c8a:	7b7b      	ldrb	r3, [r7, #13]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d001      	beq.n	8005c94 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e069      	b.n	8005d68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ca4:	e031      	b.n	8005d0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d110      	bne.n	8005cce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cac:	7bbb      	ldrb	r3, [r7, #14]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d102      	bne.n	8005cb8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cb2:	7b3b      	ldrb	r3, [r7, #12]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d001      	beq.n	8005cbc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e055      	b.n	8005d68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ccc:	e01d      	b.n	8005d0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d108      	bne.n	8005ce6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cda:	7b7b      	ldrb	r3, [r7, #13]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d102      	bne.n	8005ce6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ce0:	7b3b      	ldrb	r3, [r7, #12]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d001      	beq.n	8005cea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e03e      	b.n	8005d68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_TIM_Encoder_Start+0xc4>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d008      	beq.n	8005d28 <HAL_TIM_Encoder_Start+0xd4>
 8005d16:	e00f      	b.n	8005d38 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	2100      	movs	r1, #0
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fbfd 	bl	8006520 <TIM_CCxChannelCmd>
      break;
 8005d26:	e016      	b.n	8005d56 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	2104      	movs	r1, #4
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fbf5 	bl	8006520 <TIM_CCxChannelCmd>
      break;
 8005d36:	e00e      	b.n	8005d56 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fbed 	bl	8006520 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	2104      	movs	r1, #4
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fbe6 	bl	8006520 <TIM_CCxChannelCmd>
      break;
 8005d54:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d122      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d11b      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0202 	mvn.w	r2, #2
 8005d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9af 	bl	8006116 <HAL_TIM_IC_CaptureCallback>
 8005db8:	e005      	b.n	8005dc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9a2 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9b1 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d122      	bne.n	8005e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d11b      	bne.n	8005e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0204 	mvn.w	r2, #4
 8005df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f985 	bl	8006116 <HAL_TIM_IC_CaptureCallback>
 8005e0c:	e005      	b.n	8005e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f978 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f987 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d122      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d11b      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0208 	mvn.w	r2, #8
 8005e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2204      	movs	r2, #4
 8005e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f95b 	bl	8006116 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f94e 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f95d 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0310 	and.w	r3, r3, #16
 8005e7e:	2b10      	cmp	r3, #16
 8005e80:	d122      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0210 	mvn.w	r2, #16
 8005e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f931 	bl	8006116 <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f924 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f933 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d10e      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d107      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0201 	mvn.w	r2, #1
 8005eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fb fa2e 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005efe:	2b80      	cmp	r3, #128	@ 0x80
 8005f00:	d10e      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0c:	2b80      	cmp	r3, #128	@ 0x80
 8005f0e:	d107      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fb8b 	bl	8006636 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2a:	2b40      	cmp	r3, #64	@ 0x40
 8005f2c:	d10e      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b40      	cmp	r3, #64	@ 0x40
 8005f3a:	d107      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f8f7 	bl	800613a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d10e      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d107      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0220 	mvn.w	r2, #32
 8005f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fb56 	bl	8006624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e0ae      	b.n	80060fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b0c      	cmp	r3, #12
 8005faa:	f200 809f 	bhi.w	80060ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005fae:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08005fe9 	.word	0x08005fe9
 8005fb8:	080060ed 	.word	0x080060ed
 8005fbc:	080060ed 	.word	0x080060ed
 8005fc0:	080060ed 	.word	0x080060ed
 8005fc4:	08006029 	.word	0x08006029
 8005fc8:	080060ed 	.word	0x080060ed
 8005fcc:	080060ed 	.word	0x080060ed
 8005fd0:	080060ed 	.word	0x080060ed
 8005fd4:	0800606b 	.word	0x0800606b
 8005fd8:	080060ed 	.word	0x080060ed
 8005fdc:	080060ed 	.word	0x080060ed
 8005fe0:	080060ed 	.word	0x080060ed
 8005fe4:	080060ab 	.word	0x080060ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f90e 	bl	8006210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0208 	orr.w	r2, r2, #8
 8006002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0204 	bic.w	r2, r2, #4
 8006012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6999      	ldr	r1, [r3, #24]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	619a      	str	r2, [r3, #24]
      break;
 8006026:	e064      	b.n	80060f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f954 	bl	80062dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6999      	ldr	r1, [r3, #24]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	021a      	lsls	r2, r3, #8
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	619a      	str	r2, [r3, #24]
      break;
 8006068:	e043      	b.n	80060f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	4618      	mov	r0, r3
 8006072:	f000 f99d 	bl	80063b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0208 	orr.w	r2, r2, #8
 8006084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0204 	bic.w	r2, r2, #4
 8006094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69d9      	ldr	r1, [r3, #28]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	61da      	str	r2, [r3, #28]
      break;
 80060a8:	e023      	b.n	80060f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 f9e7 	bl	8006484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69d9      	ldr	r1, [r3, #28]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	021a      	lsls	r2, r3, #8
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	61da      	str	r2, [r3, #28]
      break;
 80060ea:	e002      	b.n	80060f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	75fb      	strb	r3, [r7, #23]
      break;
 80060f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	bc80      	pop	{r7}
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a29      	ldr	r2, [pc, #164]	@ (8006204 <TIM_Base_SetConfig+0xb8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00b      	beq.n	800617c <TIM_Base_SetConfig+0x30>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800616a:	d007      	beq.n	800617c <TIM_Base_SetConfig+0x30>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a26      	ldr	r2, [pc, #152]	@ (8006208 <TIM_Base_SetConfig+0xbc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_Base_SetConfig+0x30>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a25      	ldr	r2, [pc, #148]	@ (800620c <TIM_Base_SetConfig+0xc0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d108      	bne.n	800618e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1c      	ldr	r2, [pc, #112]	@ (8006204 <TIM_Base_SetConfig+0xb8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00b      	beq.n	80061ae <TIM_Base_SetConfig+0x62>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619c:	d007      	beq.n	80061ae <TIM_Base_SetConfig+0x62>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a19      	ldr	r2, [pc, #100]	@ (8006208 <TIM_Base_SetConfig+0xbc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <TIM_Base_SetConfig+0x62>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a18      	ldr	r2, [pc, #96]	@ (800620c <TIM_Base_SetConfig+0xc0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d108      	bne.n	80061c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a07      	ldr	r2, [pc, #28]	@ (8006204 <TIM_Base_SetConfig+0xb8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d103      	bne.n	80061f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	615a      	str	r2, [r3, #20]
}
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr
 8006204:	40012c00 	.word	0x40012c00
 8006208:	40000400 	.word	0x40000400
 800620c:	40000800 	.word	0x40000800

08006210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f023 0201 	bic.w	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f023 0302 	bic.w	r3, r3, #2
 8006258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a1c      	ldr	r2, [pc, #112]	@ (80062d8 <TIM_OC1_SetConfig+0xc8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d10c      	bne.n	8006286 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0308 	bic.w	r3, r3, #8
 8006272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f023 0304 	bic.w	r3, r3, #4
 8006284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a13      	ldr	r2, [pc, #76]	@ (80062d8 <TIM_OC1_SetConfig+0xc8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d111      	bne.n	80062b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800629c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	621a      	str	r2, [r3, #32]
}
 80062cc:	bf00      	nop
 80062ce:	371c      	adds	r7, #28
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40012c00 	.word	0x40012c00

080062dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f023 0210 	bic.w	r2, r3, #16
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f023 0320 	bic.w	r3, r3, #32
 8006326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a1d      	ldr	r2, [pc, #116]	@ (80063ac <TIM_OC2_SetConfig+0xd0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d10d      	bne.n	8006358 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a14      	ldr	r2, [pc, #80]	@ (80063ac <TIM_OC2_SetConfig+0xd0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d113      	bne.n	8006388 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800636e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	621a      	str	r2, [r3, #32]
}
 80063a2:	bf00      	nop
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr
 80063ac:	40012c00 	.word	0x40012c00

080063b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a1d      	ldr	r2, [pc, #116]	@ (8006480 <TIM_OC3_SetConfig+0xd0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d10d      	bne.n	800642a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a14      	ldr	r2, [pc, #80]	@ (8006480 <TIM_OC3_SetConfig+0xd0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d113      	bne.n	800645a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	621a      	str	r2, [r3, #32]
}
 8006474:	bf00      	nop
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00

08006484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	021b      	lsls	r3, r3, #8
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a0f      	ldr	r2, [pc, #60]	@ (800651c <TIM_OC4_SetConfig+0x98>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d109      	bne.n	80064f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	019b      	lsls	r3, r3, #6
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	621a      	str	r2, [r3, #32]
}
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	bc80      	pop	{r7}
 800651a:	4770      	bx	lr
 800651c:	40012c00 	.word	0x40012c00

08006520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2201      	movs	r2, #1
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a1a      	ldr	r2, [r3, #32]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	43db      	mvns	r3, r3
 8006542:	401a      	ands	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a1a      	ldr	r2, [r3, #32]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	fa01 f303 	lsl.w	r3, r1, r3
 8006558:	431a      	orrs	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800657c:	2302      	movs	r3, #2
 800657e:	e046      	b.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a16      	ldr	r2, [pc, #88]	@ (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00e      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065cc:	d009      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a12      	ldr	r2, [pc, #72]	@ (800661c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a10      	ldr	r2, [pc, #64]	@ (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d10c      	bne.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr
 8006618:	40012c00 	.word	0x40012c00
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800

08006624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr

08006636 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr

08006648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e042      	b.n	80066e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fd fe1a 	bl	80042a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2224      	movs	r2, #36	@ 0x24
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800668a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 ff2f 	bl	80074f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	@ 0x30
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d156      	bne.n	80067b0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <HAL_UART_Transmit_DMA+0x26>
 8006708:	88fb      	ldrh	r3, [r7, #6]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e04f      	b.n	80067b2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	88fa      	ldrh	r2, [r7, #6]
 800671c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	88fa      	ldrh	r2, [r7, #6]
 8006722:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2221      	movs	r2, #33	@ 0x21
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006736:	4a21      	ldr	r2, [pc, #132]	@ (80067bc <HAL_UART_Transmit_DMA+0xd4>)
 8006738:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	4a20      	ldr	r2, [pc, #128]	@ (80067c0 <HAL_UART_Transmit_DMA+0xd8>)
 8006740:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	4a1f      	ldr	r2, [pc, #124]	@ (80067c4 <HAL_UART_Transmit_DMA+0xdc>)
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	2200      	movs	r2, #0
 8006750:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006752:	f107 0308 	add.w	r3, r7, #8
 8006756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	6819      	ldr	r1, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3304      	adds	r3, #4
 8006766:	461a      	mov	r2, r3
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	f7fe f811 	bl	8004790 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006776:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	617b      	str	r3, [r7, #20]
   return(result);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800678e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3314      	adds	r3, #20
 8006796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006798:	627a      	str	r2, [r7, #36]	@ 0x24
 800679a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6a39      	ldr	r1, [r7, #32]
 800679e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e5      	bne.n	8006778 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e000      	b.n	80067b2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80067b0:	2302      	movs	r3, #2
  }
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3730      	adds	r7, #48	@ 0x30
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	08006d85 	.word	0x08006d85
 80067c0:	08006e1f 	.word	0x08006e1f
 80067c4:	08006fa3 	.word	0x08006fa3

080067c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d112      	bne.n	8006808 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <HAL_UART_Receive_DMA+0x26>
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e00b      	b.n	800680a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80067f8:	88fb      	ldrh	r3, [r7, #6]
 80067fa:	461a      	mov	r2, r3
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fc1a 	bl	8007038 <UART_Start_Receive_DMA>
 8006804:	4603      	mov	r3, r0
 8006806:	e000      	b.n	800680a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006808:	2302      	movs	r3, #2
  }
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b0ba      	sub	sp, #232	@ 0xe8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800683a:	2300      	movs	r3, #0
 800683c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006840:	2300      	movs	r3, #0
 8006842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10f      	bne.n	800687a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800685a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d009      	beq.n	800687a <HAL_UART_IRQHandler+0x66>
 8006866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fd7e 	bl	8007374 <UART_Receive_IT>
      return;
 8006878:	e25b      	b.n	8006d32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800687a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80de 	beq.w	8006a40 <HAL_UART_IRQHandler+0x22c>
 8006884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d106      	bne.n	800689e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006894:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80d1 	beq.w	8006a40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00b      	beq.n	80068c2 <HAL_UART_IRQHandler+0xae>
 80068aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ba:	f043 0201 	orr.w	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <HAL_UART_IRQHandler+0xd2>
 80068ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068de:	f043 0202 	orr.w	r2, r3, #2
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <HAL_UART_IRQHandler+0xf6>
 80068f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006902:	f043 0204 	orr.w	r2, r3, #4
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d011      	beq.n	800693a <HAL_UART_IRQHandler+0x126>
 8006916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d105      	bne.n	800692e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	f043 0208 	orr.w	r2, r3, #8
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 81f2 	beq.w	8006d28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_UART_IRQHandler+0x14e>
 8006950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fd09 	bl	8007374 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696c:	2b00      	cmp	r3, #0
 800696e:	bf14      	ite	ne
 8006970:	2301      	movne	r3, #1
 8006972:	2300      	moveq	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d103      	bne.n	800698e <HAL_UART_IRQHandler+0x17a>
 8006986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d04f      	beq.n	8006a2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fc13 	bl	80071ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d041      	beq.n	8006a26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3314      	adds	r3, #20
 80069a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3314      	adds	r3, #20
 80069ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1d9      	bne.n	80069a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d013      	beq.n	8006a1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fa:	4a7e      	ldr	r2, [pc, #504]	@ (8006bf4 <HAL_UART_IRQHandler+0x3e0>)
 80069fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fd ff60 	bl	80048c8 <HAL_DMA_Abort_IT>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d016      	beq.n	8006a3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a1c:	e00e      	b.n	8006a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f99c 	bl	8006d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a24:	e00a      	b.n	8006a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f998 	bl	8006d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2c:	e006      	b.n	8006a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f994 	bl	8006d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a3a:	e175      	b.n	8006d28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3c:	bf00      	nop
    return;
 8006a3e:	e173      	b.n	8006d28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	f040 814f 	bne.w	8006ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8148 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8141 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a66:	2300      	movs	r3, #0
 8006a68:	60bb      	str	r3, [r7, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 80b6 	beq.w	8006bf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 8145 	beq.w	8006d2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	f080 813e 	bcs.w	8006d2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ab6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	f000 8088 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ada:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ade:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	330c      	adds	r3, #12
 8006aec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006af0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006af4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006afc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1d9      	bne.n	8006ac4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3314      	adds	r3, #20
 8006b16:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b22:	f023 0301 	bic.w	r3, r3, #1
 8006b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3314      	adds	r3, #20
 8006b30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b34:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e1      	bne.n	8006b10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3314      	adds	r3, #20
 8006b52:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e3      	bne.n	8006b4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	330c      	adds	r3, #12
 8006b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba4:	f023 0310 	bic.w	r3, r3, #16
 8006ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006bb6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bb8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e3      	bne.n	8006b92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fd fe3e 	bl	8004850 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8bf 	bl	8006d6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bf0:	e09c      	b.n	8006d2c <HAL_UART_IRQHandler+0x518>
 8006bf2:	bf00      	nop
 8006bf4:	0800727f 	.word	0x0800727f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 808e 	beq.w	8006d30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8089 	beq.w	8006d30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c42:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e3      	bne.n	8006c1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3314      	adds	r3, #20
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	623b      	str	r3, [r7, #32]
   return(result);
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f023 0301 	bic.w	r3, r3, #1
 8006c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3314      	adds	r3, #20
 8006c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e3      	bne.n	8006c56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0310 	bic.w	r3, r3, #16
 8006cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	330c      	adds	r3, #12
 8006cbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006cc0:	61fa      	str	r2, [r7, #28]
 8006cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	69b9      	ldr	r1, [r7, #24]
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e3      	bne.n	8006c9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f844 	bl	8006d6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ce6:	e023      	b.n	8006d30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d009      	beq.n	8006d08 <HAL_UART_IRQHandler+0x4f4>
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fad0 	bl	80072a6 <UART_Transmit_IT>
    return;
 8006d06:	e014      	b.n	8006d32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00e      	beq.n	8006d32 <HAL_UART_IRQHandler+0x51e>
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fb0f 	bl	8007344 <UART_EndTransmit_IT>
    return;
 8006d26:	e004      	b.n	8006d32 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d28:	bf00      	nop
 8006d2a:	e002      	b.n	8006d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d2c:	bf00      	nop
 8006d2e:	e000      	b.n	8006d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d30:	bf00      	nop
  }
}
 8006d32:	37e8      	adds	r7, #232	@ 0xe8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr

08006d4a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bc80      	pop	{r7}
 8006d6c:	4770      	bx	lr

08006d6e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b090      	sub	sp, #64	@ 0x40
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d137      	bne.n	8006e10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da2:	2200      	movs	r2, #0
 8006da4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3314      	adds	r3, #20
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	623b      	str	r3, [r7, #32]
   return(result);
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3314      	adds	r3, #20
 8006dc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e5      	bne.n	8006da6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	330c      	adds	r3, #12
 8006de0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	330c      	adds	r3, #12
 8006df8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dfa:	61fa      	str	r2, [r7, #28]
 8006dfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	69b9      	ldr	r1, [r7, #24]
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	617b      	str	r3, [r7, #20]
   return(result);
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e5      	bne.n	8006dda <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e0e:	e002      	b.n	8006e16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006e12:	f7fc f805 	bl	8002e20 <HAL_UART_TxCpltCallback>
}
 8006e16:	bf00      	nop
 8006e18:	3740      	adds	r7, #64	@ 0x40
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f7ff ff83 	bl	8006d38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e32:	bf00      	nop
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b09c      	sub	sp, #112	@ 0x70
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d172      	bne.n	8006f3c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e58:	2200      	movs	r2, #0
 8006e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006e7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3314      	adds	r3, #20
 8006e96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3314      	adds	r3, #20
 8006eae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006eb0:	647a      	str	r2, [r7, #68]	@ 0x44
 8006eb2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006eb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e5      	bne.n	8006e90 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8006edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3314      	adds	r3, #20
 8006ee2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ee4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d119      	bne.n	8006f3c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	330c      	adds	r3, #12
 8006f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0310 	bic.w	r3, r3, #16
 8006f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	330c      	adds	r3, #12
 8006f26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f28:	61fa      	str	r2, [r7, #28]
 8006f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	69b9      	ldr	r1, [r7, #24]
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	617b      	str	r3, [r7, #20]
   return(result);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e5      	bne.n	8006f08 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f3e:	2200      	movs	r2, #0
 8006f40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d106      	bne.n	8006f58 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f52:	f7ff ff0c 	bl	8006d6e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f56:	e002      	b.n	8006f5e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f5a:	f7fb ff73 	bl	8002e44 <HAL_UART_RxCpltCallback>
}
 8006f5e:	bf00      	nop
 8006f60:	3770      	adds	r7, #112	@ 0x70
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d108      	bne.n	8006f94 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff feee 	bl	8006d6e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f92:	e002      	b.n	8006f9a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff fed8 	bl	8006d4a <HAL_UART_RxHalfCpltCallback>
}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bf14      	ite	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	2300      	moveq	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b21      	cmp	r3, #33	@ 0x21
 8006fd4:	d108      	bne.n	8006fe8 <UART_DMAError+0x46>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006fe2:	68b8      	ldr	r0, [r7, #8]
 8006fe4:	f000 f8c2 	bl	800716c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bf14      	ite	ne
 8006ff6:	2301      	movne	r3, #1
 8006ff8:	2300      	moveq	r3, #0
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b22      	cmp	r3, #34	@ 0x22
 8007008:	d108      	bne.n	800701c <UART_DMAError+0x7a>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2200      	movs	r2, #0
 8007014:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007016:	68b8      	ldr	r0, [r7, #8]
 8007018:	f000 f8cf 	bl	80071ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007020:	f043 0210 	orr.w	r2, r3, #16
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007028:	68b8      	ldr	r0, [r7, #8]
 800702a:	f7ff fe97 	bl	8006d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b098      	sub	sp, #96	@ 0x60
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	4613      	mov	r3, r2
 8007044:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	88fa      	ldrh	r2, [r7, #6]
 8007050:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2222      	movs	r2, #34	@ 0x22
 800705c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007064:	4a3e      	ldr	r2, [pc, #248]	@ (8007160 <UART_Start_Receive_DMA+0x128>)
 8007066:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706c:	4a3d      	ldr	r2, [pc, #244]	@ (8007164 <UART_Start_Receive_DMA+0x12c>)
 800706e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007074:	4a3c      	ldr	r2, [pc, #240]	@ (8007168 <UART_Start_Receive_DMA+0x130>)
 8007076:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707c:	2200      	movs	r2, #0
 800707e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3304      	adds	r3, #4
 8007090:	4619      	mov	r1, r3
 8007092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	f7fd fb7a 	bl	8004790 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800709c:	2300      	movs	r3, #0
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d019      	beq.n	80070ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	330c      	adds	r3, #12
 80070c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80070dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80070e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e5      	bne.n	80070ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3314      	adds	r3, #20
 80070f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	f043 0301 	orr.w	r3, r3, #1
 8007104:	657b      	str	r3, [r7, #84]	@ 0x54
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3314      	adds	r3, #20
 800710c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800710e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e5      	bne.n	80070ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3314      	adds	r3, #20
 8007128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	617b      	str	r3, [r7, #20]
   return(result);
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007138:	653b      	str	r3, [r7, #80]	@ 0x50
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3314      	adds	r3, #20
 8007140:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007142:	627a      	str	r2, [r7, #36]	@ 0x24
 8007144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6a39      	ldr	r1, [r7, #32]
 8007148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e5      	bne.n	8007122 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3760      	adds	r7, #96	@ 0x60
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	08006e3b 	.word	0x08006e3b
 8007164:	08006f67 	.word	0x08006f67
 8007168:	08006fa3 	.word	0x08006fa3

0800716c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b089      	sub	sp, #36	@ 0x24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	330c      	adds	r3, #12
 800717a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	60bb      	str	r3, [r7, #8]
   return(result);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800718a:	61fb      	str	r3, [r7, #28]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	330c      	adds	r3, #12
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	61ba      	str	r2, [r7, #24]
 8007196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	6979      	ldr	r1, [r7, #20]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	613b      	str	r3, [r7, #16]
   return(result);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e5      	bne.n	8007174 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80071b0:	bf00      	nop
 80071b2:	3724      	adds	r7, #36	@ 0x24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr

080071ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b095      	sub	sp, #84	@ 0x54
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	330c      	adds	r3, #12
 80071c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	330c      	adds	r3, #12
 80071e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80071e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e5      	bne.n	80071c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3314      	adds	r3, #20
 80071fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	61fb      	str	r3, [r7, #28]
   return(result);
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3314      	adds	r3, #20
 8007214:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007216:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800721c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e5      	bne.n	80071f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722e:	2b01      	cmp	r3, #1
 8007230:	d119      	bne.n	8007266 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	60bb      	str	r3, [r7, #8]
   return(result);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f023 0310 	bic.w	r3, r3, #16
 8007248:	647b      	str	r3, [r7, #68]	@ 0x44
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	330c      	adds	r3, #12
 8007250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007252:	61ba      	str	r2, [r7, #24]
 8007254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6979      	ldr	r1, [r7, #20]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	613b      	str	r3, [r7, #16]
   return(result);
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e5      	bne.n	8007232 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007274:	bf00      	nop
 8007276:	3754      	adds	r7, #84	@ 0x54
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr

0800727e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff fd5f 	bl	8006d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b21      	cmp	r3, #33	@ 0x21
 80072b8:	d13e      	bne.n	8007338 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c2:	d114      	bne.n	80072ee <UART_Transmit_IT+0x48>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d110      	bne.n	80072ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	1c9a      	adds	r2, r3, #2
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	621a      	str	r2, [r3, #32]
 80072ec:	e008      	b.n	8007300 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	1c59      	adds	r1, r3, #1
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6211      	str	r1, [r2, #32]
 80072f8:	781a      	ldrb	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29b      	uxth	r3, r3
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	4619      	mov	r1, r3
 800730e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10f      	bne.n	8007334 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007322:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007332:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	e000      	b.n	800733a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007338:	2302      	movs	r3, #2
  }
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr

08007344 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800735a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7fb fd5b 	bl	8002e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08c      	sub	sp, #48	@ 0x30
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b22      	cmp	r3, #34	@ 0x22
 8007386:	f040 80ae 	bne.w	80074e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007392:	d117      	bne.n	80073c4 <UART_Receive_IT+0x50>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d113      	bne.n	80073c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800739c:	2300      	movs	r3, #0
 800739e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073bc:	1c9a      	adds	r2, r3, #2
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80073c2:	e026      	b.n	8007412 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d6:	d007      	beq.n	80073e8 <UART_Receive_IT+0x74>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10a      	bne.n	80073f6 <UART_Receive_IT+0x82>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	e008      	b.n	8007408 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007402:	b2da      	uxtb	r2, r3
 8007404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007406:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007416:	b29b      	uxth	r3, r3
 8007418:	3b01      	subs	r3, #1
 800741a:	b29b      	uxth	r3, r3
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4619      	mov	r1, r3
 8007420:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007422:	2b00      	cmp	r3, #0
 8007424:	d15d      	bne.n	80074e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0220 	bic.w	r2, r2, #32
 8007434:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007444:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695a      	ldr	r2, [r3, #20]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0201 	bic.w	r2, r2, #1
 8007454:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007468:	2b01      	cmp	r3, #1
 800746a:	d135      	bne.n	80074d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	613b      	str	r3, [r7, #16]
   return(result);
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f023 0310 	bic.w	r3, r3, #16
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	330c      	adds	r3, #12
 8007490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007492:	623a      	str	r2, [r7, #32]
 8007494:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	69f9      	ldr	r1, [r7, #28]
 8007498:	6a3a      	ldr	r2, [r7, #32]
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	61bb      	str	r3, [r7, #24]
   return(result);
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e5      	bne.n	8007472 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d10a      	bne.n	80074ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff fc4c 	bl	8006d6e <HAL_UARTEx_RxEventCallback>
 80074d6:	e002      	b.n	80074de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7fb fcb3 	bl	8002e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	e002      	b.n	80074e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e000      	b.n	80074e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80074e6:	2302      	movs	r3, #2
  }
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3730      	adds	r7, #48	@ 0x30
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800752a:	f023 030c 	bic.w	r3, r3, #12
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	430b      	orrs	r3, r1
 8007536:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699a      	ldr	r2, [r3, #24]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a2c      	ldr	r2, [pc, #176]	@ (8007604 <UART_SetConfig+0x114>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d103      	bne.n	8007560 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007558:	f7fe f8dc 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	e002      	b.n	8007566 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007560:	f7fe f8c4 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8007564:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009a      	lsls	r2, r3, #2
 8007570:	441a      	add	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	fbb2 f3f3 	udiv	r3, r2, r3
 800757c:	4a22      	ldr	r2, [pc, #136]	@ (8007608 <UART_SetConfig+0x118>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	095b      	lsrs	r3, r3, #5
 8007584:	0119      	lsls	r1, r3, #4
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009a      	lsls	r2, r3, #2
 8007590:	441a      	add	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	fbb2 f2f3 	udiv	r2, r2, r3
 800759c:	4b1a      	ldr	r3, [pc, #104]	@ (8007608 <UART_SetConfig+0x118>)
 800759e:	fba3 0302 	umull	r0, r3, r3, r2
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	2064      	movs	r0, #100	@ 0x64
 80075a6:	fb00 f303 	mul.w	r3, r0, r3
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	3332      	adds	r3, #50	@ 0x32
 80075b0:	4a15      	ldr	r2, [pc, #84]	@ (8007608 <UART_SetConfig+0x118>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075bc:	4419      	add	r1, r3
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	009a      	lsls	r2, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80075d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007608 <UART_SetConfig+0x118>)
 80075d6:	fba3 0302 	umull	r0, r3, r3, r2
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	2064      	movs	r0, #100	@ 0x64
 80075de:	fb00 f303 	mul.w	r3, r0, r3
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	3332      	adds	r3, #50	@ 0x32
 80075e8:	4a07      	ldr	r2, [pc, #28]	@ (8007608 <UART_SetConfig+0x118>)
 80075ea:	fba2 2303 	umull	r2, r3, r2, r3
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	f003 020f 	and.w	r2, r3, #15
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	440a      	add	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80075fc:	bf00      	nop
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40013800 	.word	0x40013800
 8007608:	51eb851f 	.word	0x51eb851f

0800760c <motor_run>:
    motor->channel = channel;
}


/* Run motor at specified speed */
void motor_run(Motor *motor, double speed) {
 800760c:	b5b0      	push	{r4, r5, r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	e9c7 2300 	strd	r2, r3, [r7]
    if (speed >= 0) {
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007624:	f7f9 f9de 	bl	80009e4 <__aeabi_dcmpge>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d010      	beq.n	8007650 <motor_run+0x44>
        HAL_GPIO_WritePin(motor->port, motor->pin_f, GPIO_PIN_SET);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	889b      	ldrh	r3, [r3, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	4619      	mov	r1, r3
 800763a:	f7fd fc75 	bl	8004f28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->port, motor->pin_b, GPIO_PIN_RESET);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	88db      	ldrh	r3, [r3, #6]
 8007646:	2200      	movs	r2, #0
 8007648:	4619      	mov	r1, r3
 800764a:	f7fd fc6d 	bl	8004f28 <HAL_GPIO_WritePin>
 800764e:	e015      	b.n	800767c <motor_run+0x70>
    } else {
        HAL_GPIO_WritePin(motor->port, motor->pin_f, GPIO_PIN_RESET);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6818      	ldr	r0, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	889b      	ldrh	r3, [r3, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	4619      	mov	r1, r3
 800765c:	f7fd fc64 	bl	8004f28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->port, motor->pin_b, GPIO_PIN_SET);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	88db      	ldrh	r3, [r3, #6]
 8007668:	2201      	movs	r2, #1
 800766a:	4619      	mov	r1, r3
 800766c:	f7fd fc5c 	bl	8004f28 <HAL_GPIO_WritePin>
        speed = -speed; // Make speed positive for PWM duty cycle
 8007670:	683c      	ldr	r4, [r7, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007678:	e9c7 4500 	strd	r4, r5, [r7]
    }
    // Set PWM duty cycle based on speed
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, (uint16_t)(speed * motor->timer->Instance->ARR));
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d117      	bne.n	80076b4 <motor_run+0xa8>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768c:	4618      	mov	r0, r3
 800768e:	f7f8 fea9 	bl	80003e4 <__aeabi_ui2d>
 8007692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007696:	f7f8 ff1f 	bl	80004d8 <__aeabi_dmul>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4610      	mov	r0, r2
 80076a0:	4619      	mov	r1, r3
 80076a2:	f7f9 f9f1 	bl	8000a88 <__aeabi_d2uiz>
 80076a6:	4603      	mov	r3, r0
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80076b2:	e051      	b.n	8007758 <motor_run+0x14c>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, (uint16_t)(speed * motor->timer->Instance->ARR));
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d118      	bne.n	80076ee <motor_run+0xe2>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7f8 fe8d 	bl	80003e4 <__aeabi_ui2d>
 80076ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ce:	f7f8 ff03 	bl	80004d8 <__aeabi_dmul>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4610      	mov	r0, r2
 80076d8:	4619      	mov	r1, r3
 80076da:	f7f9 f9d5 	bl	8000a88 <__aeabi_d2uiz>
 80076de:	4603      	mov	r3, r0
 80076e0:	b299      	uxth	r1, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	460b      	mov	r3, r1
 80076ea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80076ec:	e034      	b.n	8007758 <motor_run+0x14c>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, (uint16_t)(speed * motor->timer->Instance->ARR));
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d118      	bne.n	8007728 <motor_run+0x11c>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fe:	4618      	mov	r0, r3
 8007700:	f7f8 fe70 	bl	80003e4 <__aeabi_ui2d>
 8007704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007708:	f7f8 fee6 	bl	80004d8 <__aeabi_dmul>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4610      	mov	r0, r2
 8007712:	4619      	mov	r1, r3
 8007714:	f7f9 f9b8 	bl	8000a88 <__aeabi_d2uiz>
 8007718:	4603      	mov	r3, r0
 800771a:	b299      	uxth	r1, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	460b      	mov	r3, r1
 8007724:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8007726:	e017      	b.n	8007758 <motor_run+0x14c>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, (uint16_t)(speed * motor->timer->Instance->ARR));
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	4618      	mov	r0, r3
 8007732:	f7f8 fe57 	bl	80003e4 <__aeabi_ui2d>
 8007736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800773a:	f7f8 fecd 	bl	80004d8 <__aeabi_dmul>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4610      	mov	r0, r2
 8007744:	4619      	mov	r1, r3
 8007746:	f7f9 f99f 	bl	8000a88 <__aeabi_d2uiz>
 800774a:	4603      	mov	r3, r0
 800774c:	b299      	uxth	r1, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	460b      	mov	r3, r1
 8007756:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8007758:	bf00      	nop
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bdb0      	pop	{r4, r5, r7, pc}

08007760 <motor_stop>:

/* Stop motor */
void motor_stop(Motor *motor) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->port, motor->pin_f, GPIO_PIN_SET);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	889b      	ldrh	r3, [r3, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	4619      	mov	r1, r3
 8007774:	f7fd fbd8 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->port, motor->pin_b, GPIO_PIN_SET);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	88db      	ldrh	r3, [r3, #6]
 8007780:	2201      	movs	r2, #1
 8007782:	4619      	mov	r1, r3
 8007784:	f7fd fbd0 	bl	8004f28 <HAL_GPIO_WritePin>
    // Set PWM duty cycle to 0
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, 0);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <motor_stop+0x3c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2200      	movs	r2, #0
 8007798:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800779a:	e018      	b.n	80077ce <motor_stop+0x6e>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, 0);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d105      	bne.n	80077b0 <motor_stop+0x50>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	2300      	movs	r3, #0
 80077ac:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80077ae:	e00e      	b.n	80077ce <motor_stop+0x6e>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, 0);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d105      	bne.n	80077c4 <motor_stop+0x64>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	2300      	movs	r3, #0
 80077c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80077c2:	e004      	b.n	80077ce <motor_stop+0x6e>
    __HAL_TIM_SET_COMPARE(motor->timer, motor->channel, 0);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	2300      	movs	r3, #0
 80077cc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <enable_motor>:

/* Enable motors and start PWM */
void enable_motor(Motor *motor) {
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Example GPIO pin for motor enable
 80077e0:	2201      	movs	r2, #1
 80077e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80077e6:	4807      	ldr	r0, [pc, #28]	@ (8007804 <enable_motor+0x2c>)
 80077e8:	f7fd fb9e 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(motor->timer, motor->channel); // Start PWM for the specified motor
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f7fe f8e8 	bl	80059cc <HAL_TIM_PWM_Start>
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	40010800 	.word	0x40010800

08007808 <calculate_pwm_values>:
void disable_motor(Motor *motor) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Example GPIO pin for motor disable
    HAL_TIM_PWM_Stop(motor->timer, motor->channel); // Stop PWM for the specified motor
}

void calculate_pwm_values(PWM_Config *config, uint32_t *PSC_value, uint32_t *ARR_value) {
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
    *ARR_value = pow(2, config->pwm_resolution) - 2; // Ideal ARR value
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f7f8 fde3 	bl	80003e4 <__aeabi_ui2d>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	f04f 0000 	mov.w	r0, #0
 8007826:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800782a:	f002 ffbf 	bl	800a7ac <pow>
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007836:	f7f8 fc97 	bl	8000168 <__aeabi_dsub>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4610      	mov	r0, r2
 8007840:	4619      	mov	r1, r3
 8007842:	f7f9 f921 	bl	8000a88 <__aeabi_d2uiz>
 8007846:	4602      	mov	r2, r0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	601a      	str	r2, [r3, #0]
    *PSC_value = (uint32_t)((config->pwm_input_freq) / ((*ARR_value + 1) * config->pwm_freq)) - 1;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3301      	adds	r3, #1
 8007856:	68f9      	ldr	r1, [r7, #12]
 8007858:	6849      	ldr	r1, [r1, #4]
 800785a:	fb01 f303 	mul.w	r3, r1, r3
 800785e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007862:	1e5a      	subs	r2, r3, #1
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	601a      	str	r2, [r3, #0]
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <init_motor_dynamics>:
 * @param motor_dynamics Podoubleer to the MotorDynamics structure to be initialized.
 * @param wheel_diameter Wheel diameter in meters.
 * @param gear_ratio Gear ratio.
 * @param counts_per_revolution Counts per revolution.
 */
void init_motor_dynamics(MotorDynamics* motor_dynamics, double wheel_diameter, double gear_ratio, double counts_per_revolution, AverageFilter* averageFilter) {
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	e9c7 2300 	strd	r2, r3, [r7]
    // Initialize members with default values
    motor_dynamics->encoder_count_per_sampling_period = 0;
 800787c:	68f9      	ldr	r1, [r7, #12]
 800787e:	f04f 0200 	mov.w	r2, #0
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	e9c1 2300 	strd	r2, r3, [r1]
    motor_dynamics->rpm = 0;
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	e9c1 2302 	strd	r2, r3, [r1, #8]
    motor_dynamics->linear_velocity = 0;
 8007898:	68f9      	ldr	r1, [r7, #12]
 800789a:	f04f 0200 	mov.w	r2, #0
 800789e:	f04f 0300 	mov.w	r3, #0
 80078a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    motor_dynamics->previous_encoder_count = 0;
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	f04f 0200 	mov.w	r2, #0
 80078ac:	f04f 0300 	mov.w	r3, #0
 80078b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    motor_dynamics->current_encoder_count = 0;
 80078b4:	68f9      	ldr	r1, [r7, #12]
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	f04f 0300 	mov.w	r3, #0
 80078be:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    // Initialize members with arguments
    motor_dynamics->wheel_diameter = wheel_diameter;
 80078c2:	68f9      	ldr	r1, [r7, #12]
 80078c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    motor_dynamics->gear_ratio = gear_ratio;
 80078cc:	68f9      	ldr	r1, [r7, #12]
 80078ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    motor_dynamics->counts_per_revolution = counts_per_revolution;
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078dc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    motor_dynamics->averageFilter = averageFilter;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078e4:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr

080078f0 <update_encoder_count_per_sampling_period>:
 * We call this function inside of the timer callback function.
 *
 * @param motor_dynamics Podoubleer to MotorDynamics struct
 * @param current_encoder_count Current tick count
 */
void update_encoder_count_per_sampling_period(MotorDynamics* motor_dynamics, double current_encoder_count) {
 80078f0:	b590      	push	{r4, r7, lr}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	e9c7 2300 	strd	r2, r3, [r7]
    motor_dynamics->current_encoder_count = current_encoder_count;
 80078fc:	68f9      	ldr	r1, [r7, #12]
 80078fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007902:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    motor_dynamics->encoder_count_per_sampling_period = motor_dynamics->current_encoder_count - motor_dynamics->previous_encoder_count;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007912:	f7f8 fc29 	bl	8000168 <__aeabi_dsub>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	68f9      	ldr	r1, [r7, #12]
 800791c:	e9c1 2300 	strd	r2, r3, [r1]
    motor_dynamics->previous_encoder_count = motor_dynamics->current_encoder_count;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	e9c1 2308 	strd	r2, r3, [r1, #32]
    add_to_filter_buffer(motor_dynamics->averageFilter, (int8_t)motor_dynamics->encoder_count_per_sampling_period);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	4610      	mov	r0, r2
 8007938:	4619      	mov	r1, r3
 800793a:	f7f9 f87d 	bl	8000a38 <__aeabi_d2iz>
 800793e:	4603      	mov	r3, r0
 8007940:	b25b      	sxtb	r3, r3
 8007942:	4619      	mov	r1, r3
 8007944:	4620      	mov	r0, r4
 8007946:	f000 f869 	bl	8007a1c <add_to_filter_buffer>
}
 800794a:	bf00      	nop
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	bd90      	pop	{r4, r7, pc}
 8007952:	0000      	movs	r0, r0
 8007954:	0000      	movs	r0, r0
	...

08007958 <get_speed_count>:
 * based on the encoder_count per the recent sampling period and motor parameters.
 *
 * @param motor_dynamics Podoubleer to MotorDynamics struct
 * @return Motor speed in RPM
 */
int get_speed_count(MotorDynamics* motor_dynamics) {
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
    return motor_dynamics->count = filter_output(motor_dynamics->averageFilter) / SAMPLING_PERIOD;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f89a 	bl	8007a9e <filter_output>
 800796a:	a30b      	add	r3, pc, #44	@ (adr r3, 8007998 <get_speed_count+0x40>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f7f8 fedc 	bl	800072c <__aeabi_ddiv>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4610      	mov	r0, r2
 800797a:	4619      	mov	r1, r3
 800797c:	f7f9 f85c 	bl	8000a38 <__aeabi_d2iz>
 8007980:	4602      	mov	r2, r0
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	611a      	str	r2, [r3, #16]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	f3af 8000 	nop.w
 8007998:	47ae147b 	.word	0x47ae147b
 800799c:	3f847ae1 	.word	0x3f847ae1

080079a0 <get_speed_rpm>:
 * based on the encoder_count per the recent sampling period and motor parameters.
 *
 * @param motor_dynamics Podoubleer to MotorDynamics struct
 * @return Motor speed in RPM
 */
double get_speed_rpm(MotorDynamics* motor_dynamics) {
 80079a0:	b5b0      	push	{r4, r5, r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
    return motor_dynamics->rpm = (filter_output(motor_dynamics->averageFilter) * MINIUTE_DURATION) /
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 f876 	bl	8007a9e <filter_output>
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	4b18      	ldr	r3, [pc, #96]	@ (8007a18 <get_speed_rpm+0x78>)
 80079b8:	f7f8 fd8e 	bl	80004d8 <__aeabi_dmul>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4614      	mov	r4, r2
 80079c2:	461d      	mov	r5, r3
                                 (motor_dynamics->gear_ratio * motor_dynamics->counts_per_revolution * SAMPLING_PERIOD);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80079d0:	f7f8 fd82 	bl	80004d8 <__aeabi_dmul>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4610      	mov	r0, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	a30c      	add	r3, pc, #48	@ (adr r3, 8007a10 <get_speed_rpm+0x70>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f7f8 fd79 	bl	80004d8 <__aeabi_dmul>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
    return motor_dynamics->rpm = (filter_output(motor_dynamics->averageFilter) * MINIUTE_DURATION) /
 80079ea:	4620      	mov	r0, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	f7f8 fe9d 	bl	800072c <__aeabi_ddiv>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
}
 8007a02:	4610      	mov	r0, r2
 8007a04:	4619      	mov	r1, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8007a0c:	f3af 8000 	nop.w
 8007a10:	47ae147b 	.word	0x47ae147b
 8007a14:	3f847ae1 	.word	0x3f847ae1
 8007a18:	404e0000 	.word	0x404e0000

08007a1c <add_to_filter_buffer>:
                                        (motor_dynamics->gear_ratio * motor_dynamics->counts_per_revolution * SAMPLING_PERIOD);
}



static void add_to_filter_buffer(AverageFilter *filter, int8_t encoder_count){
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]

	filter->sum += (abs(encoder_count) - filter->samples[99]);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bfb8      	it	lt
 8007a34:	425b      	neglt	r3, r3
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	4619      	mov	r1, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f993 3068 	ldrsb.w	r3, [r3, #104]	@ 0x68
 8007a40:	1acb      	subs	r3, r1, r3
 8007a42:	441a      	add	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]
    for(uint8_t i =99; i>0; i--){
 8007a48:	2363      	movs	r3, #99	@ 0x63
 8007a4a:	73fb      	strb	r3, [r7, #15]
 8007a4c:	e00d      	b.n	8007a6a <add_to_filter_buffer+0x4e>
        filter->samples[i] = filter->samples[i-1];
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	1e5a      	subs	r2, r3, #1
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	440a      	add	r2, r1
 8007a58:	f992 1005 	ldrsb.w	r1, [r2, #5]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	4413      	add	r3, r2
 8007a60:	460a      	mov	r2, r1
 8007a62:	715a      	strb	r2, [r3, #5]
    for(uint8_t i =99; i>0; i--){
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	73fb      	strb	r3, [r7, #15]
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1ee      	bne.n	8007a4e <add_to_filter_buffer+0x32>
    }
    filter->samples[0] = encoder_count;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	715a      	strb	r2, [r3, #5]

	if(filter->sample_count <filter->num_samples ){
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 2069 	ldrb.w	r2, [r3, #105]	@ 0x69
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	791b      	ldrb	r3, [r3, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d207      	bcs.n	8007a94 <add_to_filter_buffer+0x78>
		filter->sample_count++;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	}

}
 8007a94:	bf00      	nop
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr

08007a9e <filter_output>:

static double filter_output(AverageFilter *filter){
 8007a9e:	b5b0      	push	{r4, r5, r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
    return  ((double) (filter->sum))/(filter->sample_count);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7f8 fcaa 	bl	8000404 <__aeabi_i2d>
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	460d      	mov	r5, r1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7f8 fca2 	bl	8000404 <__aeabi_i2d>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	f7f8 fe30 	bl	800072c <__aeabi_ddiv>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
}
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bdb0      	pop	{r4, r5, r7, pc}

08007ada <init_filter>:
		filter->samples[0] = 0;
	}

}

void init_filter(AverageFilter *filter , uint8_t num_samples){
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]

	filter->num_samples =  num_samples;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	711a      	strb	r2, [r3, #4]

	filter->sum = 0;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]

	filter -> sample_count = 0;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

	for(int i = 0; i < filter->num_samples; i++ ){
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	e005      	b.n	8007b0c <init_filter+0x32>
		filter->samples[0] = 0;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	715a      	strb	r2, [r3, #5]
	for(int i = 0; i < filter->num_samples; i++ ){
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	791b      	ldrb	r3, [r3, #4]
 8007b10:	461a      	mov	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	4293      	cmp	r3, r2
 8007b16:	dbf3      	blt.n	8007b00 <init_filter+0x26>
	}

}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <PID_Init>:
#include <stdio.h> // Include necessary libraries
#include "pid_v1.h"


// Define PID functions
void PID_Init(PIDController *pid, double kp, double ki, double kd, double dt, double lower_bound, double upper_bound) {
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	e9c7 2300 	strd	r2, r3, [r7]
    pid->kp = kp;
 8007b30:	68f9      	ldr	r1, [r7, #12]
 8007b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b36:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    pid->ki = ki;
 8007b3a:	68f9      	ldr	r1, [r7, #12]
 8007b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b40:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    pid->kd = kd;
 8007b44:	68f9      	ldr	r1, [r7, #12]
 8007b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b4a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    pid->error_integral = 0;
 8007b4e:	68f9      	ldr	r1, [r7, #12]
 8007b50:	f04f 0200 	mov.w	r2, #0
 8007b54:	f04f 0300 	mov.w	r3, #0
 8007b58:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->prev_error = 0;
 8007b5c:	68f9      	ldr	r1, [r7, #12]
 8007b5e:	f04f 0200 	mov.w	r2, #0
 8007b62:	f04f 0300 	mov.w	r3, #0
 8007b66:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->output = 0;
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    pid->error = 0;
 8007b78:	68f9      	ldr	r1, [r7, #12]
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	f04f 0300 	mov.w	r3, #0
 8007b82:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    pid->dt = dt;
 8007b86:	68f9      	ldr	r1, [r7, #12]
 8007b88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b8c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    pid->lower_bound = lower_bound;
 8007b90:	68f9      	ldr	r1, [r7, #12]
 8007b92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007b96:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    pid->upper_bound = upper_bound;
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ba0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
}
 8007ba4:	bf00      	nop
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc80      	pop	{r7}
 8007bac:	4770      	bx	lr

08007bae <PID_calculate>:


void PID_calculate(PIDController *pid){ // No dt parameter
 8007bae:	b5b0      	push	{r4, r5, r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
    pid->error =  pid->target_value -pid->current_value;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007bc2:	f7f8 fad1 	bl	8000168 <__aeabi_dsub>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    pid->error_integral += (pid->error * pid->dt); // Scale the accumulated error by dt
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007be2:	f7f8 fc79 	bl	80004d8 <__aeabi_dmul>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4620      	mov	r0, r4
 8007bec:	4629      	mov	r1, r5
 8007bee:	f7f8 fabd 	bl	800016c <__adddf3>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->output = (pid->error * pid->kp) + (pid->error_integral * pid->ki) + (((pid->error - pid->prev_error) / pid->dt) * pid->kd); // Include dt in derivative term
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007c08:	f7f8 fc66 	bl	80004d8 <__aeabi_dmul>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4614      	mov	r4, r2
 8007c12:	461d      	mov	r5, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007c20:	f7f8 fc5a 	bl	80004d8 <__aeabi_dmul>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4620      	mov	r0, r4
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	f7f8 fa9e 	bl	800016c <__adddf3>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4614      	mov	r4, r2
 8007c36:	461d      	mov	r5, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c44:	f7f8 fa90 	bl	8000168 <__aeabi_dsub>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4619      	mov	r1, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007c56:	f7f8 fd69 	bl	800072c <__aeabi_ddiv>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4619      	mov	r1, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007c68:	f7f8 fc36 	bl	80004d8 <__aeabi_dmul>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4620      	mov	r0, r4
 8007c72:	4629      	mov	r1, r5
 8007c74:	f7f8 fa7a 	bl	800016c <__adddf3>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    pid->prev_error = pid->error;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    if(pid->upper_bound < pid->output){
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007c9a:	f7f8 fe8f 	bl	80009bc <__aeabi_dcmplt>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d006      	beq.n	8007cb2 <PID_calculate+0x104>
        pid->output= pid->upper_bound;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    }
    else if(pid->lower_bound > pid->output){
        pid->output= pid->lower_bound;
    }
}
 8007cb0:	e011      	b.n	8007cd6 <PID_calculate+0x128>
    else if(pid->lower_bound > pid->output){
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007cbe:	f7f8 fe9b 	bl	80009f8 <__aeabi_dcmpgt>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d100      	bne.n	8007cca <PID_calculate+0x11c>
}
 8007cc8:	e005      	b.n	8007cd6 <PID_calculate+0x128>
        pid->output= pid->lower_bound;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
}
 8007cd6:	bf00      	nop
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bdb0      	pop	{r4, r5, r7, pc}

08007cde <PID_reset>:


void PID_reset(PIDController *pid) {
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
    pid->error_integral = 0;
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	f04f 0300 	mov.w	r3, #0
 8007cf0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->prev_error = 0;
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	f04f 0200 	mov.w	r2, #0
 8007cfa:	f04f 0300 	mov.w	r3, #0
 8007cfe:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->output = 0;
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	f04f 0300 	mov.w	r3, #0
 8007d0c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    pid->error = 0;
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	f04f 0200 	mov.w	r2, #0
 8007d16:	f04f 0300 	mov.w	r3, #0
 8007d1a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr

08007d28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d3a:	2b84      	cmp	r3, #132	@ 0x84
 8007d3c:	d005      	beq.n	8007d4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007d3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4413      	add	r3, r2
 8007d46:	3303      	adds	r3, #3
 8007d48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc80      	pop	{r7}
 8007d54:	4770      	bx	lr

08007d56 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d5c:	f3ef 8305 	mrs	r3, IPSR
 8007d60:	607b      	str	r3, [r7, #4]
  return(result);
 8007d62:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bf14      	ite	ne
 8007d68:	2301      	movne	r3, #1
 8007d6a:	2300      	moveq	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr

08007d78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007d7c:	f001 f842 	bl	8008e04 <vTaskStartScheduler>
  
  return osOK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d88:	b089      	sub	sp, #36	@ 0x24
 8007d8a:	af04      	add	r7, sp, #16
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d020      	beq.n	8007dda <osThreadCreate+0x54>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01c      	beq.n	8007dda <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685c      	ldr	r4, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691e      	ldr	r6, [r3, #16]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff ffb8 	bl	8007d28 <makeFreeRtosPriority>
 8007db8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dc2:	9202      	str	r2, [sp, #8]
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	9100      	str	r1, [sp, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	4632      	mov	r2, r6
 8007dcc:	4629      	mov	r1, r5
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 fe54 	bl	8008a7c <xTaskCreateStatic>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e01c      	b.n	8007e14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685c      	ldr	r4, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007de6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff ff9a 	bl	8007d28 <makeFreeRtosPriority>
 8007df4:	4602      	mov	r2, r0
 8007df6:	f107 030c 	add.w	r3, r7, #12
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	9200      	str	r2, [sp, #0]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	4632      	mov	r2, r6
 8007e02:	4629      	mov	r1, r5
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 fe98 	bl	8008b3a <xTaskCreate>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d001      	beq.n	8007e14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	e000      	b.n	8007e16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007e14:	68fb      	ldr	r3, [r7, #12]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <osDelay+0x16>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	e000      	b.n	8007e36 <osDelay+0x18>
 8007e34:	2301      	movs	r3, #1
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 ffae 	bl	8008d98 <vTaskDelay>
  
  return osOK;
 8007e3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	460b      	mov	r3, r1
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d013      	beq.n	8007e86 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <osTimerCreate+0x20>
 8007e64:	2101      	movs	r1, #1
 8007e66:	e000      	b.n	8007e6a <osTimerCreate+0x22>
 8007e68:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8007e72:	9201      	str	r2, [sp, #4]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	460a      	mov	r2, r1
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	480b      	ldr	r0, [pc, #44]	@ (8007eac <osTimerCreate+0x64>)
 8007e7e:	f001 fd8a 	bl	8009996 <xTimerCreateStatic>
 8007e82:	4603      	mov	r3, r0
 8007e84:	e00e      	b.n	8007ea4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8007e86:	7afb      	ldrb	r3, [r7, #11]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <osTimerCreate+0x48>
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	e000      	b.n	8007e92 <osTimerCreate+0x4a>
 8007e90:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	4803      	ldr	r0, [pc, #12]	@ (8007eac <osTimerCreate+0x64>)
 8007e9e:	f001 fd59 	bl	8009954 <xTimerCreate>
 8007ea2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	0800e564 	.word	0x0800e564

08007eb0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <osTimerStart+0x20>
    ticks = 1;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8007ed0:	f7ff ff41 	bl	8007d56 <inHandlerMode>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01a      	beq.n	8007f10 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007eda:	f107 030c 	add.w	r3, r7, #12
 8007ede:	2200      	movs	r2, #0
 8007ee0:	9200      	str	r2, [sp, #0]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	2109      	movs	r1, #9
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 fdc8 	bl	8009a7c <xTimerGenericCommand>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d002      	beq.n	8007ef8 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8007ef2:	23ff      	movs	r3, #255	@ 0xff
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	e018      	b.n	8007f2a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d015      	beq.n	8007f2a <osTimerStart+0x7a>
 8007efe:	4b0d      	ldr	r3, [pc, #52]	@ (8007f34 <osTimerStart+0x84>)
 8007f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	e00c      	b.n	8007f2a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007f10:	2300      	movs	r3, #0
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	2104      	movs	r1, #4
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fdae 	bl	8009a7c <xTimerGenericCommand>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d001      	beq.n	8007f2a <osTimerStart+0x7a>
      result = osErrorOS;
 8007f26:	23ff      	movs	r3, #255	@ 0xff
 8007f28:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8007f2a:	697b      	ldr	r3, [r7, #20]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	e000ed04 	.word	0xe000ed04

08007f38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f103 0208 	add.w	r2, r3, #8
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f103 0208 	add.w	r2, r3, #8
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f103 0208 	add.w	r2, r3, #8
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr

08007f76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr

08007f8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b085      	sub	sp, #20
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	601a      	str	r2, [r3, #0]
}
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bc80      	pop	{r7}
 8007fd2:	4770      	bx	lr

08007fd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fea:	d103      	bne.n	8007ff4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	60fb      	str	r3, [r7, #12]
 8007ff2:	e00c      	b.n	800800e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	60fb      	str	r3, [r7, #12]
 8007ffa:	e002      	b.n	8008002 <vListInsert+0x2e>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	429a      	cmp	r2, r3
 800800c:	d2f6      	bcs.n	8007ffc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	601a      	str	r2, [r3, #0]
}
 800803a:	bf00      	nop
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr

08008044 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6892      	ldr	r2, [r2, #8]
 800805a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6852      	ldr	r2, [r2, #4]
 8008064:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d103      	bne.n	8008078 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	1e5a      	subs	r2, r3, #1
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr
	...

08008098 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10b      	bne.n	80080c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080be:	bf00      	nop
 80080c0:	bf00      	nop
 80080c2:	e7fd      	b.n	80080c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80080c4:	f002 f870 	bl	800a1a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080d4:	fb01 f303 	mul.w	r3, r1, r3
 80080d8:	441a      	add	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080f4:	3b01      	subs	r3, #1
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080fa:	fb01 f303 	mul.w	r3, r1, r3
 80080fe:	441a      	add	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	22ff      	movs	r2, #255	@ 0xff
 8008108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	22ff      	movs	r2, #255	@ 0xff
 8008110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d114      	bne.n	8008144 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d01a      	beq.n	8008158 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3310      	adds	r3, #16
 8008126:	4618      	mov	r0, r3
 8008128:	f001 f8fa 	bl	8009320 <xTaskRemoveFromEventList>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d012      	beq.n	8008158 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008132:	4b0d      	ldr	r3, [pc, #52]	@ (8008168 <xQueueGenericReset+0xd0>)
 8008134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	e009      	b.n	8008158 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3310      	adds	r3, #16
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff fef5 	bl	8007f38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3324      	adds	r3, #36	@ 0x24
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fef0 	bl	8007f38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008158:	f002 f856 	bl	800a208 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800815c:	2301      	movs	r3, #1
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08e      	sub	sp, #56	@ 0x38
 8008170:	af02      	add	r7, sp, #8
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10b      	bne.n	8008198 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008192:	bf00      	nop
 8008194:	bf00      	nop
 8008196:	e7fd      	b.n	8008194 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10b      	bne.n	80081b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80081b0:	bf00      	nop
 80081b2:	bf00      	nop
 80081b4:	e7fd      	b.n	80081b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <xQueueGenericCreateStatic+0x56>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <xQueueGenericCreateStatic+0x5a>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <xQueueGenericCreateStatic+0x5c>
 80081c6:	2300      	movs	r3, #0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10b      	bne.n	80081e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	623b      	str	r3, [r7, #32]
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	e7fd      	b.n	80081e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <xQueueGenericCreateStatic+0x84>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <xQueueGenericCreateStatic+0x88>
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <xQueueGenericCreateStatic+0x8a>
 80081f4:	2300      	movs	r3, #0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10b      	bne.n	8008212 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	61fb      	str	r3, [r7, #28]
}
 800820c:	bf00      	nop
 800820e:	bf00      	nop
 8008210:	e7fd      	b.n	800820e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008212:	2348      	movs	r3, #72	@ 0x48
 8008214:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b48      	cmp	r3, #72	@ 0x48
 800821a:	d00b      	beq.n	8008234 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	61bb      	str	r3, [r7, #24]
}
 800822e:	bf00      	nop
 8008230:	bf00      	nop
 8008232:	e7fd      	b.n	8008230 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00d      	beq.n	800825a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800823e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008246:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800824a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	4613      	mov	r3, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 f805 	bl	8008264 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800825a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800825c:	4618      	mov	r0, r3
 800825e:	3730      	adds	r7, #48	@ 0x30
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d103      	bne.n	8008280 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e002      	b.n	8008286 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008292:	2101      	movs	r1, #1
 8008294:	69b8      	ldr	r0, [r7, #24]
 8008296:	f7ff feff 	bl	8008098 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800829a:	bf00      	nop
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08e      	sub	sp, #56	@ 0x38
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082b2:	2300      	movs	r3, #0
 80082b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <xQueueGenericSend+0x34>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	e7fd      	b.n	80082d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d103      	bne.n	80082e6 <xQueueGenericSend+0x42>
 80082de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <xQueueGenericSend+0x46>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e000      	b.n	80082ec <xQueueGenericSend+0x48>
 80082ea:	2300      	movs	r3, #0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10b      	bne.n	8008308 <xQueueGenericSend+0x64>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b02      	cmp	r3, #2
 800830c:	d103      	bne.n	8008316 <xQueueGenericSend+0x72>
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008312:	2b01      	cmp	r3, #1
 8008314:	d101      	bne.n	800831a <xQueueGenericSend+0x76>
 8008316:	2301      	movs	r3, #1
 8008318:	e000      	b.n	800831c <xQueueGenericSend+0x78>
 800831a:	2300      	movs	r3, #0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10b      	bne.n	8008338 <xQueueGenericSend+0x94>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	623b      	str	r3, [r7, #32]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008338:	f001 f9b6 	bl	80096a8 <xTaskGetSchedulerState>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d102      	bne.n	8008348 <xQueueGenericSend+0xa4>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <xQueueGenericSend+0xa8>
 8008348:	2301      	movs	r3, #1
 800834a:	e000      	b.n	800834e <xQueueGenericSend+0xaa>
 800834c:	2300      	movs	r3, #0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10b      	bne.n	800836a <xQueueGenericSend+0xc6>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	61fb      	str	r3, [r7, #28]
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	e7fd      	b.n	8008366 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800836a:	f001 ff1d 	bl	800a1a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008376:	429a      	cmp	r2, r3
 8008378:	d302      	bcc.n	8008380 <xQueueGenericSend+0xdc>
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b02      	cmp	r3, #2
 800837e:	d129      	bne.n	80083d4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	68b9      	ldr	r1, [r7, #8]
 8008384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008386:	f000 fa0d 	bl	80087a4 <prvCopyDataToQueue>
 800838a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	d010      	beq.n	80083b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008396:	3324      	adds	r3, #36	@ 0x24
 8008398:	4618      	mov	r0, r3
 800839a:	f000 ffc1 	bl	8009320 <xTaskRemoveFromEventList>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d013      	beq.n	80083cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083a4:	4b3f      	ldr	r3, [pc, #252]	@ (80084a4 <xQueueGenericSend+0x200>)
 80083a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	e00a      	b.n	80083cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083bc:	4b39      	ldr	r3, [pc, #228]	@ (80084a4 <xQueueGenericSend+0x200>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083cc:	f001 ff1c 	bl	800a208 <vPortExitCritical>
				return pdPASS;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e063      	b.n	800849c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d103      	bne.n	80083e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083da:	f001 ff15 	bl	800a208 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	e05c      	b.n	800849c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d106      	bne.n	80083f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083e8:	f107 0314 	add.w	r3, r7, #20
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fffb 	bl	80093e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083f2:	2301      	movs	r3, #1
 80083f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083f6:	f001 ff07 	bl	800a208 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083fa:	f000 fd6b 	bl	8008ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083fe:	f001 fed3 	bl	800a1a8 <vPortEnterCritical>
 8008402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008404:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008408:	b25b      	sxtb	r3, r3
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800840e:	d103      	bne.n	8008418 <xQueueGenericSend+0x174>
 8008410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800841e:	b25b      	sxtb	r3, r3
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008424:	d103      	bne.n	800842e <xQueueGenericSend+0x18a>
 8008426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800842e:	f001 feeb 	bl	800a208 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008432:	1d3a      	adds	r2, r7, #4
 8008434:	f107 0314 	add.w	r3, r7, #20
 8008438:	4611      	mov	r1, r2
 800843a:	4618      	mov	r0, r3
 800843c:	f000 ffea 	bl	8009414 <xTaskCheckForTimeOut>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d124      	bne.n	8008490 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008446:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008448:	f000 faa4 	bl	8008994 <prvIsQueueFull>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d018      	beq.n	8008484 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	3310      	adds	r3, #16
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4611      	mov	r1, r2
 800845a:	4618      	mov	r0, r3
 800845c:	f000 ff0e 	bl	800927c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008462:	f000 fa2f 	bl	80088c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008466:	f000 fd43 	bl	8008ef0 <xTaskResumeAll>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	f47f af7c 	bne.w	800836a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008472:	4b0c      	ldr	r3, [pc, #48]	@ (80084a4 <xQueueGenericSend+0x200>)
 8008474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	e772      	b.n	800836a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008484:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008486:	f000 fa1d 	bl	80088c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800848a:	f000 fd31 	bl	8008ef0 <xTaskResumeAll>
 800848e:	e76c      	b.n	800836a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008492:	f000 fa17 	bl	80088c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008496:	f000 fd2b 	bl	8008ef0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800849a:	2300      	movs	r3, #0
		}
	}
}
 800849c:	4618      	mov	r0, r3
 800849e:	3738      	adds	r7, #56	@ 0x38
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	e000ed04 	.word	0xe000ed04

080084a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08e      	sub	sp, #56	@ 0x38
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10b      	bne.n	80084d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084d2:	bf00      	nop
 80084d4:	bf00      	nop
 80084d6:	e7fd      	b.n	80084d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <xQueueGenericSendFromISR+0x3e>
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <xQueueGenericSendFromISR+0x42>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <xQueueGenericSendFromISR+0x44>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10b      	bne.n	8008508 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	623b      	str	r3, [r7, #32]
}
 8008502:	bf00      	nop
 8008504:	bf00      	nop
 8008506:	e7fd      	b.n	8008504 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b02      	cmp	r3, #2
 800850c:	d103      	bne.n	8008516 <xQueueGenericSendFromISR+0x6e>
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008512:	2b01      	cmp	r3, #1
 8008514:	d101      	bne.n	800851a <xQueueGenericSendFromISR+0x72>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <xQueueGenericSendFromISR+0x74>
 800851a:	2300      	movs	r3, #0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10b      	bne.n	8008538 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	61fb      	str	r3, [r7, #28]
}
 8008532:	bf00      	nop
 8008534:	bf00      	nop
 8008536:	e7fd      	b.n	8008534 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008538:	f001 fefa 	bl	800a330 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800853c:	f3ef 8211 	mrs	r2, BASEPRI
 8008540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	61ba      	str	r2, [r7, #24]
 8008552:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008554:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008556:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800855c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008560:	429a      	cmp	r2, r3
 8008562:	d302      	bcc.n	800856a <xQueueGenericSendFromISR+0xc2>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d12c      	bne.n	80085c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008570:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	68b9      	ldr	r1, [r7, #8]
 8008578:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800857a:	f000 f913 	bl	80087a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800857e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008586:	d112      	bne.n	80085ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	d016      	beq.n	80085be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008592:	3324      	adds	r3, #36	@ 0x24
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fec3 	bl	8009320 <xTaskRemoveFromEventList>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00e      	beq.n	80085be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00b      	beq.n	80085be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	e007      	b.n	80085be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085b2:	3301      	adds	r3, #1
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	b25a      	sxtb	r2, r3
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80085be:	2301      	movs	r3, #1
 80085c0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80085c2:	e001      	b.n	80085c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3738      	adds	r7, #56	@ 0x38
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b08c      	sub	sp, #48	@ 0x30
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085ec:	2300      	movs	r3, #0
 80085ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10b      	bne.n	8008612 <xQueueReceive+0x32>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	623b      	str	r3, [r7, #32]
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	e7fd      	b.n	800860e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d103      	bne.n	8008620 <xQueueReceive+0x40>
 8008618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <xQueueReceive+0x44>
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <xQueueReceive+0x46>
 8008624:	2300      	movs	r3, #0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10b      	bne.n	8008642 <xQueueReceive+0x62>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	61fb      	str	r3, [r7, #28]
}
 800863c:	bf00      	nop
 800863e:	bf00      	nop
 8008640:	e7fd      	b.n	800863e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008642:	f001 f831 	bl	80096a8 <xTaskGetSchedulerState>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d102      	bne.n	8008652 <xQueueReceive+0x72>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <xQueueReceive+0x76>
 8008652:	2301      	movs	r3, #1
 8008654:	e000      	b.n	8008658 <xQueueReceive+0x78>
 8008656:	2300      	movs	r3, #0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10b      	bne.n	8008674 <xQueueReceive+0x94>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	61bb      	str	r3, [r7, #24]
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	e7fd      	b.n	8008670 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008674:	f001 fd98 	bl	800a1a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01f      	beq.n	80086c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008688:	f000 f8f6 	bl	8008878 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800868c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868e:	1e5a      	subs	r2, r3, #1
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00f      	beq.n	80086bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800869c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869e:	3310      	adds	r3, #16
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 fe3d 	bl	8009320 <xTaskRemoveFromEventList>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086ac:	4b3c      	ldr	r3, [pc, #240]	@ (80087a0 <xQueueReceive+0x1c0>)
 80086ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086bc:	f001 fda4 	bl	800a208 <vPortExitCritical>
				return pdPASS;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e069      	b.n	8008798 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d103      	bne.n	80086d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086ca:	f001 fd9d 	bl	800a208 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086ce:	2300      	movs	r3, #0
 80086d0:	e062      	b.n	8008798 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086d8:	f107 0310 	add.w	r3, r7, #16
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fe83 	bl	80093e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086e2:	2301      	movs	r3, #1
 80086e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086e6:	f001 fd8f 	bl	800a208 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086ea:	f000 fbf3 	bl	8008ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ee:	f001 fd5b 	bl	800a1a8 <vPortEnterCritical>
 80086f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086f8:	b25b      	sxtb	r3, r3
 80086fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086fe:	d103      	bne.n	8008708 <xQueueReceive+0x128>
 8008700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800870e:	b25b      	sxtb	r3, r3
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008714:	d103      	bne.n	800871e <xQueueReceive+0x13e>
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800871e:	f001 fd73 	bl	800a208 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008722:	1d3a      	adds	r2, r7, #4
 8008724:	f107 0310 	add.w	r3, r7, #16
 8008728:	4611      	mov	r1, r2
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fe72 	bl	8009414 <xTaskCheckForTimeOut>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d123      	bne.n	800877e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008738:	f000 f916 	bl	8008968 <prvIsQueueEmpty>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d017      	beq.n	8008772 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008744:	3324      	adds	r3, #36	@ 0x24
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	4611      	mov	r1, r2
 800874a:	4618      	mov	r0, r3
 800874c:	f000 fd96 	bl	800927c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008752:	f000 f8b7 	bl	80088c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008756:	f000 fbcb 	bl	8008ef0 <xTaskResumeAll>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d189      	bne.n	8008674 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008760:	4b0f      	ldr	r3, [pc, #60]	@ (80087a0 <xQueueReceive+0x1c0>)
 8008762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	e780      	b.n	8008674 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008774:	f000 f8a6 	bl	80088c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008778:	f000 fbba 	bl	8008ef0 <xTaskResumeAll>
 800877c:	e77a      	b.n	8008674 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800877e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008780:	f000 f8a0 	bl	80088c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008784:	f000 fbb4 	bl	8008ef0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800878a:	f000 f8ed 	bl	8008968 <prvIsQueueEmpty>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	f43f af6f 	beq.w	8008674 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008796:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008798:	4618      	mov	r0, r3
 800879a:	3730      	adds	r7, #48	@ 0x30
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	e000ed04 	.word	0xe000ed04

080087a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087b0:	2300      	movs	r3, #0
 80087b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10d      	bne.n	80087de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d14d      	bne.n	8008866 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 ff88 	bl	80096e4 <xTaskPriorityDisinherit>
 80087d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	605a      	str	r2, [r3, #4]
 80087dc:	e043      	b.n	8008866 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d119      	bne.n	8008818 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6898      	ldr	r0, [r3, #8]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ec:	461a      	mov	r2, r3
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	f003 fe6d 	bl	800c4ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fc:	441a      	add	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	429a      	cmp	r2, r3
 800880c:	d32b      	bcc.n	8008866 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	609a      	str	r2, [r3, #8]
 8008816:	e026      	b.n	8008866 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	68d8      	ldr	r0, [r3, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008820:	461a      	mov	r2, r3
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	f003 fe53 	bl	800c4ce <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008830:	425b      	negs	r3, r3
 8008832:	441a      	add	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	429a      	cmp	r2, r3
 8008842:	d207      	bcs.n	8008854 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800884c:	425b      	negs	r3, r3
 800884e:	441a      	add	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d105      	bne.n	8008866 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	3b01      	subs	r3, #1
 8008864:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800886e:	697b      	ldr	r3, [r7, #20]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	d018      	beq.n	80088bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	441a      	add	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d303      	bcc.n	80088ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68d9      	ldr	r1, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b4:	461a      	mov	r2, r3
 80088b6:	6838      	ldr	r0, [r7, #0]
 80088b8:	f003 fe09 	bl	800c4ce <memcpy>
	}
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088cc:	f001 fc6c 	bl	800a1a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088d8:	e011      	b.n	80088fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d012      	beq.n	8008908 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3324      	adds	r3, #36	@ 0x24
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 fd1a 	bl	8009320 <xTaskRemoveFromEventList>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088f2:	f000 fdf3 	bl	80094dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008902:	2b00      	cmp	r3, #0
 8008904:	dce9      	bgt.n	80088da <prvUnlockQueue+0x16>
 8008906:	e000      	b.n	800890a <prvUnlockQueue+0x46>
					break;
 8008908:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	22ff      	movs	r2, #255	@ 0xff
 800890e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008912:	f001 fc79 	bl	800a208 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008916:	f001 fc47 	bl	800a1a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008920:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008922:	e011      	b.n	8008948 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d012      	beq.n	8008952 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3310      	adds	r3, #16
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fcf5 	bl	8009320 <xTaskRemoveFromEventList>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800893c:	f000 fdce 	bl	80094dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	3b01      	subs	r3, #1
 8008944:	b2db      	uxtb	r3, r3
 8008946:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800894c:	2b00      	cmp	r3, #0
 800894e:	dce9      	bgt.n	8008924 <prvUnlockQueue+0x60>
 8008950:	e000      	b.n	8008954 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008952:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	22ff      	movs	r2, #255	@ 0xff
 8008958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800895c:	f001 fc54 	bl	800a208 <vPortExitCritical>
}
 8008960:	bf00      	nop
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008970:	f001 fc1a 	bl	800a1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	e001      	b.n	8008986 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008986:	f001 fc3f 	bl	800a208 <vPortExitCritical>

	return xReturn;
 800898a:	68fb      	ldr	r3, [r7, #12]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800899c:	f001 fc04 	bl	800a1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d102      	bne.n	80089b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089ac:	2301      	movs	r3, #1
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	e001      	b.n	80089b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089b6:	f001 fc27 	bl	800a208 <vPortExitCritical>

	return xReturn;
 80089ba:	68fb      	ldr	r3, [r7, #12]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	e014      	b.n	80089fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008a10 <vQueueAddToRegistry+0x4c>)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089e0:	490b      	ldr	r1, [pc, #44]	@ (8008a10 <vQueueAddToRegistry+0x4c>)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089ea:	4a09      	ldr	r2, [pc, #36]	@ (8008a10 <vQueueAddToRegistry+0x4c>)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	4413      	add	r3, r2
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089f6:	e006      	b.n	8008a06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3301      	adds	r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b07      	cmp	r3, #7
 8008a02:	d9e7      	bls.n	80089d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bc80      	pop	{r7}
 8008a0e:	4770      	bx	lr
 8008a10:	20001798 	.word	0x20001798

08008a14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a24:	f001 fbc0 	bl	800a1a8 <vPortEnterCritical>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a2e:	b25b      	sxtb	r3, r3
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a34:	d103      	bne.n	8008a3e <vQueueWaitForMessageRestricted+0x2a>
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a44:	b25b      	sxtb	r3, r3
 8008a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a4a:	d103      	bne.n	8008a54 <vQueueWaitForMessageRestricted+0x40>
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a54:	f001 fbd8 	bl	800a208 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	3324      	adds	r3, #36	@ 0x24
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 fc2d 	bl	80092c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a6e:	6978      	ldr	r0, [r7, #20]
 8008a70:	f7ff ff28 	bl	80088c4 <prvUnlockQueue>
	}
 8008a74:	bf00      	nop
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08e      	sub	sp, #56	@ 0x38
 8008a80:	af04      	add	r7, sp, #16
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10b      	bne.n	8008aa8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	623b      	str	r3, [r7, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
 8008aa6:	e7fd      	b.n	8008aa4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10b      	bne.n	8008ac6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	61fb      	str	r3, [r7, #28]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ac6:	2354      	movs	r3, #84	@ 0x54
 8008ac8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2b54      	cmp	r3, #84	@ 0x54
 8008ace:	d00b      	beq.n	8008ae8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	61bb      	str	r3, [r7, #24]
}
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d01e      	beq.n	8008b2c <xTaskCreateStatic+0xb0>
 8008aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01b      	beq.n	8008b2c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008afc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b00:	2202      	movs	r2, #2
 8008b02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b06:	2300      	movs	r3, #0
 8008b08:	9303      	str	r3, [sp, #12]
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	9302      	str	r3, [sp, #8]
 8008b0e:	f107 0314 	add.w	r3, r7, #20
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f850 	bl	8008bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b26:	f000 f8cd 	bl	8008cc4 <prvAddNewTaskToReadyList>
 8008b2a:	e001      	b.n	8008b30 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b30:	697b      	ldr	r3, [r7, #20]
	}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3728      	adds	r7, #40	@ 0x28
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b08c      	sub	sp, #48	@ 0x30
 8008b3e:	af04      	add	r7, sp, #16
 8008b40:	60f8      	str	r0, [r7, #12]
 8008b42:	60b9      	str	r1, [r7, #8]
 8008b44:	603b      	str	r3, [r7, #0]
 8008b46:	4613      	mov	r3, r2
 8008b48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b4a:	88fb      	ldrh	r3, [r7, #6]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fc2e 	bl	800a3b0 <pvPortMalloc>
 8008b54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00e      	beq.n	8008b7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008b5c:	2054      	movs	r0, #84	@ 0x54
 8008b5e:	f001 fc27 	bl	800a3b0 <pvPortMalloc>
 8008b62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b70:	e005      	b.n	8008b7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b72:	6978      	ldr	r0, [r7, #20]
 8008b74:	f001 fce4 	bl	800a540 <vPortFree>
 8008b78:	e001      	b.n	8008b7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d017      	beq.n	8008bb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b8c:	88fa      	ldrh	r2, [r7, #6]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	9303      	str	r3, [sp, #12]
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 f80e 	bl	8008bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ba8:	69f8      	ldr	r0, [r7, #28]
 8008baa:	f000 f88b 	bl	8008cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	e002      	b.n	8008bba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bba:	69bb      	ldr	r3, [r7, #24]
	}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3720      	adds	r7, #32
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	f023 0307 	bic.w	r3, r3, #7
 8008bea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00b      	beq.n	8008c0e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	617b      	str	r3, [r7, #20]
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	e7fd      	b.n	8008c0a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61fb      	str	r3, [r7, #28]
 8008c12:	e012      	b.n	8008c3a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	4413      	add	r3, r2
 8008c1a:	7819      	ldrb	r1, [r3, #0]
 8008c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	4413      	add	r3, r2
 8008c22:	3334      	adds	r3, #52	@ 0x34
 8008c24:	460a      	mov	r2, r1
 8008c26:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d006      	beq.n	8008c42 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	3301      	adds	r3, #1
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	2b0f      	cmp	r3, #15
 8008c3e:	d9e9      	bls.n	8008c14 <prvInitialiseNewTask+0x50>
 8008c40:	e000      	b.n	8008c44 <prvInitialiseNewTask+0x80>
		{
			break;
 8008c42:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4e:	2b06      	cmp	r3, #6
 8008c50:	d901      	bls.n	8008c56 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c52:	2306      	movs	r3, #6
 8008c54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c60:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	2200      	movs	r2, #0
 8008c66:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff f982 	bl	8007f76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c74:	3318      	adds	r3, #24
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff f97d 	bl	8007f76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c84:	f1c3 0207 	rsb	r2, r3, #7
 8008c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	2200      	movs	r2, #0
 8008c96:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	68f9      	ldr	r1, [r7, #12]
 8008ca4:	69b8      	ldr	r0, [r7, #24]
 8008ca6:	f001 f9a3 	bl	8009ff0 <pxPortInitialiseStack>
 8008caa:	4602      	mov	r2, r0
 8008cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cbc:	bf00      	nop
 8008cbe:	3720      	adds	r7, #32
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ccc:	f001 fa6c 	bl	800a1a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8008d7c <prvAddNewTaskToReadyList+0xb8>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	4a29      	ldr	r2, [pc, #164]	@ (8008d7c <prvAddNewTaskToReadyList+0xb8>)
 8008cd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cda:	4b29      	ldr	r3, [pc, #164]	@ (8008d80 <prvAddNewTaskToReadyList+0xbc>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d109      	bne.n	8008cf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ce2:	4a27      	ldr	r2, [pc, #156]	@ (8008d80 <prvAddNewTaskToReadyList+0xbc>)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ce8:	4b24      	ldr	r3, [pc, #144]	@ (8008d7c <prvAddNewTaskToReadyList+0xb8>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d110      	bne.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cf0:	f000 fc18 	bl	8009524 <prvInitialiseTaskLists>
 8008cf4:	e00d      	b.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cf6:	4b23      	ldr	r3, [pc, #140]	@ (8008d84 <prvAddNewTaskToReadyList+0xc0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d109      	bne.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cfe:	4b20      	ldr	r3, [pc, #128]	@ (8008d80 <prvAddNewTaskToReadyList+0xbc>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d802      	bhi.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008d80 <prvAddNewTaskToReadyList+0xbc>)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d12:	4b1d      	ldr	r3, [pc, #116]	@ (8008d88 <prvAddNewTaskToReadyList+0xc4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3301      	adds	r3, #1
 8008d18:	4a1b      	ldr	r2, [pc, #108]	@ (8008d88 <prvAddNewTaskToReadyList+0xc4>)
 8008d1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d20:	2201      	movs	r2, #1
 8008d22:	409a      	lsls	r2, r3
 8008d24:	4b19      	ldr	r3, [pc, #100]	@ (8008d8c <prvAddNewTaskToReadyList+0xc8>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	4a18      	ldr	r2, [pc, #96]	@ (8008d8c <prvAddNewTaskToReadyList+0xc8>)
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4a15      	ldr	r2, [pc, #84]	@ (8008d90 <prvAddNewTaskToReadyList+0xcc>)
 8008d3c:	441a      	add	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3304      	adds	r3, #4
 8008d42:	4619      	mov	r1, r3
 8008d44:	4610      	mov	r0, r2
 8008d46:	f7ff f922 	bl	8007f8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d4a:	f001 fa5d 	bl	800a208 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d84 <prvAddNewTaskToReadyList+0xc0>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00e      	beq.n	8008d74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d56:	4b0a      	ldr	r3, [pc, #40]	@ (8008d80 <prvAddNewTaskToReadyList+0xbc>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d207      	bcs.n	8008d74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d64:	4b0b      	ldr	r3, [pc, #44]	@ (8008d94 <prvAddNewTaskToReadyList+0xd0>)
 8008d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d74:	bf00      	nop
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	200018d8 	.word	0x200018d8
 8008d80:	200017d8 	.word	0x200017d8
 8008d84:	200018e4 	.word	0x200018e4
 8008d88:	200018f4 	.word	0x200018f4
 8008d8c:	200018e0 	.word	0x200018e0
 8008d90:	200017dc 	.word	0x200017dc
 8008d94:	e000ed04 	.word	0xe000ed04

08008d98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d018      	beq.n	8008ddc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008daa:	4b14      	ldr	r3, [pc, #80]	@ (8008dfc <vTaskDelay+0x64>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00b      	beq.n	8008dca <vTaskDelay+0x32>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	60bb      	str	r3, [r7, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop
 8008dc8:	e7fd      	b.n	8008dc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008dca:	f000 f883 	bl	8008ed4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008dce:	2100      	movs	r1, #0
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fd0f 	bl	80097f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dd6:	f000 f88b 	bl	8008ef0 <xTaskResumeAll>
 8008dda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d107      	bne.n	8008df2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008de2:	4b07      	ldr	r3, [pc, #28]	@ (8008e00 <vTaskDelay+0x68>)
 8008de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008df2:	bf00      	nop
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	20001900 	.word	0x20001900
 8008e00:	e000ed04 	.word	0xe000ed04

08008e04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	@ 0x28
 8008e08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e12:	463a      	mov	r2, r7
 8008e14:	1d39      	adds	r1, r7, #4
 8008e16:	f107 0308 	add.w	r3, r7, #8
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7f7 ffd8 	bl	8000dd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	9202      	str	r2, [sp, #8]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	460a      	mov	r2, r1
 8008e32:	4922      	ldr	r1, [pc, #136]	@ (8008ebc <vTaskStartScheduler+0xb8>)
 8008e34:	4822      	ldr	r0, [pc, #136]	@ (8008ec0 <vTaskStartScheduler+0xbc>)
 8008e36:	f7ff fe21 	bl	8008a7c <xTaskCreateStatic>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	4a21      	ldr	r2, [pc, #132]	@ (8008ec4 <vTaskStartScheduler+0xc0>)
 8008e3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e40:	4b20      	ldr	r3, [pc, #128]	@ (8008ec4 <vTaskStartScheduler+0xc0>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	e001      	b.n	8008e52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d102      	bne.n	8008e5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e58:	f000 fd32 	bl	80098c0 <xTimerCreateTimerTask>
 8008e5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d116      	bne.n	8008e92 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	613b      	str	r3, [r7, #16]
}
 8008e76:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e78:	4b13      	ldr	r3, [pc, #76]	@ (8008ec8 <vTaskStartScheduler+0xc4>)
 8008e7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e80:	4b12      	ldr	r3, [pc, #72]	@ (8008ecc <vTaskStartScheduler+0xc8>)
 8008e82:	2201      	movs	r2, #1
 8008e84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008e86:	4b12      	ldr	r3, [pc, #72]	@ (8008ed0 <vTaskStartScheduler+0xcc>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e8c:	f001 f92c 	bl	800a0e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e90:	e00f      	b.n	8008eb2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e98:	d10b      	bne.n	8008eb2 <vTaskStartScheduler+0xae>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	60fb      	str	r3, [r7, #12]
}
 8008eac:	bf00      	nop
 8008eae:	bf00      	nop
 8008eb0:	e7fd      	b.n	8008eae <vTaskStartScheduler+0xaa>
}
 8008eb2:	bf00      	nop
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	0800e568 	.word	0x0800e568
 8008ec0:	080094f5 	.word	0x080094f5
 8008ec4:	200018fc 	.word	0x200018fc
 8008ec8:	200018f8 	.word	0x200018f8
 8008ecc:	200018e4 	.word	0x200018e4
 8008ed0:	200018dc 	.word	0x200018dc

08008ed4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008ed8:	4b04      	ldr	r3, [pc, #16]	@ (8008eec <vTaskSuspendAll+0x18>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3301      	adds	r3, #1
 8008ede:	4a03      	ldr	r2, [pc, #12]	@ (8008eec <vTaskSuspendAll+0x18>)
 8008ee0:	6013      	str	r3, [r2, #0]
}
 8008ee2:	bf00      	nop
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bc80      	pop	{r7}
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20001900 	.word	0x20001900

08008ef0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008efe:	4b42      	ldr	r3, [pc, #264]	@ (8009008 <xTaskResumeAll+0x118>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10b      	bne.n	8008f1e <xTaskResumeAll+0x2e>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	603b      	str	r3, [r7, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f1e:	f001 f943 	bl	800a1a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f22:	4b39      	ldr	r3, [pc, #228]	@ (8009008 <xTaskResumeAll+0x118>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	4a37      	ldr	r2, [pc, #220]	@ (8009008 <xTaskResumeAll+0x118>)
 8008f2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f2c:	4b36      	ldr	r3, [pc, #216]	@ (8009008 <xTaskResumeAll+0x118>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d161      	bne.n	8008ff8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f34:	4b35      	ldr	r3, [pc, #212]	@ (800900c <xTaskResumeAll+0x11c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d05d      	beq.n	8008ff8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f3c:	e02e      	b.n	8008f9c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008f3e:	4b34      	ldr	r3, [pc, #208]	@ (8009010 <xTaskResumeAll+0x120>)
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3318      	adds	r3, #24
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff f87a 	bl	8008044 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7ff f875 	bl	8008044 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5e:	2201      	movs	r2, #1
 8008f60:	409a      	lsls	r2, r3
 8008f62:	4b2c      	ldr	r3, [pc, #176]	@ (8009014 <xTaskResumeAll+0x124>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	4a2a      	ldr	r2, [pc, #168]	@ (8009014 <xTaskResumeAll+0x124>)
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4a27      	ldr	r2, [pc, #156]	@ (8009018 <xTaskResumeAll+0x128>)
 8008f7a:	441a      	add	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	4619      	mov	r1, r3
 8008f82:	4610      	mov	r0, r2
 8008f84:	f7ff f803 	bl	8007f8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f8c:	4b23      	ldr	r3, [pc, #140]	@ (800901c <xTaskResumeAll+0x12c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d302      	bcc.n	8008f9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f96:	4b22      	ldr	r3, [pc, #136]	@ (8009020 <xTaskResumeAll+0x130>)
 8008f98:	2201      	movs	r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8009010 <xTaskResumeAll+0x120>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1cc      	bne.n	8008f3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008faa:	f000 fb59 	bl	8009660 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008fae:	4b1d      	ldr	r3, [pc, #116]	@ (8009024 <xTaskResumeAll+0x134>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d010      	beq.n	8008fdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fba:	f000 f845 	bl	8009048 <xTaskIncrementTick>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008fc4:	4b16      	ldr	r3, [pc, #88]	@ (8009020 <xTaskResumeAll+0x130>)
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1f1      	bne.n	8008fba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008fd6:	4b13      	ldr	r3, [pc, #76]	@ (8009024 <xTaskResumeAll+0x134>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fdc:	4b10      	ldr	r3, [pc, #64]	@ (8009020 <xTaskResumeAll+0x130>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d009      	beq.n	8008ff8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8009028 <xTaskResumeAll+0x138>)
 8008fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ff8:	f001 f906 	bl	800a208 <vPortExitCritical>

	return xAlreadyYielded;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20001900 	.word	0x20001900
 800900c:	200018d8 	.word	0x200018d8
 8009010:	20001898 	.word	0x20001898
 8009014:	200018e0 	.word	0x200018e0
 8009018:	200017dc 	.word	0x200017dc
 800901c:	200017d8 	.word	0x200017d8
 8009020:	200018ec 	.word	0x200018ec
 8009024:	200018e8 	.word	0x200018e8
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009032:	4b04      	ldr	r3, [pc, #16]	@ (8009044 <xTaskGetTickCount+0x18>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009038:	687b      	ldr	r3, [r7, #4]
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr
 8009044:	200018dc 	.word	0x200018dc

08009048 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800904e:	2300      	movs	r3, #0
 8009050:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009052:	4b51      	ldr	r3, [pc, #324]	@ (8009198 <xTaskIncrementTick+0x150>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	f040 808e 	bne.w	8009178 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800905c:	4b4f      	ldr	r3, [pc, #316]	@ (800919c <xTaskIncrementTick+0x154>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3301      	adds	r3, #1
 8009062:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009064:	4a4d      	ldr	r2, [pc, #308]	@ (800919c <xTaskIncrementTick+0x154>)
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d121      	bne.n	80090b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009070:	4b4b      	ldr	r3, [pc, #300]	@ (80091a0 <xTaskIncrementTick+0x158>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00b      	beq.n	8009092 <xTaskIncrementTick+0x4a>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	603b      	str	r3, [r7, #0]
}
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	e7fd      	b.n	800908e <xTaskIncrementTick+0x46>
 8009092:	4b43      	ldr	r3, [pc, #268]	@ (80091a0 <xTaskIncrementTick+0x158>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]
 8009098:	4b42      	ldr	r3, [pc, #264]	@ (80091a4 <xTaskIncrementTick+0x15c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a40      	ldr	r2, [pc, #256]	@ (80091a0 <xTaskIncrementTick+0x158>)
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	4a40      	ldr	r2, [pc, #256]	@ (80091a4 <xTaskIncrementTick+0x15c>)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	4b40      	ldr	r3, [pc, #256]	@ (80091a8 <xTaskIncrementTick+0x160>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3301      	adds	r3, #1
 80090ac:	4a3e      	ldr	r2, [pc, #248]	@ (80091a8 <xTaskIncrementTick+0x160>)
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	f000 fad6 	bl	8009660 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090b4:	4b3d      	ldr	r3, [pc, #244]	@ (80091ac <xTaskIncrementTick+0x164>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d34d      	bcc.n	800915a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090be:	4b38      	ldr	r3, [pc, #224]	@ (80091a0 <xTaskIncrementTick+0x158>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <xTaskIncrementTick+0x84>
 80090c8:	2301      	movs	r3, #1
 80090ca:	e000      	b.n	80090ce <xTaskIncrementTick+0x86>
 80090cc:	2300      	movs	r3, #0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d004      	beq.n	80090dc <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d2:	4b36      	ldr	r3, [pc, #216]	@ (80091ac <xTaskIncrementTick+0x164>)
 80090d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090d8:	601a      	str	r2, [r3, #0]
					break;
 80090da:	e03e      	b.n	800915a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80090dc:	4b30      	ldr	r3, [pc, #192]	@ (80091a0 <xTaskIncrementTick+0x158>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d203      	bcs.n	80090fc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090f4:	4a2d      	ldr	r2, [pc, #180]	@ (80091ac <xTaskIncrementTick+0x164>)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6013      	str	r3, [r2, #0]
						break;
 80090fa:	e02e      	b.n	800915a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	3304      	adds	r3, #4
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe ff9f 	bl	8008044 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d004      	beq.n	8009118 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	3318      	adds	r3, #24
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe ff96 	bl	8008044 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911c:	2201      	movs	r2, #1
 800911e:	409a      	lsls	r2, r3
 8009120:	4b23      	ldr	r3, [pc, #140]	@ (80091b0 <xTaskIncrementTick+0x168>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4313      	orrs	r3, r2
 8009126:	4a22      	ldr	r2, [pc, #136]	@ (80091b0 <xTaskIncrementTick+0x168>)
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800912e:	4613      	mov	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4a1f      	ldr	r2, [pc, #124]	@ (80091b4 <xTaskIncrementTick+0x16c>)
 8009138:	441a      	add	r2, r3
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	3304      	adds	r3, #4
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f7fe ff24 	bl	8007f8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800914a:	4b1b      	ldr	r3, [pc, #108]	@ (80091b8 <xTaskIncrementTick+0x170>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009150:	429a      	cmp	r2, r3
 8009152:	d3b4      	bcc.n	80090be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009158:	e7b1      	b.n	80090be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800915a:	4b17      	ldr	r3, [pc, #92]	@ (80091b8 <xTaskIncrementTick+0x170>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009160:	4914      	ldr	r1, [pc, #80]	@ (80091b4 <xTaskIncrementTick+0x16c>)
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	440b      	add	r3, r1
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d907      	bls.n	8009182 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009172:	2301      	movs	r3, #1
 8009174:	617b      	str	r3, [r7, #20]
 8009176:	e004      	b.n	8009182 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009178:	4b10      	ldr	r3, [pc, #64]	@ (80091bc <xTaskIncrementTick+0x174>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3301      	adds	r3, #1
 800917e:	4a0f      	ldr	r2, [pc, #60]	@ (80091bc <xTaskIncrementTick+0x174>)
 8009180:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009182:	4b0f      	ldr	r3, [pc, #60]	@ (80091c0 <xTaskIncrementTick+0x178>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800918a:	2301      	movs	r3, #1
 800918c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800918e:	697b      	ldr	r3, [r7, #20]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20001900 	.word	0x20001900
 800919c:	200018dc 	.word	0x200018dc
 80091a0:	20001890 	.word	0x20001890
 80091a4:	20001894 	.word	0x20001894
 80091a8:	200018f0 	.word	0x200018f0
 80091ac:	200018f8 	.word	0x200018f8
 80091b0:	200018e0 	.word	0x200018e0
 80091b4:	200017dc 	.word	0x200017dc
 80091b8:	200017d8 	.word	0x200017d8
 80091bc:	200018e8 	.word	0x200018e8
 80091c0:	200018ec 	.word	0x200018ec

080091c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091ca:	4b27      	ldr	r3, [pc, #156]	@ (8009268 <vTaskSwitchContext+0xa4>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091d2:	4b26      	ldr	r3, [pc, #152]	@ (800926c <vTaskSwitchContext+0xa8>)
 80091d4:	2201      	movs	r2, #1
 80091d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091d8:	e040      	b.n	800925c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80091da:	4b24      	ldr	r3, [pc, #144]	@ (800926c <vTaskSwitchContext+0xa8>)
 80091dc:	2200      	movs	r2, #0
 80091de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80091e0:	4b23      	ldr	r3, [pc, #140]	@ (8009270 <vTaskSwitchContext+0xac>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	fab3 f383 	clz	r3, r3
 80091ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80091ee:	7afb      	ldrb	r3, [r7, #11]
 80091f0:	f1c3 031f 	rsb	r3, r3, #31
 80091f4:	617b      	str	r3, [r7, #20]
 80091f6:	491f      	ldr	r1, [pc, #124]	@ (8009274 <vTaskSwitchContext+0xb0>)
 80091f8:	697a      	ldr	r2, [r7, #20]
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	440b      	add	r3, r1
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10b      	bne.n	8009222 <vTaskSwitchContext+0x5e>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	607b      	str	r3, [r7, #4]
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	e7fd      	b.n	800921e <vTaskSwitchContext+0x5a>
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4a11      	ldr	r2, [pc, #68]	@ (8009274 <vTaskSwitchContext+0xb0>)
 800922e:	4413      	add	r3, r2
 8009230:	613b      	str	r3, [r7, #16]
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	605a      	str	r2, [r3, #4]
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	3308      	adds	r3, #8
 8009244:	429a      	cmp	r2, r3
 8009246:	d104      	bne.n	8009252 <vTaskSwitchContext+0x8e>
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	605a      	str	r2, [r3, #4]
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	4a07      	ldr	r2, [pc, #28]	@ (8009278 <vTaskSwitchContext+0xb4>)
 800925a:	6013      	str	r3, [r2, #0]
}
 800925c:	bf00      	nop
 800925e:	371c      	adds	r7, #28
 8009260:	46bd      	mov	sp, r7
 8009262:	bc80      	pop	{r7}
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	20001900 	.word	0x20001900
 800926c:	200018ec 	.word	0x200018ec
 8009270:	200018e0 	.word	0x200018e0
 8009274:	200017dc 	.word	0x200017dc
 8009278:	200017d8 	.word	0x200017d8

0800927c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10b      	bne.n	80092a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	60fb      	str	r3, [r7, #12]
}
 800929e:	bf00      	nop
 80092a0:	bf00      	nop
 80092a2:	e7fd      	b.n	80092a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092a4:	4b07      	ldr	r3, [pc, #28]	@ (80092c4 <vTaskPlaceOnEventList+0x48>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3318      	adds	r3, #24
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f7fe fe91 	bl	8007fd4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092b2:	2101      	movs	r1, #1
 80092b4:	6838      	ldr	r0, [r7, #0]
 80092b6:	f000 fa9d 	bl	80097f4 <prvAddCurrentTaskToDelayedList>
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	200017d8 	.word	0x200017d8

080092c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	617b      	str	r3, [r7, #20]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092f2:	4b0a      	ldr	r3, [pc, #40]	@ (800931c <vTaskPlaceOnEventListRestricted+0x54>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3318      	adds	r3, #24
 80092f8:	4619      	mov	r1, r3
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7fe fe47 	bl	8007f8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009306:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800930a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	68b8      	ldr	r0, [r7, #8]
 8009310:	f000 fa70 	bl	80097f4 <prvAddCurrentTaskToDelayedList>
	}
 8009314:	bf00      	nop
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	200017d8 	.word	0x200017d8

08009320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10b      	bne.n	800934e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	60fb      	str	r3, [r7, #12]
}
 8009348:	bf00      	nop
 800934a:	bf00      	nop
 800934c:	e7fd      	b.n	800934a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	3318      	adds	r3, #24
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fe76 	bl	8008044 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009358:	4b1d      	ldr	r3, [pc, #116]	@ (80093d0 <xTaskRemoveFromEventList+0xb0>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d11c      	bne.n	800939a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	3304      	adds	r3, #4
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe fe6d 	bl	8008044 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936e:	2201      	movs	r2, #1
 8009370:	409a      	lsls	r2, r3
 8009372:	4b18      	ldr	r3, [pc, #96]	@ (80093d4 <xTaskRemoveFromEventList+0xb4>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4313      	orrs	r3, r2
 8009378:	4a16      	ldr	r2, [pc, #88]	@ (80093d4 <xTaskRemoveFromEventList+0xb4>)
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4a13      	ldr	r2, [pc, #76]	@ (80093d8 <xTaskRemoveFromEventList+0xb8>)
 800938a:	441a      	add	r2, r3
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	3304      	adds	r3, #4
 8009390:	4619      	mov	r1, r3
 8009392:	4610      	mov	r0, r2
 8009394:	f7fe fdfb 	bl	8007f8e <vListInsertEnd>
 8009398:	e005      	b.n	80093a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	3318      	adds	r3, #24
 800939e:	4619      	mov	r1, r3
 80093a0:	480e      	ldr	r0, [pc, #56]	@ (80093dc <xTaskRemoveFromEventList+0xbc>)
 80093a2:	f7fe fdf4 	bl	8007f8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093aa:	4b0d      	ldr	r3, [pc, #52]	@ (80093e0 <xTaskRemoveFromEventList+0xc0>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d905      	bls.n	80093c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093b8:	4b0a      	ldr	r3, [pc, #40]	@ (80093e4 <xTaskRemoveFromEventList+0xc4>)
 80093ba:	2201      	movs	r2, #1
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	e001      	b.n	80093c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093c0:	2300      	movs	r3, #0
 80093c2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80093c4:	697b      	ldr	r3, [r7, #20]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20001900 	.word	0x20001900
 80093d4:	200018e0 	.word	0x200018e0
 80093d8:	200017dc 	.word	0x200017dc
 80093dc:	20001898 	.word	0x20001898
 80093e0:	200017d8 	.word	0x200017d8
 80093e4:	200018ec 	.word	0x200018ec

080093e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093f0:	4b06      	ldr	r3, [pc, #24]	@ (800940c <vTaskInternalSetTimeOutState+0x24>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093f8:	4b05      	ldr	r3, [pc, #20]	@ (8009410 <vTaskInternalSetTimeOutState+0x28>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	605a      	str	r2, [r3, #4]
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	bc80      	pop	{r7}
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	200018f0 	.word	0x200018f0
 8009410:	200018dc 	.word	0x200018dc

08009414 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b088      	sub	sp, #32
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10b      	bne.n	800943c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	613b      	str	r3, [r7, #16]
}
 8009436:	bf00      	nop
 8009438:	bf00      	nop
 800943a:	e7fd      	b.n	8009438 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10b      	bne.n	800945a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	60fb      	str	r3, [r7, #12]
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop
 8009458:	e7fd      	b.n	8009456 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800945a:	f000 fea5 	bl	800a1a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800945e:	4b1d      	ldr	r3, [pc, #116]	@ (80094d4 <xTaskCheckForTimeOut+0xc0>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009476:	d102      	bne.n	800947e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009478:	2300      	movs	r3, #0
 800947a:	61fb      	str	r3, [r7, #28]
 800947c:	e023      	b.n	80094c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	4b15      	ldr	r3, [pc, #84]	@ (80094d8 <xTaskCheckForTimeOut+0xc4>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	429a      	cmp	r2, r3
 8009488:	d007      	beq.n	800949a <xTaskCheckForTimeOut+0x86>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	429a      	cmp	r2, r3
 8009492:	d302      	bcc.n	800949a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009494:	2301      	movs	r3, #1
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	e015      	b.n	80094c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d20b      	bcs.n	80094bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	1ad2      	subs	r2, r2, r3
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7ff ff99 	bl	80093e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	61fb      	str	r3, [r7, #28]
 80094ba:	e004      	b.n	80094c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2200      	movs	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094c2:	2301      	movs	r3, #1
 80094c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094c6:	f000 fe9f 	bl	800a208 <vPortExitCritical>

	return xReturn;
 80094ca:	69fb      	ldr	r3, [r7, #28]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3720      	adds	r7, #32
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	200018dc 	.word	0x200018dc
 80094d8:	200018f0 	.word	0x200018f0

080094dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094e0:	4b03      	ldr	r3, [pc, #12]	@ (80094f0 <vTaskMissedYield+0x14>)
 80094e2:	2201      	movs	r2, #1
 80094e4:	601a      	str	r2, [r3, #0]
}
 80094e6:	bf00      	nop
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bc80      	pop	{r7}
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	200018ec 	.word	0x200018ec

080094f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094fc:	f000 f852 	bl	80095a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009500:	4b06      	ldr	r3, [pc, #24]	@ (800951c <prvIdleTask+0x28>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d9f9      	bls.n	80094fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009508:	4b05      	ldr	r3, [pc, #20]	@ (8009520 <prvIdleTask+0x2c>)
 800950a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009518:	e7f0      	b.n	80094fc <prvIdleTask+0x8>
 800951a:	bf00      	nop
 800951c:	200017dc 	.word	0x200017dc
 8009520:	e000ed04 	.word	0xe000ed04

08009524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800952a:	2300      	movs	r3, #0
 800952c:	607b      	str	r3, [r7, #4]
 800952e:	e00c      	b.n	800954a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4a12      	ldr	r2, [pc, #72]	@ (8009584 <prvInitialiseTaskLists+0x60>)
 800953c:	4413      	add	r3, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f7fe fcfa 	bl	8007f38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	3301      	adds	r3, #1
 8009548:	607b      	str	r3, [r7, #4]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b06      	cmp	r3, #6
 800954e:	d9ef      	bls.n	8009530 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009550:	480d      	ldr	r0, [pc, #52]	@ (8009588 <prvInitialiseTaskLists+0x64>)
 8009552:	f7fe fcf1 	bl	8007f38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009556:	480d      	ldr	r0, [pc, #52]	@ (800958c <prvInitialiseTaskLists+0x68>)
 8009558:	f7fe fcee 	bl	8007f38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800955c:	480c      	ldr	r0, [pc, #48]	@ (8009590 <prvInitialiseTaskLists+0x6c>)
 800955e:	f7fe fceb 	bl	8007f38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009562:	480c      	ldr	r0, [pc, #48]	@ (8009594 <prvInitialiseTaskLists+0x70>)
 8009564:	f7fe fce8 	bl	8007f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009568:	480b      	ldr	r0, [pc, #44]	@ (8009598 <prvInitialiseTaskLists+0x74>)
 800956a:	f7fe fce5 	bl	8007f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800956e:	4b0b      	ldr	r3, [pc, #44]	@ (800959c <prvInitialiseTaskLists+0x78>)
 8009570:	4a05      	ldr	r2, [pc, #20]	@ (8009588 <prvInitialiseTaskLists+0x64>)
 8009572:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009574:	4b0a      	ldr	r3, [pc, #40]	@ (80095a0 <prvInitialiseTaskLists+0x7c>)
 8009576:	4a05      	ldr	r2, [pc, #20]	@ (800958c <prvInitialiseTaskLists+0x68>)
 8009578:	601a      	str	r2, [r3, #0]
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	200017dc 	.word	0x200017dc
 8009588:	20001868 	.word	0x20001868
 800958c:	2000187c 	.word	0x2000187c
 8009590:	20001898 	.word	0x20001898
 8009594:	200018ac 	.word	0x200018ac
 8009598:	200018c4 	.word	0x200018c4
 800959c:	20001890 	.word	0x20001890
 80095a0:	20001894 	.word	0x20001894

080095a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095aa:	e019      	b.n	80095e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095ac:	f000 fdfc 	bl	800a1a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80095b0:	4b10      	ldr	r3, [pc, #64]	@ (80095f4 <prvCheckTasksWaitingTermination+0x50>)
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3304      	adds	r3, #4
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fd41 	bl	8008044 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095c2:	4b0d      	ldr	r3, [pc, #52]	@ (80095f8 <prvCheckTasksWaitingTermination+0x54>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	4a0b      	ldr	r2, [pc, #44]	@ (80095f8 <prvCheckTasksWaitingTermination+0x54>)
 80095ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095cc:	4b0b      	ldr	r3, [pc, #44]	@ (80095fc <prvCheckTasksWaitingTermination+0x58>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	4a0a      	ldr	r2, [pc, #40]	@ (80095fc <prvCheckTasksWaitingTermination+0x58>)
 80095d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095d6:	f000 fe17 	bl	800a208 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f810 	bl	8009600 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095e0:	4b06      	ldr	r3, [pc, #24]	@ (80095fc <prvCheckTasksWaitingTermination+0x58>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1e1      	bne.n	80095ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095e8:	bf00      	nop
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	200018ac 	.word	0x200018ac
 80095f8:	200018d8 	.word	0x200018d8
 80095fc:	200018c0 	.word	0x200018c0

08009600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800960e:	2b00      	cmp	r3, #0
 8009610:	d108      	bne.n	8009624 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009616:	4618      	mov	r0, r3
 8009618:	f000 ff92 	bl	800a540 <vPortFree>
				vPortFree( pxTCB );
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 ff8f 	bl	800a540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009622:	e019      	b.n	8009658 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800962a:	2b01      	cmp	r3, #1
 800962c:	d103      	bne.n	8009636 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 ff86 	bl	800a540 <vPortFree>
	}
 8009634:	e010      	b.n	8009658 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800963c:	2b02      	cmp	r3, #2
 800963e:	d00b      	beq.n	8009658 <prvDeleteTCB+0x58>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	60fb      	str	r3, [r7, #12]
}
 8009652:	bf00      	nop
 8009654:	bf00      	nop
 8009656:	e7fd      	b.n	8009654 <prvDeleteTCB+0x54>
	}
 8009658:	bf00      	nop
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009666:	4b0e      	ldr	r3, [pc, #56]	@ (80096a0 <prvResetNextTaskUnblockTime+0x40>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <prvResetNextTaskUnblockTime+0x14>
 8009670:	2301      	movs	r3, #1
 8009672:	e000      	b.n	8009676 <prvResetNextTaskUnblockTime+0x16>
 8009674:	2300      	movs	r3, #0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d004      	beq.n	8009684 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800967a:	4b0a      	ldr	r3, [pc, #40]	@ (80096a4 <prvResetNextTaskUnblockTime+0x44>)
 800967c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009680:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009682:	e008      	b.n	8009696 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009684:	4b06      	ldr	r3, [pc, #24]	@ (80096a0 <prvResetNextTaskUnblockTime+0x40>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	4a04      	ldr	r2, [pc, #16]	@ (80096a4 <prvResetNextTaskUnblockTime+0x44>)
 8009694:	6013      	str	r3, [r2, #0]
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr
 80096a0:	20001890 	.word	0x20001890
 80096a4:	200018f8 	.word	0x200018f8

080096a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096ae:	4b0b      	ldr	r3, [pc, #44]	@ (80096dc <xTaskGetSchedulerState+0x34>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096b6:	2301      	movs	r3, #1
 80096b8:	607b      	str	r3, [r7, #4]
 80096ba:	e008      	b.n	80096ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096bc:	4b08      	ldr	r3, [pc, #32]	@ (80096e0 <xTaskGetSchedulerState+0x38>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d102      	bne.n	80096ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096c4:	2302      	movs	r3, #2
 80096c6:	607b      	str	r3, [r7, #4]
 80096c8:	e001      	b.n	80096ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096ca:	2300      	movs	r3, #0
 80096cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096ce:	687b      	ldr	r3, [r7, #4]
	}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bc80      	pop	{r7}
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	200018e4 	.word	0x200018e4
 80096e0:	20001900 	.word	0x20001900

080096e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096f0:	2300      	movs	r3, #0
 80096f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d070      	beq.n	80097dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096fa:	4b3b      	ldr	r3, [pc, #236]	@ (80097e8 <xTaskPriorityDisinherit+0x104>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	429a      	cmp	r2, r3
 8009702:	d00b      	beq.n	800971c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	60fb      	str	r3, [r7, #12]
}
 8009716:	bf00      	nop
 8009718:	bf00      	nop
 800971a:	e7fd      	b.n	8009718 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10b      	bne.n	800973c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	60bb      	str	r3, [r7, #8]
}
 8009736:	bf00      	nop
 8009738:	bf00      	nop
 800973a:	e7fd      	b.n	8009738 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009740:	1e5a      	subs	r2, r3, #1
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800974e:	429a      	cmp	r2, r3
 8009750:	d044      	beq.n	80097dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009756:	2b00      	cmp	r3, #0
 8009758:	d140      	bne.n	80097dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	3304      	adds	r3, #4
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe fc70 	bl	8008044 <uxListRemove>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d115      	bne.n	8009796 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800976e:	491f      	ldr	r1, [pc, #124]	@ (80097ec <xTaskPriorityDisinherit+0x108>)
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <xTaskPriorityDisinherit+0xb2>
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009784:	2201      	movs	r2, #1
 8009786:	fa02 f303 	lsl.w	r3, r2, r3
 800978a:	43da      	mvns	r2, r3
 800978c:	4b18      	ldr	r3, [pc, #96]	@ (80097f0 <xTaskPriorityDisinherit+0x10c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4013      	ands	r3, r2
 8009792:	4a17      	ldr	r2, [pc, #92]	@ (80097f0 <xTaskPriorityDisinherit+0x10c>)
 8009794:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a2:	f1c3 0207 	rsb	r2, r3, #7
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ae:	2201      	movs	r2, #1
 80097b0:	409a      	lsls	r2, r3
 80097b2:	4b0f      	ldr	r3, [pc, #60]	@ (80097f0 <xTaskPriorityDisinherit+0x10c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	4a0d      	ldr	r2, [pc, #52]	@ (80097f0 <xTaskPriorityDisinherit+0x10c>)
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4a08      	ldr	r2, [pc, #32]	@ (80097ec <xTaskPriorityDisinherit+0x108>)
 80097ca:	441a      	add	r2, r3
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f7fe fbdb 	bl	8007f8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097d8:	2301      	movs	r3, #1
 80097da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097dc:	697b      	ldr	r3, [r7, #20]
	}
 80097de:	4618      	mov	r0, r3
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	200017d8 	.word	0x200017d8
 80097ec:	200017dc 	.word	0x200017dc
 80097f0:	200018e0 	.word	0x200018e0

080097f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097fe:	4b29      	ldr	r3, [pc, #164]	@ (80098a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009804:	4b28      	ldr	r3, [pc, #160]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3304      	adds	r3, #4
 800980a:	4618      	mov	r0, r3
 800980c:	f7fe fc1a 	bl	8008044 <uxListRemove>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10b      	bne.n	800982e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009816:	4b24      	ldr	r3, [pc, #144]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981c:	2201      	movs	r2, #1
 800981e:	fa02 f303 	lsl.w	r3, r2, r3
 8009822:	43da      	mvns	r2, r3
 8009824:	4b21      	ldr	r3, [pc, #132]	@ (80098ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4013      	ands	r3, r2
 800982a:	4a20      	ldr	r2, [pc, #128]	@ (80098ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800982c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009834:	d10a      	bne.n	800984c <prvAddCurrentTaskToDelayedList+0x58>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d007      	beq.n	800984c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800983c:	4b1a      	ldr	r3, [pc, #104]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3304      	adds	r3, #4
 8009842:	4619      	mov	r1, r3
 8009844:	481a      	ldr	r0, [pc, #104]	@ (80098b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009846:	f7fe fba2 	bl	8007f8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800984a:	e026      	b.n	800989a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4413      	add	r3, r2
 8009852:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009854:	4b14      	ldr	r3, [pc, #80]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	429a      	cmp	r2, r3
 8009862:	d209      	bcs.n	8009878 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009864:	4b13      	ldr	r3, [pc, #76]	@ (80098b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	4b0f      	ldr	r3, [pc, #60]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3304      	adds	r3, #4
 800986e:	4619      	mov	r1, r3
 8009870:	4610      	mov	r0, r2
 8009872:	f7fe fbaf 	bl	8007fd4 <vListInsert>
}
 8009876:	e010      	b.n	800989a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009878:	4b0f      	ldr	r3, [pc, #60]	@ (80098b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	4b0a      	ldr	r3, [pc, #40]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3304      	adds	r3, #4
 8009882:	4619      	mov	r1, r3
 8009884:	4610      	mov	r0, r2
 8009886:	f7fe fba5 	bl	8007fd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800988a:	4b0c      	ldr	r3, [pc, #48]	@ (80098bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	429a      	cmp	r2, r3
 8009892:	d202      	bcs.n	800989a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009894:	4a09      	ldr	r2, [pc, #36]	@ (80098bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	6013      	str	r3, [r2, #0]
}
 800989a:	bf00      	nop
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	200018dc 	.word	0x200018dc
 80098a8:	200017d8 	.word	0x200017d8
 80098ac:	200018e0 	.word	0x200018e0
 80098b0:	200018c4 	.word	0x200018c4
 80098b4:	20001894 	.word	0x20001894
 80098b8:	20001890 	.word	0x20001890
 80098bc:	200018f8 	.word	0x200018f8

080098c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08a      	sub	sp, #40	@ 0x28
 80098c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80098ca:	f000 fb51 	bl	8009f70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80098ce:	4b1d      	ldr	r3, [pc, #116]	@ (8009944 <xTimerCreateTimerTask+0x84>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d021      	beq.n	800991a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098de:	1d3a      	adds	r2, r7, #4
 80098e0:	f107 0108 	add.w	r1, r7, #8
 80098e4:	f107 030c 	add.w	r3, r7, #12
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7f7 fa89 	bl	8000e00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	9202      	str	r2, [sp, #8]
 80098f6:	9301      	str	r3, [sp, #4]
 80098f8:	2306      	movs	r3, #6
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	2300      	movs	r3, #0
 80098fe:	460a      	mov	r2, r1
 8009900:	4911      	ldr	r1, [pc, #68]	@ (8009948 <xTimerCreateTimerTask+0x88>)
 8009902:	4812      	ldr	r0, [pc, #72]	@ (800994c <xTimerCreateTimerTask+0x8c>)
 8009904:	f7ff f8ba 	bl	8008a7c <xTaskCreateStatic>
 8009908:	4603      	mov	r3, r0
 800990a:	4a11      	ldr	r2, [pc, #68]	@ (8009950 <xTimerCreateTimerTask+0x90>)
 800990c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800990e:	4b10      	ldr	r3, [pc, #64]	@ (8009950 <xTimerCreateTimerTask+0x90>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009916:	2301      	movs	r3, #1
 8009918:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10b      	bne.n	8009938 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	613b      	str	r3, [r7, #16]
}
 8009932:	bf00      	nop
 8009934:	bf00      	nop
 8009936:	e7fd      	b.n	8009934 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009938:	697b      	ldr	r3, [r7, #20]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20001934 	.word	0x20001934
 8009948:	0800e570 	.word	0x0800e570
 800994c:	08009b9d 	.word	0x08009b9d
 8009950:	20001938 	.word	0x20001938

08009954 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af02      	add	r7, sp, #8
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009962:	202c      	movs	r0, #44	@ 0x2c
 8009964:	f000 fd24 	bl	800a3b0 <pvPortMalloc>
 8009968:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00d      	beq.n	800998c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	9301      	str	r3, [sp, #4]
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 f848 	bl	8009a14 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800998c:	697b      	ldr	r3, [r7, #20]
	}
 800998e:	4618      	mov	r0, r3
 8009990:	3718      	adds	r7, #24
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009996:	b580      	push	{r7, lr}
 8009998:	b08a      	sub	sp, #40	@ 0x28
 800999a:	af02      	add	r7, sp, #8
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	607a      	str	r2, [r7, #4]
 80099a2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80099a4:	232c      	movs	r3, #44	@ 0x2c
 80099a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	2b2c      	cmp	r3, #44	@ 0x2c
 80099ac:	d00b      	beq.n	80099c6 <xTimerCreateStatic+0x30>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	61bb      	str	r3, [r7, #24]
}
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	e7fd      	b.n	80099c2 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80099c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10b      	bne.n	80099e4 <xTimerCreateStatic+0x4e>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	617b      	str	r3, [r7, #20]
}
 80099de:	bf00      	nop
 80099e0:	bf00      	nop
 80099e2:	e7fd      	b.n	80099e0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00d      	beq.n	8009a0a <xTimerCreateStatic+0x74>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 f809 	bl	8009a14 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8009a0a:	69fb      	ldr	r3, [r7, #28]
	}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3720      	adds	r7, #32
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10b      	bne.n	8009a40 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	617b      	str	r3, [r7, #20]
}
 8009a3a:	bf00      	nop
 8009a3c:	bf00      	nop
 8009a3e:	e7fd      	b.n	8009a3c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d015      	beq.n	8009a72 <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009a46:	f000 fa93 	bl	8009f70 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a64:	6a3a      	ldr	r2, [r7, #32]
 8009a66:	625a      	str	r2, [r3, #36]	@ 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe fa82 	bl	8007f76 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009a72:	bf00      	nop
 8009a74:	3718      	adds	r7, #24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	@ 0x28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10b      	bne.n	8009aac <xTimerGenericCommand+0x30>
	__asm volatile
 8009a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	623b      	str	r3, [r7, #32]
}
 8009aa6:	bf00      	nop
 8009aa8:	bf00      	nop
 8009aaa:	e7fd      	b.n	8009aa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009aac:	4b19      	ldr	r3, [pc, #100]	@ (8009b14 <xTimerGenericCommand+0x98>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d02a      	beq.n	8009b0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b05      	cmp	r3, #5
 8009ac4:	dc18      	bgt.n	8009af8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ac6:	f7ff fdef 	bl	80096a8 <xTaskGetSchedulerState>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d109      	bne.n	8009ae4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ad0:	4b10      	ldr	r3, [pc, #64]	@ (8009b14 <xTimerGenericCommand+0x98>)
 8009ad2:	6818      	ldr	r0, [r3, #0]
 8009ad4:	f107 0114 	add.w	r1, r7, #20
 8009ad8:	2300      	movs	r3, #0
 8009ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009adc:	f7fe fbe2 	bl	80082a4 <xQueueGenericSend>
 8009ae0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ae2:	e012      	b.n	8009b0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8009b14 <xTimerGenericCommand+0x98>)
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	f107 0114 	add.w	r1, r7, #20
 8009aec:	2300      	movs	r3, #0
 8009aee:	2200      	movs	r2, #0
 8009af0:	f7fe fbd8 	bl	80082a4 <xQueueGenericSend>
 8009af4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009af6:	e008      	b.n	8009b0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009af8:	4b06      	ldr	r3, [pc, #24]	@ (8009b14 <xTimerGenericCommand+0x98>)
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	f107 0114 	add.w	r1, r7, #20
 8009b00:	2300      	movs	r3, #0
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	f7fe fcd0 	bl	80084a8 <xQueueGenericSendFromISR>
 8009b08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3728      	adds	r7, #40	@ 0x28
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20001934 	.word	0x20001934

08009b18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af02      	add	r7, sp, #8
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b22:	4b1d      	ldr	r3, [pc, #116]	@ (8009b98 <prvProcessExpiredTimer+0x80>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe fa87 	bl	8008044 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d123      	bne.n	8009b86 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	18d1      	adds	r1, r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	6978      	ldr	r0, [r7, #20]
 8009b4c:	f000 f8cc 	bl	8009ce8 <prvInsertTimerInActiveList>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d017      	beq.n	8009b86 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b56:	2300      	movs	r3, #0
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	2100      	movs	r1, #0
 8009b60:	6978      	ldr	r0, [r7, #20]
 8009b62:	f7ff ff8b 	bl	8009a7c <xTimerGenericCommand>
 8009b66:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10b      	bne.n	8009b86 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	60fb      	str	r3, [r7, #12]
}
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	e7fd      	b.n	8009b82 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8a:	6978      	ldr	r0, [r7, #20]
 8009b8c:	4798      	blx	r3
}
 8009b8e:	bf00      	nop
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	2000192c 	.word	0x2000192c

08009b9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ba4:	f107 0308 	add.w	r3, r7, #8
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 f859 	bl	8009c60 <prvGetNextExpireTime>
 8009bae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 f805 	bl	8009bc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009bba:	f000 f8d7 	bl	8009d6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bbe:	bf00      	nop
 8009bc0:	e7f0      	b.n	8009ba4 <prvTimerTask+0x8>
	...

08009bc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bce:	f7ff f981 	bl	8008ed4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bd2:	f107 0308 	add.w	r3, r7, #8
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 f866 	bl	8009ca8 <prvSampleTimeNow>
 8009bdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d130      	bne.n	8009c46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10a      	bne.n	8009c00 <prvProcessTimerOrBlockTask+0x3c>
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d806      	bhi.n	8009c00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bf2:	f7ff f97d 	bl	8008ef0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bf6:	68f9      	ldr	r1, [r7, #12]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff ff8d 	bl	8009b18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bfe:	e024      	b.n	8009c4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d008      	beq.n	8009c18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c06:	4b13      	ldr	r3, [pc, #76]	@ (8009c54 <prvProcessTimerOrBlockTask+0x90>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bf0c      	ite	eq
 8009c10:	2301      	moveq	r3, #1
 8009c12:	2300      	movne	r3, #0
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c18:	4b0f      	ldr	r3, [pc, #60]	@ (8009c58 <prvProcessTimerOrBlockTask+0x94>)
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4619      	mov	r1, r3
 8009c26:	f7fe fef5 	bl	8008a14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c2a:	f7ff f961 	bl	8008ef0 <xTaskResumeAll>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10a      	bne.n	8009c4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c34:	4b09      	ldr	r3, [pc, #36]	@ (8009c5c <prvProcessTimerOrBlockTask+0x98>)
 8009c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	f3bf 8f6f 	isb	sy
}
 8009c44:	e001      	b.n	8009c4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c46:	f7ff f953 	bl	8008ef0 <xTaskResumeAll>
}
 8009c4a:	bf00      	nop
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20001930 	.word	0x20001930
 8009c58:	20001934 	.word	0x20001934
 8009c5c:	e000ed04 	.word	0xe000ed04

08009c60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c68:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca4 <prvGetNextExpireTime+0x44>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	bf0c      	ite	eq
 8009c72:	2301      	moveq	r3, #1
 8009c74:	2300      	movne	r3, #0
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	461a      	mov	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d105      	bne.n	8009c92 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c86:	4b07      	ldr	r3, [pc, #28]	@ (8009ca4 <prvGetNextExpireTime+0x44>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	e001      	b.n	8009c96 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c96:	68fb      	ldr	r3, [r7, #12]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bc80      	pop	{r7}
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	2000192c 	.word	0x2000192c

08009ca8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cb0:	f7ff f9bc 	bl	800902c <xTaskGetTickCount>
 8009cb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ce4 <prvSampleTimeNow+0x3c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d205      	bcs.n	8009ccc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009cc0:	f000 f8f4 	bl	8009eac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	e002      	b.n	8009cd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cd2:	4a04      	ldr	r2, [pc, #16]	@ (8009ce4 <prvSampleTimeNow+0x3c>)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	2000193c 	.word	0x2000193c

08009ce8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d812      	bhi.n	8009d34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	1ad2      	subs	r2, r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d302      	bcc.n	8009d22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	617b      	str	r3, [r7, #20]
 8009d20:	e01b      	b.n	8009d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d22:	4b10      	ldr	r3, [pc, #64]	@ (8009d64 <prvInsertTimerInActiveList+0x7c>)
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	f7fe f951 	bl	8007fd4 <vListInsert>
 8009d32:	e012      	b.n	8009d5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d206      	bcs.n	8009d4a <prvInsertTimerInActiveList+0x62>
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d302      	bcc.n	8009d4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d44:	2301      	movs	r3, #1
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	e007      	b.n	8009d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d4a:	4b07      	ldr	r3, [pc, #28]	@ (8009d68 <prvInsertTimerInActiveList+0x80>)
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3304      	adds	r3, #4
 8009d52:	4619      	mov	r1, r3
 8009d54:	4610      	mov	r0, r2
 8009d56:	f7fe f93d 	bl	8007fd4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d5a:	697b      	ldr	r3, [r7, #20]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	20001930 	.word	0x20001930
 8009d68:	2000192c 	.word	0x2000192c

08009d6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08c      	sub	sp, #48	@ 0x30
 8009d70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d72:	e087      	b.n	8009e84 <prvProcessReceivedCommands+0x118>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f2c0 8084 	blt.w	8009e84 <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d004      	beq.n	8009d92 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fe f959 	bl	8008044 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d92:	1d3b      	adds	r3, r7, #4
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff ff87 	bl	8009ca8 <prvSampleTimeNow>
 8009d9a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2b09      	cmp	r3, #9
 8009da0:	d86b      	bhi.n	8009e7a <prvProcessReceivedCommands+0x10e>
 8009da2:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <prvProcessReceivedCommands+0x3c>)
 8009da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da8:	08009dd1 	.word	0x08009dd1
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009dd1 	.word	0x08009dd1
 8009db4:	08009e7b 	.word	0x08009e7b
 8009db8:	08009e2f 	.word	0x08009e2f
 8009dbc:	08009e69 	.word	0x08009e69
 8009dc0:	08009dd1 	.word	0x08009dd1
 8009dc4:	08009dd1 	.word	0x08009dd1
 8009dc8:	08009e7b 	.word	0x08009e7b
 8009dcc:	08009e2f 	.word	0x08009e2f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	18d1      	adds	r1, r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a3a      	ldr	r2, [r7, #32]
 8009ddc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009dde:	f7ff ff83 	bl	8009ce8 <prvInsertTimerInActiveList>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d04a      	beq.n	8009e7e <prvProcessReceivedCommands+0x112>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009dee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d142      	bne.n	8009e7e <prvProcessReceivedCommands+0x112>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	441a      	add	r2, r3
 8009e00:	2300      	movs	r3, #0
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	2300      	movs	r3, #0
 8009e06:	2100      	movs	r1, #0
 8009e08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e0a:	f7ff fe37 	bl	8009a7c <xTimerGenericCommand>
 8009e0e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d133      	bne.n	8009e7e <prvProcessReceivedCommands+0x112>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	61bb      	str	r3, [r7, #24]
}
 8009e28:	bf00      	nop
 8009e2a:	bf00      	nop
 8009e2c:	e7fd      	b.n	8009e2a <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10b      	bne.n	8009e54 <prvProcessReceivedCommands+0xe8>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	617b      	str	r3, [r7, #20]
}
 8009e4e:	bf00      	nop
 8009e50:	bf00      	nop
 8009e52:	e7fd      	b.n	8009e50 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	18d1      	adds	r1, r2, r3
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	6a3a      	ldr	r2, [r7, #32]
 8009e60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e62:	f7ff ff41 	bl	8009ce8 <prvInsertTimerInActiveList>
					break;
 8009e66:	e00d      	b.n	8009e84 <prvProcessReceivedCommands+0x118>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d107      	bne.n	8009e82 <prvProcessReceivedCommands+0x116>
						{
							vPortFree( pxTimer );
 8009e72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e74:	f000 fb64 	bl	800a540 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e78:	e003      	b.n	8009e82 <prvProcessReceivedCommands+0x116>

				default	:
					/* Don't expect to get here. */
					break;
 8009e7a:	bf00      	nop
 8009e7c:	e002      	b.n	8009e84 <prvProcessReceivedCommands+0x118>
					break;
 8009e7e:	bf00      	nop
 8009e80:	e000      	b.n	8009e84 <prvProcessReceivedCommands+0x118>
					break;
 8009e82:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e84:	4b08      	ldr	r3, [pc, #32]	@ (8009ea8 <prvProcessReceivedCommands+0x13c>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f107 0108 	add.w	r1, r7, #8
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fba6 	bl	80085e0 <xQueueReceive>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f47f af6c 	bne.w	8009d74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009e9c:	bf00      	nop
 8009e9e:	bf00      	nop
 8009ea0:	3728      	adds	r7, #40	@ 0x28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20001934 	.word	0x20001934

08009eac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b088      	sub	sp, #32
 8009eb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009eb2:	e046      	b.n	8009f42 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8009f68 <prvSwitchTimerLists+0xbc>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8009f68 <prvSwitchTimerLists+0xbc>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fe f8b9 	bl	8008044 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d12f      	bne.n	8009f42 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	4413      	add	r3, r2
 8009eea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d90e      	bls.n	8009f12 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f00:	4b19      	ldr	r3, [pc, #100]	@ (8009f68 <prvSwitchTimerLists+0xbc>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	f7fe f862 	bl	8007fd4 <vListInsert>
 8009f10:	e017      	b.n	8009f42 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f12:	2300      	movs	r3, #0
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	2300      	movs	r3, #0
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7ff fdad 	bl	8009a7c <xTimerGenericCommand>
 8009f22:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10b      	bne.n	8009f42 <prvSwitchTimerLists+0x96>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	603b      	str	r3, [r7, #0]
}
 8009f3c:	bf00      	nop
 8009f3e:	bf00      	nop
 8009f40:	e7fd      	b.n	8009f3e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f42:	4b09      	ldr	r3, [pc, #36]	@ (8009f68 <prvSwitchTimerLists+0xbc>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1b3      	bne.n	8009eb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f4c:	4b06      	ldr	r3, [pc, #24]	@ (8009f68 <prvSwitchTimerLists+0xbc>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f52:	4b06      	ldr	r3, [pc, #24]	@ (8009f6c <prvSwitchTimerLists+0xc0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a04      	ldr	r2, [pc, #16]	@ (8009f68 <prvSwitchTimerLists+0xbc>)
 8009f58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f5a:	4a04      	ldr	r2, [pc, #16]	@ (8009f6c <prvSwitchTimerLists+0xc0>)
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	6013      	str	r3, [r2, #0]
}
 8009f60:	bf00      	nop
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	2000192c 	.word	0x2000192c
 8009f6c:	20001930 	.word	0x20001930

08009f70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f76:	f000 f917 	bl	800a1a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f7a:	4b15      	ldr	r3, [pc, #84]	@ (8009fd0 <prvCheckForValidListAndQueue+0x60>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d120      	bne.n	8009fc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f82:	4814      	ldr	r0, [pc, #80]	@ (8009fd4 <prvCheckForValidListAndQueue+0x64>)
 8009f84:	f7fd ffd8 	bl	8007f38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f88:	4813      	ldr	r0, [pc, #76]	@ (8009fd8 <prvCheckForValidListAndQueue+0x68>)
 8009f8a:	f7fd ffd5 	bl	8007f38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f8e:	4b13      	ldr	r3, [pc, #76]	@ (8009fdc <prvCheckForValidListAndQueue+0x6c>)
 8009f90:	4a10      	ldr	r2, [pc, #64]	@ (8009fd4 <prvCheckForValidListAndQueue+0x64>)
 8009f92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f94:	4b12      	ldr	r3, [pc, #72]	@ (8009fe0 <prvCheckForValidListAndQueue+0x70>)
 8009f96:	4a10      	ldr	r2, [pc, #64]	@ (8009fd8 <prvCheckForValidListAndQueue+0x68>)
 8009f98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	4b11      	ldr	r3, [pc, #68]	@ (8009fe4 <prvCheckForValidListAndQueue+0x74>)
 8009fa0:	4a11      	ldr	r2, [pc, #68]	@ (8009fe8 <prvCheckForValidListAndQueue+0x78>)
 8009fa2:	210c      	movs	r1, #12
 8009fa4:	200a      	movs	r0, #10
 8009fa6:	f7fe f8e1 	bl	800816c <xQueueGenericCreateStatic>
 8009faa:	4603      	mov	r3, r0
 8009fac:	4a08      	ldr	r2, [pc, #32]	@ (8009fd0 <prvCheckForValidListAndQueue+0x60>)
 8009fae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fb0:	4b07      	ldr	r3, [pc, #28]	@ (8009fd0 <prvCheckForValidListAndQueue+0x60>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fb8:	4b05      	ldr	r3, [pc, #20]	@ (8009fd0 <prvCheckForValidListAndQueue+0x60>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	490b      	ldr	r1, [pc, #44]	@ (8009fec <prvCheckForValidListAndQueue+0x7c>)
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fd00 	bl	80089c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fc4:	f000 f920 	bl	800a208 <vPortExitCritical>
}
 8009fc8:	bf00      	nop
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	20001934 	.word	0x20001934
 8009fd4:	20001904 	.word	0x20001904
 8009fd8:	20001918 	.word	0x20001918
 8009fdc:	2000192c 	.word	0x2000192c
 8009fe0:	20001930 	.word	0x20001930
 8009fe4:	200019b8 	.word	0x200019b8
 8009fe8:	20001940 	.word	0x20001940
 8009fec:	0800e578 	.word	0x0800e578

08009ff0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3b04      	subs	r3, #4
 800a000:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3b04      	subs	r3, #4
 800a00e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	f023 0201 	bic.w	r2, r3, #1
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3b04      	subs	r3, #4
 800a01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a020:	4a08      	ldr	r2, [pc, #32]	@ (800a044 <pxPortInitialiseStack+0x54>)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3b14      	subs	r3, #20
 800a02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3b20      	subs	r3, #32
 800a036:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a038:	68fb      	ldr	r3, [r7, #12]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	bc80      	pop	{r7}
 800a042:	4770      	bx	lr
 800a044:	0800a049 	.word	0x0800a049

0800a048 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a04e:	2300      	movs	r3, #0
 800a050:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a052:	4b12      	ldr	r3, [pc, #72]	@ (800a09c <prvTaskExitError+0x54>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a05a:	d00b      	beq.n	800a074 <prvTaskExitError+0x2c>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	60fb      	str	r3, [r7, #12]
}
 800a06e:	bf00      	nop
 800a070:	bf00      	nop
 800a072:	e7fd      	b.n	800a070 <prvTaskExitError+0x28>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	60bb      	str	r3, [r7, #8]
}
 800a086:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a088:	bf00      	nop
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0fc      	beq.n	800a08a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a090:	bf00      	nop
 800a092:	bf00      	nop
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	bc80      	pop	{r7}
 800a09a:	4770      	bx	lr
 800a09c:	2000002c 	.word	0x2000002c

0800a0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0a0:	4b07      	ldr	r3, [pc, #28]	@ (800a0c0 <pxCurrentTCBConst2>)
 800a0a2:	6819      	ldr	r1, [r3, #0]
 800a0a4:	6808      	ldr	r0, [r1, #0]
 800a0a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a0aa:	f380 8809 	msr	PSP, r0
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f04f 0000 	mov.w	r0, #0
 800a0b6:	f380 8811 	msr	BASEPRI, r0
 800a0ba:	f04e 0e0d 	orr.w	lr, lr, #13
 800a0be:	4770      	bx	lr

0800a0c0 <pxCurrentTCBConst2>:
 800a0c0:	200017d8 	.word	0x200017d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop

0800a0c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a0c8:	4806      	ldr	r0, [pc, #24]	@ (800a0e4 <prvPortStartFirstTask+0x1c>)
 800a0ca:	6800      	ldr	r0, [r0, #0]
 800a0cc:	6800      	ldr	r0, [r0, #0]
 800a0ce:	f380 8808 	msr	MSP, r0
 800a0d2:	b662      	cpsie	i
 800a0d4:	b661      	cpsie	f
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	df00      	svc	0
 800a0e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0e2:	bf00      	nop
 800a0e4:	e000ed08 	.word	0xe000ed08

0800a0e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0ee:	4b29      	ldr	r3, [pc, #164]	@ (800a194 <xPortStartScheduler+0xac>)
 800a0f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	22ff      	movs	r2, #255	@ 0xff
 800a0fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a110:	b2da      	uxtb	r2, r3
 800a112:	4b21      	ldr	r3, [pc, #132]	@ (800a198 <xPortStartScheduler+0xb0>)
 800a114:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a116:	4b21      	ldr	r3, [pc, #132]	@ (800a19c <xPortStartScheduler+0xb4>)
 800a118:	2207      	movs	r2, #7
 800a11a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a11c:	e009      	b.n	800a132 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a11e:	4b1f      	ldr	r3, [pc, #124]	@ (800a19c <xPortStartScheduler+0xb4>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3b01      	subs	r3, #1
 800a124:	4a1d      	ldr	r2, [pc, #116]	@ (800a19c <xPortStartScheduler+0xb4>)
 800a126:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a128:	79fb      	ldrb	r3, [r7, #7]
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a132:	79fb      	ldrb	r3, [r7, #7]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13a:	2b80      	cmp	r3, #128	@ 0x80
 800a13c:	d0ef      	beq.n	800a11e <xPortStartScheduler+0x36>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a13e:	4b17      	ldr	r3, [pc, #92]	@ (800a19c <xPortStartScheduler+0xb4>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	021b      	lsls	r3, r3, #8
 800a144:	4a15      	ldr	r2, [pc, #84]	@ (800a19c <xPortStartScheduler+0xb4>)
 800a146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a148:	4b14      	ldr	r3, [pc, #80]	@ (800a19c <xPortStartScheduler+0xb4>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a150:	4a12      	ldr	r2, [pc, #72]	@ (800a19c <xPortStartScheduler+0xb4>)
 800a152:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	b2da      	uxtb	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a15c:	4b10      	ldr	r3, [pc, #64]	@ (800a1a0 <xPortStartScheduler+0xb8>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a0f      	ldr	r2, [pc, #60]	@ (800a1a0 <xPortStartScheduler+0xb8>)
 800a162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a168:	4b0d      	ldr	r3, [pc, #52]	@ (800a1a0 <xPortStartScheduler+0xb8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a0c      	ldr	r2, [pc, #48]	@ (800a1a0 <xPortStartScheduler+0xb8>)
 800a16e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a172:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a174:	f000 f8ba 	bl	800a2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a178:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a4 <xPortStartScheduler+0xbc>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a17e:	f7ff ffa3 	bl	800a0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a182:	f7ff f81f 	bl	80091c4 <vTaskSwitchContext>
	prvTaskExitError();
 800a186:	f7ff ff5f 	bl	800a048 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	e000e400 	.word	0xe000e400
 800a198:	20001a00 	.word	0x20001a00
 800a19c:	20001a04 	.word	0x20001a04
 800a1a0:	e000ed20 	.word	0xe000ed20
 800a1a4:	2000002c 	.word	0x2000002c

0800a1a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	607b      	str	r3, [r7, #4]
}
 800a1c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a200 <vPortEnterCritical+0x58>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	4a0d      	ldr	r2, [pc, #52]	@ (800a200 <vPortEnterCritical+0x58>)
 800a1ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a200 <vPortEnterCritical+0x58>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d110      	bne.n	800a1f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a204 <vPortEnterCritical+0x5c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00b      	beq.n	800a1f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	603b      	str	r3, [r7, #0]
}
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	e7fd      	b.n	800a1f2 <vPortEnterCritical+0x4a>
	}
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bc80      	pop	{r7}
 800a1fe:	4770      	bx	lr
 800a200:	2000002c 	.word	0x2000002c
 800a204:	e000ed04 	.word	0xe000ed04

0800a208 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a20e:	4b12      	ldr	r3, [pc, #72]	@ (800a258 <vPortExitCritical+0x50>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10b      	bne.n	800a22e <vPortExitCritical+0x26>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	607b      	str	r3, [r7, #4]
}
 800a228:	bf00      	nop
 800a22a:	bf00      	nop
 800a22c:	e7fd      	b.n	800a22a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a22e:	4b0a      	ldr	r3, [pc, #40]	@ (800a258 <vPortExitCritical+0x50>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3b01      	subs	r3, #1
 800a234:	4a08      	ldr	r2, [pc, #32]	@ (800a258 <vPortExitCritical+0x50>)
 800a236:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a238:	4b07      	ldr	r3, [pc, #28]	@ (800a258 <vPortExitCritical+0x50>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d105      	bne.n	800a24c <vPortExitCritical+0x44>
 800a240:	2300      	movs	r3, #0
 800a242:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	f383 8811 	msr	BASEPRI, r3
}
 800a24a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	bc80      	pop	{r7}
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	2000002c 	.word	0x2000002c
 800a25c:	00000000 	.word	0x00000000

0800a260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a260:	f3ef 8009 	mrs	r0, PSP
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4b0d      	ldr	r3, [pc, #52]	@ (800a2a0 <pxCurrentTCBConst>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a270:	6010      	str	r0, [r2, #0]
 800a272:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a276:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a27a:	f380 8811 	msr	BASEPRI, r0
 800a27e:	f7fe ffa1 	bl	80091c4 <vTaskSwitchContext>
 800a282:	f04f 0000 	mov.w	r0, #0
 800a286:	f380 8811 	msr	BASEPRI, r0
 800a28a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a28e:	6819      	ldr	r1, [r3, #0]
 800a290:	6808      	ldr	r0, [r1, #0]
 800a292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a296:	f380 8809 	msr	PSP, r0
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	4770      	bx	lr

0800a2a0 <pxCurrentTCBConst>:
 800a2a0:	200017d8 	.word	0x200017d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	607b      	str	r3, [r7, #4]
}
 800a2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2c2:	f7fe fec1 	bl	8009048 <xTaskIncrementTick>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2cc:	4b06      	ldr	r3, [pc, #24]	@ (800a2e8 <SysTick_Handler+0x40>)
 800a2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	f383 8811 	msr	BASEPRI, r3
}
 800a2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a31c <vPortSetupTimerInterrupt+0x30>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a320 <vPortSetupTimerInterrupt+0x34>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2fc:	4b09      	ldr	r3, [pc, #36]	@ (800a324 <vPortSetupTimerInterrupt+0x38>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a09      	ldr	r2, [pc, #36]	@ (800a328 <vPortSetupTimerInterrupt+0x3c>)
 800a302:	fba2 2303 	umull	r2, r3, r2, r3
 800a306:	099b      	lsrs	r3, r3, #6
 800a308:	4a08      	ldr	r2, [pc, #32]	@ (800a32c <vPortSetupTimerInterrupt+0x40>)
 800a30a:	3b01      	subs	r3, #1
 800a30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a30e:	4b03      	ldr	r3, [pc, #12]	@ (800a31c <vPortSetupTimerInterrupt+0x30>)
 800a310:	2207      	movs	r2, #7
 800a312:	601a      	str	r2, [r3, #0]
}
 800a314:	bf00      	nop
 800a316:	46bd      	mov	sp, r7
 800a318:	bc80      	pop	{r7}
 800a31a:	4770      	bx	lr
 800a31c:	e000e010 	.word	0xe000e010
 800a320:	e000e018 	.word	0xe000e018
 800a324:	20000020 	.word	0x20000020
 800a328:	10624dd3 	.word	0x10624dd3
 800a32c:	e000e014 	.word	0xe000e014

0800a330 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a336:	f3ef 8305 	mrs	r3, IPSR
 800a33a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b0f      	cmp	r3, #15
 800a340:	d915      	bls.n	800a36e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a342:	4a17      	ldr	r2, [pc, #92]	@ (800a3a0 <vPortValidateInterruptPriority+0x70>)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a34c:	4b15      	ldr	r3, [pc, #84]	@ (800a3a4 <vPortValidateInterruptPriority+0x74>)
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	7afa      	ldrb	r2, [r7, #11]
 800a352:	429a      	cmp	r2, r3
 800a354:	d20b      	bcs.n	800a36e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	607b      	str	r3, [r7, #4]
}
 800a368:	bf00      	nop
 800a36a:	bf00      	nop
 800a36c:	e7fd      	b.n	800a36a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a36e:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a8 <vPortValidateInterruptPriority+0x78>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a376:	4b0d      	ldr	r3, [pc, #52]	@ (800a3ac <vPortValidateInterruptPriority+0x7c>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d90b      	bls.n	800a396 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	603b      	str	r3, [r7, #0]
}
 800a390:	bf00      	nop
 800a392:	bf00      	nop
 800a394:	e7fd      	b.n	800a392 <vPortValidateInterruptPriority+0x62>
	}
 800a396:	bf00      	nop
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bc80      	pop	{r7}
 800a39e:	4770      	bx	lr
 800a3a0:	e000e3f0 	.word	0xe000e3f0
 800a3a4:	20001a00 	.word	0x20001a00
 800a3a8:	e000ed0c 	.word	0xe000ed0c
 800a3ac:	20001a04 	.word	0x20001a04

0800a3b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08a      	sub	sp, #40	@ 0x28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3bc:	f7fe fd8a 	bl	8008ed4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3c0:	4b5a      	ldr	r3, [pc, #360]	@ (800a52c <pvPortMalloc+0x17c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3c8:	f000 f916 	bl	800a5f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3cc:	4b58      	ldr	r3, [pc, #352]	@ (800a530 <pvPortMalloc+0x180>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f040 8090 	bne.w	800a4fa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01e      	beq.n	800a41e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a3e0:	2208      	movs	r2, #8
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f003 0307 	and.w	r3, r3, #7
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d015      	beq.n	800a41e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f023 0307 	bic.w	r3, r3, #7
 800a3f8:	3308      	adds	r3, #8
 800a3fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f003 0307 	and.w	r3, r3, #7
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00b      	beq.n	800a41e <pvPortMalloc+0x6e>
	__asm volatile
 800a406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40a:	f383 8811 	msr	BASEPRI, r3
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	617b      	str	r3, [r7, #20]
}
 800a418:	bf00      	nop
 800a41a:	bf00      	nop
 800a41c:	e7fd      	b.n	800a41a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d06a      	beq.n	800a4fa <pvPortMalloc+0x14a>
 800a424:	4b43      	ldr	r3, [pc, #268]	@ (800a534 <pvPortMalloc+0x184>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d865      	bhi.n	800a4fa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a42e:	4b42      	ldr	r3, [pc, #264]	@ (800a538 <pvPortMalloc+0x188>)
 800a430:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a432:	4b41      	ldr	r3, [pc, #260]	@ (800a538 <pvPortMalloc+0x188>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a438:	e004      	b.n	800a444 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d903      	bls.n	800a456 <pvPortMalloc+0xa6>
 800a44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1f1      	bne.n	800a43a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a456:	4b35      	ldr	r3, [pc, #212]	@ (800a52c <pvPortMalloc+0x17c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d04c      	beq.n	800a4fa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2208      	movs	r2, #8
 800a466:	4413      	add	r3, r2
 800a468:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	1ad2      	subs	r2, r2, r3
 800a47a:	2308      	movs	r3, #8
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	429a      	cmp	r2, r3
 800a480:	d920      	bls.n	800a4c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4413      	add	r3, r2
 800a488:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	f003 0307 	and.w	r3, r3, #7
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00b      	beq.n	800a4ac <pvPortMalloc+0xfc>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	613b      	str	r3, [r7, #16]
}
 800a4a6:	bf00      	nop
 800a4a8:	bf00      	nop
 800a4aa:	e7fd      	b.n	800a4a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	1ad2      	subs	r2, r2, r3
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4be:	69b8      	ldr	r0, [r7, #24]
 800a4c0:	f000 f8fc 	bl	800a6bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4c4:	4b1b      	ldr	r3, [pc, #108]	@ (800a534 <pvPortMalloc+0x184>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	4a19      	ldr	r2, [pc, #100]	@ (800a534 <pvPortMalloc+0x184>)
 800a4d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4d2:	4b18      	ldr	r3, [pc, #96]	@ (800a534 <pvPortMalloc+0x184>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	4b19      	ldr	r3, [pc, #100]	@ (800a53c <pvPortMalloc+0x18c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d203      	bcs.n	800a4e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4de:	4b15      	ldr	r3, [pc, #84]	@ (800a534 <pvPortMalloc+0x184>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a16      	ldr	r2, [pc, #88]	@ (800a53c <pvPortMalloc+0x18c>)
 800a4e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	4b11      	ldr	r3, [pc, #68]	@ (800a530 <pvPortMalloc+0x180>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4fa:	f7fe fcf9 	bl	8008ef0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	f003 0307 	and.w	r3, r3, #7
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00b      	beq.n	800a520 <pvPortMalloc+0x170>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	60fb      	str	r3, [r7, #12]
}
 800a51a:	bf00      	nop
 800a51c:	bf00      	nop
 800a51e:	e7fd      	b.n	800a51c <pvPortMalloc+0x16c>
	return pvReturn;
 800a520:	69fb      	ldr	r3, [r7, #28]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3728      	adds	r7, #40	@ 0x28
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20002610 	.word	0x20002610
 800a530:	2000261c 	.word	0x2000261c
 800a534:	20002614 	.word	0x20002614
 800a538:	20002608 	.word	0x20002608
 800a53c:	20002618 	.word	0x20002618

0800a540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d04a      	beq.n	800a5e8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a552:	2308      	movs	r3, #8
 800a554:	425b      	negs	r3, r3
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	4413      	add	r3, r2
 800a55a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	4b22      	ldr	r3, [pc, #136]	@ (800a5f0 <vPortFree+0xb0>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4013      	ands	r3, r2
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10b      	bne.n	800a586 <vPortFree+0x46>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	60fb      	str	r3, [r7, #12]
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	e7fd      	b.n	800a582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00b      	beq.n	800a5a6 <vPortFree+0x66>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	60bb      	str	r3, [r7, #8]
}
 800a5a0:	bf00      	nop
 800a5a2:	bf00      	nop
 800a5a4:	e7fd      	b.n	800a5a2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	4b11      	ldr	r3, [pc, #68]	@ (800a5f0 <vPortFree+0xb0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d019      	beq.n	800a5e8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d115      	bne.n	800a5e8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f0 <vPortFree+0xb0>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	43db      	mvns	r3, r3
 800a5c6:	401a      	ands	r2, r3
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5cc:	f7fe fc82 	bl	8008ed4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	4b07      	ldr	r3, [pc, #28]	@ (800a5f4 <vPortFree+0xb4>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4413      	add	r3, r2
 800a5da:	4a06      	ldr	r2, [pc, #24]	@ (800a5f4 <vPortFree+0xb4>)
 800a5dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5de:	6938      	ldr	r0, [r7, #16]
 800a5e0:	f000 f86c 	bl	800a6bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a5e4:	f7fe fc84 	bl	8008ef0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5e8:	bf00      	nop
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	2000261c 	.word	0x2000261c
 800a5f4:	20002614 	.word	0x20002614

0800a5f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a602:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a604:	4b27      	ldr	r3, [pc, #156]	@ (800a6a4 <prvHeapInit+0xac>)
 800a606:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f003 0307 	and.w	r3, r3, #7
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00c      	beq.n	800a62c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3307      	adds	r3, #7
 800a616:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f023 0307 	bic.w	r3, r3, #7
 800a61e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	4a1f      	ldr	r2, [pc, #124]	@ (800a6a4 <prvHeapInit+0xac>)
 800a628:	4413      	add	r3, r2
 800a62a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a630:	4a1d      	ldr	r2, [pc, #116]	@ (800a6a8 <prvHeapInit+0xb0>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a636:	4b1c      	ldr	r3, [pc, #112]	@ (800a6a8 <prvHeapInit+0xb0>)
 800a638:	2200      	movs	r2, #0
 800a63a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	4413      	add	r3, r2
 800a642:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a644:	2208      	movs	r2, #8
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	1a9b      	subs	r3, r3, r2
 800a64a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f023 0307 	bic.w	r3, r3, #7
 800a652:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4a15      	ldr	r2, [pc, #84]	@ (800a6ac <prvHeapInit+0xb4>)
 800a658:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a65a:	4b14      	ldr	r3, [pc, #80]	@ (800a6ac <prvHeapInit+0xb4>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2200      	movs	r2, #0
 800a660:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a662:	4b12      	ldr	r3, [pc, #72]	@ (800a6ac <prvHeapInit+0xb4>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	1ad2      	subs	r2, r2, r3
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a678:	4b0c      	ldr	r3, [pc, #48]	@ (800a6ac <prvHeapInit+0xb4>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	4a0a      	ldr	r2, [pc, #40]	@ (800a6b0 <prvHeapInit+0xb8>)
 800a686:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	4a09      	ldr	r2, [pc, #36]	@ (800a6b4 <prvHeapInit+0xbc>)
 800a68e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a690:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <prvHeapInit+0xc0>)
 800a692:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a696:	601a      	str	r2, [r3, #0]
}
 800a698:	bf00      	nop
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bc80      	pop	{r7}
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	20001a08 	.word	0x20001a08
 800a6a8:	20002608 	.word	0x20002608
 800a6ac:	20002610 	.word	0x20002610
 800a6b0:	20002618 	.word	0x20002618
 800a6b4:	20002614 	.word	0x20002614
 800a6b8:	2000261c 	.word	0x2000261c

0800a6bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6c4:	4b27      	ldr	r3, [pc, #156]	@ (800a764 <prvInsertBlockIntoFreeList+0xa8>)
 800a6c6:	60fb      	str	r3, [r7, #12]
 800a6c8:	e002      	b.n	800a6d0 <prvInsertBlockIntoFreeList+0x14>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60fb      	str	r3, [r7, #12]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d8f7      	bhi.n	800a6ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d108      	bne.n	800a6fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	441a      	add	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	441a      	add	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d118      	bne.n	800a744 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	4b14      	ldr	r3, [pc, #80]	@ (800a768 <prvInsertBlockIntoFreeList+0xac>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d00d      	beq.n	800a73a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	441a      	add	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	e008      	b.n	800a74c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a73a:	4b0b      	ldr	r3, [pc, #44]	@ (800a768 <prvInsertBlockIntoFreeList+0xac>)
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	601a      	str	r2, [r3, #0]
 800a742:	e003      	b.n	800a74c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	429a      	cmp	r2, r3
 800a752:	d002      	beq.n	800a75a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a75a:	bf00      	nop
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	bc80      	pop	{r7}
 800a762:	4770      	bx	lr
 800a764:	20002608 	.word	0x20002608
 800a768:	20002610 	.word	0x20002610

0800a76c <_ZdaPv>:
 800a76c:	f000 b802 	b.w	800a774 <_ZdlPv>

0800a770 <_Znaj>:
 800a770:	f000 b802 	b.w	800a778 <_Znwj>

0800a774 <_ZdlPv>:
 800a774:	f000 bf5c 	b.w	800b630 <free>

0800a778 <_Znwj>:
 800a778:	2801      	cmp	r0, #1
 800a77a:	bf38      	it	cc
 800a77c:	2001      	movcc	r0, #1
 800a77e:	b510      	push	{r4, lr}
 800a780:	4604      	mov	r4, r0
 800a782:	4620      	mov	r0, r4
 800a784:	f000 ff4c 	bl	800b620 <malloc>
 800a788:	b100      	cbz	r0, 800a78c <_Znwj+0x14>
 800a78a:	bd10      	pop	{r4, pc}
 800a78c:	f000 f806 	bl	800a79c <_ZSt15get_new_handlerv>
 800a790:	b908      	cbnz	r0, 800a796 <_Znwj+0x1e>
 800a792:	f000 ff3d 	bl	800b610 <abort>
 800a796:	4780      	blx	r0
 800a798:	e7f3      	b.n	800a782 <_Znwj+0xa>
	...

0800a79c <_ZSt15get_new_handlerv>:
 800a79c:	4b02      	ldr	r3, [pc, #8]	@ (800a7a8 <_ZSt15get_new_handlerv+0xc>)
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	f3bf 8f5b 	dmb	ish
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	20002620 	.word	0x20002620

0800a7ac <pow>:
 800a7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b0:	4614      	mov	r4, r2
 800a7b2:	461d      	mov	r5, r3
 800a7b4:	4680      	mov	r8, r0
 800a7b6:	4689      	mov	r9, r1
 800a7b8:	f000 f88a 	bl	800a8d0 <__ieee754_pow>
 800a7bc:	4622      	mov	r2, r4
 800a7be:	4606      	mov	r6, r0
 800a7c0:	460f      	mov	r7, r1
 800a7c2:	462b      	mov	r3, r5
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	f7f6 f920 	bl	8000a0c <__aeabi_dcmpun>
 800a7cc:	bbc8      	cbnz	r0, 800a842 <pow+0x96>
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	f7f6 f8e7 	bl	80009a8 <__aeabi_dcmpeq>
 800a7da:	b1b8      	cbz	r0, 800a80c <pow+0x60>
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2300      	movs	r3, #0
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f7f6 f8e0 	bl	80009a8 <__aeabi_dcmpeq>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d141      	bne.n	800a870 <pow+0xc4>
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	f000 f844 	bl	800a87c <finite>
 800a7f4:	b328      	cbz	r0, 800a842 <pow+0x96>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7f6 f8dd 	bl	80009bc <__aeabi_dcmplt>
 800a802:	b1f0      	cbz	r0, 800a842 <pow+0x96>
 800a804:	f001 fe28 	bl	800c458 <__errno>
 800a808:	2322      	movs	r3, #34	@ 0x22
 800a80a:	e019      	b.n	800a840 <pow+0x94>
 800a80c:	4630      	mov	r0, r6
 800a80e:	4639      	mov	r1, r7
 800a810:	f000 f834 	bl	800a87c <finite>
 800a814:	b9c8      	cbnz	r0, 800a84a <pow+0x9e>
 800a816:	4640      	mov	r0, r8
 800a818:	4649      	mov	r1, r9
 800a81a:	f000 f82f 	bl	800a87c <finite>
 800a81e:	b1a0      	cbz	r0, 800a84a <pow+0x9e>
 800a820:	4620      	mov	r0, r4
 800a822:	4629      	mov	r1, r5
 800a824:	f000 f82a 	bl	800a87c <finite>
 800a828:	b178      	cbz	r0, 800a84a <pow+0x9e>
 800a82a:	4632      	mov	r2, r6
 800a82c:	463b      	mov	r3, r7
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f6 f8eb 	bl	8000a0c <__aeabi_dcmpun>
 800a836:	2800      	cmp	r0, #0
 800a838:	d0e4      	beq.n	800a804 <pow+0x58>
 800a83a:	f001 fe0d 	bl	800c458 <__errno>
 800a83e:	2321      	movs	r3, #33	@ 0x21
 800a840:	6003      	str	r3, [r0, #0]
 800a842:	4630      	mov	r0, r6
 800a844:	4639      	mov	r1, r7
 800a846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a84a:	2200      	movs	r2, #0
 800a84c:	2300      	movs	r3, #0
 800a84e:	4630      	mov	r0, r6
 800a850:	4639      	mov	r1, r7
 800a852:	f7f6 f8a9 	bl	80009a8 <__aeabi_dcmpeq>
 800a856:	2800      	cmp	r0, #0
 800a858:	d0f3      	beq.n	800a842 <pow+0x96>
 800a85a:	4640      	mov	r0, r8
 800a85c:	4649      	mov	r1, r9
 800a85e:	f000 f80d 	bl	800a87c <finite>
 800a862:	2800      	cmp	r0, #0
 800a864:	d0ed      	beq.n	800a842 <pow+0x96>
 800a866:	4620      	mov	r0, r4
 800a868:	4629      	mov	r1, r5
 800a86a:	f000 f807 	bl	800a87c <finite>
 800a86e:	e7c8      	b.n	800a802 <pow+0x56>
 800a870:	2600      	movs	r6, #0
 800a872:	4f01      	ldr	r7, [pc, #4]	@ (800a878 <pow+0xcc>)
 800a874:	e7e5      	b.n	800a842 <pow+0x96>
 800a876:	bf00      	nop
 800a878:	3ff00000 	.word	0x3ff00000

0800a87c <finite>:
 800a87c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800a880:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a884:	0fc0      	lsrs	r0, r0, #31
 800a886:	4770      	bx	lr

0800a888 <roundf>:
 800a888:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a88c:	3b7f      	subs	r3, #127	@ 0x7f
 800a88e:	2b16      	cmp	r3, #22
 800a890:	4601      	mov	r1, r0
 800a892:	b510      	push	{r4, lr}
 800a894:	dc14      	bgt.n	800a8c0 <roundf+0x38>
 800a896:	2b00      	cmp	r3, #0
 800a898:	da07      	bge.n	800a8aa <roundf+0x22>
 800a89a:	3301      	adds	r3, #1
 800a89c:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800a8a0:	d101      	bne.n	800a8a6 <roundf+0x1e>
 800a8a2:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 800a8a6:	4608      	mov	r0, r1
 800a8a8:	bd10      	pop	{r4, pc}
 800a8aa:	4a08      	ldr	r2, [pc, #32]	@ (800a8cc <roundf+0x44>)
 800a8ac:	411a      	asrs	r2, r3
 800a8ae:	4202      	tst	r2, r0
 800a8b0:	d0f9      	beq.n	800a8a6 <roundf+0x1e>
 800a8b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a8b6:	4119      	asrs	r1, r3
 800a8b8:	4401      	add	r1, r0
 800a8ba:	ea21 0102 	bic.w	r1, r1, r2
 800a8be:	e7f2      	b.n	800a8a6 <roundf+0x1e>
 800a8c0:	2b80      	cmp	r3, #128	@ 0x80
 800a8c2:	d1f0      	bne.n	800a8a6 <roundf+0x1e>
 800a8c4:	f7f6 f956 	bl	8000b74 <__addsf3>
 800a8c8:	4601      	mov	r1, r0
 800a8ca:	e7ec      	b.n	800a8a6 <roundf+0x1e>
 800a8cc:	007fffff 	.word	0x007fffff

0800a8d0 <__ieee754_pow>:
 800a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	b091      	sub	sp, #68	@ 0x44
 800a8d6:	e9cd 2300 	strd	r2, r3, [sp]
 800a8da:	468b      	mov	fp, r1
 800a8dc:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a8e0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a8e4:	4682      	mov	sl, r0
 800a8e6:	ea57 0001 	orrs.w	r0, r7, r1
 800a8ea:	d112      	bne.n	800a912 <__ieee754_pow+0x42>
 800a8ec:	4653      	mov	r3, sl
 800a8ee:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a8f2:	18db      	adds	r3, r3, r3
 800a8f4:	4152      	adcs	r2, r2
 800a8f6:	4298      	cmp	r0, r3
 800a8f8:	4b91      	ldr	r3, [pc, #580]	@ (800ab40 <__ieee754_pow+0x270>)
 800a8fa:	4193      	sbcs	r3, r2
 800a8fc:	f080 84ce 	bcs.w	800b29c <__ieee754_pow+0x9cc>
 800a900:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a904:	4650      	mov	r0, sl
 800a906:	4659      	mov	r1, fp
 800a908:	f7f5 fc30 	bl	800016c <__adddf3>
 800a90c:	b011      	add	sp, #68	@ 0x44
 800a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a912:	4b8c      	ldr	r3, [pc, #560]	@ (800ab44 <__ieee754_pow+0x274>)
 800a914:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a918:	429e      	cmp	r6, r3
 800a91a:	465d      	mov	r5, fp
 800a91c:	46d1      	mov	r9, sl
 800a91e:	d807      	bhi.n	800a930 <__ieee754_pow+0x60>
 800a920:	d102      	bne.n	800a928 <__ieee754_pow+0x58>
 800a922:	f1ba 0f00 	cmp.w	sl, #0
 800a926:	d1eb      	bne.n	800a900 <__ieee754_pow+0x30>
 800a928:	429f      	cmp	r7, r3
 800a92a:	d801      	bhi.n	800a930 <__ieee754_pow+0x60>
 800a92c:	d10f      	bne.n	800a94e <__ieee754_pow+0x7e>
 800a92e:	b171      	cbz	r1, 800a94e <__ieee754_pow+0x7e>
 800a930:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a934:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a938:	ea55 0509 	orrs.w	r5, r5, r9
 800a93c:	d1e0      	bne.n	800a900 <__ieee754_pow+0x30>
 800a93e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a942:	18db      	adds	r3, r3, r3
 800a944:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a948:	4152      	adcs	r2, r2
 800a94a:	429d      	cmp	r5, r3
 800a94c:	e7d4      	b.n	800a8f8 <__ieee754_pow+0x28>
 800a94e:	2d00      	cmp	r5, #0
 800a950:	4633      	mov	r3, r6
 800a952:	da39      	bge.n	800a9c8 <__ieee754_pow+0xf8>
 800a954:	4a7c      	ldr	r2, [pc, #496]	@ (800ab48 <__ieee754_pow+0x278>)
 800a956:	4297      	cmp	r7, r2
 800a958:	d84e      	bhi.n	800a9f8 <__ieee754_pow+0x128>
 800a95a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a95e:	4297      	cmp	r7, r2
 800a960:	f240 84ab 	bls.w	800b2ba <__ieee754_pow+0x9ea>
 800a964:	153a      	asrs	r2, r7, #20
 800a966:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a96a:	2a14      	cmp	r2, #20
 800a96c:	dd0f      	ble.n	800a98e <__ieee754_pow+0xbe>
 800a96e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a972:	fa21 f402 	lsr.w	r4, r1, r2
 800a976:	fa04 f202 	lsl.w	r2, r4, r2
 800a97a:	428a      	cmp	r2, r1
 800a97c:	f040 849d 	bne.w	800b2ba <__ieee754_pow+0x9ea>
 800a980:	f004 0401 	and.w	r4, r4, #1
 800a984:	f1c4 0402 	rsb	r4, r4, #2
 800a988:	2900      	cmp	r1, #0
 800a98a:	d15a      	bne.n	800aa42 <__ieee754_pow+0x172>
 800a98c:	e00e      	b.n	800a9ac <__ieee754_pow+0xdc>
 800a98e:	2900      	cmp	r1, #0
 800a990:	d156      	bne.n	800aa40 <__ieee754_pow+0x170>
 800a992:	f1c2 0214 	rsb	r2, r2, #20
 800a996:	fa47 f402 	asr.w	r4, r7, r2
 800a99a:	fa04 f202 	lsl.w	r2, r4, r2
 800a99e:	42ba      	cmp	r2, r7
 800a9a0:	f040 8488 	bne.w	800b2b4 <__ieee754_pow+0x9e4>
 800a9a4:	f004 0401 	and.w	r4, r4, #1
 800a9a8:	f1c4 0402 	rsb	r4, r4, #2
 800a9ac:	4a67      	ldr	r2, [pc, #412]	@ (800ab4c <__ieee754_pow+0x27c>)
 800a9ae:	4297      	cmp	r7, r2
 800a9b0:	d130      	bne.n	800aa14 <__ieee754_pow+0x144>
 800a9b2:	f1b8 0f00 	cmp.w	r8, #0
 800a9b6:	f280 8479 	bge.w	800b2ac <__ieee754_pow+0x9dc>
 800a9ba:	4652      	mov	r2, sl
 800a9bc:	465b      	mov	r3, fp
 800a9be:	2000      	movs	r0, #0
 800a9c0:	4962      	ldr	r1, [pc, #392]	@ (800ab4c <__ieee754_pow+0x27c>)
 800a9c2:	f7f5 feb3 	bl	800072c <__aeabi_ddiv>
 800a9c6:	e7a1      	b.n	800a90c <__ieee754_pow+0x3c>
 800a9c8:	2400      	movs	r4, #0
 800a9ca:	2900      	cmp	r1, #0
 800a9cc:	d139      	bne.n	800aa42 <__ieee754_pow+0x172>
 800a9ce:	4a5d      	ldr	r2, [pc, #372]	@ (800ab44 <__ieee754_pow+0x274>)
 800a9d0:	4297      	cmp	r7, r2
 800a9d2:	d1eb      	bne.n	800a9ac <__ieee754_pow+0xdc>
 800a9d4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800a9d8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a9dc:	ea53 0309 	orrs.w	r3, r3, r9
 800a9e0:	f000 845c 	beq.w	800b29c <__ieee754_pow+0x9cc>
 800a9e4:	4b5a      	ldr	r3, [pc, #360]	@ (800ab50 <__ieee754_pow+0x280>)
 800a9e6:	429e      	cmp	r6, r3
 800a9e8:	d908      	bls.n	800a9fc <__ieee754_pow+0x12c>
 800a9ea:	f1b8 0f00 	cmp.w	r8, #0
 800a9ee:	f2c0 8459 	blt.w	800b2a4 <__ieee754_pow+0x9d4>
 800a9f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9f6:	e789      	b.n	800a90c <__ieee754_pow+0x3c>
 800a9f8:	2402      	movs	r4, #2
 800a9fa:	e7e6      	b.n	800a9ca <__ieee754_pow+0xfa>
 800a9fc:	f1b8 0f00 	cmp.w	r8, #0
 800aa00:	f04f 0000 	mov.w	r0, #0
 800aa04:	f04f 0100 	mov.w	r1, #0
 800aa08:	da80      	bge.n	800a90c <__ieee754_pow+0x3c>
 800aa0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800aa0e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800aa12:	e77b      	b.n	800a90c <__ieee754_pow+0x3c>
 800aa14:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800aa18:	d106      	bne.n	800aa28 <__ieee754_pow+0x158>
 800aa1a:	4652      	mov	r2, sl
 800aa1c:	465b      	mov	r3, fp
 800aa1e:	4650      	mov	r0, sl
 800aa20:	4659      	mov	r1, fp
 800aa22:	f7f5 fd59 	bl	80004d8 <__aeabi_dmul>
 800aa26:	e771      	b.n	800a90c <__ieee754_pow+0x3c>
 800aa28:	4a4a      	ldr	r2, [pc, #296]	@ (800ab54 <__ieee754_pow+0x284>)
 800aa2a:	4590      	cmp	r8, r2
 800aa2c:	d109      	bne.n	800aa42 <__ieee754_pow+0x172>
 800aa2e:	2d00      	cmp	r5, #0
 800aa30:	db07      	blt.n	800aa42 <__ieee754_pow+0x172>
 800aa32:	4650      	mov	r0, sl
 800aa34:	4659      	mov	r1, fp
 800aa36:	b011      	add	sp, #68	@ 0x44
 800aa38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	f000 bd12 	b.w	800b464 <__ieee754_sqrt>
 800aa40:	2400      	movs	r4, #0
 800aa42:	4650      	mov	r0, sl
 800aa44:	4659      	mov	r1, fp
 800aa46:	9302      	str	r3, [sp, #8]
 800aa48:	f000 fc6a 	bl	800b320 <fabs>
 800aa4c:	9b02      	ldr	r3, [sp, #8]
 800aa4e:	f1b9 0f00 	cmp.w	r9, #0
 800aa52:	d127      	bne.n	800aaa4 <__ieee754_pow+0x1d4>
 800aa54:	4a3d      	ldr	r2, [pc, #244]	@ (800ab4c <__ieee754_pow+0x27c>)
 800aa56:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800aa5a:	4594      	cmp	ip, r2
 800aa5c:	d000      	beq.n	800aa60 <__ieee754_pow+0x190>
 800aa5e:	bb0e      	cbnz	r6, 800aaa4 <__ieee754_pow+0x1d4>
 800aa60:	f1b8 0f00 	cmp.w	r8, #0
 800aa64:	da05      	bge.n	800aa72 <__ieee754_pow+0x1a2>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	4937      	ldr	r1, [pc, #220]	@ (800ab4c <__ieee754_pow+0x27c>)
 800aa6e:	f7f5 fe5d 	bl	800072c <__aeabi_ddiv>
 800aa72:	2d00      	cmp	r5, #0
 800aa74:	f6bf af4a 	bge.w	800a90c <__ieee754_pow+0x3c>
 800aa78:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800aa7c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800aa80:	4326      	orrs	r6, r4
 800aa82:	d108      	bne.n	800aa96 <__ieee754_pow+0x1c6>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	f7f5 fb6c 	bl	8000168 <__aeabi_dsub>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	e795      	b.n	800a9c2 <__ieee754_pow+0xf2>
 800aa96:	2c01      	cmp	r4, #1
 800aa98:	f47f af38 	bne.w	800a90c <__ieee754_pow+0x3c>
 800aa9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	e733      	b.n	800a90c <__ieee754_pow+0x3c>
 800aaa4:	0fea      	lsrs	r2, r5, #31
 800aaa6:	3a01      	subs	r2, #1
 800aaa8:	ea52 0c04 	orrs.w	ip, r2, r4
 800aaac:	d102      	bne.n	800aab4 <__ieee754_pow+0x1e4>
 800aaae:	4652      	mov	r2, sl
 800aab0:	465b      	mov	r3, fp
 800aab2:	e7e9      	b.n	800aa88 <__ieee754_pow+0x1b8>
 800aab4:	f04f 0900 	mov.w	r9, #0
 800aab8:	3c01      	subs	r4, #1
 800aaba:	4314      	orrs	r4, r2
 800aabc:	bf14      	ite	ne
 800aabe:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800ab4c <__ieee754_pow+0x27c>
 800aac2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800ab58 <__ieee754_pow+0x288>
 800aac6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800aaca:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800aace:	f240 8107 	bls.w	800ace0 <__ieee754_pow+0x410>
 800aad2:	4b22      	ldr	r3, [pc, #136]	@ (800ab5c <__ieee754_pow+0x28c>)
 800aad4:	429f      	cmp	r7, r3
 800aad6:	4b1e      	ldr	r3, [pc, #120]	@ (800ab50 <__ieee754_pow+0x280>)
 800aad8:	d913      	bls.n	800ab02 <__ieee754_pow+0x232>
 800aada:	429e      	cmp	r6, r3
 800aadc:	d808      	bhi.n	800aaf0 <__ieee754_pow+0x220>
 800aade:	f1b8 0f00 	cmp.w	r8, #0
 800aae2:	da08      	bge.n	800aaf6 <__ieee754_pow+0x226>
 800aae4:	2000      	movs	r0, #0
 800aae6:	b011      	add	sp, #68	@ 0x44
 800aae8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	f000 bcb4 	b.w	800b458 <__math_oflow>
 800aaf0:	f1b8 0f00 	cmp.w	r8, #0
 800aaf4:	dcf6      	bgt.n	800aae4 <__ieee754_pow+0x214>
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	b011      	add	sp, #68	@ 0x44
 800aafa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafe:	f000 bca6 	b.w	800b44e <__math_uflow>
 800ab02:	429e      	cmp	r6, r3
 800ab04:	d20c      	bcs.n	800ab20 <__ieee754_pow+0x250>
 800ab06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f7f5 ff55 	bl	80009bc <__aeabi_dcmplt>
 800ab12:	3800      	subs	r0, #0
 800ab14:	bf18      	it	ne
 800ab16:	2001      	movne	r0, #1
 800ab18:	f1b8 0f00 	cmp.w	r8, #0
 800ab1c:	daec      	bge.n	800aaf8 <__ieee754_pow+0x228>
 800ab1e:	e7e2      	b.n	800aae6 <__ieee754_pow+0x216>
 800ab20:	4b0a      	ldr	r3, [pc, #40]	@ (800ab4c <__ieee754_pow+0x27c>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	429e      	cmp	r6, r3
 800ab26:	d91b      	bls.n	800ab60 <__ieee754_pow+0x290>
 800ab28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f7f5 ff45 	bl	80009bc <__aeabi_dcmplt>
 800ab32:	3800      	subs	r0, #0
 800ab34:	bf18      	it	ne
 800ab36:	2001      	movne	r0, #1
 800ab38:	f1b8 0f00 	cmp.w	r8, #0
 800ab3c:	dcd3      	bgt.n	800aae6 <__ieee754_pow+0x216>
 800ab3e:	e7db      	b.n	800aaf8 <__ieee754_pow+0x228>
 800ab40:	fff00000 	.word	0xfff00000
 800ab44:	7ff00000 	.word	0x7ff00000
 800ab48:	433fffff 	.word	0x433fffff
 800ab4c:	3ff00000 	.word	0x3ff00000
 800ab50:	3fefffff 	.word	0x3fefffff
 800ab54:	3fe00000 	.word	0x3fe00000
 800ab58:	bff00000 	.word	0xbff00000
 800ab5c:	43f00000 	.word	0x43f00000
 800ab60:	4b5b      	ldr	r3, [pc, #364]	@ (800acd0 <__ieee754_pow+0x400>)
 800ab62:	f7f5 fb01 	bl	8000168 <__aeabi_dsub>
 800ab66:	a352      	add	r3, pc, #328	@ (adr r3, 800acb0 <__ieee754_pow+0x3e0>)
 800ab68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	460d      	mov	r5, r1
 800ab70:	f7f5 fcb2 	bl	80004d8 <__aeabi_dmul>
 800ab74:	a350      	add	r3, pc, #320	@ (adr r3, 800acb8 <__ieee754_pow+0x3e8>)
 800ab76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	460f      	mov	r7, r1
 800ab7e:	4620      	mov	r0, r4
 800ab80:	4629      	mov	r1, r5
 800ab82:	f7f5 fca9 	bl	80004d8 <__aeabi_dmul>
 800ab86:	2200      	movs	r2, #0
 800ab88:	4682      	mov	sl, r0
 800ab8a:	468b      	mov	fp, r1
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4b50      	ldr	r3, [pc, #320]	@ (800acd4 <__ieee754_pow+0x404>)
 800ab92:	f7f5 fca1 	bl	80004d8 <__aeabi_dmul>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	a149      	add	r1, pc, #292	@ (adr r1, 800acc0 <__ieee754_pow+0x3f0>)
 800ab9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aba0:	f7f5 fae2 	bl	8000168 <__aeabi_dsub>
 800aba4:	4622      	mov	r2, r4
 800aba6:	462b      	mov	r3, r5
 800aba8:	f7f5 fc96 	bl	80004d8 <__aeabi_dmul>
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	2000      	movs	r0, #0
 800abb2:	4949      	ldr	r1, [pc, #292]	@ (800acd8 <__ieee754_pow+0x408>)
 800abb4:	f7f5 fad8 	bl	8000168 <__aeabi_dsub>
 800abb8:	4622      	mov	r2, r4
 800abba:	4680      	mov	r8, r0
 800abbc:	4689      	mov	r9, r1
 800abbe:	462b      	mov	r3, r5
 800abc0:	4620      	mov	r0, r4
 800abc2:	4629      	mov	r1, r5
 800abc4:	f7f5 fc88 	bl	80004d8 <__aeabi_dmul>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4640      	mov	r0, r8
 800abce:	4649      	mov	r1, r9
 800abd0:	f7f5 fc82 	bl	80004d8 <__aeabi_dmul>
 800abd4:	a33c      	add	r3, pc, #240	@ (adr r3, 800acc8 <__ieee754_pow+0x3f8>)
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	f7f5 fc7d 	bl	80004d8 <__aeabi_dmul>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4650      	mov	r0, sl
 800abe4:	4659      	mov	r1, fp
 800abe6:	f7f5 fabf 	bl	8000168 <__aeabi_dsub>
 800abea:	2400      	movs	r4, #0
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4680      	mov	r8, r0
 800abf2:	4689      	mov	r9, r1
 800abf4:	4630      	mov	r0, r6
 800abf6:	4639      	mov	r1, r7
 800abf8:	f7f5 fab8 	bl	800016c <__adddf3>
 800abfc:	4632      	mov	r2, r6
 800abfe:	463b      	mov	r3, r7
 800ac00:	4620      	mov	r0, r4
 800ac02:	460d      	mov	r5, r1
 800ac04:	f7f5 fab0 	bl	8000168 <__aeabi_dsub>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	4649      	mov	r1, r9
 800ac10:	f7f5 faaa 	bl	8000168 <__aeabi_dsub>
 800ac14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	9304      	str	r3, [sp, #16]
 800ac20:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ac24:	4606      	mov	r6, r0
 800ac26:	460f      	mov	r7, r1
 800ac28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac2c:	4652      	mov	r2, sl
 800ac2e:	465b      	mov	r3, fp
 800ac30:	f7f5 fa9a 	bl	8000168 <__aeabi_dsub>
 800ac34:	4622      	mov	r2, r4
 800ac36:	462b      	mov	r3, r5
 800ac38:	f7f5 fc4e 	bl	80004d8 <__aeabi_dmul>
 800ac3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac40:	4680      	mov	r8, r0
 800ac42:	4689      	mov	r9, r1
 800ac44:	4630      	mov	r0, r6
 800ac46:	4639      	mov	r1, r7
 800ac48:	f7f5 fc46 	bl	80004d8 <__aeabi_dmul>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4640      	mov	r0, r8
 800ac52:	4649      	mov	r1, r9
 800ac54:	f7f5 fa8a 	bl	800016c <__adddf3>
 800ac58:	4652      	mov	r2, sl
 800ac5a:	465b      	mov	r3, fp
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	460f      	mov	r7, r1
 800ac60:	4620      	mov	r0, r4
 800ac62:	4629      	mov	r1, r5
 800ac64:	f7f5 fc38 	bl	80004d8 <__aeabi_dmul>
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	4680      	mov	r8, r0
 800ac6e:	4689      	mov	r9, r1
 800ac70:	4630      	mov	r0, r6
 800ac72:	4639      	mov	r1, r7
 800ac74:	f7f5 fa7a 	bl	800016c <__adddf3>
 800ac78:	4b18      	ldr	r3, [pc, #96]	@ (800acdc <__ieee754_pow+0x40c>)
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	4299      	cmp	r1, r3
 800ac7e:	460d      	mov	r5, r1
 800ac80:	468a      	mov	sl, r1
 800ac82:	468b      	mov	fp, r1
 800ac84:	f340 82e0 	ble.w	800b248 <__ieee754_pow+0x978>
 800ac88:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ac8c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ac90:	4303      	orrs	r3, r0
 800ac92:	f000 81df 	beq.w	800b054 <__ieee754_pow+0x784>
 800ac96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	f7f5 fe8d 	bl	80009bc <__aeabi_dcmplt>
 800aca2:	3800      	subs	r0, #0
 800aca4:	bf18      	it	ne
 800aca6:	2001      	movne	r0, #1
 800aca8:	e71d      	b.n	800aae6 <__ieee754_pow+0x216>
 800acaa:	bf00      	nop
 800acac:	f3af 8000 	nop.w
 800acb0:	60000000 	.word	0x60000000
 800acb4:	3ff71547 	.word	0x3ff71547
 800acb8:	f85ddf44 	.word	0xf85ddf44
 800acbc:	3e54ae0b 	.word	0x3e54ae0b
 800acc0:	55555555 	.word	0x55555555
 800acc4:	3fd55555 	.word	0x3fd55555
 800acc8:	652b82fe 	.word	0x652b82fe
 800accc:	3ff71547 	.word	0x3ff71547
 800acd0:	3ff00000 	.word	0x3ff00000
 800acd4:	3fd00000 	.word	0x3fd00000
 800acd8:	3fe00000 	.word	0x3fe00000
 800acdc:	408fffff 	.word	0x408fffff
 800ace0:	4ad3      	ldr	r2, [pc, #844]	@ (800b030 <__ieee754_pow+0x760>)
 800ace2:	402a      	ands	r2, r5
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	f040 817a 	bne.w	800afde <__ieee754_pow+0x70e>
 800acea:	4bd2      	ldr	r3, [pc, #840]	@ (800b034 <__ieee754_pow+0x764>)
 800acec:	2200      	movs	r2, #0
 800acee:	f7f5 fbf3 	bl	80004d8 <__aeabi_dmul>
 800acf2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800acf6:	460b      	mov	r3, r1
 800acf8:	151a      	asrs	r2, r3, #20
 800acfa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800acfe:	4422      	add	r2, r4
 800ad00:	920a      	str	r2, [sp, #40]	@ 0x28
 800ad02:	4acd      	ldr	r2, [pc, #820]	@ (800b038 <__ieee754_pow+0x768>)
 800ad04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad08:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ad12:	dd08      	ble.n	800ad26 <__ieee754_pow+0x456>
 800ad14:	4ac9      	ldr	r2, [pc, #804]	@ (800b03c <__ieee754_pow+0x76c>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	f340 8163 	ble.w	800afe2 <__ieee754_pow+0x712>
 800ad1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad1e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ad22:	3301      	adds	r3, #1
 800ad24:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad26:	2600      	movs	r6, #0
 800ad28:	00f3      	lsls	r3, r6, #3
 800ad2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad2c:	4bc4      	ldr	r3, [pc, #784]	@ (800b040 <__ieee754_pow+0x770>)
 800ad2e:	4629      	mov	r1, r5
 800ad30:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad34:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ad3e:	4623      	mov	r3, r4
 800ad40:	4682      	mov	sl, r0
 800ad42:	f7f5 fa11 	bl	8000168 <__aeabi_dsub>
 800ad46:	4652      	mov	r2, sl
 800ad48:	462b      	mov	r3, r5
 800ad4a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ad4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad52:	f7f5 fa0b 	bl	800016c <__adddf3>
 800ad56:	4602      	mov	r2, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	49b9      	ldr	r1, [pc, #740]	@ (800b044 <__ieee754_pow+0x774>)
 800ad5e:	f7f5 fce5 	bl	800072c <__aeabi_ddiv>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad6e:	f7f5 fbb3 	bl	80004d8 <__aeabi_dmul>
 800ad72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad76:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ad7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	2200      	movs	r2, #0
 800ad82:	46ab      	mov	fp, r5
 800ad84:	106d      	asrs	r5, r5, #1
 800ad86:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ad8a:	9304      	str	r3, [sp, #16]
 800ad8c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ad90:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ad94:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ad98:	4640      	mov	r0, r8
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	4614      	mov	r4, r2
 800ad9e:	461d      	mov	r5, r3
 800ada0:	f7f5 fb9a 	bl	80004d8 <__aeabi_dmul>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adac:	f7f5 f9dc 	bl	8000168 <__aeabi_dsub>
 800adb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800adb4:	4606      	mov	r6, r0
 800adb6:	460f      	mov	r7, r1
 800adb8:	4620      	mov	r0, r4
 800adba:	4629      	mov	r1, r5
 800adbc:	f7f5 f9d4 	bl	8000168 <__aeabi_dsub>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4650      	mov	r0, sl
 800adc6:	4659      	mov	r1, fp
 800adc8:	f7f5 f9ce 	bl	8000168 <__aeabi_dsub>
 800adcc:	4642      	mov	r2, r8
 800adce:	464b      	mov	r3, r9
 800add0:	f7f5 fb82 	bl	80004d8 <__aeabi_dmul>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4630      	mov	r0, r6
 800adda:	4639      	mov	r1, r7
 800addc:	f7f5 f9c4 	bl	8000168 <__aeabi_dsub>
 800ade0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ade4:	f7f5 fb78 	bl	80004d8 <__aeabi_dmul>
 800ade8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800adf0:	4610      	mov	r0, r2
 800adf2:	4619      	mov	r1, r3
 800adf4:	f7f5 fb70 	bl	80004d8 <__aeabi_dmul>
 800adf8:	a37b      	add	r3, pc, #492	@ (adr r3, 800afe8 <__ieee754_pow+0x718>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	4604      	mov	r4, r0
 800ae00:	460d      	mov	r5, r1
 800ae02:	f7f5 fb69 	bl	80004d8 <__aeabi_dmul>
 800ae06:	a37a      	add	r3, pc, #488	@ (adr r3, 800aff0 <__ieee754_pow+0x720>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	f7f5 f9ae 	bl	800016c <__adddf3>
 800ae10:	4622      	mov	r2, r4
 800ae12:	462b      	mov	r3, r5
 800ae14:	f7f5 fb60 	bl	80004d8 <__aeabi_dmul>
 800ae18:	a377      	add	r3, pc, #476	@ (adr r3, 800aff8 <__ieee754_pow+0x728>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	f7f5 f9a5 	bl	800016c <__adddf3>
 800ae22:	4622      	mov	r2, r4
 800ae24:	462b      	mov	r3, r5
 800ae26:	f7f5 fb57 	bl	80004d8 <__aeabi_dmul>
 800ae2a:	a375      	add	r3, pc, #468	@ (adr r3, 800b000 <__ieee754_pow+0x730>)
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	f7f5 f99c 	bl	800016c <__adddf3>
 800ae34:	4622      	mov	r2, r4
 800ae36:	462b      	mov	r3, r5
 800ae38:	f7f5 fb4e 	bl	80004d8 <__aeabi_dmul>
 800ae3c:	a372      	add	r3, pc, #456	@ (adr r3, 800b008 <__ieee754_pow+0x738>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f7f5 f993 	bl	800016c <__adddf3>
 800ae46:	4622      	mov	r2, r4
 800ae48:	462b      	mov	r3, r5
 800ae4a:	f7f5 fb45 	bl	80004d8 <__aeabi_dmul>
 800ae4e:	a370      	add	r3, pc, #448	@ (adr r3, 800b010 <__ieee754_pow+0x740>)
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f7f5 f98a 	bl	800016c <__adddf3>
 800ae58:	4622      	mov	r2, r4
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	460f      	mov	r7, r1
 800ae5e:	462b      	mov	r3, r5
 800ae60:	4620      	mov	r0, r4
 800ae62:	4629      	mov	r1, r5
 800ae64:	f7f5 fb38 	bl	80004d8 <__aeabi_dmul>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	4639      	mov	r1, r7
 800ae70:	f7f5 fb32 	bl	80004d8 <__aeabi_dmul>
 800ae74:	4604      	mov	r4, r0
 800ae76:	460d      	mov	r5, r1
 800ae78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae7c:	4642      	mov	r2, r8
 800ae7e:	464b      	mov	r3, r9
 800ae80:	f7f5 f974 	bl	800016c <__adddf3>
 800ae84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ae88:	f7f5 fb26 	bl	80004d8 <__aeabi_dmul>
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	462b      	mov	r3, r5
 800ae90:	f7f5 f96c 	bl	800016c <__adddf3>
 800ae94:	4642      	mov	r2, r8
 800ae96:	4682      	mov	sl, r0
 800ae98:	468b      	mov	fp, r1
 800ae9a:	464b      	mov	r3, r9
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	4649      	mov	r1, r9
 800aea0:	f7f5 fb1a 	bl	80004d8 <__aeabi_dmul>
 800aea4:	2200      	movs	r2, #0
 800aea6:	4b68      	ldr	r3, [pc, #416]	@ (800b048 <__ieee754_pow+0x778>)
 800aea8:	4606      	mov	r6, r0
 800aeaa:	460f      	mov	r7, r1
 800aeac:	f7f5 f95e 	bl	800016c <__adddf3>
 800aeb0:	4652      	mov	r2, sl
 800aeb2:	465b      	mov	r3, fp
 800aeb4:	f7f5 f95a 	bl	800016c <__adddf3>
 800aeb8:	2400      	movs	r4, #0
 800aeba:	460d      	mov	r5, r1
 800aebc:	4622      	mov	r2, r4
 800aebe:	460b      	mov	r3, r1
 800aec0:	4640      	mov	r0, r8
 800aec2:	4649      	mov	r1, r9
 800aec4:	f7f5 fb08 	bl	80004d8 <__aeabi_dmul>
 800aec8:	2200      	movs	r2, #0
 800aeca:	4680      	mov	r8, r0
 800aecc:	4689      	mov	r9, r1
 800aece:	4620      	mov	r0, r4
 800aed0:	4629      	mov	r1, r5
 800aed2:	4b5d      	ldr	r3, [pc, #372]	@ (800b048 <__ieee754_pow+0x778>)
 800aed4:	f7f5 f948 	bl	8000168 <__aeabi_dsub>
 800aed8:	4632      	mov	r2, r6
 800aeda:	463b      	mov	r3, r7
 800aedc:	f7f5 f944 	bl	8000168 <__aeabi_dsub>
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	4650      	mov	r0, sl
 800aee6:	4659      	mov	r1, fp
 800aee8:	f7f5 f93e 	bl	8000168 <__aeabi_dsub>
 800aeec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aef0:	f7f5 faf2 	bl	80004d8 <__aeabi_dmul>
 800aef4:	4622      	mov	r2, r4
 800aef6:	4606      	mov	r6, r0
 800aef8:	460f      	mov	r7, r1
 800aefa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aefe:	462b      	mov	r3, r5
 800af00:	f7f5 faea 	bl	80004d8 <__aeabi_dmul>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4630      	mov	r0, r6
 800af0a:	4639      	mov	r1, r7
 800af0c:	f7f5 f92e 	bl	800016c <__adddf3>
 800af10:	2400      	movs	r4, #0
 800af12:	4606      	mov	r6, r0
 800af14:	460f      	mov	r7, r1
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4640      	mov	r0, r8
 800af1c:	4649      	mov	r1, r9
 800af1e:	f7f5 f925 	bl	800016c <__adddf3>
 800af22:	a33d      	add	r3, pc, #244	@ (adr r3, 800b018 <__ieee754_pow+0x748>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	4620      	mov	r0, r4
 800af2a:	460d      	mov	r5, r1
 800af2c:	f7f5 fad4 	bl	80004d8 <__aeabi_dmul>
 800af30:	4642      	mov	r2, r8
 800af32:	464b      	mov	r3, r9
 800af34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af38:	4620      	mov	r0, r4
 800af3a:	4629      	mov	r1, r5
 800af3c:	f7f5 f914 	bl	8000168 <__aeabi_dsub>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	4630      	mov	r0, r6
 800af46:	4639      	mov	r1, r7
 800af48:	f7f5 f90e 	bl	8000168 <__aeabi_dsub>
 800af4c:	a334      	add	r3, pc, #208	@ (adr r3, 800b020 <__ieee754_pow+0x750>)
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f7f5 fac1 	bl	80004d8 <__aeabi_dmul>
 800af56:	a334      	add	r3, pc, #208	@ (adr r3, 800b028 <__ieee754_pow+0x758>)
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	4606      	mov	r6, r0
 800af5e:	460f      	mov	r7, r1
 800af60:	4620      	mov	r0, r4
 800af62:	4629      	mov	r1, r5
 800af64:	f7f5 fab8 	bl	80004d8 <__aeabi_dmul>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 f8fc 	bl	800016c <__adddf3>
 800af74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af76:	4b35      	ldr	r3, [pc, #212]	@ (800b04c <__ieee754_pow+0x77c>)
 800af78:	2400      	movs	r4, #0
 800af7a:	4413      	add	r3, r2
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f7f5 f8f4 	bl	800016c <__adddf3>
 800af84:	4682      	mov	sl, r0
 800af86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af88:	468b      	mov	fp, r1
 800af8a:	f7f5 fa3b 	bl	8000404 <__aeabi_i2d>
 800af8e:	4606      	mov	r6, r0
 800af90:	460f      	mov	r7, r1
 800af92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af94:	4b2e      	ldr	r3, [pc, #184]	@ (800b050 <__ieee754_pow+0x780>)
 800af96:	4413      	add	r3, r2
 800af98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af9c:	4652      	mov	r2, sl
 800af9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afa2:	465b      	mov	r3, fp
 800afa4:	f7f5 f8e2 	bl	800016c <__adddf3>
 800afa8:	4642      	mov	r2, r8
 800afaa:	464b      	mov	r3, r9
 800afac:	f7f5 f8de 	bl	800016c <__adddf3>
 800afb0:	4632      	mov	r2, r6
 800afb2:	463b      	mov	r3, r7
 800afb4:	f7f5 f8da 	bl	800016c <__adddf3>
 800afb8:	4632      	mov	r2, r6
 800afba:	463b      	mov	r3, r7
 800afbc:	4620      	mov	r0, r4
 800afbe:	460d      	mov	r5, r1
 800afc0:	f7f5 f8d2 	bl	8000168 <__aeabi_dsub>
 800afc4:	4642      	mov	r2, r8
 800afc6:	464b      	mov	r3, r9
 800afc8:	f7f5 f8ce 	bl	8000168 <__aeabi_dsub>
 800afcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afd0:	f7f5 f8ca 	bl	8000168 <__aeabi_dsub>
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	4650      	mov	r0, sl
 800afda:	4659      	mov	r1, fp
 800afdc:	e618      	b.n	800ac10 <__ieee754_pow+0x340>
 800afde:	2400      	movs	r4, #0
 800afe0:	e68a      	b.n	800acf8 <__ieee754_pow+0x428>
 800afe2:	2601      	movs	r6, #1
 800afe4:	e6a0      	b.n	800ad28 <__ieee754_pow+0x458>
 800afe6:	bf00      	nop
 800afe8:	4a454eef 	.word	0x4a454eef
 800afec:	3fca7e28 	.word	0x3fca7e28
 800aff0:	93c9db65 	.word	0x93c9db65
 800aff4:	3fcd864a 	.word	0x3fcd864a
 800aff8:	a91d4101 	.word	0xa91d4101
 800affc:	3fd17460 	.word	0x3fd17460
 800b000:	518f264d 	.word	0x518f264d
 800b004:	3fd55555 	.word	0x3fd55555
 800b008:	db6fabff 	.word	0xdb6fabff
 800b00c:	3fdb6db6 	.word	0x3fdb6db6
 800b010:	33333303 	.word	0x33333303
 800b014:	3fe33333 	.word	0x3fe33333
 800b018:	e0000000 	.word	0xe0000000
 800b01c:	3feec709 	.word	0x3feec709
 800b020:	dc3a03fd 	.word	0xdc3a03fd
 800b024:	3feec709 	.word	0x3feec709
 800b028:	145b01f5 	.word	0x145b01f5
 800b02c:	be3e2fe0 	.word	0xbe3e2fe0
 800b030:	7ff00000 	.word	0x7ff00000
 800b034:	43400000 	.word	0x43400000
 800b038:	0003988e 	.word	0x0003988e
 800b03c:	000bb679 	.word	0x000bb679
 800b040:	0800e718 	.word	0x0800e718
 800b044:	3ff00000 	.word	0x3ff00000
 800b048:	40080000 	.word	0x40080000
 800b04c:	0800e6f8 	.word	0x0800e6f8
 800b050:	0800e708 	.word	0x0800e708
 800b054:	a39a      	add	r3, pc, #616	@ (adr r3, 800b2c0 <__ieee754_pow+0x9f0>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	4630      	mov	r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 f885 	bl	800016c <__adddf3>
 800b062:	4642      	mov	r2, r8
 800b064:	e9cd 0100 	strd	r0, r1, [sp]
 800b068:	464b      	mov	r3, r9
 800b06a:	4620      	mov	r0, r4
 800b06c:	4629      	mov	r1, r5
 800b06e:	f7f5 f87b 	bl	8000168 <__aeabi_dsub>
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b07a:	f7f5 fcbd 	bl	80009f8 <__aeabi_dcmpgt>
 800b07e:	2800      	cmp	r0, #0
 800b080:	f47f ae09 	bne.w	800ac96 <__ieee754_pow+0x3c6>
 800b084:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b088:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b08c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b090:	fa43 fa0a 	asr.w	sl, r3, sl
 800b094:	44da      	add	sl, fp
 800b096:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b09a:	489b      	ldr	r0, [pc, #620]	@ (800b308 <__ieee754_pow+0xa38>)
 800b09c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b0a0:	4108      	asrs	r0, r1
 800b0a2:	ea00 030a 	and.w	r3, r0, sl
 800b0a6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b0aa:	f1c1 0114 	rsb	r1, r1, #20
 800b0ae:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	fa4a fa01 	asr.w	sl, sl, r1
 800b0b8:	f1bb 0f00 	cmp.w	fp, #0
 800b0bc:	4649      	mov	r1, r9
 800b0be:	f04f 0200 	mov.w	r2, #0
 800b0c2:	bfb8      	it	lt
 800b0c4:	f1ca 0a00 	rsblt	sl, sl, #0
 800b0c8:	f7f5 f84e 	bl	8000168 <__aeabi_dsub>
 800b0cc:	4680      	mov	r8, r0
 800b0ce:	4689      	mov	r9, r1
 800b0d0:	2400      	movs	r4, #0
 800b0d2:	4632      	mov	r2, r6
 800b0d4:	463b      	mov	r3, r7
 800b0d6:	4640      	mov	r0, r8
 800b0d8:	4649      	mov	r1, r9
 800b0da:	f7f5 f847 	bl	800016c <__adddf3>
 800b0de:	a37a      	add	r3, pc, #488	@ (adr r3, 800b2c8 <__ieee754_pow+0x9f8>)
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	f7f5 f9f6 	bl	80004d8 <__aeabi_dmul>
 800b0ec:	4642      	mov	r2, r8
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	e9cd 0100 	strd	r0, r1, [sp]
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	f7f5 f836 	bl	8000168 <__aeabi_dsub>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4630      	mov	r0, r6
 800b102:	4639      	mov	r1, r7
 800b104:	f7f5 f830 	bl	8000168 <__aeabi_dsub>
 800b108:	a371      	add	r3, pc, #452	@ (adr r3, 800b2d0 <__ieee754_pow+0xa00>)
 800b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10e:	f7f5 f9e3 	bl	80004d8 <__aeabi_dmul>
 800b112:	a371      	add	r3, pc, #452	@ (adr r3, 800b2d8 <__ieee754_pow+0xa08>)
 800b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b118:	4680      	mov	r8, r0
 800b11a:	4689      	mov	r9, r1
 800b11c:	4620      	mov	r0, r4
 800b11e:	4629      	mov	r1, r5
 800b120:	f7f5 f9da 	bl	80004d8 <__aeabi_dmul>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4640      	mov	r0, r8
 800b12a:	4649      	mov	r1, r9
 800b12c:	f7f5 f81e 	bl	800016c <__adddf3>
 800b130:	4604      	mov	r4, r0
 800b132:	460d      	mov	r5, r1
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b13c:	f7f5 f816 	bl	800016c <__adddf3>
 800b140:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b144:	4680      	mov	r8, r0
 800b146:	4689      	mov	r9, r1
 800b148:	f7f5 f80e 	bl	8000168 <__aeabi_dsub>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	4620      	mov	r0, r4
 800b152:	4629      	mov	r1, r5
 800b154:	f7f5 f808 	bl	8000168 <__aeabi_dsub>
 800b158:	4642      	mov	r2, r8
 800b15a:	4606      	mov	r6, r0
 800b15c:	460f      	mov	r7, r1
 800b15e:	464b      	mov	r3, r9
 800b160:	4640      	mov	r0, r8
 800b162:	4649      	mov	r1, r9
 800b164:	f7f5 f9b8 	bl	80004d8 <__aeabi_dmul>
 800b168:	a35d      	add	r3, pc, #372	@ (adr r3, 800b2e0 <__ieee754_pow+0xa10>)
 800b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16e:	4604      	mov	r4, r0
 800b170:	460d      	mov	r5, r1
 800b172:	f7f5 f9b1 	bl	80004d8 <__aeabi_dmul>
 800b176:	a35c      	add	r3, pc, #368	@ (adr r3, 800b2e8 <__ieee754_pow+0xa18>)
 800b178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17c:	f7f4 fff4 	bl	8000168 <__aeabi_dsub>
 800b180:	4622      	mov	r2, r4
 800b182:	462b      	mov	r3, r5
 800b184:	f7f5 f9a8 	bl	80004d8 <__aeabi_dmul>
 800b188:	a359      	add	r3, pc, #356	@ (adr r3, 800b2f0 <__ieee754_pow+0xa20>)
 800b18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18e:	f7f4 ffed 	bl	800016c <__adddf3>
 800b192:	4622      	mov	r2, r4
 800b194:	462b      	mov	r3, r5
 800b196:	f7f5 f99f 	bl	80004d8 <__aeabi_dmul>
 800b19a:	a357      	add	r3, pc, #348	@ (adr r3, 800b2f8 <__ieee754_pow+0xa28>)
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	f7f4 ffe2 	bl	8000168 <__aeabi_dsub>
 800b1a4:	4622      	mov	r2, r4
 800b1a6:	462b      	mov	r3, r5
 800b1a8:	f7f5 f996 	bl	80004d8 <__aeabi_dmul>
 800b1ac:	a354      	add	r3, pc, #336	@ (adr r3, 800b300 <__ieee754_pow+0xa30>)
 800b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b2:	f7f4 ffdb 	bl	800016c <__adddf3>
 800b1b6:	4622      	mov	r2, r4
 800b1b8:	462b      	mov	r3, r5
 800b1ba:	f7f5 f98d 	bl	80004d8 <__aeabi_dmul>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	4649      	mov	r1, r9
 800b1c6:	f7f4 ffcf 	bl	8000168 <__aeabi_dsub>
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	460d      	mov	r5, r1
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4640      	mov	r0, r8
 800b1d4:	4649      	mov	r1, r9
 800b1d6:	f7f5 f97f 	bl	80004d8 <__aeabi_dmul>
 800b1da:	2200      	movs	r2, #0
 800b1dc:	e9cd 0100 	strd	r0, r1, [sp]
 800b1e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	f7f4 ffbe 	bl	8000168 <__aeabi_dsub>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1f4:	f7f5 fa9a 	bl	800072c <__aeabi_ddiv>
 800b1f8:	4632      	mov	r2, r6
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	460d      	mov	r5, r1
 800b1fe:	463b      	mov	r3, r7
 800b200:	4640      	mov	r0, r8
 800b202:	4649      	mov	r1, r9
 800b204:	f7f5 f968 	bl	80004d8 <__aeabi_dmul>
 800b208:	4632      	mov	r2, r6
 800b20a:	463b      	mov	r3, r7
 800b20c:	f7f4 ffae 	bl	800016c <__adddf3>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4620      	mov	r0, r4
 800b216:	4629      	mov	r1, r5
 800b218:	f7f4 ffa6 	bl	8000168 <__aeabi_dsub>
 800b21c:	4642      	mov	r2, r8
 800b21e:	464b      	mov	r3, r9
 800b220:	f7f4 ffa2 	bl	8000168 <__aeabi_dsub>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	2000      	movs	r0, #0
 800b22a:	4938      	ldr	r1, [pc, #224]	@ (800b30c <__ieee754_pow+0xa3c>)
 800b22c:	f7f4 ff9c 	bl	8000168 <__aeabi_dsub>
 800b230:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b234:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800b238:	da2e      	bge.n	800b298 <__ieee754_pow+0x9c8>
 800b23a:	4652      	mov	r2, sl
 800b23c:	f000 f874 	bl	800b328 <scalbn>
 800b240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b244:	f7ff bbed 	b.w	800aa22 <__ieee754_pow+0x152>
 800b248:	4c31      	ldr	r4, [pc, #196]	@ (800b310 <__ieee754_pow+0xa40>)
 800b24a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b24e:	42a3      	cmp	r3, r4
 800b250:	d91a      	bls.n	800b288 <__ieee754_pow+0x9b8>
 800b252:	4b30      	ldr	r3, [pc, #192]	@ (800b314 <__ieee754_pow+0xa44>)
 800b254:	440b      	add	r3, r1
 800b256:	4303      	orrs	r3, r0
 800b258:	d009      	beq.n	800b26e <__ieee754_pow+0x99e>
 800b25a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b25e:	2200      	movs	r2, #0
 800b260:	2300      	movs	r3, #0
 800b262:	f7f5 fbab 	bl	80009bc <__aeabi_dcmplt>
 800b266:	3800      	subs	r0, #0
 800b268:	bf18      	it	ne
 800b26a:	2001      	movne	r0, #1
 800b26c:	e444      	b.n	800aaf8 <__ieee754_pow+0x228>
 800b26e:	4642      	mov	r2, r8
 800b270:	464b      	mov	r3, r9
 800b272:	f7f4 ff79 	bl	8000168 <__aeabi_dsub>
 800b276:	4632      	mov	r2, r6
 800b278:	463b      	mov	r3, r7
 800b27a:	f7f5 fbb3 	bl	80009e4 <__aeabi_dcmpge>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d1eb      	bne.n	800b25a <__ieee754_pow+0x98a>
 800b282:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800b318 <__ieee754_pow+0xa48>
 800b286:	e6fd      	b.n	800b084 <__ieee754_pow+0x7b4>
 800b288:	469a      	mov	sl, r3
 800b28a:	4b24      	ldr	r3, [pc, #144]	@ (800b31c <__ieee754_pow+0xa4c>)
 800b28c:	459a      	cmp	sl, r3
 800b28e:	f63f aef9 	bhi.w	800b084 <__ieee754_pow+0x7b4>
 800b292:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b296:	e71b      	b.n	800b0d0 <__ieee754_pow+0x800>
 800b298:	4621      	mov	r1, r4
 800b29a:	e7d1      	b.n	800b240 <__ieee754_pow+0x970>
 800b29c:	2000      	movs	r0, #0
 800b29e:	491b      	ldr	r1, [pc, #108]	@ (800b30c <__ieee754_pow+0xa3c>)
 800b2a0:	f7ff bb34 	b.w	800a90c <__ieee754_pow+0x3c>
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	f7ff bb30 	b.w	800a90c <__ieee754_pow+0x3c>
 800b2ac:	4650      	mov	r0, sl
 800b2ae:	4659      	mov	r1, fp
 800b2b0:	f7ff bb2c 	b.w	800a90c <__ieee754_pow+0x3c>
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	f7ff bb79 	b.w	800a9ac <__ieee754_pow+0xdc>
 800b2ba:	2400      	movs	r4, #0
 800b2bc:	f7ff bb64 	b.w	800a988 <__ieee754_pow+0xb8>
 800b2c0:	652b82fe 	.word	0x652b82fe
 800b2c4:	3c971547 	.word	0x3c971547
 800b2c8:	00000000 	.word	0x00000000
 800b2cc:	3fe62e43 	.word	0x3fe62e43
 800b2d0:	fefa39ef 	.word	0xfefa39ef
 800b2d4:	3fe62e42 	.word	0x3fe62e42
 800b2d8:	0ca86c39 	.word	0x0ca86c39
 800b2dc:	be205c61 	.word	0xbe205c61
 800b2e0:	72bea4d0 	.word	0x72bea4d0
 800b2e4:	3e663769 	.word	0x3e663769
 800b2e8:	c5d26bf1 	.word	0xc5d26bf1
 800b2ec:	3ebbbd41 	.word	0x3ebbbd41
 800b2f0:	af25de2c 	.word	0xaf25de2c
 800b2f4:	3f11566a 	.word	0x3f11566a
 800b2f8:	16bebd93 	.word	0x16bebd93
 800b2fc:	3f66c16c 	.word	0x3f66c16c
 800b300:	5555553e 	.word	0x5555553e
 800b304:	3fc55555 	.word	0x3fc55555
 800b308:	fff00000 	.word	0xfff00000
 800b30c:	3ff00000 	.word	0x3ff00000
 800b310:	4090cbff 	.word	0x4090cbff
 800b314:	3f6f3400 	.word	0x3f6f3400
 800b318:	4090cc00 	.word	0x4090cc00
 800b31c:	3fe00000 	.word	0x3fe00000

0800b320 <fabs>:
 800b320:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b324:	4619      	mov	r1, r3
 800b326:	4770      	bx	lr

0800b328 <scalbn>:
 800b328:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b32c:	4616      	mov	r6, r2
 800b32e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b332:	4683      	mov	fp, r0
 800b334:	468c      	mov	ip, r1
 800b336:	460b      	mov	r3, r1
 800b338:	b982      	cbnz	r2, 800b35c <scalbn+0x34>
 800b33a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b33e:	4303      	orrs	r3, r0
 800b340:	d039      	beq.n	800b3b6 <scalbn+0x8e>
 800b342:	4b2f      	ldr	r3, [pc, #188]	@ (800b400 <scalbn+0xd8>)
 800b344:	2200      	movs	r2, #0
 800b346:	f7f5 f8c7 	bl	80004d8 <__aeabi_dmul>
 800b34a:	4b2e      	ldr	r3, [pc, #184]	@ (800b404 <scalbn+0xdc>)
 800b34c:	4683      	mov	fp, r0
 800b34e:	429e      	cmp	r6, r3
 800b350:	468c      	mov	ip, r1
 800b352:	da0d      	bge.n	800b370 <scalbn+0x48>
 800b354:	a326      	add	r3, pc, #152	@ (adr r3, 800b3f0 <scalbn+0xc8>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	e01b      	b.n	800b394 <scalbn+0x6c>
 800b35c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800b360:	42ba      	cmp	r2, r7
 800b362:	d109      	bne.n	800b378 <scalbn+0x50>
 800b364:	4602      	mov	r2, r0
 800b366:	f7f4 ff01 	bl	800016c <__adddf3>
 800b36a:	4683      	mov	fp, r0
 800b36c:	468c      	mov	ip, r1
 800b36e:	e022      	b.n	800b3b6 <scalbn+0x8e>
 800b370:	460b      	mov	r3, r1
 800b372:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b376:	3a36      	subs	r2, #54	@ 0x36
 800b378:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b37c:	428e      	cmp	r6, r1
 800b37e:	dd0c      	ble.n	800b39a <scalbn+0x72>
 800b380:	a31d      	add	r3, pc, #116	@ (adr r3, 800b3f8 <scalbn+0xd0>)
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	461c      	mov	r4, r3
 800b388:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800b38c:	f361 74df 	bfi	r4, r1, #31, #1
 800b390:	4621      	mov	r1, r4
 800b392:	481d      	ldr	r0, [pc, #116]	@ (800b408 <scalbn+0xe0>)
 800b394:	f7f5 f8a0 	bl	80004d8 <__aeabi_dmul>
 800b398:	e7e7      	b.n	800b36a <scalbn+0x42>
 800b39a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b39e:	4432      	add	r2, r6
 800b3a0:	428a      	cmp	r2, r1
 800b3a2:	dced      	bgt.n	800b380 <scalbn+0x58>
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	dd0a      	ble.n	800b3be <scalbn+0x96>
 800b3a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b3ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b3b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b3b4:	46ac      	mov	ip, r5
 800b3b6:	4658      	mov	r0, fp
 800b3b8:	4661      	mov	r1, ip
 800b3ba:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b3be:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b3c2:	da09      	bge.n	800b3d8 <scalbn+0xb0>
 800b3c4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800b3c8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800b3cc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800b3d0:	480e      	ldr	r0, [pc, #56]	@ (800b40c <scalbn+0xe4>)
 800b3d2:	f041 011f 	orr.w	r1, r1, #31
 800b3d6:	e7bd      	b.n	800b354 <scalbn+0x2c>
 800b3d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b3dc:	3236      	adds	r2, #54	@ 0x36
 800b3de:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b3e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b3e6:	4658      	mov	r0, fp
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	4b08      	ldr	r3, [pc, #32]	@ (800b410 <scalbn+0xe8>)
 800b3ee:	e7d1      	b.n	800b394 <scalbn+0x6c>
 800b3f0:	c2f8f359 	.word	0xc2f8f359
 800b3f4:	01a56e1f 	.word	0x01a56e1f
 800b3f8:	8800759c 	.word	0x8800759c
 800b3fc:	7e37e43c 	.word	0x7e37e43c
 800b400:	43500000 	.word	0x43500000
 800b404:	ffff3cb0 	.word	0xffff3cb0
 800b408:	8800759c 	.word	0x8800759c
 800b40c:	c2f8f359 	.word	0xc2f8f359
 800b410:	3c900000 	.word	0x3c900000

0800b414 <with_errno>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	4604      	mov	r4, r0
 800b418:	460d      	mov	r5, r1
 800b41a:	4616      	mov	r6, r2
 800b41c:	f001 f81c 	bl	800c458 <__errno>
 800b420:	4629      	mov	r1, r5
 800b422:	6006      	str	r6, [r0, #0]
 800b424:	4620      	mov	r0, r4
 800b426:	bd70      	pop	{r4, r5, r6, pc}

0800b428 <xflow>:
 800b428:	b513      	push	{r0, r1, r4, lr}
 800b42a:	4604      	mov	r4, r0
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	b10c      	cbz	r4, 800b436 <xflow+0xe>
 800b432:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b436:	e9cd 2300 	strd	r2, r3, [sp]
 800b43a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b43e:	f7f5 f84b 	bl	80004d8 <__aeabi_dmul>
 800b442:	2222      	movs	r2, #34	@ 0x22
 800b444:	b002      	add	sp, #8
 800b446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b44a:	f7ff bfe3 	b.w	800b414 <with_errno>

0800b44e <__math_uflow>:
 800b44e:	2200      	movs	r2, #0
 800b450:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b454:	f7ff bfe8 	b.w	800b428 <xflow>

0800b458 <__math_oflow>:
 800b458:	2200      	movs	r2, #0
 800b45a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800b45e:	f7ff bfe3 	b.w	800b428 <xflow>
	...

0800b464 <__ieee754_sqrt>:
 800b464:	4a67      	ldr	r2, [pc, #412]	@ (800b604 <__ieee754_sqrt+0x1a0>)
 800b466:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46a:	438a      	bics	r2, r1
 800b46c:	4606      	mov	r6, r0
 800b46e:	460f      	mov	r7, r1
 800b470:	460b      	mov	r3, r1
 800b472:	4604      	mov	r4, r0
 800b474:	d10e      	bne.n	800b494 <__ieee754_sqrt+0x30>
 800b476:	4602      	mov	r2, r0
 800b478:	f7f5 f82e 	bl	80004d8 <__aeabi_dmul>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	4630      	mov	r0, r6
 800b482:	4639      	mov	r1, r7
 800b484:	f7f4 fe72 	bl	800016c <__adddf3>
 800b488:	4606      	mov	r6, r0
 800b48a:	460f      	mov	r7, r1
 800b48c:	4630      	mov	r0, r6
 800b48e:	4639      	mov	r1, r7
 800b490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b494:	2900      	cmp	r1, #0
 800b496:	dc0c      	bgt.n	800b4b2 <__ieee754_sqrt+0x4e>
 800b498:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b49c:	4302      	orrs	r2, r0
 800b49e:	d0f5      	beq.n	800b48c <__ieee754_sqrt+0x28>
 800b4a0:	b189      	cbz	r1, 800b4c6 <__ieee754_sqrt+0x62>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	f7f4 fe60 	bl	8000168 <__aeabi_dsub>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	f7f5 f93e 	bl	800072c <__aeabi_ddiv>
 800b4b0:	e7ea      	b.n	800b488 <__ieee754_sqrt+0x24>
 800b4b2:	150a      	asrs	r2, r1, #20
 800b4b4:	d115      	bne.n	800b4e2 <__ieee754_sqrt+0x7e>
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	e009      	b.n	800b4ce <__ieee754_sqrt+0x6a>
 800b4ba:	0ae3      	lsrs	r3, r4, #11
 800b4bc:	3a15      	subs	r2, #21
 800b4be:	0564      	lsls	r4, r4, #21
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d0fa      	beq.n	800b4ba <__ieee754_sqrt+0x56>
 800b4c4:	e7f7      	b.n	800b4b6 <__ieee754_sqrt+0x52>
 800b4c6:	460a      	mov	r2, r1
 800b4c8:	e7fa      	b.n	800b4c0 <__ieee754_sqrt+0x5c>
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	3101      	adds	r1, #1
 800b4ce:	02d8      	lsls	r0, r3, #11
 800b4d0:	d5fb      	bpl.n	800b4ca <__ieee754_sqrt+0x66>
 800b4d2:	1e48      	subs	r0, r1, #1
 800b4d4:	1a12      	subs	r2, r2, r0
 800b4d6:	f1c1 0020 	rsb	r0, r1, #32
 800b4da:	fa24 f000 	lsr.w	r0, r4, r0
 800b4de:	4303      	orrs	r3, r0
 800b4e0:	408c      	lsls	r4, r1
 800b4e2:	2600      	movs	r6, #0
 800b4e4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b4e8:	2116      	movs	r1, #22
 800b4ea:	07d2      	lsls	r2, r2, #31
 800b4ec:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b4f0:	4632      	mov	r2, r6
 800b4f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4fa:	bf5c      	itt	pl
 800b4fc:	005b      	lslpl	r3, r3, #1
 800b4fe:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b502:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b506:	bf58      	it	pl
 800b508:	0064      	lslpl	r4, r4, #1
 800b50a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b50e:	107f      	asrs	r7, r7, #1
 800b510:	0064      	lsls	r4, r4, #1
 800b512:	1815      	adds	r5, r2, r0
 800b514:	429d      	cmp	r5, r3
 800b516:	bfde      	ittt	le
 800b518:	182a      	addle	r2, r5, r0
 800b51a:	1b5b      	suble	r3, r3, r5
 800b51c:	1836      	addle	r6, r6, r0
 800b51e:	0fe5      	lsrs	r5, r4, #31
 800b520:	3901      	subs	r1, #1
 800b522:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b526:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b52a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b52e:	d1f0      	bne.n	800b512 <__ieee754_sqrt+0xae>
 800b530:	460d      	mov	r5, r1
 800b532:	f04f 0a20 	mov.w	sl, #32
 800b536:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b53a:	429a      	cmp	r2, r3
 800b53c:	eb01 0c00 	add.w	ip, r1, r0
 800b540:	db02      	blt.n	800b548 <__ieee754_sqrt+0xe4>
 800b542:	d113      	bne.n	800b56c <__ieee754_sqrt+0x108>
 800b544:	45a4      	cmp	ip, r4
 800b546:	d811      	bhi.n	800b56c <__ieee754_sqrt+0x108>
 800b548:	f1bc 0f00 	cmp.w	ip, #0
 800b54c:	eb0c 0100 	add.w	r1, ip, r0
 800b550:	da42      	bge.n	800b5d8 <__ieee754_sqrt+0x174>
 800b552:	2900      	cmp	r1, #0
 800b554:	db40      	blt.n	800b5d8 <__ieee754_sqrt+0x174>
 800b556:	f102 0e01 	add.w	lr, r2, #1
 800b55a:	1a9b      	subs	r3, r3, r2
 800b55c:	4672      	mov	r2, lr
 800b55e:	45a4      	cmp	ip, r4
 800b560:	bf88      	it	hi
 800b562:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800b566:	eba4 040c 	sub.w	r4, r4, ip
 800b56a:	4405      	add	r5, r0
 800b56c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b570:	f1ba 0a01 	subs.w	sl, sl, #1
 800b574:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b578:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b57c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b580:	d1db      	bne.n	800b53a <__ieee754_sqrt+0xd6>
 800b582:	431c      	orrs	r4, r3
 800b584:	d01a      	beq.n	800b5bc <__ieee754_sqrt+0x158>
 800b586:	4c20      	ldr	r4, [pc, #128]	@ (800b608 <__ieee754_sqrt+0x1a4>)
 800b588:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800b60c <__ieee754_sqrt+0x1a8>
 800b58c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b590:	e9db 2300 	ldrd	r2, r3, [fp]
 800b594:	f7f4 fde8 	bl	8000168 <__aeabi_dsub>
 800b598:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	f7f5 fa14 	bl	80009d0 <__aeabi_dcmple>
 800b5a8:	b140      	cbz	r0, 800b5bc <__ieee754_sqrt+0x158>
 800b5aa:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b5ae:	e9db 2300 	ldrd	r2, r3, [fp]
 800b5b2:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800b5b6:	d111      	bne.n	800b5dc <__ieee754_sqrt+0x178>
 800b5b8:	4655      	mov	r5, sl
 800b5ba:	3601      	adds	r6, #1
 800b5bc:	1072      	asrs	r2, r6, #1
 800b5be:	086b      	lsrs	r3, r5, #1
 800b5c0:	07f1      	lsls	r1, r6, #31
 800b5c2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b5c6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b5ca:	bf48      	it	mi
 800b5cc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800b5d6:	e757      	b.n	800b488 <__ieee754_sqrt+0x24>
 800b5d8:	4696      	mov	lr, r2
 800b5da:	e7be      	b.n	800b55a <__ieee754_sqrt+0xf6>
 800b5dc:	f7f4 fdc6 	bl	800016c <__adddf3>
 800b5e0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	4640      	mov	r0, r8
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	f7f5 f9e6 	bl	80009bc <__aeabi_dcmplt>
 800b5f0:	b120      	cbz	r0, 800b5fc <__ieee754_sqrt+0x198>
 800b5f2:	1ca8      	adds	r0, r5, #2
 800b5f4:	bf08      	it	eq
 800b5f6:	3601      	addeq	r6, #1
 800b5f8:	3502      	adds	r5, #2
 800b5fa:	e7df      	b.n	800b5bc <__ieee754_sqrt+0x158>
 800b5fc:	1c6b      	adds	r3, r5, #1
 800b5fe:	f023 0501 	bic.w	r5, r3, #1
 800b602:	e7db      	b.n	800b5bc <__ieee754_sqrt+0x158>
 800b604:	7ff00000 	.word	0x7ff00000
 800b608:	20000038 	.word	0x20000038
 800b60c:	20000030 	.word	0x20000030

0800b610 <abort>:
 800b610:	2006      	movs	r0, #6
 800b612:	b508      	push	{r3, lr}
 800b614:	f000 feaa 	bl	800c36c <raise>
 800b618:	2001      	movs	r0, #1
 800b61a:	f7f8 fb40 	bl	8003c9e <_exit>
	...

0800b620 <malloc>:
 800b620:	4b02      	ldr	r3, [pc, #8]	@ (800b62c <malloc+0xc>)
 800b622:	4601      	mov	r1, r0
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	f000 b82d 	b.w	800b684 <_malloc_r>
 800b62a:	bf00      	nop
 800b62c:	2000004c 	.word	0x2000004c

0800b630 <free>:
 800b630:	4b02      	ldr	r3, [pc, #8]	@ (800b63c <free+0xc>)
 800b632:	4601      	mov	r1, r0
 800b634:	6818      	ldr	r0, [r3, #0]
 800b636:	f001 bdab 	b.w	800d190 <_free_r>
 800b63a:	bf00      	nop
 800b63c:	2000004c 	.word	0x2000004c

0800b640 <sbrk_aligned>:
 800b640:	b570      	push	{r4, r5, r6, lr}
 800b642:	4e0f      	ldr	r6, [pc, #60]	@ (800b680 <sbrk_aligned+0x40>)
 800b644:	460c      	mov	r4, r1
 800b646:	6831      	ldr	r1, [r6, #0]
 800b648:	4605      	mov	r5, r0
 800b64a:	b911      	cbnz	r1, 800b652 <sbrk_aligned+0x12>
 800b64c:	f000 fee2 	bl	800c414 <_sbrk_r>
 800b650:	6030      	str	r0, [r6, #0]
 800b652:	4621      	mov	r1, r4
 800b654:	4628      	mov	r0, r5
 800b656:	f000 fedd 	bl	800c414 <_sbrk_r>
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	d103      	bne.n	800b666 <sbrk_aligned+0x26>
 800b65e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b662:	4620      	mov	r0, r4
 800b664:	bd70      	pop	{r4, r5, r6, pc}
 800b666:	1cc4      	adds	r4, r0, #3
 800b668:	f024 0403 	bic.w	r4, r4, #3
 800b66c:	42a0      	cmp	r0, r4
 800b66e:	d0f8      	beq.n	800b662 <sbrk_aligned+0x22>
 800b670:	1a21      	subs	r1, r4, r0
 800b672:	4628      	mov	r0, r5
 800b674:	f000 fece 	bl	800c414 <_sbrk_r>
 800b678:	3001      	adds	r0, #1
 800b67a:	d1f2      	bne.n	800b662 <sbrk_aligned+0x22>
 800b67c:	e7ef      	b.n	800b65e <sbrk_aligned+0x1e>
 800b67e:	bf00      	nop
 800b680:	20002624 	.word	0x20002624

0800b684 <_malloc_r>:
 800b684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b688:	1ccd      	adds	r5, r1, #3
 800b68a:	f025 0503 	bic.w	r5, r5, #3
 800b68e:	3508      	adds	r5, #8
 800b690:	2d0c      	cmp	r5, #12
 800b692:	bf38      	it	cc
 800b694:	250c      	movcc	r5, #12
 800b696:	2d00      	cmp	r5, #0
 800b698:	4606      	mov	r6, r0
 800b69a:	db01      	blt.n	800b6a0 <_malloc_r+0x1c>
 800b69c:	42a9      	cmp	r1, r5
 800b69e:	d904      	bls.n	800b6aa <_malloc_r+0x26>
 800b6a0:	230c      	movs	r3, #12
 800b6a2:	6033      	str	r3, [r6, #0]
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b780 <_malloc_r+0xfc>
 800b6ae:	f000 f869 	bl	800b784 <__malloc_lock>
 800b6b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b6b6:	461c      	mov	r4, r3
 800b6b8:	bb44      	cbnz	r4, 800b70c <_malloc_r+0x88>
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f7ff ffbf 	bl	800b640 <sbrk_aligned>
 800b6c2:	1c43      	adds	r3, r0, #1
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	d158      	bne.n	800b77a <_malloc_r+0xf6>
 800b6c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b6cc:	4627      	mov	r7, r4
 800b6ce:	2f00      	cmp	r7, #0
 800b6d0:	d143      	bne.n	800b75a <_malloc_r+0xd6>
 800b6d2:	2c00      	cmp	r4, #0
 800b6d4:	d04b      	beq.n	800b76e <_malloc_r+0xea>
 800b6d6:	6823      	ldr	r3, [r4, #0]
 800b6d8:	4639      	mov	r1, r7
 800b6da:	4630      	mov	r0, r6
 800b6dc:	eb04 0903 	add.w	r9, r4, r3
 800b6e0:	f000 fe98 	bl	800c414 <_sbrk_r>
 800b6e4:	4581      	cmp	r9, r0
 800b6e6:	d142      	bne.n	800b76e <_malloc_r+0xea>
 800b6e8:	6821      	ldr	r1, [r4, #0]
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	1a6d      	subs	r5, r5, r1
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7ff ffa6 	bl	800b640 <sbrk_aligned>
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d03a      	beq.n	800b76e <_malloc_r+0xea>
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	442b      	add	r3, r5
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b702:	685a      	ldr	r2, [r3, #4]
 800b704:	bb62      	cbnz	r2, 800b760 <_malloc_r+0xdc>
 800b706:	f8c8 7000 	str.w	r7, [r8]
 800b70a:	e00f      	b.n	800b72c <_malloc_r+0xa8>
 800b70c:	6822      	ldr	r2, [r4, #0]
 800b70e:	1b52      	subs	r2, r2, r5
 800b710:	d420      	bmi.n	800b754 <_malloc_r+0xd0>
 800b712:	2a0b      	cmp	r2, #11
 800b714:	d917      	bls.n	800b746 <_malloc_r+0xc2>
 800b716:	1961      	adds	r1, r4, r5
 800b718:	42a3      	cmp	r3, r4
 800b71a:	6025      	str	r5, [r4, #0]
 800b71c:	bf18      	it	ne
 800b71e:	6059      	strne	r1, [r3, #4]
 800b720:	6863      	ldr	r3, [r4, #4]
 800b722:	bf08      	it	eq
 800b724:	f8c8 1000 	streq.w	r1, [r8]
 800b728:	5162      	str	r2, [r4, r5]
 800b72a:	604b      	str	r3, [r1, #4]
 800b72c:	4630      	mov	r0, r6
 800b72e:	f000 f82f 	bl	800b790 <__malloc_unlock>
 800b732:	f104 000b 	add.w	r0, r4, #11
 800b736:	1d23      	adds	r3, r4, #4
 800b738:	f020 0007 	bic.w	r0, r0, #7
 800b73c:	1ac2      	subs	r2, r0, r3
 800b73e:	bf1c      	itt	ne
 800b740:	1a1b      	subne	r3, r3, r0
 800b742:	50a3      	strne	r3, [r4, r2]
 800b744:	e7af      	b.n	800b6a6 <_malloc_r+0x22>
 800b746:	6862      	ldr	r2, [r4, #4]
 800b748:	42a3      	cmp	r3, r4
 800b74a:	bf0c      	ite	eq
 800b74c:	f8c8 2000 	streq.w	r2, [r8]
 800b750:	605a      	strne	r2, [r3, #4]
 800b752:	e7eb      	b.n	800b72c <_malloc_r+0xa8>
 800b754:	4623      	mov	r3, r4
 800b756:	6864      	ldr	r4, [r4, #4]
 800b758:	e7ae      	b.n	800b6b8 <_malloc_r+0x34>
 800b75a:	463c      	mov	r4, r7
 800b75c:	687f      	ldr	r7, [r7, #4]
 800b75e:	e7b6      	b.n	800b6ce <_malloc_r+0x4a>
 800b760:	461a      	mov	r2, r3
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	42a3      	cmp	r3, r4
 800b766:	d1fb      	bne.n	800b760 <_malloc_r+0xdc>
 800b768:	2300      	movs	r3, #0
 800b76a:	6053      	str	r3, [r2, #4]
 800b76c:	e7de      	b.n	800b72c <_malloc_r+0xa8>
 800b76e:	230c      	movs	r3, #12
 800b770:	4630      	mov	r0, r6
 800b772:	6033      	str	r3, [r6, #0]
 800b774:	f000 f80c 	bl	800b790 <__malloc_unlock>
 800b778:	e794      	b.n	800b6a4 <_malloc_r+0x20>
 800b77a:	6005      	str	r5, [r0, #0]
 800b77c:	e7d6      	b.n	800b72c <_malloc_r+0xa8>
 800b77e:	bf00      	nop
 800b780:	20002628 	.word	0x20002628

0800b784 <__malloc_lock>:
 800b784:	4801      	ldr	r0, [pc, #4]	@ (800b78c <__malloc_lock+0x8>)
 800b786:	f000 be92 	b.w	800c4ae <__retarget_lock_acquire_recursive>
 800b78a:	bf00      	nop
 800b78c:	2000276c 	.word	0x2000276c

0800b790 <__malloc_unlock>:
 800b790:	4801      	ldr	r0, [pc, #4]	@ (800b798 <__malloc_unlock+0x8>)
 800b792:	f000 be8d 	b.w	800c4b0 <__retarget_lock_release_recursive>
 800b796:	bf00      	nop
 800b798:	2000276c 	.word	0x2000276c

0800b79c <realloc>:
 800b79c:	4b02      	ldr	r3, [pc, #8]	@ (800b7a8 <realloc+0xc>)
 800b79e:	460a      	mov	r2, r1
 800b7a0:	4601      	mov	r1, r0
 800b7a2:	6818      	ldr	r0, [r3, #0]
 800b7a4:	f000 b802 	b.w	800b7ac <_realloc_r>
 800b7a8:	2000004c 	.word	0x2000004c

0800b7ac <_realloc_r>:
 800b7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	4615      	mov	r5, r2
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	b921      	cbnz	r1, 800b7c2 <_realloc_r+0x16>
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7be:	f7ff bf61 	b.w	800b684 <_malloc_r>
 800b7c2:	b92a      	cbnz	r2, 800b7d0 <_realloc_r+0x24>
 800b7c4:	f001 fce4 	bl	800d190 <_free_r>
 800b7c8:	2400      	movs	r4, #0
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d0:	f002 f8a6 	bl	800d920 <_malloc_usable_size_r>
 800b7d4:	4285      	cmp	r5, r0
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	d802      	bhi.n	800b7e0 <_realloc_r+0x34>
 800b7da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b7de:	d8f4      	bhi.n	800b7ca <_realloc_r+0x1e>
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	f7ff ff4e 	bl	800b684 <_malloc_r>
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d0ec      	beq.n	800b7c8 <_realloc_r+0x1c>
 800b7ee:	42b5      	cmp	r5, r6
 800b7f0:	462a      	mov	r2, r5
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	bf28      	it	cs
 800b7f6:	4632      	movcs	r2, r6
 800b7f8:	f000 fe69 	bl	800c4ce <memcpy>
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	4640      	mov	r0, r8
 800b800:	f001 fcc6 	bl	800d190 <_free_r>
 800b804:	463c      	mov	r4, r7
 800b806:	e7e0      	b.n	800b7ca <_realloc_r+0x1e>

0800b808 <__cvt>:
 800b808:	2b00      	cmp	r3, #0
 800b80a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b80e:	461d      	mov	r5, r3
 800b810:	bfbb      	ittet	lt
 800b812:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b816:	461d      	movlt	r5, r3
 800b818:	2300      	movge	r3, #0
 800b81a:	232d      	movlt	r3, #45	@ 0x2d
 800b81c:	b088      	sub	sp, #32
 800b81e:	4614      	mov	r4, r2
 800b820:	bfb8      	it	lt
 800b822:	4614      	movlt	r4, r2
 800b824:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b826:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b828:	7013      	strb	r3, [r2, #0]
 800b82a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b82c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b830:	f023 0820 	bic.w	r8, r3, #32
 800b834:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b838:	d005      	beq.n	800b846 <__cvt+0x3e>
 800b83a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b83e:	d100      	bne.n	800b842 <__cvt+0x3a>
 800b840:	3601      	adds	r6, #1
 800b842:	2302      	movs	r3, #2
 800b844:	e000      	b.n	800b848 <__cvt+0x40>
 800b846:	2303      	movs	r3, #3
 800b848:	aa07      	add	r2, sp, #28
 800b84a:	9204      	str	r2, [sp, #16]
 800b84c:	aa06      	add	r2, sp, #24
 800b84e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b852:	e9cd 3600 	strd	r3, r6, [sp]
 800b856:	4622      	mov	r2, r4
 800b858:	462b      	mov	r3, r5
 800b85a:	f000 fed1 	bl	800c600 <_dtoa_r>
 800b85e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b862:	4607      	mov	r7, r0
 800b864:	d119      	bne.n	800b89a <__cvt+0x92>
 800b866:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b868:	07db      	lsls	r3, r3, #31
 800b86a:	d50e      	bpl.n	800b88a <__cvt+0x82>
 800b86c:	eb00 0906 	add.w	r9, r0, r6
 800b870:	2200      	movs	r2, #0
 800b872:	2300      	movs	r3, #0
 800b874:	4620      	mov	r0, r4
 800b876:	4629      	mov	r1, r5
 800b878:	f7f5 f896 	bl	80009a8 <__aeabi_dcmpeq>
 800b87c:	b108      	cbz	r0, 800b882 <__cvt+0x7a>
 800b87e:	f8cd 901c 	str.w	r9, [sp, #28]
 800b882:	2230      	movs	r2, #48	@ 0x30
 800b884:	9b07      	ldr	r3, [sp, #28]
 800b886:	454b      	cmp	r3, r9
 800b888:	d31e      	bcc.n	800b8c8 <__cvt+0xc0>
 800b88a:	4638      	mov	r0, r7
 800b88c:	9b07      	ldr	r3, [sp, #28]
 800b88e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b890:	1bdb      	subs	r3, r3, r7
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	b008      	add	sp, #32
 800b896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b89a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b89e:	eb00 0906 	add.w	r9, r0, r6
 800b8a2:	d1e5      	bne.n	800b870 <__cvt+0x68>
 800b8a4:	7803      	ldrb	r3, [r0, #0]
 800b8a6:	2b30      	cmp	r3, #48	@ 0x30
 800b8a8:	d10a      	bne.n	800b8c0 <__cvt+0xb8>
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f5 f879 	bl	80009a8 <__aeabi_dcmpeq>
 800b8b6:	b918      	cbnz	r0, 800b8c0 <__cvt+0xb8>
 800b8b8:	f1c6 0601 	rsb	r6, r6, #1
 800b8bc:	f8ca 6000 	str.w	r6, [sl]
 800b8c0:	f8da 3000 	ldr.w	r3, [sl]
 800b8c4:	4499      	add	r9, r3
 800b8c6:	e7d3      	b.n	800b870 <__cvt+0x68>
 800b8c8:	1c59      	adds	r1, r3, #1
 800b8ca:	9107      	str	r1, [sp, #28]
 800b8cc:	701a      	strb	r2, [r3, #0]
 800b8ce:	e7d9      	b.n	800b884 <__cvt+0x7c>

0800b8d0 <__exponent>:
 800b8d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8d2:	2900      	cmp	r1, #0
 800b8d4:	bfb6      	itet	lt
 800b8d6:	232d      	movlt	r3, #45	@ 0x2d
 800b8d8:	232b      	movge	r3, #43	@ 0x2b
 800b8da:	4249      	neglt	r1, r1
 800b8dc:	2909      	cmp	r1, #9
 800b8de:	7002      	strb	r2, [r0, #0]
 800b8e0:	7043      	strb	r3, [r0, #1]
 800b8e2:	dd29      	ble.n	800b938 <__exponent+0x68>
 800b8e4:	f10d 0307 	add.w	r3, sp, #7
 800b8e8:	461d      	mov	r5, r3
 800b8ea:	270a      	movs	r7, #10
 800b8ec:	fbb1 f6f7 	udiv	r6, r1, r7
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	fb07 1416 	mls	r4, r7, r6, r1
 800b8f6:	3430      	adds	r4, #48	@ 0x30
 800b8f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	2c63      	cmp	r4, #99	@ 0x63
 800b900:	4631      	mov	r1, r6
 800b902:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b906:	dcf1      	bgt.n	800b8ec <__exponent+0x1c>
 800b908:	3130      	adds	r1, #48	@ 0x30
 800b90a:	1e94      	subs	r4, r2, #2
 800b90c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b910:	4623      	mov	r3, r4
 800b912:	1c41      	adds	r1, r0, #1
 800b914:	42ab      	cmp	r3, r5
 800b916:	d30a      	bcc.n	800b92e <__exponent+0x5e>
 800b918:	f10d 0309 	add.w	r3, sp, #9
 800b91c:	1a9b      	subs	r3, r3, r2
 800b91e:	42ac      	cmp	r4, r5
 800b920:	bf88      	it	hi
 800b922:	2300      	movhi	r3, #0
 800b924:	3302      	adds	r3, #2
 800b926:	4403      	add	r3, r0
 800b928:	1a18      	subs	r0, r3, r0
 800b92a:	b003      	add	sp, #12
 800b92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b92e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b932:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b936:	e7ed      	b.n	800b914 <__exponent+0x44>
 800b938:	2330      	movs	r3, #48	@ 0x30
 800b93a:	3130      	adds	r1, #48	@ 0x30
 800b93c:	7083      	strb	r3, [r0, #2]
 800b93e:	70c1      	strb	r1, [r0, #3]
 800b940:	1d03      	adds	r3, r0, #4
 800b942:	e7f1      	b.n	800b928 <__exponent+0x58>

0800b944 <_printf_float>:
 800b944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	b091      	sub	sp, #68	@ 0x44
 800b94a:	460c      	mov	r4, r1
 800b94c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b950:	4616      	mov	r6, r2
 800b952:	461f      	mov	r7, r3
 800b954:	4605      	mov	r5, r0
 800b956:	f000 fd11 	bl	800c37c <_localeconv_r>
 800b95a:	6803      	ldr	r3, [r0, #0]
 800b95c:	4618      	mov	r0, r3
 800b95e:	9308      	str	r3, [sp, #32]
 800b960:	f7f4 fbf6 	bl	8000150 <strlen>
 800b964:	2300      	movs	r3, #0
 800b966:	930e      	str	r3, [sp, #56]	@ 0x38
 800b968:	f8d8 3000 	ldr.w	r3, [r8]
 800b96c:	9009      	str	r0, [sp, #36]	@ 0x24
 800b96e:	3307      	adds	r3, #7
 800b970:	f023 0307 	bic.w	r3, r3, #7
 800b974:	f103 0208 	add.w	r2, r3, #8
 800b978:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b97c:	f8d4 b000 	ldr.w	fp, [r4]
 800b980:	f8c8 2000 	str.w	r2, [r8]
 800b984:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b988:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b98c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b98e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b992:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b99a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b99e:	4b9c      	ldr	r3, [pc, #624]	@ (800bc10 <_printf_float+0x2cc>)
 800b9a0:	f7f5 f834 	bl	8000a0c <__aeabi_dcmpun>
 800b9a4:	bb70      	cbnz	r0, 800ba04 <_printf_float+0xc0>
 800b9a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b9aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9ae:	4b98      	ldr	r3, [pc, #608]	@ (800bc10 <_printf_float+0x2cc>)
 800b9b0:	f7f5 f80e 	bl	80009d0 <__aeabi_dcmple>
 800b9b4:	bb30      	cbnz	r0, 800ba04 <_printf_float+0xc0>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	4649      	mov	r1, r9
 800b9be:	f7f4 fffd 	bl	80009bc <__aeabi_dcmplt>
 800b9c2:	b110      	cbz	r0, 800b9ca <_printf_float+0x86>
 800b9c4:	232d      	movs	r3, #45	@ 0x2d
 800b9c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9ca:	4a92      	ldr	r2, [pc, #584]	@ (800bc14 <_printf_float+0x2d0>)
 800b9cc:	4b92      	ldr	r3, [pc, #584]	@ (800bc18 <_printf_float+0x2d4>)
 800b9ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b9d2:	bf94      	ite	ls
 800b9d4:	4690      	movls	r8, r2
 800b9d6:	4698      	movhi	r8, r3
 800b9d8:	2303      	movs	r3, #3
 800b9da:	f04f 0900 	mov.w	r9, #0
 800b9de:	6123      	str	r3, [r4, #16]
 800b9e0:	f02b 0304 	bic.w	r3, fp, #4
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	4633      	mov	r3, r6
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	9700      	str	r7, [sp, #0]
 800b9ee:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b9f0:	f000 f9d4 	bl	800bd9c <_printf_common>
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	f040 8090 	bne.w	800bb1a <_printf_float+0x1d6>
 800b9fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9fe:	b011      	add	sp, #68	@ 0x44
 800ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba04:	4642      	mov	r2, r8
 800ba06:	464b      	mov	r3, r9
 800ba08:	4640      	mov	r0, r8
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f7f4 fffe 	bl	8000a0c <__aeabi_dcmpun>
 800ba10:	b148      	cbz	r0, 800ba26 <_printf_float+0xe2>
 800ba12:	464b      	mov	r3, r9
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	bfb8      	it	lt
 800ba18:	232d      	movlt	r3, #45	@ 0x2d
 800ba1a:	4a80      	ldr	r2, [pc, #512]	@ (800bc1c <_printf_float+0x2d8>)
 800ba1c:	bfb8      	it	lt
 800ba1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ba22:	4b7f      	ldr	r3, [pc, #508]	@ (800bc20 <_printf_float+0x2dc>)
 800ba24:	e7d3      	b.n	800b9ce <_printf_float+0x8a>
 800ba26:	6863      	ldr	r3, [r4, #4]
 800ba28:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	d13f      	bne.n	800bab0 <_printf_float+0x16c>
 800ba30:	2306      	movs	r3, #6
 800ba32:	6063      	str	r3, [r4, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800ba3a:	6023      	str	r3, [r4, #0]
 800ba3c:	9206      	str	r2, [sp, #24]
 800ba3e:	aa0e      	add	r2, sp, #56	@ 0x38
 800ba40:	e9cd a204 	strd	sl, r2, [sp, #16]
 800ba44:	aa0d      	add	r2, sp, #52	@ 0x34
 800ba46:	9203      	str	r2, [sp, #12]
 800ba48:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800ba4c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ba50:	6863      	ldr	r3, [r4, #4]
 800ba52:	4642      	mov	r2, r8
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	4628      	mov	r0, r5
 800ba58:	464b      	mov	r3, r9
 800ba5a:	910a      	str	r1, [sp, #40]	@ 0x28
 800ba5c:	f7ff fed4 	bl	800b808 <__cvt>
 800ba60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba62:	4680      	mov	r8, r0
 800ba64:	2947      	cmp	r1, #71	@ 0x47
 800ba66:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ba68:	d128      	bne.n	800babc <_printf_float+0x178>
 800ba6a:	1cc8      	adds	r0, r1, #3
 800ba6c:	db02      	blt.n	800ba74 <_printf_float+0x130>
 800ba6e:	6863      	ldr	r3, [r4, #4]
 800ba70:	4299      	cmp	r1, r3
 800ba72:	dd40      	ble.n	800baf6 <_printf_float+0x1b2>
 800ba74:	f1aa 0a02 	sub.w	sl, sl, #2
 800ba78:	fa5f fa8a 	uxtb.w	sl, sl
 800ba7c:	4652      	mov	r2, sl
 800ba7e:	3901      	subs	r1, #1
 800ba80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ba84:	910d      	str	r1, [sp, #52]	@ 0x34
 800ba86:	f7ff ff23 	bl	800b8d0 <__exponent>
 800ba8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba8c:	4681      	mov	r9, r0
 800ba8e:	1813      	adds	r3, r2, r0
 800ba90:	2a01      	cmp	r2, #1
 800ba92:	6123      	str	r3, [r4, #16]
 800ba94:	dc02      	bgt.n	800ba9c <_printf_float+0x158>
 800ba96:	6822      	ldr	r2, [r4, #0]
 800ba98:	07d2      	lsls	r2, r2, #31
 800ba9a:	d501      	bpl.n	800baa0 <_printf_float+0x15c>
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	6123      	str	r3, [r4, #16]
 800baa0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d09e      	beq.n	800b9e6 <_printf_float+0xa2>
 800baa8:	232d      	movs	r3, #45	@ 0x2d
 800baaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baae:	e79a      	b.n	800b9e6 <_printf_float+0xa2>
 800bab0:	2947      	cmp	r1, #71	@ 0x47
 800bab2:	d1bf      	bne.n	800ba34 <_printf_float+0xf0>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1bd      	bne.n	800ba34 <_printf_float+0xf0>
 800bab8:	2301      	movs	r3, #1
 800baba:	e7ba      	b.n	800ba32 <_printf_float+0xee>
 800babc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bac0:	d9dc      	bls.n	800ba7c <_printf_float+0x138>
 800bac2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bac6:	d118      	bne.n	800bafa <_printf_float+0x1b6>
 800bac8:	2900      	cmp	r1, #0
 800baca:	6863      	ldr	r3, [r4, #4]
 800bacc:	dd0b      	ble.n	800bae6 <_printf_float+0x1a2>
 800bace:	6121      	str	r1, [r4, #16]
 800bad0:	b913      	cbnz	r3, 800bad8 <_printf_float+0x194>
 800bad2:	6822      	ldr	r2, [r4, #0]
 800bad4:	07d0      	lsls	r0, r2, #31
 800bad6:	d502      	bpl.n	800bade <_printf_float+0x19a>
 800bad8:	3301      	adds	r3, #1
 800bada:	440b      	add	r3, r1
 800badc:	6123      	str	r3, [r4, #16]
 800bade:	f04f 0900 	mov.w	r9, #0
 800bae2:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bae4:	e7dc      	b.n	800baa0 <_printf_float+0x15c>
 800bae6:	b913      	cbnz	r3, 800baee <_printf_float+0x1aa>
 800bae8:	6822      	ldr	r2, [r4, #0]
 800baea:	07d2      	lsls	r2, r2, #31
 800baec:	d501      	bpl.n	800baf2 <_printf_float+0x1ae>
 800baee:	3302      	adds	r3, #2
 800baf0:	e7f4      	b.n	800badc <_printf_float+0x198>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7f2      	b.n	800badc <_printf_float+0x198>
 800baf6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bafa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bafc:	4299      	cmp	r1, r3
 800bafe:	db05      	blt.n	800bb0c <_printf_float+0x1c8>
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	6121      	str	r1, [r4, #16]
 800bb04:	07d8      	lsls	r0, r3, #31
 800bb06:	d5ea      	bpl.n	800bade <_printf_float+0x19a>
 800bb08:	1c4b      	adds	r3, r1, #1
 800bb0a:	e7e7      	b.n	800badc <_printf_float+0x198>
 800bb0c:	2900      	cmp	r1, #0
 800bb0e:	bfcc      	ite	gt
 800bb10:	2201      	movgt	r2, #1
 800bb12:	f1c1 0202 	rsble	r2, r1, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	e7e0      	b.n	800badc <_printf_float+0x198>
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	055a      	lsls	r2, r3, #21
 800bb1e:	d407      	bmi.n	800bb30 <_printf_float+0x1ec>
 800bb20:	6923      	ldr	r3, [r4, #16]
 800bb22:	4642      	mov	r2, r8
 800bb24:	4631      	mov	r1, r6
 800bb26:	4628      	mov	r0, r5
 800bb28:	47b8      	blx	r7
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	d12b      	bne.n	800bb86 <_printf_float+0x242>
 800bb2e:	e764      	b.n	800b9fa <_printf_float+0xb6>
 800bb30:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb34:	f240 80dc 	bls.w	800bcf0 <_printf_float+0x3ac>
 800bb38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f7f4 ff32 	bl	80009a8 <__aeabi_dcmpeq>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d033      	beq.n	800bbb0 <_printf_float+0x26c>
 800bb48:	2301      	movs	r3, #1
 800bb4a:	4631      	mov	r1, r6
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	4a35      	ldr	r2, [pc, #212]	@ (800bc24 <_printf_float+0x2e0>)
 800bb50:	47b8      	blx	r7
 800bb52:	3001      	adds	r0, #1
 800bb54:	f43f af51 	beq.w	800b9fa <_printf_float+0xb6>
 800bb58:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800bb5c:	4543      	cmp	r3, r8
 800bb5e:	db02      	blt.n	800bb66 <_printf_float+0x222>
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	07d8      	lsls	r0, r3, #31
 800bb64:	d50f      	bpl.n	800bb86 <_printf_float+0x242>
 800bb66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	47b8      	blx	r7
 800bb70:	3001      	adds	r0, #1
 800bb72:	f43f af42 	beq.w	800b9fa <_printf_float+0xb6>
 800bb76:	f04f 0900 	mov.w	r9, #0
 800bb7a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bb7e:	f104 0a1a 	add.w	sl, r4, #26
 800bb82:	45c8      	cmp	r8, r9
 800bb84:	dc09      	bgt.n	800bb9a <_printf_float+0x256>
 800bb86:	6823      	ldr	r3, [r4, #0]
 800bb88:	079b      	lsls	r3, r3, #30
 800bb8a:	f100 8102 	bmi.w	800bd92 <_printf_float+0x44e>
 800bb8e:	68e0      	ldr	r0, [r4, #12]
 800bb90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb92:	4298      	cmp	r0, r3
 800bb94:	bfb8      	it	lt
 800bb96:	4618      	movlt	r0, r3
 800bb98:	e731      	b.n	800b9fe <_printf_float+0xba>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	4652      	mov	r2, sl
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	f43f af28 	beq.w	800b9fa <_printf_float+0xb6>
 800bbaa:	f109 0901 	add.w	r9, r9, #1
 800bbae:	e7e8      	b.n	800bb82 <_printf_float+0x23e>
 800bbb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	dc38      	bgt.n	800bc28 <_printf_float+0x2e4>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4628      	mov	r0, r5
 800bbbc:	4a19      	ldr	r2, [pc, #100]	@ (800bc24 <_printf_float+0x2e0>)
 800bbbe:	47b8      	blx	r7
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	f43f af1a 	beq.w	800b9fa <_printf_float+0xb6>
 800bbc6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800bbca:	ea59 0303 	orrs.w	r3, r9, r3
 800bbce:	d102      	bne.n	800bbd6 <_printf_float+0x292>
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	07d9      	lsls	r1, r3, #31
 800bbd4:	d5d7      	bpl.n	800bb86 <_printf_float+0x242>
 800bbd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bbda:	4631      	mov	r1, r6
 800bbdc:	4628      	mov	r0, r5
 800bbde:	47b8      	blx	r7
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	f43f af0a 	beq.w	800b9fa <_printf_float+0xb6>
 800bbe6:	f04f 0a00 	mov.w	sl, #0
 800bbea:	f104 0b1a 	add.w	fp, r4, #26
 800bbee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbf0:	425b      	negs	r3, r3
 800bbf2:	4553      	cmp	r3, sl
 800bbf4:	dc01      	bgt.n	800bbfa <_printf_float+0x2b6>
 800bbf6:	464b      	mov	r3, r9
 800bbf8:	e793      	b.n	800bb22 <_printf_float+0x1de>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	465a      	mov	r2, fp
 800bbfe:	4631      	mov	r1, r6
 800bc00:	4628      	mov	r0, r5
 800bc02:	47b8      	blx	r7
 800bc04:	3001      	adds	r0, #1
 800bc06:	f43f aef8 	beq.w	800b9fa <_printf_float+0xb6>
 800bc0a:	f10a 0a01 	add.w	sl, sl, #1
 800bc0e:	e7ee      	b.n	800bbee <_printf_float+0x2aa>
 800bc10:	7fefffff 	.word	0x7fefffff
 800bc14:	0800e728 	.word	0x0800e728
 800bc18:	0800e72c 	.word	0x0800e72c
 800bc1c:	0800e730 	.word	0x0800e730
 800bc20:	0800e734 	.word	0x0800e734
 800bc24:	0800e738 	.word	0x0800e738
 800bc28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc2a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bc2e:	4553      	cmp	r3, sl
 800bc30:	bfa8      	it	ge
 800bc32:	4653      	movge	r3, sl
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	4699      	mov	r9, r3
 800bc38:	dc36      	bgt.n	800bca8 <_printf_float+0x364>
 800bc3a:	f04f 0b00 	mov.w	fp, #0
 800bc3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc42:	f104 021a 	add.w	r2, r4, #26
 800bc46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc48:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc4a:	eba3 0309 	sub.w	r3, r3, r9
 800bc4e:	455b      	cmp	r3, fp
 800bc50:	dc31      	bgt.n	800bcb6 <_printf_float+0x372>
 800bc52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc54:	459a      	cmp	sl, r3
 800bc56:	dc3a      	bgt.n	800bcce <_printf_float+0x38a>
 800bc58:	6823      	ldr	r3, [r4, #0]
 800bc5a:	07da      	lsls	r2, r3, #31
 800bc5c:	d437      	bmi.n	800bcce <_printf_float+0x38a>
 800bc5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc60:	ebaa 0903 	sub.w	r9, sl, r3
 800bc64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc66:	ebaa 0303 	sub.w	r3, sl, r3
 800bc6a:	4599      	cmp	r9, r3
 800bc6c:	bfa8      	it	ge
 800bc6e:	4699      	movge	r9, r3
 800bc70:	f1b9 0f00 	cmp.w	r9, #0
 800bc74:	dc33      	bgt.n	800bcde <_printf_float+0x39a>
 800bc76:	f04f 0800 	mov.w	r8, #0
 800bc7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc7e:	f104 0b1a 	add.w	fp, r4, #26
 800bc82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc84:	ebaa 0303 	sub.w	r3, sl, r3
 800bc88:	eba3 0309 	sub.w	r3, r3, r9
 800bc8c:	4543      	cmp	r3, r8
 800bc8e:	f77f af7a 	ble.w	800bb86 <_printf_float+0x242>
 800bc92:	2301      	movs	r3, #1
 800bc94:	465a      	mov	r2, fp
 800bc96:	4631      	mov	r1, r6
 800bc98:	4628      	mov	r0, r5
 800bc9a:	47b8      	blx	r7
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	f43f aeac 	beq.w	800b9fa <_printf_float+0xb6>
 800bca2:	f108 0801 	add.w	r8, r8, #1
 800bca6:	e7ec      	b.n	800bc82 <_printf_float+0x33e>
 800bca8:	4642      	mov	r2, r8
 800bcaa:	4631      	mov	r1, r6
 800bcac:	4628      	mov	r0, r5
 800bcae:	47b8      	blx	r7
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	d1c2      	bne.n	800bc3a <_printf_float+0x2f6>
 800bcb4:	e6a1      	b.n	800b9fa <_printf_float+0xb6>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4631      	mov	r1, r6
 800bcba:	4628      	mov	r0, r5
 800bcbc:	920a      	str	r2, [sp, #40]	@ 0x28
 800bcbe:	47b8      	blx	r7
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	f43f ae9a 	beq.w	800b9fa <_printf_float+0xb6>
 800bcc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcc8:	f10b 0b01 	add.w	fp, fp, #1
 800bccc:	e7bb      	b.n	800bc46 <_printf_float+0x302>
 800bcce:	4631      	mov	r1, r6
 800bcd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	47b8      	blx	r7
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d1c0      	bne.n	800bc5e <_printf_float+0x31a>
 800bcdc:	e68d      	b.n	800b9fa <_printf_float+0xb6>
 800bcde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bce0:	464b      	mov	r3, r9
 800bce2:	4631      	mov	r1, r6
 800bce4:	4628      	mov	r0, r5
 800bce6:	4442      	add	r2, r8
 800bce8:	47b8      	blx	r7
 800bcea:	3001      	adds	r0, #1
 800bcec:	d1c3      	bne.n	800bc76 <_printf_float+0x332>
 800bcee:	e684      	b.n	800b9fa <_printf_float+0xb6>
 800bcf0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bcf4:	f1ba 0f01 	cmp.w	sl, #1
 800bcf8:	dc01      	bgt.n	800bcfe <_printf_float+0x3ba>
 800bcfa:	07db      	lsls	r3, r3, #31
 800bcfc:	d536      	bpl.n	800bd6c <_printf_float+0x428>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	4642      	mov	r2, r8
 800bd02:	4631      	mov	r1, r6
 800bd04:	4628      	mov	r0, r5
 800bd06:	47b8      	blx	r7
 800bd08:	3001      	adds	r0, #1
 800bd0a:	f43f ae76 	beq.w	800b9fa <_printf_float+0xb6>
 800bd0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd12:	4631      	mov	r1, r6
 800bd14:	4628      	mov	r0, r5
 800bd16:	47b8      	blx	r7
 800bd18:	3001      	adds	r0, #1
 800bd1a:	f43f ae6e 	beq.w	800b9fa <_printf_float+0xb6>
 800bd1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd22:	2200      	movs	r2, #0
 800bd24:	2300      	movs	r3, #0
 800bd26:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bd2a:	f7f4 fe3d 	bl	80009a8 <__aeabi_dcmpeq>
 800bd2e:	b9c0      	cbnz	r0, 800bd62 <_printf_float+0x41e>
 800bd30:	4653      	mov	r3, sl
 800bd32:	f108 0201 	add.w	r2, r8, #1
 800bd36:	4631      	mov	r1, r6
 800bd38:	4628      	mov	r0, r5
 800bd3a:	47b8      	blx	r7
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	d10c      	bne.n	800bd5a <_printf_float+0x416>
 800bd40:	e65b      	b.n	800b9fa <_printf_float+0xb6>
 800bd42:	2301      	movs	r3, #1
 800bd44:	465a      	mov	r2, fp
 800bd46:	4631      	mov	r1, r6
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b8      	blx	r7
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	f43f ae54 	beq.w	800b9fa <_printf_float+0xb6>
 800bd52:	f108 0801 	add.w	r8, r8, #1
 800bd56:	45d0      	cmp	r8, sl
 800bd58:	dbf3      	blt.n	800bd42 <_printf_float+0x3fe>
 800bd5a:	464b      	mov	r3, r9
 800bd5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bd60:	e6e0      	b.n	800bb24 <_printf_float+0x1e0>
 800bd62:	f04f 0800 	mov.w	r8, #0
 800bd66:	f104 0b1a 	add.w	fp, r4, #26
 800bd6a:	e7f4      	b.n	800bd56 <_printf_float+0x412>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	4642      	mov	r2, r8
 800bd70:	e7e1      	b.n	800bd36 <_printf_float+0x3f2>
 800bd72:	2301      	movs	r3, #1
 800bd74:	464a      	mov	r2, r9
 800bd76:	4631      	mov	r1, r6
 800bd78:	4628      	mov	r0, r5
 800bd7a:	47b8      	blx	r7
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	f43f ae3c 	beq.w	800b9fa <_printf_float+0xb6>
 800bd82:	f108 0801 	add.w	r8, r8, #1
 800bd86:	68e3      	ldr	r3, [r4, #12]
 800bd88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bd8a:	1a5b      	subs	r3, r3, r1
 800bd8c:	4543      	cmp	r3, r8
 800bd8e:	dcf0      	bgt.n	800bd72 <_printf_float+0x42e>
 800bd90:	e6fd      	b.n	800bb8e <_printf_float+0x24a>
 800bd92:	f04f 0800 	mov.w	r8, #0
 800bd96:	f104 0919 	add.w	r9, r4, #25
 800bd9a:	e7f4      	b.n	800bd86 <_printf_float+0x442>

0800bd9c <_printf_common>:
 800bd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda0:	4616      	mov	r6, r2
 800bda2:	4698      	mov	r8, r3
 800bda4:	688a      	ldr	r2, [r1, #8]
 800bda6:	690b      	ldr	r3, [r1, #16]
 800bda8:	4607      	mov	r7, r0
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	bfb8      	it	lt
 800bdae:	4613      	movlt	r3, r2
 800bdb0:	6033      	str	r3, [r6, #0]
 800bdb2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdbc:	b10a      	cbz	r2, 800bdc2 <_printf_common+0x26>
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	6033      	str	r3, [r6, #0]
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	0699      	lsls	r1, r3, #26
 800bdc6:	bf42      	ittt	mi
 800bdc8:	6833      	ldrmi	r3, [r6, #0]
 800bdca:	3302      	addmi	r3, #2
 800bdcc:	6033      	strmi	r3, [r6, #0]
 800bdce:	6825      	ldr	r5, [r4, #0]
 800bdd0:	f015 0506 	ands.w	r5, r5, #6
 800bdd4:	d106      	bne.n	800bde4 <_printf_common+0x48>
 800bdd6:	f104 0a19 	add.w	sl, r4, #25
 800bdda:	68e3      	ldr	r3, [r4, #12]
 800bddc:	6832      	ldr	r2, [r6, #0]
 800bdde:	1a9b      	subs	r3, r3, r2
 800bde0:	42ab      	cmp	r3, r5
 800bde2:	dc2b      	bgt.n	800be3c <_printf_common+0xa0>
 800bde4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bde8:	6822      	ldr	r2, [r4, #0]
 800bdea:	3b00      	subs	r3, #0
 800bdec:	bf18      	it	ne
 800bdee:	2301      	movne	r3, #1
 800bdf0:	0692      	lsls	r2, r2, #26
 800bdf2:	d430      	bmi.n	800be56 <_printf_common+0xba>
 800bdf4:	4641      	mov	r1, r8
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bdfc:	47c8      	blx	r9
 800bdfe:	3001      	adds	r0, #1
 800be00:	d023      	beq.n	800be4a <_printf_common+0xae>
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	6922      	ldr	r2, [r4, #16]
 800be06:	f003 0306 	and.w	r3, r3, #6
 800be0a:	2b04      	cmp	r3, #4
 800be0c:	bf14      	ite	ne
 800be0e:	2500      	movne	r5, #0
 800be10:	6833      	ldreq	r3, [r6, #0]
 800be12:	f04f 0600 	mov.w	r6, #0
 800be16:	bf08      	it	eq
 800be18:	68e5      	ldreq	r5, [r4, #12]
 800be1a:	f104 041a 	add.w	r4, r4, #26
 800be1e:	bf08      	it	eq
 800be20:	1aed      	subeq	r5, r5, r3
 800be22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800be26:	bf08      	it	eq
 800be28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be2c:	4293      	cmp	r3, r2
 800be2e:	bfc4      	itt	gt
 800be30:	1a9b      	subgt	r3, r3, r2
 800be32:	18ed      	addgt	r5, r5, r3
 800be34:	42b5      	cmp	r5, r6
 800be36:	d11a      	bne.n	800be6e <_printf_common+0xd2>
 800be38:	2000      	movs	r0, #0
 800be3a:	e008      	b.n	800be4e <_printf_common+0xb2>
 800be3c:	2301      	movs	r3, #1
 800be3e:	4652      	mov	r2, sl
 800be40:	4641      	mov	r1, r8
 800be42:	4638      	mov	r0, r7
 800be44:	47c8      	blx	r9
 800be46:	3001      	adds	r0, #1
 800be48:	d103      	bne.n	800be52 <_printf_common+0xb6>
 800be4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be52:	3501      	adds	r5, #1
 800be54:	e7c1      	b.n	800bdda <_printf_common+0x3e>
 800be56:	2030      	movs	r0, #48	@ 0x30
 800be58:	18e1      	adds	r1, r4, r3
 800be5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be64:	4422      	add	r2, r4
 800be66:	3302      	adds	r3, #2
 800be68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be6c:	e7c2      	b.n	800bdf4 <_printf_common+0x58>
 800be6e:	2301      	movs	r3, #1
 800be70:	4622      	mov	r2, r4
 800be72:	4641      	mov	r1, r8
 800be74:	4638      	mov	r0, r7
 800be76:	47c8      	blx	r9
 800be78:	3001      	adds	r0, #1
 800be7a:	d0e6      	beq.n	800be4a <_printf_common+0xae>
 800be7c:	3601      	adds	r6, #1
 800be7e:	e7d9      	b.n	800be34 <_printf_common+0x98>

0800be80 <_printf_i>:
 800be80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be84:	7e0f      	ldrb	r7, [r1, #24]
 800be86:	4691      	mov	r9, r2
 800be88:	2f78      	cmp	r7, #120	@ 0x78
 800be8a:	4680      	mov	r8, r0
 800be8c:	460c      	mov	r4, r1
 800be8e:	469a      	mov	sl, r3
 800be90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be96:	d807      	bhi.n	800bea8 <_printf_i+0x28>
 800be98:	2f62      	cmp	r7, #98	@ 0x62
 800be9a:	d80a      	bhi.n	800beb2 <_printf_i+0x32>
 800be9c:	2f00      	cmp	r7, #0
 800be9e:	f000 80d3 	beq.w	800c048 <_printf_i+0x1c8>
 800bea2:	2f58      	cmp	r7, #88	@ 0x58
 800bea4:	f000 80ba 	beq.w	800c01c <_printf_i+0x19c>
 800bea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800beac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800beb0:	e03a      	b.n	800bf28 <_printf_i+0xa8>
 800beb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800beb6:	2b15      	cmp	r3, #21
 800beb8:	d8f6      	bhi.n	800bea8 <_printf_i+0x28>
 800beba:	a101      	add	r1, pc, #4	@ (adr r1, 800bec0 <_printf_i+0x40>)
 800bebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bec0:	0800bf19 	.word	0x0800bf19
 800bec4:	0800bf2d 	.word	0x0800bf2d
 800bec8:	0800bea9 	.word	0x0800bea9
 800becc:	0800bea9 	.word	0x0800bea9
 800bed0:	0800bea9 	.word	0x0800bea9
 800bed4:	0800bea9 	.word	0x0800bea9
 800bed8:	0800bf2d 	.word	0x0800bf2d
 800bedc:	0800bea9 	.word	0x0800bea9
 800bee0:	0800bea9 	.word	0x0800bea9
 800bee4:	0800bea9 	.word	0x0800bea9
 800bee8:	0800bea9 	.word	0x0800bea9
 800beec:	0800c02f 	.word	0x0800c02f
 800bef0:	0800bf57 	.word	0x0800bf57
 800bef4:	0800bfe9 	.word	0x0800bfe9
 800bef8:	0800bea9 	.word	0x0800bea9
 800befc:	0800bea9 	.word	0x0800bea9
 800bf00:	0800c051 	.word	0x0800c051
 800bf04:	0800bea9 	.word	0x0800bea9
 800bf08:	0800bf57 	.word	0x0800bf57
 800bf0c:	0800bea9 	.word	0x0800bea9
 800bf10:	0800bea9 	.word	0x0800bea9
 800bf14:	0800bff1 	.word	0x0800bff1
 800bf18:	6833      	ldr	r3, [r6, #0]
 800bf1a:	1d1a      	adds	r2, r3, #4
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6032      	str	r2, [r6, #0]
 800bf20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e09e      	b.n	800c06a <_printf_i+0x1ea>
 800bf2c:	6833      	ldr	r3, [r6, #0]
 800bf2e:	6820      	ldr	r0, [r4, #0]
 800bf30:	1d19      	adds	r1, r3, #4
 800bf32:	6031      	str	r1, [r6, #0]
 800bf34:	0606      	lsls	r6, r0, #24
 800bf36:	d501      	bpl.n	800bf3c <_printf_i+0xbc>
 800bf38:	681d      	ldr	r5, [r3, #0]
 800bf3a:	e003      	b.n	800bf44 <_printf_i+0xc4>
 800bf3c:	0645      	lsls	r5, r0, #25
 800bf3e:	d5fb      	bpl.n	800bf38 <_printf_i+0xb8>
 800bf40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf44:	2d00      	cmp	r5, #0
 800bf46:	da03      	bge.n	800bf50 <_printf_i+0xd0>
 800bf48:	232d      	movs	r3, #45	@ 0x2d
 800bf4a:	426d      	negs	r5, r5
 800bf4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf50:	230a      	movs	r3, #10
 800bf52:	4859      	ldr	r0, [pc, #356]	@ (800c0b8 <_printf_i+0x238>)
 800bf54:	e011      	b.n	800bf7a <_printf_i+0xfa>
 800bf56:	6821      	ldr	r1, [r4, #0]
 800bf58:	6833      	ldr	r3, [r6, #0]
 800bf5a:	0608      	lsls	r0, r1, #24
 800bf5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf60:	d402      	bmi.n	800bf68 <_printf_i+0xe8>
 800bf62:	0649      	lsls	r1, r1, #25
 800bf64:	bf48      	it	mi
 800bf66:	b2ad      	uxthmi	r5, r5
 800bf68:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf6a:	6033      	str	r3, [r6, #0]
 800bf6c:	bf14      	ite	ne
 800bf6e:	230a      	movne	r3, #10
 800bf70:	2308      	moveq	r3, #8
 800bf72:	4851      	ldr	r0, [pc, #324]	@ (800c0b8 <_printf_i+0x238>)
 800bf74:	2100      	movs	r1, #0
 800bf76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf7a:	6866      	ldr	r6, [r4, #4]
 800bf7c:	2e00      	cmp	r6, #0
 800bf7e:	bfa8      	it	ge
 800bf80:	6821      	ldrge	r1, [r4, #0]
 800bf82:	60a6      	str	r6, [r4, #8]
 800bf84:	bfa4      	itt	ge
 800bf86:	f021 0104 	bicge.w	r1, r1, #4
 800bf8a:	6021      	strge	r1, [r4, #0]
 800bf8c:	b90d      	cbnz	r5, 800bf92 <_printf_i+0x112>
 800bf8e:	2e00      	cmp	r6, #0
 800bf90:	d04b      	beq.n	800c02a <_printf_i+0x1aa>
 800bf92:	4616      	mov	r6, r2
 800bf94:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf98:	fb03 5711 	mls	r7, r3, r1, r5
 800bf9c:	5dc7      	ldrb	r7, [r0, r7]
 800bf9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfa2:	462f      	mov	r7, r5
 800bfa4:	42bb      	cmp	r3, r7
 800bfa6:	460d      	mov	r5, r1
 800bfa8:	d9f4      	bls.n	800bf94 <_printf_i+0x114>
 800bfaa:	2b08      	cmp	r3, #8
 800bfac:	d10b      	bne.n	800bfc6 <_printf_i+0x146>
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	07df      	lsls	r7, r3, #31
 800bfb2:	d508      	bpl.n	800bfc6 <_printf_i+0x146>
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	6861      	ldr	r1, [r4, #4]
 800bfb8:	4299      	cmp	r1, r3
 800bfba:	bfde      	ittt	le
 800bfbc:	2330      	movle	r3, #48	@ 0x30
 800bfbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfc2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bfc6:	1b92      	subs	r2, r2, r6
 800bfc8:	6122      	str	r2, [r4, #16]
 800bfca:	464b      	mov	r3, r9
 800bfcc:	4621      	mov	r1, r4
 800bfce:	4640      	mov	r0, r8
 800bfd0:	f8cd a000 	str.w	sl, [sp]
 800bfd4:	aa03      	add	r2, sp, #12
 800bfd6:	f7ff fee1 	bl	800bd9c <_printf_common>
 800bfda:	3001      	adds	r0, #1
 800bfdc:	d14a      	bne.n	800c074 <_printf_i+0x1f4>
 800bfde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfe2:	b004      	add	sp, #16
 800bfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	f043 0320 	orr.w	r3, r3, #32
 800bfee:	6023      	str	r3, [r4, #0]
 800bff0:	2778      	movs	r7, #120	@ 0x78
 800bff2:	4832      	ldr	r0, [pc, #200]	@ (800c0bc <_printf_i+0x23c>)
 800bff4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	6831      	ldr	r1, [r6, #0]
 800bffc:	061f      	lsls	r7, r3, #24
 800bffe:	f851 5b04 	ldr.w	r5, [r1], #4
 800c002:	d402      	bmi.n	800c00a <_printf_i+0x18a>
 800c004:	065f      	lsls	r7, r3, #25
 800c006:	bf48      	it	mi
 800c008:	b2ad      	uxthmi	r5, r5
 800c00a:	6031      	str	r1, [r6, #0]
 800c00c:	07d9      	lsls	r1, r3, #31
 800c00e:	bf44      	itt	mi
 800c010:	f043 0320 	orrmi.w	r3, r3, #32
 800c014:	6023      	strmi	r3, [r4, #0]
 800c016:	b11d      	cbz	r5, 800c020 <_printf_i+0x1a0>
 800c018:	2310      	movs	r3, #16
 800c01a:	e7ab      	b.n	800bf74 <_printf_i+0xf4>
 800c01c:	4826      	ldr	r0, [pc, #152]	@ (800c0b8 <_printf_i+0x238>)
 800c01e:	e7e9      	b.n	800bff4 <_printf_i+0x174>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	f023 0320 	bic.w	r3, r3, #32
 800c026:	6023      	str	r3, [r4, #0]
 800c028:	e7f6      	b.n	800c018 <_printf_i+0x198>
 800c02a:	4616      	mov	r6, r2
 800c02c:	e7bd      	b.n	800bfaa <_printf_i+0x12a>
 800c02e:	6833      	ldr	r3, [r6, #0]
 800c030:	6825      	ldr	r5, [r4, #0]
 800c032:	1d18      	adds	r0, r3, #4
 800c034:	6961      	ldr	r1, [r4, #20]
 800c036:	6030      	str	r0, [r6, #0]
 800c038:	062e      	lsls	r6, r5, #24
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	d501      	bpl.n	800c042 <_printf_i+0x1c2>
 800c03e:	6019      	str	r1, [r3, #0]
 800c040:	e002      	b.n	800c048 <_printf_i+0x1c8>
 800c042:	0668      	lsls	r0, r5, #25
 800c044:	d5fb      	bpl.n	800c03e <_printf_i+0x1be>
 800c046:	8019      	strh	r1, [r3, #0]
 800c048:	2300      	movs	r3, #0
 800c04a:	4616      	mov	r6, r2
 800c04c:	6123      	str	r3, [r4, #16]
 800c04e:	e7bc      	b.n	800bfca <_printf_i+0x14a>
 800c050:	6833      	ldr	r3, [r6, #0]
 800c052:	2100      	movs	r1, #0
 800c054:	1d1a      	adds	r2, r3, #4
 800c056:	6032      	str	r2, [r6, #0]
 800c058:	681e      	ldr	r6, [r3, #0]
 800c05a:	6862      	ldr	r2, [r4, #4]
 800c05c:	4630      	mov	r0, r6
 800c05e:	f000 fa28 	bl	800c4b2 <memchr>
 800c062:	b108      	cbz	r0, 800c068 <_printf_i+0x1e8>
 800c064:	1b80      	subs	r0, r0, r6
 800c066:	6060      	str	r0, [r4, #4]
 800c068:	6863      	ldr	r3, [r4, #4]
 800c06a:	6123      	str	r3, [r4, #16]
 800c06c:	2300      	movs	r3, #0
 800c06e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c072:	e7aa      	b.n	800bfca <_printf_i+0x14a>
 800c074:	4632      	mov	r2, r6
 800c076:	4649      	mov	r1, r9
 800c078:	4640      	mov	r0, r8
 800c07a:	6923      	ldr	r3, [r4, #16]
 800c07c:	47d0      	blx	sl
 800c07e:	3001      	adds	r0, #1
 800c080:	d0ad      	beq.n	800bfde <_printf_i+0x15e>
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	079b      	lsls	r3, r3, #30
 800c086:	d413      	bmi.n	800c0b0 <_printf_i+0x230>
 800c088:	68e0      	ldr	r0, [r4, #12]
 800c08a:	9b03      	ldr	r3, [sp, #12]
 800c08c:	4298      	cmp	r0, r3
 800c08e:	bfb8      	it	lt
 800c090:	4618      	movlt	r0, r3
 800c092:	e7a6      	b.n	800bfe2 <_printf_i+0x162>
 800c094:	2301      	movs	r3, #1
 800c096:	4632      	mov	r2, r6
 800c098:	4649      	mov	r1, r9
 800c09a:	4640      	mov	r0, r8
 800c09c:	47d0      	blx	sl
 800c09e:	3001      	adds	r0, #1
 800c0a0:	d09d      	beq.n	800bfde <_printf_i+0x15e>
 800c0a2:	3501      	adds	r5, #1
 800c0a4:	68e3      	ldr	r3, [r4, #12]
 800c0a6:	9903      	ldr	r1, [sp, #12]
 800c0a8:	1a5b      	subs	r3, r3, r1
 800c0aa:	42ab      	cmp	r3, r5
 800c0ac:	dcf2      	bgt.n	800c094 <_printf_i+0x214>
 800c0ae:	e7eb      	b.n	800c088 <_printf_i+0x208>
 800c0b0:	2500      	movs	r5, #0
 800c0b2:	f104 0619 	add.w	r6, r4, #25
 800c0b6:	e7f5      	b.n	800c0a4 <_printf_i+0x224>
 800c0b8:	0800e73a 	.word	0x0800e73a
 800c0bc:	0800e74b 	.word	0x0800e74b

0800c0c0 <std>:
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	b510      	push	{r4, lr}
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	e9c0 3300 	strd	r3, r3, [r0]
 800c0ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0ce:	6083      	str	r3, [r0, #8]
 800c0d0:	8181      	strh	r1, [r0, #12]
 800c0d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c0d4:	81c2      	strh	r2, [r0, #14]
 800c0d6:	6183      	str	r3, [r0, #24]
 800c0d8:	4619      	mov	r1, r3
 800c0da:	2208      	movs	r2, #8
 800c0dc:	305c      	adds	r0, #92	@ 0x5c
 800c0de:	f000 f914 	bl	800c30a <memset>
 800c0e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c118 <std+0x58>)
 800c0e4:	6224      	str	r4, [r4, #32]
 800c0e6:	6263      	str	r3, [r4, #36]	@ 0x24
 800c0e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c11c <std+0x5c>)
 800c0ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c120 <std+0x60>)
 800c0ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c0f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c124 <std+0x64>)
 800c0f2:	6323      	str	r3, [r4, #48]	@ 0x30
 800c0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c128 <std+0x68>)
 800c0f6:	429c      	cmp	r4, r3
 800c0f8:	d006      	beq.n	800c108 <std+0x48>
 800c0fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c0fe:	4294      	cmp	r4, r2
 800c100:	d002      	beq.n	800c108 <std+0x48>
 800c102:	33d0      	adds	r3, #208	@ 0xd0
 800c104:	429c      	cmp	r4, r3
 800c106:	d105      	bne.n	800c114 <std+0x54>
 800c108:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c110:	f000 b9cc 	b.w	800c4ac <__retarget_lock_init_recursive>
 800c114:	bd10      	pop	{r4, pc}
 800c116:	bf00      	nop
 800c118:	0800c285 	.word	0x0800c285
 800c11c:	0800c2a7 	.word	0x0800c2a7
 800c120:	0800c2df 	.word	0x0800c2df
 800c124:	0800c303 	.word	0x0800c303
 800c128:	2000262c 	.word	0x2000262c

0800c12c <stdio_exit_handler>:
 800c12c:	4a02      	ldr	r2, [pc, #8]	@ (800c138 <stdio_exit_handler+0xc>)
 800c12e:	4903      	ldr	r1, [pc, #12]	@ (800c13c <stdio_exit_handler+0x10>)
 800c130:	4803      	ldr	r0, [pc, #12]	@ (800c140 <stdio_exit_handler+0x14>)
 800c132:	f000 b869 	b.w	800c208 <_fwalk_sglue>
 800c136:	bf00      	nop
 800c138:	20000040 	.word	0x20000040
 800c13c:	0800dce1 	.word	0x0800dce1
 800c140:	20000050 	.word	0x20000050

0800c144 <cleanup_stdio>:
 800c144:	6841      	ldr	r1, [r0, #4]
 800c146:	4b0c      	ldr	r3, [pc, #48]	@ (800c178 <cleanup_stdio+0x34>)
 800c148:	b510      	push	{r4, lr}
 800c14a:	4299      	cmp	r1, r3
 800c14c:	4604      	mov	r4, r0
 800c14e:	d001      	beq.n	800c154 <cleanup_stdio+0x10>
 800c150:	f001 fdc6 	bl	800dce0 <_fflush_r>
 800c154:	68a1      	ldr	r1, [r4, #8]
 800c156:	4b09      	ldr	r3, [pc, #36]	@ (800c17c <cleanup_stdio+0x38>)
 800c158:	4299      	cmp	r1, r3
 800c15a:	d002      	beq.n	800c162 <cleanup_stdio+0x1e>
 800c15c:	4620      	mov	r0, r4
 800c15e:	f001 fdbf 	bl	800dce0 <_fflush_r>
 800c162:	68e1      	ldr	r1, [r4, #12]
 800c164:	4b06      	ldr	r3, [pc, #24]	@ (800c180 <cleanup_stdio+0x3c>)
 800c166:	4299      	cmp	r1, r3
 800c168:	d004      	beq.n	800c174 <cleanup_stdio+0x30>
 800c16a:	4620      	mov	r0, r4
 800c16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c170:	f001 bdb6 	b.w	800dce0 <_fflush_r>
 800c174:	bd10      	pop	{r4, pc}
 800c176:	bf00      	nop
 800c178:	2000262c 	.word	0x2000262c
 800c17c:	20002694 	.word	0x20002694
 800c180:	200026fc 	.word	0x200026fc

0800c184 <global_stdio_init.part.0>:
 800c184:	b510      	push	{r4, lr}
 800c186:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b4 <global_stdio_init.part.0+0x30>)
 800c188:	4c0b      	ldr	r4, [pc, #44]	@ (800c1b8 <global_stdio_init.part.0+0x34>)
 800c18a:	4a0c      	ldr	r2, [pc, #48]	@ (800c1bc <global_stdio_init.part.0+0x38>)
 800c18c:	4620      	mov	r0, r4
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	2104      	movs	r1, #4
 800c192:	2200      	movs	r2, #0
 800c194:	f7ff ff94 	bl	800c0c0 <std>
 800c198:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c19c:	2201      	movs	r2, #1
 800c19e:	2109      	movs	r1, #9
 800c1a0:	f7ff ff8e 	bl	800c0c0 <std>
 800c1a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ae:	2112      	movs	r1, #18
 800c1b0:	f7ff bf86 	b.w	800c0c0 <std>
 800c1b4:	20002764 	.word	0x20002764
 800c1b8:	2000262c 	.word	0x2000262c
 800c1bc:	0800c12d 	.word	0x0800c12d

0800c1c0 <__sfp_lock_acquire>:
 800c1c0:	4801      	ldr	r0, [pc, #4]	@ (800c1c8 <__sfp_lock_acquire+0x8>)
 800c1c2:	f000 b974 	b.w	800c4ae <__retarget_lock_acquire_recursive>
 800c1c6:	bf00      	nop
 800c1c8:	2000276d 	.word	0x2000276d

0800c1cc <__sfp_lock_release>:
 800c1cc:	4801      	ldr	r0, [pc, #4]	@ (800c1d4 <__sfp_lock_release+0x8>)
 800c1ce:	f000 b96f 	b.w	800c4b0 <__retarget_lock_release_recursive>
 800c1d2:	bf00      	nop
 800c1d4:	2000276d 	.word	0x2000276d

0800c1d8 <__sinit>:
 800c1d8:	b510      	push	{r4, lr}
 800c1da:	4604      	mov	r4, r0
 800c1dc:	f7ff fff0 	bl	800c1c0 <__sfp_lock_acquire>
 800c1e0:	6a23      	ldr	r3, [r4, #32]
 800c1e2:	b11b      	cbz	r3, 800c1ec <__sinit+0x14>
 800c1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1e8:	f7ff bff0 	b.w	800c1cc <__sfp_lock_release>
 800c1ec:	4b04      	ldr	r3, [pc, #16]	@ (800c200 <__sinit+0x28>)
 800c1ee:	6223      	str	r3, [r4, #32]
 800c1f0:	4b04      	ldr	r3, [pc, #16]	@ (800c204 <__sinit+0x2c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1f5      	bne.n	800c1e4 <__sinit+0xc>
 800c1f8:	f7ff ffc4 	bl	800c184 <global_stdio_init.part.0>
 800c1fc:	e7f2      	b.n	800c1e4 <__sinit+0xc>
 800c1fe:	bf00      	nop
 800c200:	0800c145 	.word	0x0800c145
 800c204:	20002764 	.word	0x20002764

0800c208 <_fwalk_sglue>:
 800c208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c20c:	4607      	mov	r7, r0
 800c20e:	4688      	mov	r8, r1
 800c210:	4614      	mov	r4, r2
 800c212:	2600      	movs	r6, #0
 800c214:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c218:	f1b9 0901 	subs.w	r9, r9, #1
 800c21c:	d505      	bpl.n	800c22a <_fwalk_sglue+0x22>
 800c21e:	6824      	ldr	r4, [r4, #0]
 800c220:	2c00      	cmp	r4, #0
 800c222:	d1f7      	bne.n	800c214 <_fwalk_sglue+0xc>
 800c224:	4630      	mov	r0, r6
 800c226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c22a:	89ab      	ldrh	r3, [r5, #12]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d907      	bls.n	800c240 <_fwalk_sglue+0x38>
 800c230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c234:	3301      	adds	r3, #1
 800c236:	d003      	beq.n	800c240 <_fwalk_sglue+0x38>
 800c238:	4629      	mov	r1, r5
 800c23a:	4638      	mov	r0, r7
 800c23c:	47c0      	blx	r8
 800c23e:	4306      	orrs	r6, r0
 800c240:	3568      	adds	r5, #104	@ 0x68
 800c242:	e7e9      	b.n	800c218 <_fwalk_sglue+0x10>

0800c244 <siprintf>:
 800c244:	b40e      	push	{r1, r2, r3}
 800c246:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c24a:	b500      	push	{lr}
 800c24c:	b09c      	sub	sp, #112	@ 0x70
 800c24e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c250:	9002      	str	r0, [sp, #8]
 800c252:	9006      	str	r0, [sp, #24]
 800c254:	9107      	str	r1, [sp, #28]
 800c256:	9104      	str	r1, [sp, #16]
 800c258:	4808      	ldr	r0, [pc, #32]	@ (800c27c <siprintf+0x38>)
 800c25a:	4909      	ldr	r1, [pc, #36]	@ (800c280 <siprintf+0x3c>)
 800c25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c260:	9105      	str	r1, [sp, #20]
 800c262:	6800      	ldr	r0, [r0, #0]
 800c264:	a902      	add	r1, sp, #8
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	f001 fbbe 	bl	800d9e8 <_svfiprintf_r>
 800c26c:	2200      	movs	r2, #0
 800c26e:	9b02      	ldr	r3, [sp, #8]
 800c270:	701a      	strb	r2, [r3, #0]
 800c272:	b01c      	add	sp, #112	@ 0x70
 800c274:	f85d eb04 	ldr.w	lr, [sp], #4
 800c278:	b003      	add	sp, #12
 800c27a:	4770      	bx	lr
 800c27c:	2000004c 	.word	0x2000004c
 800c280:	ffff0208 	.word	0xffff0208

0800c284 <__sread>:
 800c284:	b510      	push	{r4, lr}
 800c286:	460c      	mov	r4, r1
 800c288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c28c:	f000 f89c 	bl	800c3c8 <_read_r>
 800c290:	2800      	cmp	r0, #0
 800c292:	bfab      	itete	ge
 800c294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c296:	89a3      	ldrhlt	r3, [r4, #12]
 800c298:	181b      	addge	r3, r3, r0
 800c29a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c29e:	bfac      	ite	ge
 800c2a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c2a2:	81a3      	strhlt	r3, [r4, #12]
 800c2a4:	bd10      	pop	{r4, pc}

0800c2a6 <__swrite>:
 800c2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2aa:	461f      	mov	r7, r3
 800c2ac:	898b      	ldrh	r3, [r1, #12]
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	05db      	lsls	r3, r3, #23
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	4616      	mov	r6, r2
 800c2b6:	d505      	bpl.n	800c2c4 <__swrite+0x1e>
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c0:	f000 f870 	bl	800c3a4 <_lseek_r>
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	4632      	mov	r2, r6
 800c2c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2cc:	81a3      	strh	r3, [r4, #12]
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	463b      	mov	r3, r7
 800c2d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2da:	f000 b8ab 	b.w	800c434 <_write_r>

0800c2de <__sseek>:
 800c2de:	b510      	push	{r4, lr}
 800c2e0:	460c      	mov	r4, r1
 800c2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e6:	f000 f85d 	bl	800c3a4 <_lseek_r>
 800c2ea:	1c43      	adds	r3, r0, #1
 800c2ec:	89a3      	ldrh	r3, [r4, #12]
 800c2ee:	bf15      	itete	ne
 800c2f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c2f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c2f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c2fa:	81a3      	strheq	r3, [r4, #12]
 800c2fc:	bf18      	it	ne
 800c2fe:	81a3      	strhne	r3, [r4, #12]
 800c300:	bd10      	pop	{r4, pc}

0800c302 <__sclose>:
 800c302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c306:	f000 b83d 	b.w	800c384 <_close_r>

0800c30a <memset>:
 800c30a:	4603      	mov	r3, r0
 800c30c:	4402      	add	r2, r0
 800c30e:	4293      	cmp	r3, r2
 800c310:	d100      	bne.n	800c314 <memset+0xa>
 800c312:	4770      	bx	lr
 800c314:	f803 1b01 	strb.w	r1, [r3], #1
 800c318:	e7f9      	b.n	800c30e <memset+0x4>

0800c31a <_raise_r>:
 800c31a:	291f      	cmp	r1, #31
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4605      	mov	r5, r0
 800c320:	460c      	mov	r4, r1
 800c322:	d904      	bls.n	800c32e <_raise_r+0x14>
 800c324:	2316      	movs	r3, #22
 800c326:	6003      	str	r3, [r0, #0]
 800c328:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c32c:	bd38      	pop	{r3, r4, r5, pc}
 800c32e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c330:	b112      	cbz	r2, 800c338 <_raise_r+0x1e>
 800c332:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c336:	b94b      	cbnz	r3, 800c34c <_raise_r+0x32>
 800c338:	4628      	mov	r0, r5
 800c33a:	f000 f869 	bl	800c410 <_getpid_r>
 800c33e:	4622      	mov	r2, r4
 800c340:	4601      	mov	r1, r0
 800c342:	4628      	mov	r0, r5
 800c344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c348:	f000 b850 	b.w	800c3ec <_kill_r>
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d00a      	beq.n	800c366 <_raise_r+0x4c>
 800c350:	1c59      	adds	r1, r3, #1
 800c352:	d103      	bne.n	800c35c <_raise_r+0x42>
 800c354:	2316      	movs	r3, #22
 800c356:	6003      	str	r3, [r0, #0]
 800c358:	2001      	movs	r0, #1
 800c35a:	e7e7      	b.n	800c32c <_raise_r+0x12>
 800c35c:	2100      	movs	r1, #0
 800c35e:	4620      	mov	r0, r4
 800c360:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c364:	4798      	blx	r3
 800c366:	2000      	movs	r0, #0
 800c368:	e7e0      	b.n	800c32c <_raise_r+0x12>
	...

0800c36c <raise>:
 800c36c:	4b02      	ldr	r3, [pc, #8]	@ (800c378 <raise+0xc>)
 800c36e:	4601      	mov	r1, r0
 800c370:	6818      	ldr	r0, [r3, #0]
 800c372:	f7ff bfd2 	b.w	800c31a <_raise_r>
 800c376:	bf00      	nop
 800c378:	2000004c 	.word	0x2000004c

0800c37c <_localeconv_r>:
 800c37c:	4800      	ldr	r0, [pc, #0]	@ (800c380 <_localeconv_r+0x4>)
 800c37e:	4770      	bx	lr
 800c380:	2000018c 	.word	0x2000018c

0800c384 <_close_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	2300      	movs	r3, #0
 800c388:	4d05      	ldr	r5, [pc, #20]	@ (800c3a0 <_close_r+0x1c>)
 800c38a:	4604      	mov	r4, r0
 800c38c:	4608      	mov	r0, r1
 800c38e:	602b      	str	r3, [r5, #0]
 800c390:	f7f7 fcc9 	bl	8003d26 <_close>
 800c394:	1c43      	adds	r3, r0, #1
 800c396:	d102      	bne.n	800c39e <_close_r+0x1a>
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	b103      	cbz	r3, 800c39e <_close_r+0x1a>
 800c39c:	6023      	str	r3, [r4, #0]
 800c39e:	bd38      	pop	{r3, r4, r5, pc}
 800c3a0:	20002768 	.word	0x20002768

0800c3a4 <_lseek_r>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	4608      	mov	r0, r1
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4d05      	ldr	r5, [pc, #20]	@ (800c3c4 <_lseek_r+0x20>)
 800c3b0:	602a      	str	r2, [r5, #0]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f7f7 fcdb 	bl	8003d6e <_lseek>
 800c3b8:	1c43      	adds	r3, r0, #1
 800c3ba:	d102      	bne.n	800c3c2 <_lseek_r+0x1e>
 800c3bc:	682b      	ldr	r3, [r5, #0]
 800c3be:	b103      	cbz	r3, 800c3c2 <_lseek_r+0x1e>
 800c3c0:	6023      	str	r3, [r4, #0]
 800c3c2:	bd38      	pop	{r3, r4, r5, pc}
 800c3c4:	20002768 	.word	0x20002768

0800c3c8 <_read_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	4608      	mov	r0, r1
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	4d05      	ldr	r5, [pc, #20]	@ (800c3e8 <_read_r+0x20>)
 800c3d4:	602a      	str	r2, [r5, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f7f7 fc6c 	bl	8003cb4 <_read>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_read_r+0x1e>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_read_r+0x1e>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	20002768 	.word	0x20002768

0800c3ec <_kill_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	4d06      	ldr	r5, [pc, #24]	@ (800c40c <_kill_r+0x20>)
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	4608      	mov	r0, r1
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	602b      	str	r3, [r5, #0]
 800c3fa:	f7f7 fc40 	bl	8003c7e <_kill>
 800c3fe:	1c43      	adds	r3, r0, #1
 800c400:	d102      	bne.n	800c408 <_kill_r+0x1c>
 800c402:	682b      	ldr	r3, [r5, #0]
 800c404:	b103      	cbz	r3, 800c408 <_kill_r+0x1c>
 800c406:	6023      	str	r3, [r4, #0]
 800c408:	bd38      	pop	{r3, r4, r5, pc}
 800c40a:	bf00      	nop
 800c40c:	20002768 	.word	0x20002768

0800c410 <_getpid_r>:
 800c410:	f7f7 bc2e 	b.w	8003c70 <_getpid>

0800c414 <_sbrk_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	2300      	movs	r3, #0
 800c418:	4d05      	ldr	r5, [pc, #20]	@ (800c430 <_sbrk_r+0x1c>)
 800c41a:	4604      	mov	r4, r0
 800c41c:	4608      	mov	r0, r1
 800c41e:	602b      	str	r3, [r5, #0]
 800c420:	f7f7 fcb2 	bl	8003d88 <_sbrk>
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	d102      	bne.n	800c42e <_sbrk_r+0x1a>
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	b103      	cbz	r3, 800c42e <_sbrk_r+0x1a>
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
 800c430:	20002768 	.word	0x20002768

0800c434 <_write_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	4611      	mov	r1, r2
 800c43c:	2200      	movs	r2, #0
 800c43e:	4d05      	ldr	r5, [pc, #20]	@ (800c454 <_write_r+0x20>)
 800c440:	602a      	str	r2, [r5, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	f7f7 fc53 	bl	8003cee <_write>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d102      	bne.n	800c452 <_write_r+0x1e>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	b103      	cbz	r3, 800c452 <_write_r+0x1e>
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	20002768 	.word	0x20002768

0800c458 <__errno>:
 800c458:	4b01      	ldr	r3, [pc, #4]	@ (800c460 <__errno+0x8>)
 800c45a:	6818      	ldr	r0, [r3, #0]
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	2000004c 	.word	0x2000004c

0800c464 <__libc_init_array>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	2600      	movs	r6, #0
 800c468:	4d0c      	ldr	r5, [pc, #48]	@ (800c49c <__libc_init_array+0x38>)
 800c46a:	4c0d      	ldr	r4, [pc, #52]	@ (800c4a0 <__libc_init_array+0x3c>)
 800c46c:	1b64      	subs	r4, r4, r5
 800c46e:	10a4      	asrs	r4, r4, #2
 800c470:	42a6      	cmp	r6, r4
 800c472:	d109      	bne.n	800c488 <__libc_init_array+0x24>
 800c474:	f001 ff32 	bl	800e2dc <_init>
 800c478:	2600      	movs	r6, #0
 800c47a:	4d0a      	ldr	r5, [pc, #40]	@ (800c4a4 <__libc_init_array+0x40>)
 800c47c:	4c0a      	ldr	r4, [pc, #40]	@ (800c4a8 <__libc_init_array+0x44>)
 800c47e:	1b64      	subs	r4, r4, r5
 800c480:	10a4      	asrs	r4, r4, #2
 800c482:	42a6      	cmp	r6, r4
 800c484:	d105      	bne.n	800c492 <__libc_init_array+0x2e>
 800c486:	bd70      	pop	{r4, r5, r6, pc}
 800c488:	f855 3b04 	ldr.w	r3, [r5], #4
 800c48c:	4798      	blx	r3
 800c48e:	3601      	adds	r6, #1
 800c490:	e7ee      	b.n	800c470 <__libc_init_array+0xc>
 800c492:	f855 3b04 	ldr.w	r3, [r5], #4
 800c496:	4798      	blx	r3
 800c498:	3601      	adds	r6, #1
 800c49a:	e7f2      	b.n	800c482 <__libc_init_array+0x1e>
 800c49c:	0800eaa0 	.word	0x0800eaa0
 800c4a0:	0800eaa0 	.word	0x0800eaa0
 800c4a4:	0800eaa0 	.word	0x0800eaa0
 800c4a8:	0800eaa8 	.word	0x0800eaa8

0800c4ac <__retarget_lock_init_recursive>:
 800c4ac:	4770      	bx	lr

0800c4ae <__retarget_lock_acquire_recursive>:
 800c4ae:	4770      	bx	lr

0800c4b0 <__retarget_lock_release_recursive>:
 800c4b0:	4770      	bx	lr

0800c4b2 <memchr>:
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	b510      	push	{r4, lr}
 800c4b6:	b2c9      	uxtb	r1, r1
 800c4b8:	4402      	add	r2, r0
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	4618      	mov	r0, r3
 800c4be:	d101      	bne.n	800c4c4 <memchr+0x12>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	e003      	b.n	800c4cc <memchr+0x1a>
 800c4c4:	7804      	ldrb	r4, [r0, #0]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	428c      	cmp	r4, r1
 800c4ca:	d1f6      	bne.n	800c4ba <memchr+0x8>
 800c4cc:	bd10      	pop	{r4, pc}

0800c4ce <memcpy>:
 800c4ce:	440a      	add	r2, r1
 800c4d0:	4291      	cmp	r1, r2
 800c4d2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c4d6:	d100      	bne.n	800c4da <memcpy+0xc>
 800c4d8:	4770      	bx	lr
 800c4da:	b510      	push	{r4, lr}
 800c4dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4e0:	4291      	cmp	r1, r2
 800c4e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4e6:	d1f9      	bne.n	800c4dc <memcpy+0xe>
 800c4e8:	bd10      	pop	{r4, pc}

0800c4ea <quorem>:
 800c4ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ee:	6903      	ldr	r3, [r0, #16]
 800c4f0:	690c      	ldr	r4, [r1, #16]
 800c4f2:	4607      	mov	r7, r0
 800c4f4:	42a3      	cmp	r3, r4
 800c4f6:	db7e      	blt.n	800c5f6 <quorem+0x10c>
 800c4f8:	3c01      	subs	r4, #1
 800c4fa:	00a3      	lsls	r3, r4, #2
 800c4fc:	f100 0514 	add.w	r5, r0, #20
 800c500:	f101 0814 	add.w	r8, r1, #20
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c50a:	9301      	str	r3, [sp, #4]
 800c50c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c514:	3301      	adds	r3, #1
 800c516:	429a      	cmp	r2, r3
 800c518:	fbb2 f6f3 	udiv	r6, r2, r3
 800c51c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c520:	d32e      	bcc.n	800c580 <quorem+0x96>
 800c522:	f04f 0a00 	mov.w	sl, #0
 800c526:	46c4      	mov	ip, r8
 800c528:	46ae      	mov	lr, r5
 800c52a:	46d3      	mov	fp, sl
 800c52c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c530:	b298      	uxth	r0, r3
 800c532:	fb06 a000 	mla	r0, r6, r0, sl
 800c536:	0c1b      	lsrs	r3, r3, #16
 800c538:	0c02      	lsrs	r2, r0, #16
 800c53a:	fb06 2303 	mla	r3, r6, r3, r2
 800c53e:	f8de 2000 	ldr.w	r2, [lr]
 800c542:	b280      	uxth	r0, r0
 800c544:	b292      	uxth	r2, r2
 800c546:	1a12      	subs	r2, r2, r0
 800c548:	445a      	add	r2, fp
 800c54a:	f8de 0000 	ldr.w	r0, [lr]
 800c54e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c552:	b29b      	uxth	r3, r3
 800c554:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c558:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c55c:	b292      	uxth	r2, r2
 800c55e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c562:	45e1      	cmp	r9, ip
 800c564:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c568:	f84e 2b04 	str.w	r2, [lr], #4
 800c56c:	d2de      	bcs.n	800c52c <quorem+0x42>
 800c56e:	9b00      	ldr	r3, [sp, #0]
 800c570:	58eb      	ldr	r3, [r5, r3]
 800c572:	b92b      	cbnz	r3, 800c580 <quorem+0x96>
 800c574:	9b01      	ldr	r3, [sp, #4]
 800c576:	3b04      	subs	r3, #4
 800c578:	429d      	cmp	r5, r3
 800c57a:	461a      	mov	r2, r3
 800c57c:	d32f      	bcc.n	800c5de <quorem+0xf4>
 800c57e:	613c      	str	r4, [r7, #16]
 800c580:	4638      	mov	r0, r7
 800c582:	f001 f8c5 	bl	800d710 <__mcmp>
 800c586:	2800      	cmp	r0, #0
 800c588:	db25      	blt.n	800c5d6 <quorem+0xec>
 800c58a:	4629      	mov	r1, r5
 800c58c:	2000      	movs	r0, #0
 800c58e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c592:	f8d1 c000 	ldr.w	ip, [r1]
 800c596:	fa1f fe82 	uxth.w	lr, r2
 800c59a:	fa1f f38c 	uxth.w	r3, ip
 800c59e:	eba3 030e 	sub.w	r3, r3, lr
 800c5a2:	4403      	add	r3, r0
 800c5a4:	0c12      	lsrs	r2, r2, #16
 800c5a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c5aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5b4:	45c1      	cmp	r9, r8
 800c5b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c5ba:	f841 3b04 	str.w	r3, [r1], #4
 800c5be:	d2e6      	bcs.n	800c58e <quorem+0xa4>
 800c5c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5c8:	b922      	cbnz	r2, 800c5d4 <quorem+0xea>
 800c5ca:	3b04      	subs	r3, #4
 800c5cc:	429d      	cmp	r5, r3
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	d30b      	bcc.n	800c5ea <quorem+0x100>
 800c5d2:	613c      	str	r4, [r7, #16]
 800c5d4:	3601      	adds	r6, #1
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	b003      	add	sp, #12
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	6812      	ldr	r2, [r2, #0]
 800c5e0:	3b04      	subs	r3, #4
 800c5e2:	2a00      	cmp	r2, #0
 800c5e4:	d1cb      	bne.n	800c57e <quorem+0x94>
 800c5e6:	3c01      	subs	r4, #1
 800c5e8:	e7c6      	b.n	800c578 <quorem+0x8e>
 800c5ea:	6812      	ldr	r2, [r2, #0]
 800c5ec:	3b04      	subs	r3, #4
 800c5ee:	2a00      	cmp	r2, #0
 800c5f0:	d1ef      	bne.n	800c5d2 <quorem+0xe8>
 800c5f2:	3c01      	subs	r4, #1
 800c5f4:	e7ea      	b.n	800c5cc <quorem+0xe2>
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	e7ee      	b.n	800c5d8 <quorem+0xee>
 800c5fa:	0000      	movs	r0, r0
 800c5fc:	0000      	movs	r0, r0
	...

0800c600 <_dtoa_r>:
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	4614      	mov	r4, r2
 800c606:	461d      	mov	r5, r3
 800c608:	69c7      	ldr	r7, [r0, #28]
 800c60a:	b097      	sub	sp, #92	@ 0x5c
 800c60c:	4683      	mov	fp, r0
 800c60e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c612:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c614:	b97f      	cbnz	r7, 800c636 <_dtoa_r+0x36>
 800c616:	2010      	movs	r0, #16
 800c618:	f7ff f802 	bl	800b620 <malloc>
 800c61c:	4602      	mov	r2, r0
 800c61e:	f8cb 001c 	str.w	r0, [fp, #28]
 800c622:	b920      	cbnz	r0, 800c62e <_dtoa_r+0x2e>
 800c624:	21ef      	movs	r1, #239	@ 0xef
 800c626:	4ba8      	ldr	r3, [pc, #672]	@ (800c8c8 <_dtoa_r+0x2c8>)
 800c628:	48a8      	ldr	r0, [pc, #672]	@ (800c8cc <_dtoa_r+0x2cc>)
 800c62a:	f001 fb9b 	bl	800dd64 <__assert_func>
 800c62e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c632:	6007      	str	r7, [r0, #0]
 800c634:	60c7      	str	r7, [r0, #12]
 800c636:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c63a:	6819      	ldr	r1, [r3, #0]
 800c63c:	b159      	cbz	r1, 800c656 <_dtoa_r+0x56>
 800c63e:	685a      	ldr	r2, [r3, #4]
 800c640:	2301      	movs	r3, #1
 800c642:	4093      	lsls	r3, r2
 800c644:	604a      	str	r2, [r1, #4]
 800c646:	608b      	str	r3, [r1, #8]
 800c648:	4658      	mov	r0, fp
 800c64a:	f000 fe29 	bl	800d2a0 <_Bfree>
 800c64e:	2200      	movs	r2, #0
 800c650:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	1e2b      	subs	r3, r5, #0
 800c658:	bfaf      	iteee	ge
 800c65a:	2300      	movge	r3, #0
 800c65c:	2201      	movlt	r2, #1
 800c65e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c662:	9303      	strlt	r3, [sp, #12]
 800c664:	bfa8      	it	ge
 800c666:	6033      	strge	r3, [r6, #0]
 800c668:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c66c:	4b98      	ldr	r3, [pc, #608]	@ (800c8d0 <_dtoa_r+0x2d0>)
 800c66e:	bfb8      	it	lt
 800c670:	6032      	strlt	r2, [r6, #0]
 800c672:	ea33 0308 	bics.w	r3, r3, r8
 800c676:	d112      	bne.n	800c69e <_dtoa_r+0x9e>
 800c678:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c67c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c67e:	6013      	str	r3, [r2, #0]
 800c680:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c684:	4323      	orrs	r3, r4
 800c686:	f000 8550 	beq.w	800d12a <_dtoa_r+0xb2a>
 800c68a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c68c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c8d4 <_dtoa_r+0x2d4>
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 8552 	beq.w	800d13a <_dtoa_r+0xb3a>
 800c696:	f10a 0303 	add.w	r3, sl, #3
 800c69a:	f000 bd4c 	b.w	800d136 <_dtoa_r+0xb36>
 800c69e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c6a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f7f4 f97b 	bl	80009a8 <__aeabi_dcmpeq>
 800c6b2:	4607      	mov	r7, r0
 800c6b4:	b158      	cbz	r0, 800c6ce <_dtoa_r+0xce>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c6ba:	6013      	str	r3, [r2, #0]
 800c6bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c6be:	b113      	cbz	r3, 800c6c6 <_dtoa_r+0xc6>
 800c6c0:	4b85      	ldr	r3, [pc, #532]	@ (800c8d8 <_dtoa_r+0x2d8>)
 800c6c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c6c4:	6013      	str	r3, [r2, #0]
 800c6c6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c8dc <_dtoa_r+0x2dc>
 800c6ca:	f000 bd36 	b.w	800d13a <_dtoa_r+0xb3a>
 800c6ce:	ab14      	add	r3, sp, #80	@ 0x50
 800c6d0:	9301      	str	r3, [sp, #4]
 800c6d2:	ab15      	add	r3, sp, #84	@ 0x54
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	4658      	mov	r0, fp
 800c6d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c6dc:	f001 f8c8 	bl	800d870 <__d2b>
 800c6e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c6e4:	4681      	mov	r9, r0
 800c6e6:	2e00      	cmp	r6, #0
 800c6e8:	d077      	beq.n	800c7da <_dtoa_r+0x1da>
 800c6ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c6fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c700:	9712      	str	r7, [sp, #72]	@ 0x48
 800c702:	4619      	mov	r1, r3
 800c704:	2200      	movs	r2, #0
 800c706:	4b76      	ldr	r3, [pc, #472]	@ (800c8e0 <_dtoa_r+0x2e0>)
 800c708:	f7f3 fd2e 	bl	8000168 <__aeabi_dsub>
 800c70c:	a368      	add	r3, pc, #416	@ (adr r3, 800c8b0 <_dtoa_r+0x2b0>)
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	f7f3 fee1 	bl	80004d8 <__aeabi_dmul>
 800c716:	a368      	add	r3, pc, #416	@ (adr r3, 800c8b8 <_dtoa_r+0x2b8>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	f7f3 fd26 	bl	800016c <__adddf3>
 800c720:	4604      	mov	r4, r0
 800c722:	4630      	mov	r0, r6
 800c724:	460d      	mov	r5, r1
 800c726:	f7f3 fe6d 	bl	8000404 <__aeabi_i2d>
 800c72a:	a365      	add	r3, pc, #404	@ (adr r3, 800c8c0 <_dtoa_r+0x2c0>)
 800c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c730:	f7f3 fed2 	bl	80004d8 <__aeabi_dmul>
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	4620      	mov	r0, r4
 800c73a:	4629      	mov	r1, r5
 800c73c:	f7f3 fd16 	bl	800016c <__adddf3>
 800c740:	4604      	mov	r4, r0
 800c742:	460d      	mov	r5, r1
 800c744:	f7f4 f978 	bl	8000a38 <__aeabi_d2iz>
 800c748:	2200      	movs	r2, #0
 800c74a:	4607      	mov	r7, r0
 800c74c:	2300      	movs	r3, #0
 800c74e:	4620      	mov	r0, r4
 800c750:	4629      	mov	r1, r5
 800c752:	f7f4 f933 	bl	80009bc <__aeabi_dcmplt>
 800c756:	b140      	cbz	r0, 800c76a <_dtoa_r+0x16a>
 800c758:	4638      	mov	r0, r7
 800c75a:	f7f3 fe53 	bl	8000404 <__aeabi_i2d>
 800c75e:	4622      	mov	r2, r4
 800c760:	462b      	mov	r3, r5
 800c762:	f7f4 f921 	bl	80009a8 <__aeabi_dcmpeq>
 800c766:	b900      	cbnz	r0, 800c76a <_dtoa_r+0x16a>
 800c768:	3f01      	subs	r7, #1
 800c76a:	2f16      	cmp	r7, #22
 800c76c:	d853      	bhi.n	800c816 <_dtoa_r+0x216>
 800c76e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c772:	4b5c      	ldr	r3, [pc, #368]	@ (800c8e4 <_dtoa_r+0x2e4>)
 800c774:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77c:	f7f4 f91e 	bl	80009bc <__aeabi_dcmplt>
 800c780:	2800      	cmp	r0, #0
 800c782:	d04a      	beq.n	800c81a <_dtoa_r+0x21a>
 800c784:	2300      	movs	r3, #0
 800c786:	3f01      	subs	r7, #1
 800c788:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c78a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c78c:	1b9b      	subs	r3, r3, r6
 800c78e:	1e5a      	subs	r2, r3, #1
 800c790:	bf46      	itte	mi
 800c792:	f1c3 0801 	rsbmi	r8, r3, #1
 800c796:	2300      	movmi	r3, #0
 800c798:	f04f 0800 	movpl.w	r8, #0
 800c79c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c79e:	bf48      	it	mi
 800c7a0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c7a2:	2f00      	cmp	r7, #0
 800c7a4:	db3b      	blt.n	800c81e <_dtoa_r+0x21e>
 800c7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7a8:	970e      	str	r7, [sp, #56]	@ 0x38
 800c7aa:	443b      	add	r3, r7
 800c7ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c7b4:	2b09      	cmp	r3, #9
 800c7b6:	d866      	bhi.n	800c886 <_dtoa_r+0x286>
 800c7b8:	2b05      	cmp	r3, #5
 800c7ba:	bfc4      	itt	gt
 800c7bc:	3b04      	subgt	r3, #4
 800c7be:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c7c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c7c2:	bfc8      	it	gt
 800c7c4:	2400      	movgt	r4, #0
 800c7c6:	f1a3 0302 	sub.w	r3, r3, #2
 800c7ca:	bfd8      	it	le
 800c7cc:	2401      	movle	r4, #1
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d864      	bhi.n	800c89c <_dtoa_r+0x29c>
 800c7d2:	e8df f003 	tbb	[pc, r3]
 800c7d6:	382b      	.short	0x382b
 800c7d8:	5636      	.short	0x5636
 800c7da:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c7de:	441e      	add	r6, r3
 800c7e0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c7e4:	2b20      	cmp	r3, #32
 800c7e6:	bfc1      	itttt	gt
 800c7e8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c7ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800c7f0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c7f4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c7f8:	bfd6      	itet	le
 800c7fa:	f1c3 0320 	rsble	r3, r3, #32
 800c7fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800c802:	fa04 f003 	lslle.w	r0, r4, r3
 800c806:	f7f3 fded 	bl	80003e4 <__aeabi_ui2d>
 800c80a:	2201      	movs	r2, #1
 800c80c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c810:	3e01      	subs	r6, #1
 800c812:	9212      	str	r2, [sp, #72]	@ 0x48
 800c814:	e775      	b.n	800c702 <_dtoa_r+0x102>
 800c816:	2301      	movs	r3, #1
 800c818:	e7b6      	b.n	800c788 <_dtoa_r+0x188>
 800c81a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c81c:	e7b5      	b.n	800c78a <_dtoa_r+0x18a>
 800c81e:	427b      	negs	r3, r7
 800c820:	930a      	str	r3, [sp, #40]	@ 0x28
 800c822:	2300      	movs	r3, #0
 800c824:	eba8 0807 	sub.w	r8, r8, r7
 800c828:	930e      	str	r3, [sp, #56]	@ 0x38
 800c82a:	e7c2      	b.n	800c7b2 <_dtoa_r+0x1b2>
 800c82c:	2300      	movs	r3, #0
 800c82e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c830:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c832:	2b00      	cmp	r3, #0
 800c834:	dc35      	bgt.n	800c8a2 <_dtoa_r+0x2a2>
 800c836:	2301      	movs	r3, #1
 800c838:	461a      	mov	r2, r3
 800c83a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c83e:	9221      	str	r2, [sp, #132]	@ 0x84
 800c840:	e00b      	b.n	800c85a <_dtoa_r+0x25a>
 800c842:	2301      	movs	r3, #1
 800c844:	e7f3      	b.n	800c82e <_dtoa_r+0x22e>
 800c846:	2300      	movs	r3, #0
 800c848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c84a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c84c:	18fb      	adds	r3, r7, r3
 800c84e:	9308      	str	r3, [sp, #32]
 800c850:	3301      	adds	r3, #1
 800c852:	2b01      	cmp	r3, #1
 800c854:	9307      	str	r3, [sp, #28]
 800c856:	bfb8      	it	lt
 800c858:	2301      	movlt	r3, #1
 800c85a:	2100      	movs	r1, #0
 800c85c:	2204      	movs	r2, #4
 800c85e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c862:	f102 0514 	add.w	r5, r2, #20
 800c866:	429d      	cmp	r5, r3
 800c868:	d91f      	bls.n	800c8aa <_dtoa_r+0x2aa>
 800c86a:	6041      	str	r1, [r0, #4]
 800c86c:	4658      	mov	r0, fp
 800c86e:	f000 fcd7 	bl	800d220 <_Balloc>
 800c872:	4682      	mov	sl, r0
 800c874:	2800      	cmp	r0, #0
 800c876:	d139      	bne.n	800c8ec <_dtoa_r+0x2ec>
 800c878:	4602      	mov	r2, r0
 800c87a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c87e:	4b1a      	ldr	r3, [pc, #104]	@ (800c8e8 <_dtoa_r+0x2e8>)
 800c880:	e6d2      	b.n	800c628 <_dtoa_r+0x28>
 800c882:	2301      	movs	r3, #1
 800c884:	e7e0      	b.n	800c848 <_dtoa_r+0x248>
 800c886:	2401      	movs	r4, #1
 800c888:	2300      	movs	r3, #0
 800c88a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c88c:	9320      	str	r3, [sp, #128]	@ 0x80
 800c88e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c892:	2200      	movs	r2, #0
 800c894:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c898:	2312      	movs	r3, #18
 800c89a:	e7d0      	b.n	800c83e <_dtoa_r+0x23e>
 800c89c:	2301      	movs	r3, #1
 800c89e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8a0:	e7f5      	b.n	800c88e <_dtoa_r+0x28e>
 800c8a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c8a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c8a8:	e7d7      	b.n	800c85a <_dtoa_r+0x25a>
 800c8aa:	3101      	adds	r1, #1
 800c8ac:	0052      	lsls	r2, r2, #1
 800c8ae:	e7d8      	b.n	800c862 <_dtoa_r+0x262>
 800c8b0:	636f4361 	.word	0x636f4361
 800c8b4:	3fd287a7 	.word	0x3fd287a7
 800c8b8:	8b60c8b3 	.word	0x8b60c8b3
 800c8bc:	3fc68a28 	.word	0x3fc68a28
 800c8c0:	509f79fb 	.word	0x509f79fb
 800c8c4:	3fd34413 	.word	0x3fd34413
 800c8c8:	0800e769 	.word	0x0800e769
 800c8cc:	0800e780 	.word	0x0800e780
 800c8d0:	7ff00000 	.word	0x7ff00000
 800c8d4:	0800e765 	.word	0x0800e765
 800c8d8:	0800e739 	.word	0x0800e739
 800c8dc:	0800e738 	.word	0x0800e738
 800c8e0:	3ff80000 	.word	0x3ff80000
 800c8e4:	0800e878 	.word	0x0800e878
 800c8e8:	0800e7d8 	.word	0x0800e7d8
 800c8ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8f0:	6018      	str	r0, [r3, #0]
 800c8f2:	9b07      	ldr	r3, [sp, #28]
 800c8f4:	2b0e      	cmp	r3, #14
 800c8f6:	f200 80a4 	bhi.w	800ca42 <_dtoa_r+0x442>
 800c8fa:	2c00      	cmp	r4, #0
 800c8fc:	f000 80a1 	beq.w	800ca42 <_dtoa_r+0x442>
 800c900:	2f00      	cmp	r7, #0
 800c902:	dd33      	ble.n	800c96c <_dtoa_r+0x36c>
 800c904:	4b86      	ldr	r3, [pc, #536]	@ (800cb20 <_dtoa_r+0x520>)
 800c906:	f007 020f 	and.w	r2, r7, #15
 800c90a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c90e:	05f8      	lsls	r0, r7, #23
 800c910:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c914:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c918:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c91c:	d516      	bpl.n	800c94c <_dtoa_r+0x34c>
 800c91e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c922:	4b80      	ldr	r3, [pc, #512]	@ (800cb24 <_dtoa_r+0x524>)
 800c924:	2603      	movs	r6, #3
 800c926:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c92a:	f7f3 feff 	bl	800072c <__aeabi_ddiv>
 800c92e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c932:	f004 040f 	and.w	r4, r4, #15
 800c936:	4d7b      	ldr	r5, [pc, #492]	@ (800cb24 <_dtoa_r+0x524>)
 800c938:	b954      	cbnz	r4, 800c950 <_dtoa_r+0x350>
 800c93a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c93e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c942:	f7f3 fef3 	bl	800072c <__aeabi_ddiv>
 800c946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c94a:	e028      	b.n	800c99e <_dtoa_r+0x39e>
 800c94c:	2602      	movs	r6, #2
 800c94e:	e7f2      	b.n	800c936 <_dtoa_r+0x336>
 800c950:	07e1      	lsls	r1, r4, #31
 800c952:	d508      	bpl.n	800c966 <_dtoa_r+0x366>
 800c954:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c958:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c95c:	f7f3 fdbc 	bl	80004d8 <__aeabi_dmul>
 800c960:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c964:	3601      	adds	r6, #1
 800c966:	1064      	asrs	r4, r4, #1
 800c968:	3508      	adds	r5, #8
 800c96a:	e7e5      	b.n	800c938 <_dtoa_r+0x338>
 800c96c:	f000 80d2 	beq.w	800cb14 <_dtoa_r+0x514>
 800c970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c974:	427c      	negs	r4, r7
 800c976:	4b6a      	ldr	r3, [pc, #424]	@ (800cb20 <_dtoa_r+0x520>)
 800c978:	f004 020f 	and.w	r2, r4, #15
 800c97c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c984:	f7f3 fda8 	bl	80004d8 <__aeabi_dmul>
 800c988:	2602      	movs	r6, #2
 800c98a:	2300      	movs	r3, #0
 800c98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c990:	4d64      	ldr	r5, [pc, #400]	@ (800cb24 <_dtoa_r+0x524>)
 800c992:	1124      	asrs	r4, r4, #4
 800c994:	2c00      	cmp	r4, #0
 800c996:	f040 80b2 	bne.w	800cafe <_dtoa_r+0x4fe>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d1d3      	bne.n	800c946 <_dtoa_r+0x346>
 800c99e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c9a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f000 80b7 	beq.w	800cb18 <_dtoa_r+0x518>
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	4629      	mov	r1, r5
 800c9b0:	4b5d      	ldr	r3, [pc, #372]	@ (800cb28 <_dtoa_r+0x528>)
 800c9b2:	f7f4 f803 	bl	80009bc <__aeabi_dcmplt>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	f000 80ae 	beq.w	800cb18 <_dtoa_r+0x518>
 800c9bc:	9b07      	ldr	r3, [sp, #28]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f000 80aa 	beq.w	800cb18 <_dtoa_r+0x518>
 800c9c4:	9b08      	ldr	r3, [sp, #32]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	dd37      	ble.n	800ca3a <_dtoa_r+0x43a>
 800c9ca:	1e7b      	subs	r3, r7, #1
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	9304      	str	r3, [sp, #16]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	4b55      	ldr	r3, [pc, #340]	@ (800cb2c <_dtoa_r+0x52c>)
 800c9d6:	f7f3 fd7f 	bl	80004d8 <__aeabi_dmul>
 800c9da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9de:	9c08      	ldr	r4, [sp, #32]
 800c9e0:	3601      	adds	r6, #1
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f7f3 fd0e 	bl	8000404 <__aeabi_i2d>
 800c9e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9ec:	f7f3 fd74 	bl	80004d8 <__aeabi_dmul>
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	4b4f      	ldr	r3, [pc, #316]	@ (800cb30 <_dtoa_r+0x530>)
 800c9f4:	f7f3 fbba 	bl	800016c <__adddf3>
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c9fe:	2c00      	cmp	r4, #0
 800ca00:	f040 809a 	bne.w	800cb38 <_dtoa_r+0x538>
 800ca04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	4b4a      	ldr	r3, [pc, #296]	@ (800cb34 <_dtoa_r+0x534>)
 800ca0c:	f7f3 fbac 	bl	8000168 <__aeabi_dsub>
 800ca10:	4602      	mov	r2, r0
 800ca12:	460b      	mov	r3, r1
 800ca14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca18:	462a      	mov	r2, r5
 800ca1a:	4633      	mov	r3, r6
 800ca1c:	f7f3 ffec 	bl	80009f8 <__aeabi_dcmpgt>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	f040 828e 	bne.w	800cf42 <_dtoa_r+0x942>
 800ca26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca2a:	462a      	mov	r2, r5
 800ca2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ca30:	f7f3 ffc4 	bl	80009bc <__aeabi_dcmplt>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	f040 8127 	bne.w	800cc88 <_dtoa_r+0x688>
 800ca3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ca3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ca42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f2c0 8163 	blt.w	800cd10 <_dtoa_r+0x710>
 800ca4a:	2f0e      	cmp	r7, #14
 800ca4c:	f300 8160 	bgt.w	800cd10 <_dtoa_r+0x710>
 800ca50:	4b33      	ldr	r3, [pc, #204]	@ (800cb20 <_dtoa_r+0x520>)
 800ca52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca56:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ca5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ca5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	da03      	bge.n	800ca6c <_dtoa_r+0x46c>
 800ca64:	9b07      	ldr	r3, [sp, #28]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f340 8100 	ble.w	800cc6c <_dtoa_r+0x66c>
 800ca6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca70:	4656      	mov	r6, sl
 800ca72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca76:	4620      	mov	r0, r4
 800ca78:	4629      	mov	r1, r5
 800ca7a:	f7f3 fe57 	bl	800072c <__aeabi_ddiv>
 800ca7e:	f7f3 ffdb 	bl	8000a38 <__aeabi_d2iz>
 800ca82:	4680      	mov	r8, r0
 800ca84:	f7f3 fcbe 	bl	8000404 <__aeabi_i2d>
 800ca88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca8c:	f7f3 fd24 	bl	80004d8 <__aeabi_dmul>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	4620      	mov	r0, r4
 800ca96:	4629      	mov	r1, r5
 800ca98:	f7f3 fb66 	bl	8000168 <__aeabi_dsub>
 800ca9c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800caa0:	9d07      	ldr	r5, [sp, #28]
 800caa2:	f806 4b01 	strb.w	r4, [r6], #1
 800caa6:	eba6 040a 	sub.w	r4, r6, sl
 800caaa:	42a5      	cmp	r5, r4
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	f040 8116 	bne.w	800cce0 <_dtoa_r+0x6e0>
 800cab4:	f7f3 fb5a 	bl	800016c <__adddf3>
 800cab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cabc:	4604      	mov	r4, r0
 800cabe:	460d      	mov	r5, r1
 800cac0:	f7f3 ff9a 	bl	80009f8 <__aeabi_dcmpgt>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	f040 80f8 	bne.w	800ccba <_dtoa_r+0x6ba>
 800caca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cace:	4620      	mov	r0, r4
 800cad0:	4629      	mov	r1, r5
 800cad2:	f7f3 ff69 	bl	80009a8 <__aeabi_dcmpeq>
 800cad6:	b118      	cbz	r0, 800cae0 <_dtoa_r+0x4e0>
 800cad8:	f018 0f01 	tst.w	r8, #1
 800cadc:	f040 80ed 	bne.w	800ccba <_dtoa_r+0x6ba>
 800cae0:	4649      	mov	r1, r9
 800cae2:	4658      	mov	r0, fp
 800cae4:	f000 fbdc 	bl	800d2a0 <_Bfree>
 800cae8:	2300      	movs	r3, #0
 800caea:	7033      	strb	r3, [r6, #0]
 800caec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800caee:	3701      	adds	r7, #1
 800caf0:	601f      	str	r7, [r3, #0]
 800caf2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f000 8320 	beq.w	800d13a <_dtoa_r+0xb3a>
 800cafa:	601e      	str	r6, [r3, #0]
 800cafc:	e31d      	b.n	800d13a <_dtoa_r+0xb3a>
 800cafe:	07e2      	lsls	r2, r4, #31
 800cb00:	d505      	bpl.n	800cb0e <_dtoa_r+0x50e>
 800cb02:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb06:	f7f3 fce7 	bl	80004d8 <__aeabi_dmul>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	3601      	adds	r6, #1
 800cb0e:	1064      	asrs	r4, r4, #1
 800cb10:	3508      	adds	r5, #8
 800cb12:	e73f      	b.n	800c994 <_dtoa_r+0x394>
 800cb14:	2602      	movs	r6, #2
 800cb16:	e742      	b.n	800c99e <_dtoa_r+0x39e>
 800cb18:	9c07      	ldr	r4, [sp, #28]
 800cb1a:	9704      	str	r7, [sp, #16]
 800cb1c:	e761      	b.n	800c9e2 <_dtoa_r+0x3e2>
 800cb1e:	bf00      	nop
 800cb20:	0800e878 	.word	0x0800e878
 800cb24:	0800e850 	.word	0x0800e850
 800cb28:	3ff00000 	.word	0x3ff00000
 800cb2c:	40240000 	.word	0x40240000
 800cb30:	401c0000 	.word	0x401c0000
 800cb34:	40140000 	.word	0x40140000
 800cb38:	4b70      	ldr	r3, [pc, #448]	@ (800ccfc <_dtoa_r+0x6fc>)
 800cb3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb44:	4454      	add	r4, sl
 800cb46:	2900      	cmp	r1, #0
 800cb48:	d045      	beq.n	800cbd6 <_dtoa_r+0x5d6>
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	496c      	ldr	r1, [pc, #432]	@ (800cd00 <_dtoa_r+0x700>)
 800cb4e:	f7f3 fded 	bl	800072c <__aeabi_ddiv>
 800cb52:	4633      	mov	r3, r6
 800cb54:	462a      	mov	r2, r5
 800cb56:	f7f3 fb07 	bl	8000168 <__aeabi_dsub>
 800cb5a:	4656      	mov	r6, sl
 800cb5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb64:	f7f3 ff68 	bl	8000a38 <__aeabi_d2iz>
 800cb68:	4605      	mov	r5, r0
 800cb6a:	f7f3 fc4b 	bl	8000404 <__aeabi_i2d>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb76:	f7f3 faf7 	bl	8000168 <__aeabi_dsub>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	3530      	adds	r5, #48	@ 0x30
 800cb80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb88:	f806 5b01 	strb.w	r5, [r6], #1
 800cb8c:	f7f3 ff16 	bl	80009bc <__aeabi_dcmplt>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d163      	bne.n	800cc5c <_dtoa_r+0x65c>
 800cb94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb98:	2000      	movs	r0, #0
 800cb9a:	495a      	ldr	r1, [pc, #360]	@ (800cd04 <_dtoa_r+0x704>)
 800cb9c:	f7f3 fae4 	bl	8000168 <__aeabi_dsub>
 800cba0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cba4:	f7f3 ff0a 	bl	80009bc <__aeabi_dcmplt>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	f040 8087 	bne.w	800ccbc <_dtoa_r+0x6bc>
 800cbae:	42a6      	cmp	r6, r4
 800cbb0:	f43f af43 	beq.w	800ca3a <_dtoa_r+0x43a>
 800cbb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cbb8:	2200      	movs	r2, #0
 800cbba:	4b53      	ldr	r3, [pc, #332]	@ (800cd08 <_dtoa_r+0x708>)
 800cbbc:	f7f3 fc8c 	bl	80004d8 <__aeabi_dmul>
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cbc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbca:	4b4f      	ldr	r3, [pc, #316]	@ (800cd08 <_dtoa_r+0x708>)
 800cbcc:	f7f3 fc84 	bl	80004d8 <__aeabi_dmul>
 800cbd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbd4:	e7c4      	b.n	800cb60 <_dtoa_r+0x560>
 800cbd6:	4631      	mov	r1, r6
 800cbd8:	4628      	mov	r0, r5
 800cbda:	f7f3 fc7d 	bl	80004d8 <__aeabi_dmul>
 800cbde:	4656      	mov	r6, sl
 800cbe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cbe4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cbe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbea:	f7f3 ff25 	bl	8000a38 <__aeabi_d2iz>
 800cbee:	4605      	mov	r5, r0
 800cbf0:	f7f3 fc08 	bl	8000404 <__aeabi_i2d>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbfc:	f7f3 fab4 	bl	8000168 <__aeabi_dsub>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	3530      	adds	r5, #48	@ 0x30
 800cc06:	f806 5b01 	strb.w	r5, [r6], #1
 800cc0a:	42a6      	cmp	r6, r4
 800cc0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc10:	f04f 0200 	mov.w	r2, #0
 800cc14:	d124      	bne.n	800cc60 <_dtoa_r+0x660>
 800cc16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc1a:	4b39      	ldr	r3, [pc, #228]	@ (800cd00 <_dtoa_r+0x700>)
 800cc1c:	f7f3 faa6 	bl	800016c <__adddf3>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc28:	f7f3 fee6 	bl	80009f8 <__aeabi_dcmpgt>
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	d145      	bne.n	800ccbc <_dtoa_r+0x6bc>
 800cc30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc34:	2000      	movs	r0, #0
 800cc36:	4932      	ldr	r1, [pc, #200]	@ (800cd00 <_dtoa_r+0x700>)
 800cc38:	f7f3 fa96 	bl	8000168 <__aeabi_dsub>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc44:	f7f3 feba 	bl	80009bc <__aeabi_dcmplt>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	f43f aef6 	beq.w	800ca3a <_dtoa_r+0x43a>
 800cc4e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cc50:	1e73      	subs	r3, r6, #1
 800cc52:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc58:	2b30      	cmp	r3, #48	@ 0x30
 800cc5a:	d0f8      	beq.n	800cc4e <_dtoa_r+0x64e>
 800cc5c:	9f04      	ldr	r7, [sp, #16]
 800cc5e:	e73f      	b.n	800cae0 <_dtoa_r+0x4e0>
 800cc60:	4b29      	ldr	r3, [pc, #164]	@ (800cd08 <_dtoa_r+0x708>)
 800cc62:	f7f3 fc39 	bl	80004d8 <__aeabi_dmul>
 800cc66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc6a:	e7bc      	b.n	800cbe6 <_dtoa_r+0x5e6>
 800cc6c:	d10c      	bne.n	800cc88 <_dtoa_r+0x688>
 800cc6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc72:	2200      	movs	r2, #0
 800cc74:	4b25      	ldr	r3, [pc, #148]	@ (800cd0c <_dtoa_r+0x70c>)
 800cc76:	f7f3 fc2f 	bl	80004d8 <__aeabi_dmul>
 800cc7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc7e:	f7f3 feb1 	bl	80009e4 <__aeabi_dcmpge>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	f000 815b 	beq.w	800cf3e <_dtoa_r+0x93e>
 800cc88:	2400      	movs	r4, #0
 800cc8a:	4625      	mov	r5, r4
 800cc8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc8e:	4656      	mov	r6, sl
 800cc90:	43db      	mvns	r3, r3
 800cc92:	9304      	str	r3, [sp, #16]
 800cc94:	2700      	movs	r7, #0
 800cc96:	4621      	mov	r1, r4
 800cc98:	4658      	mov	r0, fp
 800cc9a:	f000 fb01 	bl	800d2a0 <_Bfree>
 800cc9e:	2d00      	cmp	r5, #0
 800cca0:	d0dc      	beq.n	800cc5c <_dtoa_r+0x65c>
 800cca2:	b12f      	cbz	r7, 800ccb0 <_dtoa_r+0x6b0>
 800cca4:	42af      	cmp	r7, r5
 800cca6:	d003      	beq.n	800ccb0 <_dtoa_r+0x6b0>
 800cca8:	4639      	mov	r1, r7
 800ccaa:	4658      	mov	r0, fp
 800ccac:	f000 faf8 	bl	800d2a0 <_Bfree>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4658      	mov	r0, fp
 800ccb4:	f000 faf4 	bl	800d2a0 <_Bfree>
 800ccb8:	e7d0      	b.n	800cc5c <_dtoa_r+0x65c>
 800ccba:	9704      	str	r7, [sp, #16]
 800ccbc:	4633      	mov	r3, r6
 800ccbe:	461e      	mov	r6, r3
 800ccc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccc4:	2a39      	cmp	r2, #57	@ 0x39
 800ccc6:	d107      	bne.n	800ccd8 <_dtoa_r+0x6d8>
 800ccc8:	459a      	cmp	sl, r3
 800ccca:	d1f8      	bne.n	800ccbe <_dtoa_r+0x6be>
 800cccc:	9a04      	ldr	r2, [sp, #16]
 800ccce:	3201      	adds	r2, #1
 800ccd0:	9204      	str	r2, [sp, #16]
 800ccd2:	2230      	movs	r2, #48	@ 0x30
 800ccd4:	f88a 2000 	strb.w	r2, [sl]
 800ccd8:	781a      	ldrb	r2, [r3, #0]
 800ccda:	3201      	adds	r2, #1
 800ccdc:	701a      	strb	r2, [r3, #0]
 800ccde:	e7bd      	b.n	800cc5c <_dtoa_r+0x65c>
 800cce0:	2200      	movs	r2, #0
 800cce2:	4b09      	ldr	r3, [pc, #36]	@ (800cd08 <_dtoa_r+0x708>)
 800cce4:	f7f3 fbf8 	bl	80004d8 <__aeabi_dmul>
 800cce8:	2200      	movs	r2, #0
 800ccea:	2300      	movs	r3, #0
 800ccec:	4604      	mov	r4, r0
 800ccee:	460d      	mov	r5, r1
 800ccf0:	f7f3 fe5a 	bl	80009a8 <__aeabi_dcmpeq>
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	f43f aebc 	beq.w	800ca72 <_dtoa_r+0x472>
 800ccfa:	e6f1      	b.n	800cae0 <_dtoa_r+0x4e0>
 800ccfc:	0800e878 	.word	0x0800e878
 800cd00:	3fe00000 	.word	0x3fe00000
 800cd04:	3ff00000 	.word	0x3ff00000
 800cd08:	40240000 	.word	0x40240000
 800cd0c:	40140000 	.word	0x40140000
 800cd10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cd12:	2a00      	cmp	r2, #0
 800cd14:	f000 80db 	beq.w	800cece <_dtoa_r+0x8ce>
 800cd18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cd1a:	2a01      	cmp	r2, #1
 800cd1c:	f300 80bf 	bgt.w	800ce9e <_dtoa_r+0x89e>
 800cd20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cd22:	2a00      	cmp	r2, #0
 800cd24:	f000 80b7 	beq.w	800ce96 <_dtoa_r+0x896>
 800cd28:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cd2c:	4646      	mov	r6, r8
 800cd2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cd30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd32:	2101      	movs	r1, #1
 800cd34:	441a      	add	r2, r3
 800cd36:	4658      	mov	r0, fp
 800cd38:	4498      	add	r8, r3
 800cd3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd3c:	f000 fb64 	bl	800d408 <__i2b>
 800cd40:	4605      	mov	r5, r0
 800cd42:	b15e      	cbz	r6, 800cd5c <_dtoa_r+0x75c>
 800cd44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	dd08      	ble.n	800cd5c <_dtoa_r+0x75c>
 800cd4a:	42b3      	cmp	r3, r6
 800cd4c:	bfa8      	it	ge
 800cd4e:	4633      	movge	r3, r6
 800cd50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd52:	eba8 0803 	sub.w	r8, r8, r3
 800cd56:	1af6      	subs	r6, r6, r3
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd5e:	b1f3      	cbz	r3, 800cd9e <_dtoa_r+0x79e>
 800cd60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f000 80b7 	beq.w	800ced6 <_dtoa_r+0x8d6>
 800cd68:	b18c      	cbz	r4, 800cd8e <_dtoa_r+0x78e>
 800cd6a:	4629      	mov	r1, r5
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	4658      	mov	r0, fp
 800cd70:	f000 fc08 	bl	800d584 <__pow5mult>
 800cd74:	464a      	mov	r2, r9
 800cd76:	4601      	mov	r1, r0
 800cd78:	4605      	mov	r5, r0
 800cd7a:	4658      	mov	r0, fp
 800cd7c:	f000 fb5a 	bl	800d434 <__multiply>
 800cd80:	4649      	mov	r1, r9
 800cd82:	9004      	str	r0, [sp, #16]
 800cd84:	4658      	mov	r0, fp
 800cd86:	f000 fa8b 	bl	800d2a0 <_Bfree>
 800cd8a:	9b04      	ldr	r3, [sp, #16]
 800cd8c:	4699      	mov	r9, r3
 800cd8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd90:	1b1a      	subs	r2, r3, r4
 800cd92:	d004      	beq.n	800cd9e <_dtoa_r+0x79e>
 800cd94:	4649      	mov	r1, r9
 800cd96:	4658      	mov	r0, fp
 800cd98:	f000 fbf4 	bl	800d584 <__pow5mult>
 800cd9c:	4681      	mov	r9, r0
 800cd9e:	2101      	movs	r1, #1
 800cda0:	4658      	mov	r0, fp
 800cda2:	f000 fb31 	bl	800d408 <__i2b>
 800cda6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cda8:	4604      	mov	r4, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 81c9 	beq.w	800d142 <_dtoa_r+0xb42>
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	4601      	mov	r1, r0
 800cdb4:	4658      	mov	r0, fp
 800cdb6:	f000 fbe5 	bl	800d584 <__pow5mult>
 800cdba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	f300 808f 	bgt.w	800cee2 <_dtoa_r+0x8e2>
 800cdc4:	9b02      	ldr	r3, [sp, #8]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f040 8087 	bne.w	800ceda <_dtoa_r+0x8da>
 800cdcc:	9b03      	ldr	r3, [sp, #12]
 800cdce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f040 8083 	bne.w	800cede <_dtoa_r+0x8de>
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cdde:	0d1b      	lsrs	r3, r3, #20
 800cde0:	051b      	lsls	r3, r3, #20
 800cde2:	b12b      	cbz	r3, 800cdf0 <_dtoa_r+0x7f0>
 800cde4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cde6:	f108 0801 	add.w	r8, r8, #1
 800cdea:	3301      	adds	r3, #1
 800cdec:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdee:	2301      	movs	r3, #1
 800cdf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f000 81aa 	beq.w	800d14e <_dtoa_r+0xb4e>
 800cdfa:	6923      	ldr	r3, [r4, #16]
 800cdfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce00:	6918      	ldr	r0, [r3, #16]
 800ce02:	f000 fab5 	bl	800d370 <__hi0bits>
 800ce06:	f1c0 0020 	rsb	r0, r0, #32
 800ce0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce0c:	4418      	add	r0, r3
 800ce0e:	f010 001f 	ands.w	r0, r0, #31
 800ce12:	d071      	beq.n	800cef8 <_dtoa_r+0x8f8>
 800ce14:	f1c0 0320 	rsb	r3, r0, #32
 800ce18:	2b04      	cmp	r3, #4
 800ce1a:	dd65      	ble.n	800cee8 <_dtoa_r+0x8e8>
 800ce1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce1e:	f1c0 001c 	rsb	r0, r0, #28
 800ce22:	4403      	add	r3, r0
 800ce24:	4480      	add	r8, r0
 800ce26:	4406      	add	r6, r0
 800ce28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce2a:	f1b8 0f00 	cmp.w	r8, #0
 800ce2e:	dd05      	ble.n	800ce3c <_dtoa_r+0x83c>
 800ce30:	4649      	mov	r1, r9
 800ce32:	4642      	mov	r2, r8
 800ce34:	4658      	mov	r0, fp
 800ce36:	f000 fbff 	bl	800d638 <__lshift>
 800ce3a:	4681      	mov	r9, r0
 800ce3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	dd05      	ble.n	800ce4e <_dtoa_r+0x84e>
 800ce42:	4621      	mov	r1, r4
 800ce44:	461a      	mov	r2, r3
 800ce46:	4658      	mov	r0, fp
 800ce48:	f000 fbf6 	bl	800d638 <__lshift>
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d053      	beq.n	800cefc <_dtoa_r+0x8fc>
 800ce54:	4621      	mov	r1, r4
 800ce56:	4648      	mov	r0, r9
 800ce58:	f000 fc5a 	bl	800d710 <__mcmp>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	da4d      	bge.n	800cefc <_dtoa_r+0x8fc>
 800ce60:	1e7b      	subs	r3, r7, #1
 800ce62:	4649      	mov	r1, r9
 800ce64:	9304      	str	r3, [sp, #16]
 800ce66:	220a      	movs	r2, #10
 800ce68:	2300      	movs	r3, #0
 800ce6a:	4658      	mov	r0, fp
 800ce6c:	f000 fa3a 	bl	800d2e4 <__multadd>
 800ce70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce72:	4681      	mov	r9, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f000 816c 	beq.w	800d152 <_dtoa_r+0xb52>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	4629      	mov	r1, r5
 800ce7e:	220a      	movs	r2, #10
 800ce80:	4658      	mov	r0, fp
 800ce82:	f000 fa2f 	bl	800d2e4 <__multadd>
 800ce86:	9b08      	ldr	r3, [sp, #32]
 800ce88:	4605      	mov	r5, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	dc61      	bgt.n	800cf52 <_dtoa_r+0x952>
 800ce8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ce90:	2b02      	cmp	r3, #2
 800ce92:	dc3b      	bgt.n	800cf0c <_dtoa_r+0x90c>
 800ce94:	e05d      	b.n	800cf52 <_dtoa_r+0x952>
 800ce96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce98:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ce9c:	e746      	b.n	800cd2c <_dtoa_r+0x72c>
 800ce9e:	9b07      	ldr	r3, [sp, #28]
 800cea0:	1e5c      	subs	r4, r3, #1
 800cea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cea4:	42a3      	cmp	r3, r4
 800cea6:	bfbf      	itttt	lt
 800cea8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ceaa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800ceac:	1ae3      	sublt	r3, r4, r3
 800ceae:	18d2      	addlt	r2, r2, r3
 800ceb0:	bfa8      	it	ge
 800ceb2:	1b1c      	subge	r4, r3, r4
 800ceb4:	9b07      	ldr	r3, [sp, #28]
 800ceb6:	bfbe      	ittt	lt
 800ceb8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ceba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800cebc:	2400      	movlt	r4, #0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	bfb5      	itete	lt
 800cec2:	eba8 0603 	sublt.w	r6, r8, r3
 800cec6:	4646      	movge	r6, r8
 800cec8:	2300      	movlt	r3, #0
 800ceca:	9b07      	ldrge	r3, [sp, #28]
 800cecc:	e730      	b.n	800cd30 <_dtoa_r+0x730>
 800cece:	4646      	mov	r6, r8
 800ced0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ced2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ced4:	e735      	b.n	800cd42 <_dtoa_r+0x742>
 800ced6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ced8:	e75c      	b.n	800cd94 <_dtoa_r+0x794>
 800ceda:	2300      	movs	r3, #0
 800cedc:	e788      	b.n	800cdf0 <_dtoa_r+0x7f0>
 800cede:	9b02      	ldr	r3, [sp, #8]
 800cee0:	e786      	b.n	800cdf0 <_dtoa_r+0x7f0>
 800cee2:	2300      	movs	r3, #0
 800cee4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cee6:	e788      	b.n	800cdfa <_dtoa_r+0x7fa>
 800cee8:	d09f      	beq.n	800ce2a <_dtoa_r+0x82a>
 800ceea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceec:	331c      	adds	r3, #28
 800ceee:	441a      	add	r2, r3
 800cef0:	4498      	add	r8, r3
 800cef2:	441e      	add	r6, r3
 800cef4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cef6:	e798      	b.n	800ce2a <_dtoa_r+0x82a>
 800cef8:	4603      	mov	r3, r0
 800cefa:	e7f6      	b.n	800ceea <_dtoa_r+0x8ea>
 800cefc:	9b07      	ldr	r3, [sp, #28]
 800cefe:	9704      	str	r7, [sp, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	dc20      	bgt.n	800cf46 <_dtoa_r+0x946>
 800cf04:	9308      	str	r3, [sp, #32]
 800cf06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	dd1e      	ble.n	800cf4a <_dtoa_r+0x94a>
 800cf0c:	9b08      	ldr	r3, [sp, #32]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f47f aebc 	bne.w	800cc8c <_dtoa_r+0x68c>
 800cf14:	4621      	mov	r1, r4
 800cf16:	2205      	movs	r2, #5
 800cf18:	4658      	mov	r0, fp
 800cf1a:	f000 f9e3 	bl	800d2e4 <__multadd>
 800cf1e:	4601      	mov	r1, r0
 800cf20:	4604      	mov	r4, r0
 800cf22:	4648      	mov	r0, r9
 800cf24:	f000 fbf4 	bl	800d710 <__mcmp>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	f77f aeaf 	ble.w	800cc8c <_dtoa_r+0x68c>
 800cf2e:	2331      	movs	r3, #49	@ 0x31
 800cf30:	4656      	mov	r6, sl
 800cf32:	f806 3b01 	strb.w	r3, [r6], #1
 800cf36:	9b04      	ldr	r3, [sp, #16]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	9304      	str	r3, [sp, #16]
 800cf3c:	e6aa      	b.n	800cc94 <_dtoa_r+0x694>
 800cf3e:	9c07      	ldr	r4, [sp, #28]
 800cf40:	9704      	str	r7, [sp, #16]
 800cf42:	4625      	mov	r5, r4
 800cf44:	e7f3      	b.n	800cf2e <_dtoa_r+0x92e>
 800cf46:	9b07      	ldr	r3, [sp, #28]
 800cf48:	9308      	str	r3, [sp, #32]
 800cf4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 8104 	beq.w	800d15a <_dtoa_r+0xb5a>
 800cf52:	2e00      	cmp	r6, #0
 800cf54:	dd05      	ble.n	800cf62 <_dtoa_r+0x962>
 800cf56:	4629      	mov	r1, r5
 800cf58:	4632      	mov	r2, r6
 800cf5a:	4658      	mov	r0, fp
 800cf5c:	f000 fb6c 	bl	800d638 <__lshift>
 800cf60:	4605      	mov	r5, r0
 800cf62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d05a      	beq.n	800d01e <_dtoa_r+0xa1e>
 800cf68:	4658      	mov	r0, fp
 800cf6a:	6869      	ldr	r1, [r5, #4]
 800cf6c:	f000 f958 	bl	800d220 <_Balloc>
 800cf70:	4606      	mov	r6, r0
 800cf72:	b928      	cbnz	r0, 800cf80 <_dtoa_r+0x980>
 800cf74:	4602      	mov	r2, r0
 800cf76:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf7a:	4b83      	ldr	r3, [pc, #524]	@ (800d188 <_dtoa_r+0xb88>)
 800cf7c:	f7ff bb54 	b.w	800c628 <_dtoa_r+0x28>
 800cf80:	692a      	ldr	r2, [r5, #16]
 800cf82:	f105 010c 	add.w	r1, r5, #12
 800cf86:	3202      	adds	r2, #2
 800cf88:	0092      	lsls	r2, r2, #2
 800cf8a:	300c      	adds	r0, #12
 800cf8c:	f7ff fa9f 	bl	800c4ce <memcpy>
 800cf90:	2201      	movs	r2, #1
 800cf92:	4631      	mov	r1, r6
 800cf94:	4658      	mov	r0, fp
 800cf96:	f000 fb4f 	bl	800d638 <__lshift>
 800cf9a:	462f      	mov	r7, r5
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	f10a 0301 	add.w	r3, sl, #1
 800cfa2:	9307      	str	r3, [sp, #28]
 800cfa4:	9b08      	ldr	r3, [sp, #32]
 800cfa6:	4453      	add	r3, sl
 800cfa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfaa:	9b02      	ldr	r3, [sp, #8]
 800cfac:	f003 0301 	and.w	r3, r3, #1
 800cfb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfb2:	9b07      	ldr	r3, [sp, #28]
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	4648      	mov	r0, r9
 800cfba:	9302      	str	r3, [sp, #8]
 800cfbc:	f7ff fa95 	bl	800c4ea <quorem>
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	9008      	str	r0, [sp, #32]
 800cfc4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cfc8:	4648      	mov	r0, r9
 800cfca:	f000 fba1 	bl	800d710 <__mcmp>
 800cfce:	462a      	mov	r2, r5
 800cfd0:	9009      	str	r0, [sp, #36]	@ 0x24
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	4658      	mov	r0, fp
 800cfd6:	f000 fbb7 	bl	800d748 <__mdiff>
 800cfda:	68c2      	ldr	r2, [r0, #12]
 800cfdc:	4606      	mov	r6, r0
 800cfde:	bb02      	cbnz	r2, 800d022 <_dtoa_r+0xa22>
 800cfe0:	4601      	mov	r1, r0
 800cfe2:	4648      	mov	r0, r9
 800cfe4:	f000 fb94 	bl	800d710 <__mcmp>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	4631      	mov	r1, r6
 800cfec:	4658      	mov	r0, fp
 800cfee:	920c      	str	r2, [sp, #48]	@ 0x30
 800cff0:	f000 f956 	bl	800d2a0 <_Bfree>
 800cff4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cff6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cff8:	9e07      	ldr	r6, [sp, #28]
 800cffa:	ea43 0102 	orr.w	r1, r3, r2
 800cffe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d000:	4319      	orrs	r1, r3
 800d002:	d110      	bne.n	800d026 <_dtoa_r+0xa26>
 800d004:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d008:	d029      	beq.n	800d05e <_dtoa_r+0xa5e>
 800d00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	dd02      	ble.n	800d016 <_dtoa_r+0xa16>
 800d010:	9b08      	ldr	r3, [sp, #32]
 800d012:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d016:	9b02      	ldr	r3, [sp, #8]
 800d018:	f883 8000 	strb.w	r8, [r3]
 800d01c:	e63b      	b.n	800cc96 <_dtoa_r+0x696>
 800d01e:	4628      	mov	r0, r5
 800d020:	e7bb      	b.n	800cf9a <_dtoa_r+0x99a>
 800d022:	2201      	movs	r2, #1
 800d024:	e7e1      	b.n	800cfea <_dtoa_r+0x9ea>
 800d026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d028:	2b00      	cmp	r3, #0
 800d02a:	db04      	blt.n	800d036 <_dtoa_r+0xa36>
 800d02c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800d02e:	430b      	orrs	r3, r1
 800d030:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d032:	430b      	orrs	r3, r1
 800d034:	d120      	bne.n	800d078 <_dtoa_r+0xa78>
 800d036:	2a00      	cmp	r2, #0
 800d038:	dded      	ble.n	800d016 <_dtoa_r+0xa16>
 800d03a:	4649      	mov	r1, r9
 800d03c:	2201      	movs	r2, #1
 800d03e:	4658      	mov	r0, fp
 800d040:	f000 fafa 	bl	800d638 <__lshift>
 800d044:	4621      	mov	r1, r4
 800d046:	4681      	mov	r9, r0
 800d048:	f000 fb62 	bl	800d710 <__mcmp>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	dc03      	bgt.n	800d058 <_dtoa_r+0xa58>
 800d050:	d1e1      	bne.n	800d016 <_dtoa_r+0xa16>
 800d052:	f018 0f01 	tst.w	r8, #1
 800d056:	d0de      	beq.n	800d016 <_dtoa_r+0xa16>
 800d058:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d05c:	d1d8      	bne.n	800d010 <_dtoa_r+0xa10>
 800d05e:	2339      	movs	r3, #57	@ 0x39
 800d060:	9a02      	ldr	r2, [sp, #8]
 800d062:	7013      	strb	r3, [r2, #0]
 800d064:	4633      	mov	r3, r6
 800d066:	461e      	mov	r6, r3
 800d068:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d06c:	3b01      	subs	r3, #1
 800d06e:	2a39      	cmp	r2, #57	@ 0x39
 800d070:	d052      	beq.n	800d118 <_dtoa_r+0xb18>
 800d072:	3201      	adds	r2, #1
 800d074:	701a      	strb	r2, [r3, #0]
 800d076:	e60e      	b.n	800cc96 <_dtoa_r+0x696>
 800d078:	2a00      	cmp	r2, #0
 800d07a:	dd07      	ble.n	800d08c <_dtoa_r+0xa8c>
 800d07c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d080:	d0ed      	beq.n	800d05e <_dtoa_r+0xa5e>
 800d082:	9a02      	ldr	r2, [sp, #8]
 800d084:	f108 0301 	add.w	r3, r8, #1
 800d088:	7013      	strb	r3, [r2, #0]
 800d08a:	e604      	b.n	800cc96 <_dtoa_r+0x696>
 800d08c:	9b07      	ldr	r3, [sp, #28]
 800d08e:	9a07      	ldr	r2, [sp, #28]
 800d090:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d094:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d096:	4293      	cmp	r3, r2
 800d098:	d028      	beq.n	800d0ec <_dtoa_r+0xaec>
 800d09a:	4649      	mov	r1, r9
 800d09c:	2300      	movs	r3, #0
 800d09e:	220a      	movs	r2, #10
 800d0a0:	4658      	mov	r0, fp
 800d0a2:	f000 f91f 	bl	800d2e4 <__multadd>
 800d0a6:	42af      	cmp	r7, r5
 800d0a8:	4681      	mov	r9, r0
 800d0aa:	f04f 0300 	mov.w	r3, #0
 800d0ae:	f04f 020a 	mov.w	r2, #10
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	4658      	mov	r0, fp
 800d0b6:	d107      	bne.n	800d0c8 <_dtoa_r+0xac8>
 800d0b8:	f000 f914 	bl	800d2e4 <__multadd>
 800d0bc:	4607      	mov	r7, r0
 800d0be:	4605      	mov	r5, r0
 800d0c0:	9b07      	ldr	r3, [sp, #28]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	9307      	str	r3, [sp, #28]
 800d0c6:	e774      	b.n	800cfb2 <_dtoa_r+0x9b2>
 800d0c8:	f000 f90c 	bl	800d2e4 <__multadd>
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	4607      	mov	r7, r0
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	220a      	movs	r2, #10
 800d0d4:	4658      	mov	r0, fp
 800d0d6:	f000 f905 	bl	800d2e4 <__multadd>
 800d0da:	4605      	mov	r5, r0
 800d0dc:	e7f0      	b.n	800d0c0 <_dtoa_r+0xac0>
 800d0de:	9b08      	ldr	r3, [sp, #32]
 800d0e0:	2700      	movs	r7, #0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	bfcc      	ite	gt
 800d0e6:	461e      	movgt	r6, r3
 800d0e8:	2601      	movle	r6, #1
 800d0ea:	4456      	add	r6, sl
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	4658      	mov	r0, fp
 800d0f2:	f000 faa1 	bl	800d638 <__lshift>
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	4681      	mov	r9, r0
 800d0fa:	f000 fb09 	bl	800d710 <__mcmp>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	dcb0      	bgt.n	800d064 <_dtoa_r+0xa64>
 800d102:	d102      	bne.n	800d10a <_dtoa_r+0xb0a>
 800d104:	f018 0f01 	tst.w	r8, #1
 800d108:	d1ac      	bne.n	800d064 <_dtoa_r+0xa64>
 800d10a:	4633      	mov	r3, r6
 800d10c:	461e      	mov	r6, r3
 800d10e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d112:	2a30      	cmp	r2, #48	@ 0x30
 800d114:	d0fa      	beq.n	800d10c <_dtoa_r+0xb0c>
 800d116:	e5be      	b.n	800cc96 <_dtoa_r+0x696>
 800d118:	459a      	cmp	sl, r3
 800d11a:	d1a4      	bne.n	800d066 <_dtoa_r+0xa66>
 800d11c:	9b04      	ldr	r3, [sp, #16]
 800d11e:	3301      	adds	r3, #1
 800d120:	9304      	str	r3, [sp, #16]
 800d122:	2331      	movs	r3, #49	@ 0x31
 800d124:	f88a 3000 	strb.w	r3, [sl]
 800d128:	e5b5      	b.n	800cc96 <_dtoa_r+0x696>
 800d12a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d12c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d18c <_dtoa_r+0xb8c>
 800d130:	b11b      	cbz	r3, 800d13a <_dtoa_r+0xb3a>
 800d132:	f10a 0308 	add.w	r3, sl, #8
 800d136:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d138:	6013      	str	r3, [r2, #0]
 800d13a:	4650      	mov	r0, sl
 800d13c:	b017      	add	sp, #92	@ 0x5c
 800d13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d142:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d144:	2b01      	cmp	r3, #1
 800d146:	f77f ae3d 	ble.w	800cdc4 <_dtoa_r+0x7c4>
 800d14a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d14c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d14e:	2001      	movs	r0, #1
 800d150:	e65b      	b.n	800ce0a <_dtoa_r+0x80a>
 800d152:	9b08      	ldr	r3, [sp, #32]
 800d154:	2b00      	cmp	r3, #0
 800d156:	f77f aed6 	ble.w	800cf06 <_dtoa_r+0x906>
 800d15a:	4656      	mov	r6, sl
 800d15c:	4621      	mov	r1, r4
 800d15e:	4648      	mov	r0, r9
 800d160:	f7ff f9c3 	bl	800c4ea <quorem>
 800d164:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d168:	9b08      	ldr	r3, [sp, #32]
 800d16a:	f806 8b01 	strb.w	r8, [r6], #1
 800d16e:	eba6 020a 	sub.w	r2, r6, sl
 800d172:	4293      	cmp	r3, r2
 800d174:	ddb3      	ble.n	800d0de <_dtoa_r+0xade>
 800d176:	4649      	mov	r1, r9
 800d178:	2300      	movs	r3, #0
 800d17a:	220a      	movs	r2, #10
 800d17c:	4658      	mov	r0, fp
 800d17e:	f000 f8b1 	bl	800d2e4 <__multadd>
 800d182:	4681      	mov	r9, r0
 800d184:	e7ea      	b.n	800d15c <_dtoa_r+0xb5c>
 800d186:	bf00      	nop
 800d188:	0800e7d8 	.word	0x0800e7d8
 800d18c:	0800e75c 	.word	0x0800e75c

0800d190 <_free_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4605      	mov	r5, r0
 800d194:	2900      	cmp	r1, #0
 800d196:	d040      	beq.n	800d21a <_free_r+0x8a>
 800d198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d19c:	1f0c      	subs	r4, r1, #4
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bfb8      	it	lt
 800d1a2:	18e4      	addlt	r4, r4, r3
 800d1a4:	f7fe faee 	bl	800b784 <__malloc_lock>
 800d1a8:	4a1c      	ldr	r2, [pc, #112]	@ (800d21c <_free_r+0x8c>)
 800d1aa:	6813      	ldr	r3, [r2, #0]
 800d1ac:	b933      	cbnz	r3, 800d1bc <_free_r+0x2c>
 800d1ae:	6063      	str	r3, [r4, #4]
 800d1b0:	6014      	str	r4, [r2, #0]
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b8:	f7fe baea 	b.w	800b790 <__malloc_unlock>
 800d1bc:	42a3      	cmp	r3, r4
 800d1be:	d908      	bls.n	800d1d2 <_free_r+0x42>
 800d1c0:	6820      	ldr	r0, [r4, #0]
 800d1c2:	1821      	adds	r1, r4, r0
 800d1c4:	428b      	cmp	r3, r1
 800d1c6:	bf01      	itttt	eq
 800d1c8:	6819      	ldreq	r1, [r3, #0]
 800d1ca:	685b      	ldreq	r3, [r3, #4]
 800d1cc:	1809      	addeq	r1, r1, r0
 800d1ce:	6021      	streq	r1, [r4, #0]
 800d1d0:	e7ed      	b.n	800d1ae <_free_r+0x1e>
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	b10b      	cbz	r3, 800d1dc <_free_r+0x4c>
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	d9fa      	bls.n	800d1d2 <_free_r+0x42>
 800d1dc:	6811      	ldr	r1, [r2, #0]
 800d1de:	1850      	adds	r0, r2, r1
 800d1e0:	42a0      	cmp	r0, r4
 800d1e2:	d10b      	bne.n	800d1fc <_free_r+0x6c>
 800d1e4:	6820      	ldr	r0, [r4, #0]
 800d1e6:	4401      	add	r1, r0
 800d1e8:	1850      	adds	r0, r2, r1
 800d1ea:	4283      	cmp	r3, r0
 800d1ec:	6011      	str	r1, [r2, #0]
 800d1ee:	d1e0      	bne.n	800d1b2 <_free_r+0x22>
 800d1f0:	6818      	ldr	r0, [r3, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	4408      	add	r0, r1
 800d1f6:	6010      	str	r0, [r2, #0]
 800d1f8:	6053      	str	r3, [r2, #4]
 800d1fa:	e7da      	b.n	800d1b2 <_free_r+0x22>
 800d1fc:	d902      	bls.n	800d204 <_free_r+0x74>
 800d1fe:	230c      	movs	r3, #12
 800d200:	602b      	str	r3, [r5, #0]
 800d202:	e7d6      	b.n	800d1b2 <_free_r+0x22>
 800d204:	6820      	ldr	r0, [r4, #0]
 800d206:	1821      	adds	r1, r4, r0
 800d208:	428b      	cmp	r3, r1
 800d20a:	bf01      	itttt	eq
 800d20c:	6819      	ldreq	r1, [r3, #0]
 800d20e:	685b      	ldreq	r3, [r3, #4]
 800d210:	1809      	addeq	r1, r1, r0
 800d212:	6021      	streq	r1, [r4, #0]
 800d214:	6063      	str	r3, [r4, #4]
 800d216:	6054      	str	r4, [r2, #4]
 800d218:	e7cb      	b.n	800d1b2 <_free_r+0x22>
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
 800d21c:	20002628 	.word	0x20002628

0800d220 <_Balloc>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	69c6      	ldr	r6, [r0, #28]
 800d224:	4604      	mov	r4, r0
 800d226:	460d      	mov	r5, r1
 800d228:	b976      	cbnz	r6, 800d248 <_Balloc+0x28>
 800d22a:	2010      	movs	r0, #16
 800d22c:	f7fe f9f8 	bl	800b620 <malloc>
 800d230:	4602      	mov	r2, r0
 800d232:	61e0      	str	r0, [r4, #28]
 800d234:	b920      	cbnz	r0, 800d240 <_Balloc+0x20>
 800d236:	216b      	movs	r1, #107	@ 0x6b
 800d238:	4b17      	ldr	r3, [pc, #92]	@ (800d298 <_Balloc+0x78>)
 800d23a:	4818      	ldr	r0, [pc, #96]	@ (800d29c <_Balloc+0x7c>)
 800d23c:	f000 fd92 	bl	800dd64 <__assert_func>
 800d240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d244:	6006      	str	r6, [r0, #0]
 800d246:	60c6      	str	r6, [r0, #12]
 800d248:	69e6      	ldr	r6, [r4, #28]
 800d24a:	68f3      	ldr	r3, [r6, #12]
 800d24c:	b183      	cbz	r3, 800d270 <_Balloc+0x50>
 800d24e:	69e3      	ldr	r3, [r4, #28]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d256:	b9b8      	cbnz	r0, 800d288 <_Balloc+0x68>
 800d258:	2101      	movs	r1, #1
 800d25a:	fa01 f605 	lsl.w	r6, r1, r5
 800d25e:	1d72      	adds	r2, r6, #5
 800d260:	4620      	mov	r0, r4
 800d262:	0092      	lsls	r2, r2, #2
 800d264:	f000 fd9c 	bl	800dda0 <_calloc_r>
 800d268:	b160      	cbz	r0, 800d284 <_Balloc+0x64>
 800d26a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d26e:	e00e      	b.n	800d28e <_Balloc+0x6e>
 800d270:	2221      	movs	r2, #33	@ 0x21
 800d272:	2104      	movs	r1, #4
 800d274:	4620      	mov	r0, r4
 800d276:	f000 fd93 	bl	800dda0 <_calloc_r>
 800d27a:	69e3      	ldr	r3, [r4, #28]
 800d27c:	60f0      	str	r0, [r6, #12]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1e4      	bne.n	800d24e <_Balloc+0x2e>
 800d284:	2000      	movs	r0, #0
 800d286:	bd70      	pop	{r4, r5, r6, pc}
 800d288:	6802      	ldr	r2, [r0, #0]
 800d28a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d28e:	2300      	movs	r3, #0
 800d290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d294:	e7f7      	b.n	800d286 <_Balloc+0x66>
 800d296:	bf00      	nop
 800d298:	0800e769 	.word	0x0800e769
 800d29c:	0800e7e9 	.word	0x0800e7e9

0800d2a0 <_Bfree>:
 800d2a0:	b570      	push	{r4, r5, r6, lr}
 800d2a2:	69c6      	ldr	r6, [r0, #28]
 800d2a4:	4605      	mov	r5, r0
 800d2a6:	460c      	mov	r4, r1
 800d2a8:	b976      	cbnz	r6, 800d2c8 <_Bfree+0x28>
 800d2aa:	2010      	movs	r0, #16
 800d2ac:	f7fe f9b8 	bl	800b620 <malloc>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	61e8      	str	r0, [r5, #28]
 800d2b4:	b920      	cbnz	r0, 800d2c0 <_Bfree+0x20>
 800d2b6:	218f      	movs	r1, #143	@ 0x8f
 800d2b8:	4b08      	ldr	r3, [pc, #32]	@ (800d2dc <_Bfree+0x3c>)
 800d2ba:	4809      	ldr	r0, [pc, #36]	@ (800d2e0 <_Bfree+0x40>)
 800d2bc:	f000 fd52 	bl	800dd64 <__assert_func>
 800d2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2c4:	6006      	str	r6, [r0, #0]
 800d2c6:	60c6      	str	r6, [r0, #12]
 800d2c8:	b13c      	cbz	r4, 800d2da <_Bfree+0x3a>
 800d2ca:	69eb      	ldr	r3, [r5, #28]
 800d2cc:	6862      	ldr	r2, [r4, #4]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2d4:	6021      	str	r1, [r4, #0]
 800d2d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d2da:	bd70      	pop	{r4, r5, r6, pc}
 800d2dc:	0800e769 	.word	0x0800e769
 800d2e0:	0800e7e9 	.word	0x0800e7e9

0800d2e4 <__multadd>:
 800d2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e8:	4607      	mov	r7, r0
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	461e      	mov	r6, r3
 800d2ee:	2000      	movs	r0, #0
 800d2f0:	690d      	ldr	r5, [r1, #16]
 800d2f2:	f101 0c14 	add.w	ip, r1, #20
 800d2f6:	f8dc 3000 	ldr.w	r3, [ip]
 800d2fa:	3001      	adds	r0, #1
 800d2fc:	b299      	uxth	r1, r3
 800d2fe:	fb02 6101 	mla	r1, r2, r1, r6
 800d302:	0c1e      	lsrs	r6, r3, #16
 800d304:	0c0b      	lsrs	r3, r1, #16
 800d306:	fb02 3306 	mla	r3, r2, r6, r3
 800d30a:	b289      	uxth	r1, r1
 800d30c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d310:	4285      	cmp	r5, r0
 800d312:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d316:	f84c 1b04 	str.w	r1, [ip], #4
 800d31a:	dcec      	bgt.n	800d2f6 <__multadd+0x12>
 800d31c:	b30e      	cbz	r6, 800d362 <__multadd+0x7e>
 800d31e:	68a3      	ldr	r3, [r4, #8]
 800d320:	42ab      	cmp	r3, r5
 800d322:	dc19      	bgt.n	800d358 <__multadd+0x74>
 800d324:	6861      	ldr	r1, [r4, #4]
 800d326:	4638      	mov	r0, r7
 800d328:	3101      	adds	r1, #1
 800d32a:	f7ff ff79 	bl	800d220 <_Balloc>
 800d32e:	4680      	mov	r8, r0
 800d330:	b928      	cbnz	r0, 800d33e <__multadd+0x5a>
 800d332:	4602      	mov	r2, r0
 800d334:	21ba      	movs	r1, #186	@ 0xba
 800d336:	4b0c      	ldr	r3, [pc, #48]	@ (800d368 <__multadd+0x84>)
 800d338:	480c      	ldr	r0, [pc, #48]	@ (800d36c <__multadd+0x88>)
 800d33a:	f000 fd13 	bl	800dd64 <__assert_func>
 800d33e:	6922      	ldr	r2, [r4, #16]
 800d340:	f104 010c 	add.w	r1, r4, #12
 800d344:	3202      	adds	r2, #2
 800d346:	0092      	lsls	r2, r2, #2
 800d348:	300c      	adds	r0, #12
 800d34a:	f7ff f8c0 	bl	800c4ce <memcpy>
 800d34e:	4621      	mov	r1, r4
 800d350:	4638      	mov	r0, r7
 800d352:	f7ff ffa5 	bl	800d2a0 <_Bfree>
 800d356:	4644      	mov	r4, r8
 800d358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d35c:	3501      	adds	r5, #1
 800d35e:	615e      	str	r6, [r3, #20]
 800d360:	6125      	str	r5, [r4, #16]
 800d362:	4620      	mov	r0, r4
 800d364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d368:	0800e7d8 	.word	0x0800e7d8
 800d36c:	0800e7e9 	.word	0x0800e7e9

0800d370 <__hi0bits>:
 800d370:	4603      	mov	r3, r0
 800d372:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d376:	bf3a      	itte	cc
 800d378:	0403      	lslcc	r3, r0, #16
 800d37a:	2010      	movcc	r0, #16
 800d37c:	2000      	movcs	r0, #0
 800d37e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d382:	bf3c      	itt	cc
 800d384:	021b      	lslcc	r3, r3, #8
 800d386:	3008      	addcc	r0, #8
 800d388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d38c:	bf3c      	itt	cc
 800d38e:	011b      	lslcc	r3, r3, #4
 800d390:	3004      	addcc	r0, #4
 800d392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d396:	bf3c      	itt	cc
 800d398:	009b      	lslcc	r3, r3, #2
 800d39a:	3002      	addcc	r0, #2
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	db05      	blt.n	800d3ac <__hi0bits+0x3c>
 800d3a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d3a4:	f100 0001 	add.w	r0, r0, #1
 800d3a8:	bf08      	it	eq
 800d3aa:	2020      	moveq	r0, #32
 800d3ac:	4770      	bx	lr

0800d3ae <__lo0bits>:
 800d3ae:	6803      	ldr	r3, [r0, #0]
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	f013 0007 	ands.w	r0, r3, #7
 800d3b6:	d00b      	beq.n	800d3d0 <__lo0bits+0x22>
 800d3b8:	07d9      	lsls	r1, r3, #31
 800d3ba:	d421      	bmi.n	800d400 <__lo0bits+0x52>
 800d3bc:	0798      	lsls	r0, r3, #30
 800d3be:	bf49      	itett	mi
 800d3c0:	085b      	lsrmi	r3, r3, #1
 800d3c2:	089b      	lsrpl	r3, r3, #2
 800d3c4:	2001      	movmi	r0, #1
 800d3c6:	6013      	strmi	r3, [r2, #0]
 800d3c8:	bf5c      	itt	pl
 800d3ca:	2002      	movpl	r0, #2
 800d3cc:	6013      	strpl	r3, [r2, #0]
 800d3ce:	4770      	bx	lr
 800d3d0:	b299      	uxth	r1, r3
 800d3d2:	b909      	cbnz	r1, 800d3d8 <__lo0bits+0x2a>
 800d3d4:	2010      	movs	r0, #16
 800d3d6:	0c1b      	lsrs	r3, r3, #16
 800d3d8:	b2d9      	uxtb	r1, r3
 800d3da:	b909      	cbnz	r1, 800d3e0 <__lo0bits+0x32>
 800d3dc:	3008      	adds	r0, #8
 800d3de:	0a1b      	lsrs	r3, r3, #8
 800d3e0:	0719      	lsls	r1, r3, #28
 800d3e2:	bf04      	itt	eq
 800d3e4:	091b      	lsreq	r3, r3, #4
 800d3e6:	3004      	addeq	r0, #4
 800d3e8:	0799      	lsls	r1, r3, #30
 800d3ea:	bf04      	itt	eq
 800d3ec:	089b      	lsreq	r3, r3, #2
 800d3ee:	3002      	addeq	r0, #2
 800d3f0:	07d9      	lsls	r1, r3, #31
 800d3f2:	d403      	bmi.n	800d3fc <__lo0bits+0x4e>
 800d3f4:	085b      	lsrs	r3, r3, #1
 800d3f6:	f100 0001 	add.w	r0, r0, #1
 800d3fa:	d003      	beq.n	800d404 <__lo0bits+0x56>
 800d3fc:	6013      	str	r3, [r2, #0]
 800d3fe:	4770      	bx	lr
 800d400:	2000      	movs	r0, #0
 800d402:	4770      	bx	lr
 800d404:	2020      	movs	r0, #32
 800d406:	4770      	bx	lr

0800d408 <__i2b>:
 800d408:	b510      	push	{r4, lr}
 800d40a:	460c      	mov	r4, r1
 800d40c:	2101      	movs	r1, #1
 800d40e:	f7ff ff07 	bl	800d220 <_Balloc>
 800d412:	4602      	mov	r2, r0
 800d414:	b928      	cbnz	r0, 800d422 <__i2b+0x1a>
 800d416:	f240 1145 	movw	r1, #325	@ 0x145
 800d41a:	4b04      	ldr	r3, [pc, #16]	@ (800d42c <__i2b+0x24>)
 800d41c:	4804      	ldr	r0, [pc, #16]	@ (800d430 <__i2b+0x28>)
 800d41e:	f000 fca1 	bl	800dd64 <__assert_func>
 800d422:	2301      	movs	r3, #1
 800d424:	6144      	str	r4, [r0, #20]
 800d426:	6103      	str	r3, [r0, #16]
 800d428:	bd10      	pop	{r4, pc}
 800d42a:	bf00      	nop
 800d42c:	0800e7d8 	.word	0x0800e7d8
 800d430:	0800e7e9 	.word	0x0800e7e9

0800d434 <__multiply>:
 800d434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d438:	4614      	mov	r4, r2
 800d43a:	690a      	ldr	r2, [r1, #16]
 800d43c:	6923      	ldr	r3, [r4, #16]
 800d43e:	460f      	mov	r7, r1
 800d440:	429a      	cmp	r2, r3
 800d442:	bfa2      	ittt	ge
 800d444:	4623      	movge	r3, r4
 800d446:	460c      	movge	r4, r1
 800d448:	461f      	movge	r7, r3
 800d44a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d44e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d452:	68a3      	ldr	r3, [r4, #8]
 800d454:	6861      	ldr	r1, [r4, #4]
 800d456:	eb0a 0609 	add.w	r6, sl, r9
 800d45a:	42b3      	cmp	r3, r6
 800d45c:	b085      	sub	sp, #20
 800d45e:	bfb8      	it	lt
 800d460:	3101      	addlt	r1, #1
 800d462:	f7ff fedd 	bl	800d220 <_Balloc>
 800d466:	b930      	cbnz	r0, 800d476 <__multiply+0x42>
 800d468:	4602      	mov	r2, r0
 800d46a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d46e:	4b43      	ldr	r3, [pc, #268]	@ (800d57c <__multiply+0x148>)
 800d470:	4843      	ldr	r0, [pc, #268]	@ (800d580 <__multiply+0x14c>)
 800d472:	f000 fc77 	bl	800dd64 <__assert_func>
 800d476:	f100 0514 	add.w	r5, r0, #20
 800d47a:	462b      	mov	r3, r5
 800d47c:	2200      	movs	r2, #0
 800d47e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d482:	4543      	cmp	r3, r8
 800d484:	d321      	bcc.n	800d4ca <__multiply+0x96>
 800d486:	f107 0114 	add.w	r1, r7, #20
 800d48a:	f104 0214 	add.w	r2, r4, #20
 800d48e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d492:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d496:	9302      	str	r3, [sp, #8]
 800d498:	1b13      	subs	r3, r2, r4
 800d49a:	3b15      	subs	r3, #21
 800d49c:	f023 0303 	bic.w	r3, r3, #3
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	f104 0715 	add.w	r7, r4, #21
 800d4a6:	42ba      	cmp	r2, r7
 800d4a8:	bf38      	it	cc
 800d4aa:	2304      	movcc	r3, #4
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	9b02      	ldr	r3, [sp, #8]
 800d4b0:	9103      	str	r1, [sp, #12]
 800d4b2:	428b      	cmp	r3, r1
 800d4b4:	d80c      	bhi.n	800d4d0 <__multiply+0x9c>
 800d4b6:	2e00      	cmp	r6, #0
 800d4b8:	dd03      	ble.n	800d4c2 <__multiply+0x8e>
 800d4ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d05a      	beq.n	800d578 <__multiply+0x144>
 800d4c2:	6106      	str	r6, [r0, #16]
 800d4c4:	b005      	add	sp, #20
 800d4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ca:	f843 2b04 	str.w	r2, [r3], #4
 800d4ce:	e7d8      	b.n	800d482 <__multiply+0x4e>
 800d4d0:	f8b1 a000 	ldrh.w	sl, [r1]
 800d4d4:	f1ba 0f00 	cmp.w	sl, #0
 800d4d8:	d023      	beq.n	800d522 <__multiply+0xee>
 800d4da:	46a9      	mov	r9, r5
 800d4dc:	f04f 0c00 	mov.w	ip, #0
 800d4e0:	f104 0e14 	add.w	lr, r4, #20
 800d4e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d4e8:	f8d9 3000 	ldr.w	r3, [r9]
 800d4ec:	fa1f fb87 	uxth.w	fp, r7
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	fb0a 330b 	mla	r3, sl, fp, r3
 800d4f6:	4463      	add	r3, ip
 800d4f8:	f8d9 c000 	ldr.w	ip, [r9]
 800d4fc:	0c3f      	lsrs	r7, r7, #16
 800d4fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d502:	fb0a c707 	mla	r7, sl, r7, ip
 800d506:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d510:	4572      	cmp	r2, lr
 800d512:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d516:	f849 3b04 	str.w	r3, [r9], #4
 800d51a:	d8e3      	bhi.n	800d4e4 <__multiply+0xb0>
 800d51c:	9b01      	ldr	r3, [sp, #4]
 800d51e:	f845 c003 	str.w	ip, [r5, r3]
 800d522:	9b03      	ldr	r3, [sp, #12]
 800d524:	3104      	adds	r1, #4
 800d526:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d52a:	f1b9 0f00 	cmp.w	r9, #0
 800d52e:	d021      	beq.n	800d574 <__multiply+0x140>
 800d530:	46ae      	mov	lr, r5
 800d532:	f04f 0a00 	mov.w	sl, #0
 800d536:	682b      	ldr	r3, [r5, #0]
 800d538:	f104 0c14 	add.w	ip, r4, #20
 800d53c:	f8bc b000 	ldrh.w	fp, [ip]
 800d540:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d544:	b29b      	uxth	r3, r3
 800d546:	fb09 770b 	mla	r7, r9, fp, r7
 800d54a:	4457      	add	r7, sl
 800d54c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d550:	f84e 3b04 	str.w	r3, [lr], #4
 800d554:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d558:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d55c:	f8be 3000 	ldrh.w	r3, [lr]
 800d560:	4562      	cmp	r2, ip
 800d562:	fb09 330a 	mla	r3, r9, sl, r3
 800d566:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d56a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d56e:	d8e5      	bhi.n	800d53c <__multiply+0x108>
 800d570:	9f01      	ldr	r7, [sp, #4]
 800d572:	51eb      	str	r3, [r5, r7]
 800d574:	3504      	adds	r5, #4
 800d576:	e79a      	b.n	800d4ae <__multiply+0x7a>
 800d578:	3e01      	subs	r6, #1
 800d57a:	e79c      	b.n	800d4b6 <__multiply+0x82>
 800d57c:	0800e7d8 	.word	0x0800e7d8
 800d580:	0800e7e9 	.word	0x0800e7e9

0800d584 <__pow5mult>:
 800d584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d588:	4615      	mov	r5, r2
 800d58a:	f012 0203 	ands.w	r2, r2, #3
 800d58e:	4607      	mov	r7, r0
 800d590:	460e      	mov	r6, r1
 800d592:	d007      	beq.n	800d5a4 <__pow5mult+0x20>
 800d594:	4c25      	ldr	r4, [pc, #148]	@ (800d62c <__pow5mult+0xa8>)
 800d596:	3a01      	subs	r2, #1
 800d598:	2300      	movs	r3, #0
 800d59a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d59e:	f7ff fea1 	bl	800d2e4 <__multadd>
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	10ad      	asrs	r5, r5, #2
 800d5a6:	d03d      	beq.n	800d624 <__pow5mult+0xa0>
 800d5a8:	69fc      	ldr	r4, [r7, #28]
 800d5aa:	b97c      	cbnz	r4, 800d5cc <__pow5mult+0x48>
 800d5ac:	2010      	movs	r0, #16
 800d5ae:	f7fe f837 	bl	800b620 <malloc>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	61f8      	str	r0, [r7, #28]
 800d5b6:	b928      	cbnz	r0, 800d5c4 <__pow5mult+0x40>
 800d5b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d5bc:	4b1c      	ldr	r3, [pc, #112]	@ (800d630 <__pow5mult+0xac>)
 800d5be:	481d      	ldr	r0, [pc, #116]	@ (800d634 <__pow5mult+0xb0>)
 800d5c0:	f000 fbd0 	bl	800dd64 <__assert_func>
 800d5c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5c8:	6004      	str	r4, [r0, #0]
 800d5ca:	60c4      	str	r4, [r0, #12]
 800d5cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d5d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5d4:	b94c      	cbnz	r4, 800d5ea <__pow5mult+0x66>
 800d5d6:	f240 2171 	movw	r1, #625	@ 0x271
 800d5da:	4638      	mov	r0, r7
 800d5dc:	f7ff ff14 	bl	800d408 <__i2b>
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800d5e8:	6003      	str	r3, [r0, #0]
 800d5ea:	f04f 0900 	mov.w	r9, #0
 800d5ee:	07eb      	lsls	r3, r5, #31
 800d5f0:	d50a      	bpl.n	800d608 <__pow5mult+0x84>
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	4622      	mov	r2, r4
 800d5f6:	4638      	mov	r0, r7
 800d5f8:	f7ff ff1c 	bl	800d434 <__multiply>
 800d5fc:	4680      	mov	r8, r0
 800d5fe:	4631      	mov	r1, r6
 800d600:	4638      	mov	r0, r7
 800d602:	f7ff fe4d 	bl	800d2a0 <_Bfree>
 800d606:	4646      	mov	r6, r8
 800d608:	106d      	asrs	r5, r5, #1
 800d60a:	d00b      	beq.n	800d624 <__pow5mult+0xa0>
 800d60c:	6820      	ldr	r0, [r4, #0]
 800d60e:	b938      	cbnz	r0, 800d620 <__pow5mult+0x9c>
 800d610:	4622      	mov	r2, r4
 800d612:	4621      	mov	r1, r4
 800d614:	4638      	mov	r0, r7
 800d616:	f7ff ff0d 	bl	800d434 <__multiply>
 800d61a:	6020      	str	r0, [r4, #0]
 800d61c:	f8c0 9000 	str.w	r9, [r0]
 800d620:	4604      	mov	r4, r0
 800d622:	e7e4      	b.n	800d5ee <__pow5mult+0x6a>
 800d624:	4630      	mov	r0, r6
 800d626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d62a:	bf00      	nop
 800d62c:	0800e844 	.word	0x0800e844
 800d630:	0800e769 	.word	0x0800e769
 800d634:	0800e7e9 	.word	0x0800e7e9

0800d638 <__lshift>:
 800d638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d63c:	460c      	mov	r4, r1
 800d63e:	4607      	mov	r7, r0
 800d640:	4691      	mov	r9, r2
 800d642:	6923      	ldr	r3, [r4, #16]
 800d644:	6849      	ldr	r1, [r1, #4]
 800d646:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d64a:	68a3      	ldr	r3, [r4, #8]
 800d64c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d650:	f108 0601 	add.w	r6, r8, #1
 800d654:	42b3      	cmp	r3, r6
 800d656:	db0b      	blt.n	800d670 <__lshift+0x38>
 800d658:	4638      	mov	r0, r7
 800d65a:	f7ff fde1 	bl	800d220 <_Balloc>
 800d65e:	4605      	mov	r5, r0
 800d660:	b948      	cbnz	r0, 800d676 <__lshift+0x3e>
 800d662:	4602      	mov	r2, r0
 800d664:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d668:	4b27      	ldr	r3, [pc, #156]	@ (800d708 <__lshift+0xd0>)
 800d66a:	4828      	ldr	r0, [pc, #160]	@ (800d70c <__lshift+0xd4>)
 800d66c:	f000 fb7a 	bl	800dd64 <__assert_func>
 800d670:	3101      	adds	r1, #1
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	e7ee      	b.n	800d654 <__lshift+0x1c>
 800d676:	2300      	movs	r3, #0
 800d678:	f100 0114 	add.w	r1, r0, #20
 800d67c:	f100 0210 	add.w	r2, r0, #16
 800d680:	4618      	mov	r0, r3
 800d682:	4553      	cmp	r3, sl
 800d684:	db33      	blt.n	800d6ee <__lshift+0xb6>
 800d686:	6920      	ldr	r0, [r4, #16]
 800d688:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d68c:	f104 0314 	add.w	r3, r4, #20
 800d690:	f019 091f 	ands.w	r9, r9, #31
 800d694:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d698:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d69c:	d02b      	beq.n	800d6f6 <__lshift+0xbe>
 800d69e:	468a      	mov	sl, r1
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f1c9 0e20 	rsb	lr, r9, #32
 800d6a6:	6818      	ldr	r0, [r3, #0]
 800d6a8:	fa00 f009 	lsl.w	r0, r0, r9
 800d6ac:	4310      	orrs	r0, r2
 800d6ae:	f84a 0b04 	str.w	r0, [sl], #4
 800d6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6b6:	459c      	cmp	ip, r3
 800d6b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d6bc:	d8f3      	bhi.n	800d6a6 <__lshift+0x6e>
 800d6be:	ebac 0304 	sub.w	r3, ip, r4
 800d6c2:	3b15      	subs	r3, #21
 800d6c4:	f023 0303 	bic.w	r3, r3, #3
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	f104 0015 	add.w	r0, r4, #21
 800d6ce:	4584      	cmp	ip, r0
 800d6d0:	bf38      	it	cc
 800d6d2:	2304      	movcc	r3, #4
 800d6d4:	50ca      	str	r2, [r1, r3]
 800d6d6:	b10a      	cbz	r2, 800d6dc <__lshift+0xa4>
 800d6d8:	f108 0602 	add.w	r6, r8, #2
 800d6dc:	3e01      	subs	r6, #1
 800d6de:	4638      	mov	r0, r7
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	612e      	str	r6, [r5, #16]
 800d6e4:	f7ff fddc 	bl	800d2a0 <_Bfree>
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	e7c5      	b.n	800d682 <__lshift+0x4a>
 800d6f6:	3904      	subs	r1, #4
 800d6f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6fc:	459c      	cmp	ip, r3
 800d6fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800d702:	d8f9      	bhi.n	800d6f8 <__lshift+0xc0>
 800d704:	e7ea      	b.n	800d6dc <__lshift+0xa4>
 800d706:	bf00      	nop
 800d708:	0800e7d8 	.word	0x0800e7d8
 800d70c:	0800e7e9 	.word	0x0800e7e9

0800d710 <__mcmp>:
 800d710:	4603      	mov	r3, r0
 800d712:	690a      	ldr	r2, [r1, #16]
 800d714:	6900      	ldr	r0, [r0, #16]
 800d716:	b530      	push	{r4, r5, lr}
 800d718:	1a80      	subs	r0, r0, r2
 800d71a:	d10e      	bne.n	800d73a <__mcmp+0x2a>
 800d71c:	3314      	adds	r3, #20
 800d71e:	3114      	adds	r1, #20
 800d720:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d724:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d728:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d72c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d730:	4295      	cmp	r5, r2
 800d732:	d003      	beq.n	800d73c <__mcmp+0x2c>
 800d734:	d205      	bcs.n	800d742 <__mcmp+0x32>
 800d736:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d73a:	bd30      	pop	{r4, r5, pc}
 800d73c:	42a3      	cmp	r3, r4
 800d73e:	d3f3      	bcc.n	800d728 <__mcmp+0x18>
 800d740:	e7fb      	b.n	800d73a <__mcmp+0x2a>
 800d742:	2001      	movs	r0, #1
 800d744:	e7f9      	b.n	800d73a <__mcmp+0x2a>
	...

0800d748 <__mdiff>:
 800d748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74c:	4689      	mov	r9, r1
 800d74e:	4606      	mov	r6, r0
 800d750:	4611      	mov	r1, r2
 800d752:	4648      	mov	r0, r9
 800d754:	4614      	mov	r4, r2
 800d756:	f7ff ffdb 	bl	800d710 <__mcmp>
 800d75a:	1e05      	subs	r5, r0, #0
 800d75c:	d112      	bne.n	800d784 <__mdiff+0x3c>
 800d75e:	4629      	mov	r1, r5
 800d760:	4630      	mov	r0, r6
 800d762:	f7ff fd5d 	bl	800d220 <_Balloc>
 800d766:	4602      	mov	r2, r0
 800d768:	b928      	cbnz	r0, 800d776 <__mdiff+0x2e>
 800d76a:	f240 2137 	movw	r1, #567	@ 0x237
 800d76e:	4b3e      	ldr	r3, [pc, #248]	@ (800d868 <__mdiff+0x120>)
 800d770:	483e      	ldr	r0, [pc, #248]	@ (800d86c <__mdiff+0x124>)
 800d772:	f000 faf7 	bl	800dd64 <__assert_func>
 800d776:	2301      	movs	r3, #1
 800d778:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d77c:	4610      	mov	r0, r2
 800d77e:	b003      	add	sp, #12
 800d780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d784:	bfbc      	itt	lt
 800d786:	464b      	movlt	r3, r9
 800d788:	46a1      	movlt	r9, r4
 800d78a:	4630      	mov	r0, r6
 800d78c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d790:	bfba      	itte	lt
 800d792:	461c      	movlt	r4, r3
 800d794:	2501      	movlt	r5, #1
 800d796:	2500      	movge	r5, #0
 800d798:	f7ff fd42 	bl	800d220 <_Balloc>
 800d79c:	4602      	mov	r2, r0
 800d79e:	b918      	cbnz	r0, 800d7a8 <__mdiff+0x60>
 800d7a0:	f240 2145 	movw	r1, #581	@ 0x245
 800d7a4:	4b30      	ldr	r3, [pc, #192]	@ (800d868 <__mdiff+0x120>)
 800d7a6:	e7e3      	b.n	800d770 <__mdiff+0x28>
 800d7a8:	f100 0b14 	add.w	fp, r0, #20
 800d7ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d7b0:	f109 0310 	add.w	r3, r9, #16
 800d7b4:	60c5      	str	r5, [r0, #12]
 800d7b6:	f04f 0c00 	mov.w	ip, #0
 800d7ba:	f109 0514 	add.w	r5, r9, #20
 800d7be:	46d9      	mov	r9, fp
 800d7c0:	6926      	ldr	r6, [r4, #16]
 800d7c2:	f104 0e14 	add.w	lr, r4, #20
 800d7c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d7ca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d7ce:	9301      	str	r3, [sp, #4]
 800d7d0:	9b01      	ldr	r3, [sp, #4]
 800d7d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d7d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d7da:	b281      	uxth	r1, r0
 800d7dc:	9301      	str	r3, [sp, #4]
 800d7de:	fa1f f38a 	uxth.w	r3, sl
 800d7e2:	1a5b      	subs	r3, r3, r1
 800d7e4:	0c00      	lsrs	r0, r0, #16
 800d7e6:	4463      	add	r3, ip
 800d7e8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d7ec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d7f6:	4576      	cmp	r6, lr
 800d7f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7fc:	f849 3b04 	str.w	r3, [r9], #4
 800d800:	d8e6      	bhi.n	800d7d0 <__mdiff+0x88>
 800d802:	1b33      	subs	r3, r6, r4
 800d804:	3b15      	subs	r3, #21
 800d806:	f023 0303 	bic.w	r3, r3, #3
 800d80a:	3415      	adds	r4, #21
 800d80c:	3304      	adds	r3, #4
 800d80e:	42a6      	cmp	r6, r4
 800d810:	bf38      	it	cc
 800d812:	2304      	movcc	r3, #4
 800d814:	441d      	add	r5, r3
 800d816:	445b      	add	r3, fp
 800d818:	461e      	mov	r6, r3
 800d81a:	462c      	mov	r4, r5
 800d81c:	4544      	cmp	r4, r8
 800d81e:	d30e      	bcc.n	800d83e <__mdiff+0xf6>
 800d820:	f108 0103 	add.w	r1, r8, #3
 800d824:	1b49      	subs	r1, r1, r5
 800d826:	f021 0103 	bic.w	r1, r1, #3
 800d82a:	3d03      	subs	r5, #3
 800d82c:	45a8      	cmp	r8, r5
 800d82e:	bf38      	it	cc
 800d830:	2100      	movcc	r1, #0
 800d832:	440b      	add	r3, r1
 800d834:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d838:	b199      	cbz	r1, 800d862 <__mdiff+0x11a>
 800d83a:	6117      	str	r7, [r2, #16]
 800d83c:	e79e      	b.n	800d77c <__mdiff+0x34>
 800d83e:	46e6      	mov	lr, ip
 800d840:	f854 1b04 	ldr.w	r1, [r4], #4
 800d844:	fa1f fc81 	uxth.w	ip, r1
 800d848:	44f4      	add	ip, lr
 800d84a:	0c08      	lsrs	r0, r1, #16
 800d84c:	4471      	add	r1, lr
 800d84e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d852:	b289      	uxth	r1, r1
 800d854:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d858:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d85c:	f846 1b04 	str.w	r1, [r6], #4
 800d860:	e7dc      	b.n	800d81c <__mdiff+0xd4>
 800d862:	3f01      	subs	r7, #1
 800d864:	e7e6      	b.n	800d834 <__mdiff+0xec>
 800d866:	bf00      	nop
 800d868:	0800e7d8 	.word	0x0800e7d8
 800d86c:	0800e7e9 	.word	0x0800e7e9

0800d870 <__d2b>:
 800d870:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d874:	2101      	movs	r1, #1
 800d876:	4690      	mov	r8, r2
 800d878:	4699      	mov	r9, r3
 800d87a:	9e08      	ldr	r6, [sp, #32]
 800d87c:	f7ff fcd0 	bl	800d220 <_Balloc>
 800d880:	4604      	mov	r4, r0
 800d882:	b930      	cbnz	r0, 800d892 <__d2b+0x22>
 800d884:	4602      	mov	r2, r0
 800d886:	f240 310f 	movw	r1, #783	@ 0x30f
 800d88a:	4b23      	ldr	r3, [pc, #140]	@ (800d918 <__d2b+0xa8>)
 800d88c:	4823      	ldr	r0, [pc, #140]	@ (800d91c <__d2b+0xac>)
 800d88e:	f000 fa69 	bl	800dd64 <__assert_func>
 800d892:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d896:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d89a:	b10d      	cbz	r5, 800d8a0 <__d2b+0x30>
 800d89c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8a0:	9301      	str	r3, [sp, #4]
 800d8a2:	f1b8 0300 	subs.w	r3, r8, #0
 800d8a6:	d024      	beq.n	800d8f2 <__d2b+0x82>
 800d8a8:	4668      	mov	r0, sp
 800d8aa:	9300      	str	r3, [sp, #0]
 800d8ac:	f7ff fd7f 	bl	800d3ae <__lo0bits>
 800d8b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8b4:	b1d8      	cbz	r0, 800d8ee <__d2b+0x7e>
 800d8b6:	f1c0 0320 	rsb	r3, r0, #32
 800d8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d8be:	430b      	orrs	r3, r1
 800d8c0:	40c2      	lsrs	r2, r0
 800d8c2:	6163      	str	r3, [r4, #20]
 800d8c4:	9201      	str	r2, [sp, #4]
 800d8c6:	9b01      	ldr	r3, [sp, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	bf0c      	ite	eq
 800d8cc:	2201      	moveq	r2, #1
 800d8ce:	2202      	movne	r2, #2
 800d8d0:	61a3      	str	r3, [r4, #24]
 800d8d2:	6122      	str	r2, [r4, #16]
 800d8d4:	b1ad      	cbz	r5, 800d902 <__d2b+0x92>
 800d8d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d8da:	4405      	add	r5, r0
 800d8dc:	6035      	str	r5, [r6, #0]
 800d8de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8e4:	6018      	str	r0, [r3, #0]
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	b002      	add	sp, #8
 800d8ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d8ee:	6161      	str	r1, [r4, #20]
 800d8f0:	e7e9      	b.n	800d8c6 <__d2b+0x56>
 800d8f2:	a801      	add	r0, sp, #4
 800d8f4:	f7ff fd5b 	bl	800d3ae <__lo0bits>
 800d8f8:	9b01      	ldr	r3, [sp, #4]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	6163      	str	r3, [r4, #20]
 800d8fe:	3020      	adds	r0, #32
 800d900:	e7e7      	b.n	800d8d2 <__d2b+0x62>
 800d902:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d906:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d90a:	6030      	str	r0, [r6, #0]
 800d90c:	6918      	ldr	r0, [r3, #16]
 800d90e:	f7ff fd2f 	bl	800d370 <__hi0bits>
 800d912:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d916:	e7e4      	b.n	800d8e2 <__d2b+0x72>
 800d918:	0800e7d8 	.word	0x0800e7d8
 800d91c:	0800e7e9 	.word	0x0800e7e9

0800d920 <_malloc_usable_size_r>:
 800d920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d924:	1f18      	subs	r0, r3, #4
 800d926:	2b00      	cmp	r3, #0
 800d928:	bfbc      	itt	lt
 800d92a:	580b      	ldrlt	r3, [r1, r0]
 800d92c:	18c0      	addlt	r0, r0, r3
 800d92e:	4770      	bx	lr

0800d930 <__ssputs_r>:
 800d930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d934:	461f      	mov	r7, r3
 800d936:	688e      	ldr	r6, [r1, #8]
 800d938:	4682      	mov	sl, r0
 800d93a:	42be      	cmp	r6, r7
 800d93c:	460c      	mov	r4, r1
 800d93e:	4690      	mov	r8, r2
 800d940:	680b      	ldr	r3, [r1, #0]
 800d942:	d82d      	bhi.n	800d9a0 <__ssputs_r+0x70>
 800d944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d948:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d94c:	d026      	beq.n	800d99c <__ssputs_r+0x6c>
 800d94e:	6965      	ldr	r5, [r4, #20]
 800d950:	6909      	ldr	r1, [r1, #16]
 800d952:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d956:	eba3 0901 	sub.w	r9, r3, r1
 800d95a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d95e:	1c7b      	adds	r3, r7, #1
 800d960:	444b      	add	r3, r9
 800d962:	106d      	asrs	r5, r5, #1
 800d964:	429d      	cmp	r5, r3
 800d966:	bf38      	it	cc
 800d968:	461d      	movcc	r5, r3
 800d96a:	0553      	lsls	r3, r2, #21
 800d96c:	d527      	bpl.n	800d9be <__ssputs_r+0x8e>
 800d96e:	4629      	mov	r1, r5
 800d970:	f7fd fe88 	bl	800b684 <_malloc_r>
 800d974:	4606      	mov	r6, r0
 800d976:	b360      	cbz	r0, 800d9d2 <__ssputs_r+0xa2>
 800d978:	464a      	mov	r2, r9
 800d97a:	6921      	ldr	r1, [r4, #16]
 800d97c:	f7fe fda7 	bl	800c4ce <memcpy>
 800d980:	89a3      	ldrh	r3, [r4, #12]
 800d982:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d98a:	81a3      	strh	r3, [r4, #12]
 800d98c:	6126      	str	r6, [r4, #16]
 800d98e:	444e      	add	r6, r9
 800d990:	6026      	str	r6, [r4, #0]
 800d992:	463e      	mov	r6, r7
 800d994:	6165      	str	r5, [r4, #20]
 800d996:	eba5 0509 	sub.w	r5, r5, r9
 800d99a:	60a5      	str	r5, [r4, #8]
 800d99c:	42be      	cmp	r6, r7
 800d99e:	d900      	bls.n	800d9a2 <__ssputs_r+0x72>
 800d9a0:	463e      	mov	r6, r7
 800d9a2:	4632      	mov	r2, r6
 800d9a4:	4641      	mov	r1, r8
 800d9a6:	6820      	ldr	r0, [r4, #0]
 800d9a8:	f000 f9c2 	bl	800dd30 <memmove>
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	68a3      	ldr	r3, [r4, #8]
 800d9b0:	1b9b      	subs	r3, r3, r6
 800d9b2:	60a3      	str	r3, [r4, #8]
 800d9b4:	6823      	ldr	r3, [r4, #0]
 800d9b6:	4433      	add	r3, r6
 800d9b8:	6023      	str	r3, [r4, #0]
 800d9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9be:	462a      	mov	r2, r5
 800d9c0:	f7fd fef4 	bl	800b7ac <_realloc_r>
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d1e0      	bne.n	800d98c <__ssputs_r+0x5c>
 800d9ca:	4650      	mov	r0, sl
 800d9cc:	6921      	ldr	r1, [r4, #16]
 800d9ce:	f7ff fbdf 	bl	800d190 <_free_r>
 800d9d2:	230c      	movs	r3, #12
 800d9d4:	f8ca 3000 	str.w	r3, [sl]
 800d9d8:	89a3      	ldrh	r3, [r4, #12]
 800d9da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9e2:	81a3      	strh	r3, [r4, #12]
 800d9e4:	e7e9      	b.n	800d9ba <__ssputs_r+0x8a>
	...

0800d9e8 <_svfiprintf_r>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	4698      	mov	r8, r3
 800d9ee:	898b      	ldrh	r3, [r1, #12]
 800d9f0:	4607      	mov	r7, r0
 800d9f2:	061b      	lsls	r3, r3, #24
 800d9f4:	460d      	mov	r5, r1
 800d9f6:	4614      	mov	r4, r2
 800d9f8:	b09d      	sub	sp, #116	@ 0x74
 800d9fa:	d510      	bpl.n	800da1e <_svfiprintf_r+0x36>
 800d9fc:	690b      	ldr	r3, [r1, #16]
 800d9fe:	b973      	cbnz	r3, 800da1e <_svfiprintf_r+0x36>
 800da00:	2140      	movs	r1, #64	@ 0x40
 800da02:	f7fd fe3f 	bl	800b684 <_malloc_r>
 800da06:	6028      	str	r0, [r5, #0]
 800da08:	6128      	str	r0, [r5, #16]
 800da0a:	b930      	cbnz	r0, 800da1a <_svfiprintf_r+0x32>
 800da0c:	230c      	movs	r3, #12
 800da0e:	603b      	str	r3, [r7, #0]
 800da10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da14:	b01d      	add	sp, #116	@ 0x74
 800da16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da1a:	2340      	movs	r3, #64	@ 0x40
 800da1c:	616b      	str	r3, [r5, #20]
 800da1e:	2300      	movs	r3, #0
 800da20:	9309      	str	r3, [sp, #36]	@ 0x24
 800da22:	2320      	movs	r3, #32
 800da24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da28:	2330      	movs	r3, #48	@ 0x30
 800da2a:	f04f 0901 	mov.w	r9, #1
 800da2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800da32:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dbcc <_svfiprintf_r+0x1e4>
 800da36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da3a:	4623      	mov	r3, r4
 800da3c:	469a      	mov	sl, r3
 800da3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da42:	b10a      	cbz	r2, 800da48 <_svfiprintf_r+0x60>
 800da44:	2a25      	cmp	r2, #37	@ 0x25
 800da46:	d1f9      	bne.n	800da3c <_svfiprintf_r+0x54>
 800da48:	ebba 0b04 	subs.w	fp, sl, r4
 800da4c:	d00b      	beq.n	800da66 <_svfiprintf_r+0x7e>
 800da4e:	465b      	mov	r3, fp
 800da50:	4622      	mov	r2, r4
 800da52:	4629      	mov	r1, r5
 800da54:	4638      	mov	r0, r7
 800da56:	f7ff ff6b 	bl	800d930 <__ssputs_r>
 800da5a:	3001      	adds	r0, #1
 800da5c:	f000 80a7 	beq.w	800dbae <_svfiprintf_r+0x1c6>
 800da60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da62:	445a      	add	r2, fp
 800da64:	9209      	str	r2, [sp, #36]	@ 0x24
 800da66:	f89a 3000 	ldrb.w	r3, [sl]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f000 809f 	beq.w	800dbae <_svfiprintf_r+0x1c6>
 800da70:	2300      	movs	r3, #0
 800da72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da7a:	f10a 0a01 	add.w	sl, sl, #1
 800da7e:	9304      	str	r3, [sp, #16]
 800da80:	9307      	str	r3, [sp, #28]
 800da82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da86:	931a      	str	r3, [sp, #104]	@ 0x68
 800da88:	4654      	mov	r4, sl
 800da8a:	2205      	movs	r2, #5
 800da8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da90:	484e      	ldr	r0, [pc, #312]	@ (800dbcc <_svfiprintf_r+0x1e4>)
 800da92:	f7fe fd0e 	bl	800c4b2 <memchr>
 800da96:	9a04      	ldr	r2, [sp, #16]
 800da98:	b9d8      	cbnz	r0, 800dad2 <_svfiprintf_r+0xea>
 800da9a:	06d0      	lsls	r0, r2, #27
 800da9c:	bf44      	itt	mi
 800da9e:	2320      	movmi	r3, #32
 800daa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daa4:	0711      	lsls	r1, r2, #28
 800daa6:	bf44      	itt	mi
 800daa8:	232b      	movmi	r3, #43	@ 0x2b
 800daaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daae:	f89a 3000 	ldrb.w	r3, [sl]
 800dab2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dab4:	d015      	beq.n	800dae2 <_svfiprintf_r+0xfa>
 800dab6:	4654      	mov	r4, sl
 800dab8:	2000      	movs	r0, #0
 800daba:	f04f 0c0a 	mov.w	ip, #10
 800dabe:	9a07      	ldr	r2, [sp, #28]
 800dac0:	4621      	mov	r1, r4
 800dac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dac6:	3b30      	subs	r3, #48	@ 0x30
 800dac8:	2b09      	cmp	r3, #9
 800daca:	d94b      	bls.n	800db64 <_svfiprintf_r+0x17c>
 800dacc:	b1b0      	cbz	r0, 800dafc <_svfiprintf_r+0x114>
 800dace:	9207      	str	r2, [sp, #28]
 800dad0:	e014      	b.n	800dafc <_svfiprintf_r+0x114>
 800dad2:	eba0 0308 	sub.w	r3, r0, r8
 800dad6:	fa09 f303 	lsl.w	r3, r9, r3
 800dada:	4313      	orrs	r3, r2
 800dadc:	46a2      	mov	sl, r4
 800dade:	9304      	str	r3, [sp, #16]
 800dae0:	e7d2      	b.n	800da88 <_svfiprintf_r+0xa0>
 800dae2:	9b03      	ldr	r3, [sp, #12]
 800dae4:	1d19      	adds	r1, r3, #4
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	9103      	str	r1, [sp, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	bfbb      	ittet	lt
 800daee:	425b      	neglt	r3, r3
 800daf0:	f042 0202 	orrlt.w	r2, r2, #2
 800daf4:	9307      	strge	r3, [sp, #28]
 800daf6:	9307      	strlt	r3, [sp, #28]
 800daf8:	bfb8      	it	lt
 800dafa:	9204      	strlt	r2, [sp, #16]
 800dafc:	7823      	ldrb	r3, [r4, #0]
 800dafe:	2b2e      	cmp	r3, #46	@ 0x2e
 800db00:	d10a      	bne.n	800db18 <_svfiprintf_r+0x130>
 800db02:	7863      	ldrb	r3, [r4, #1]
 800db04:	2b2a      	cmp	r3, #42	@ 0x2a
 800db06:	d132      	bne.n	800db6e <_svfiprintf_r+0x186>
 800db08:	9b03      	ldr	r3, [sp, #12]
 800db0a:	3402      	adds	r4, #2
 800db0c:	1d1a      	adds	r2, r3, #4
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	9203      	str	r2, [sp, #12]
 800db12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db16:	9305      	str	r3, [sp, #20]
 800db18:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dbd0 <_svfiprintf_r+0x1e8>
 800db1c:	2203      	movs	r2, #3
 800db1e:	4650      	mov	r0, sl
 800db20:	7821      	ldrb	r1, [r4, #0]
 800db22:	f7fe fcc6 	bl	800c4b2 <memchr>
 800db26:	b138      	cbz	r0, 800db38 <_svfiprintf_r+0x150>
 800db28:	2240      	movs	r2, #64	@ 0x40
 800db2a:	9b04      	ldr	r3, [sp, #16]
 800db2c:	eba0 000a 	sub.w	r0, r0, sl
 800db30:	4082      	lsls	r2, r0
 800db32:	4313      	orrs	r3, r2
 800db34:	3401      	adds	r4, #1
 800db36:	9304      	str	r3, [sp, #16]
 800db38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db3c:	2206      	movs	r2, #6
 800db3e:	4825      	ldr	r0, [pc, #148]	@ (800dbd4 <_svfiprintf_r+0x1ec>)
 800db40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db44:	f7fe fcb5 	bl	800c4b2 <memchr>
 800db48:	2800      	cmp	r0, #0
 800db4a:	d036      	beq.n	800dbba <_svfiprintf_r+0x1d2>
 800db4c:	4b22      	ldr	r3, [pc, #136]	@ (800dbd8 <_svfiprintf_r+0x1f0>)
 800db4e:	bb1b      	cbnz	r3, 800db98 <_svfiprintf_r+0x1b0>
 800db50:	9b03      	ldr	r3, [sp, #12]
 800db52:	3307      	adds	r3, #7
 800db54:	f023 0307 	bic.w	r3, r3, #7
 800db58:	3308      	adds	r3, #8
 800db5a:	9303      	str	r3, [sp, #12]
 800db5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db5e:	4433      	add	r3, r6
 800db60:	9309      	str	r3, [sp, #36]	@ 0x24
 800db62:	e76a      	b.n	800da3a <_svfiprintf_r+0x52>
 800db64:	460c      	mov	r4, r1
 800db66:	2001      	movs	r0, #1
 800db68:	fb0c 3202 	mla	r2, ip, r2, r3
 800db6c:	e7a8      	b.n	800dac0 <_svfiprintf_r+0xd8>
 800db6e:	2300      	movs	r3, #0
 800db70:	f04f 0c0a 	mov.w	ip, #10
 800db74:	4619      	mov	r1, r3
 800db76:	3401      	adds	r4, #1
 800db78:	9305      	str	r3, [sp, #20]
 800db7a:	4620      	mov	r0, r4
 800db7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db80:	3a30      	subs	r2, #48	@ 0x30
 800db82:	2a09      	cmp	r2, #9
 800db84:	d903      	bls.n	800db8e <_svfiprintf_r+0x1a6>
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0c6      	beq.n	800db18 <_svfiprintf_r+0x130>
 800db8a:	9105      	str	r1, [sp, #20]
 800db8c:	e7c4      	b.n	800db18 <_svfiprintf_r+0x130>
 800db8e:	4604      	mov	r4, r0
 800db90:	2301      	movs	r3, #1
 800db92:	fb0c 2101 	mla	r1, ip, r1, r2
 800db96:	e7f0      	b.n	800db7a <_svfiprintf_r+0x192>
 800db98:	ab03      	add	r3, sp, #12
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	462a      	mov	r2, r5
 800db9e:	4638      	mov	r0, r7
 800dba0:	4b0e      	ldr	r3, [pc, #56]	@ (800dbdc <_svfiprintf_r+0x1f4>)
 800dba2:	a904      	add	r1, sp, #16
 800dba4:	f7fd fece 	bl	800b944 <_printf_float>
 800dba8:	1c42      	adds	r2, r0, #1
 800dbaa:	4606      	mov	r6, r0
 800dbac:	d1d6      	bne.n	800db5c <_svfiprintf_r+0x174>
 800dbae:	89ab      	ldrh	r3, [r5, #12]
 800dbb0:	065b      	lsls	r3, r3, #25
 800dbb2:	f53f af2d 	bmi.w	800da10 <_svfiprintf_r+0x28>
 800dbb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbb8:	e72c      	b.n	800da14 <_svfiprintf_r+0x2c>
 800dbba:	ab03      	add	r3, sp, #12
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	462a      	mov	r2, r5
 800dbc0:	4638      	mov	r0, r7
 800dbc2:	4b06      	ldr	r3, [pc, #24]	@ (800dbdc <_svfiprintf_r+0x1f4>)
 800dbc4:	a904      	add	r1, sp, #16
 800dbc6:	f7fe f95b 	bl	800be80 <_printf_i>
 800dbca:	e7ed      	b.n	800dba8 <_svfiprintf_r+0x1c0>
 800dbcc:	0800e940 	.word	0x0800e940
 800dbd0:	0800e946 	.word	0x0800e946
 800dbd4:	0800e94a 	.word	0x0800e94a
 800dbd8:	0800b945 	.word	0x0800b945
 800dbdc:	0800d931 	.word	0x0800d931

0800dbe0 <__sflush_r>:
 800dbe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe6:	0716      	lsls	r6, r2, #28
 800dbe8:	4605      	mov	r5, r0
 800dbea:	460c      	mov	r4, r1
 800dbec:	d454      	bmi.n	800dc98 <__sflush_r+0xb8>
 800dbee:	684b      	ldr	r3, [r1, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	dc02      	bgt.n	800dbfa <__sflush_r+0x1a>
 800dbf4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	dd48      	ble.n	800dc8c <__sflush_r+0xac>
 800dbfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dbfc:	2e00      	cmp	r6, #0
 800dbfe:	d045      	beq.n	800dc8c <__sflush_r+0xac>
 800dc00:	2300      	movs	r3, #0
 800dc02:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc06:	682f      	ldr	r7, [r5, #0]
 800dc08:	6a21      	ldr	r1, [r4, #32]
 800dc0a:	602b      	str	r3, [r5, #0]
 800dc0c:	d030      	beq.n	800dc70 <__sflush_r+0x90>
 800dc0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc10:	89a3      	ldrh	r3, [r4, #12]
 800dc12:	0759      	lsls	r1, r3, #29
 800dc14:	d505      	bpl.n	800dc22 <__sflush_r+0x42>
 800dc16:	6863      	ldr	r3, [r4, #4]
 800dc18:	1ad2      	subs	r2, r2, r3
 800dc1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc1c:	b10b      	cbz	r3, 800dc22 <__sflush_r+0x42>
 800dc1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc20:	1ad2      	subs	r2, r2, r3
 800dc22:	2300      	movs	r3, #0
 800dc24:	4628      	mov	r0, r5
 800dc26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc28:	6a21      	ldr	r1, [r4, #32]
 800dc2a:	47b0      	blx	r6
 800dc2c:	1c43      	adds	r3, r0, #1
 800dc2e:	89a3      	ldrh	r3, [r4, #12]
 800dc30:	d106      	bne.n	800dc40 <__sflush_r+0x60>
 800dc32:	6829      	ldr	r1, [r5, #0]
 800dc34:	291d      	cmp	r1, #29
 800dc36:	d82b      	bhi.n	800dc90 <__sflush_r+0xb0>
 800dc38:	4a28      	ldr	r2, [pc, #160]	@ (800dcdc <__sflush_r+0xfc>)
 800dc3a:	410a      	asrs	r2, r1
 800dc3c:	07d6      	lsls	r6, r2, #31
 800dc3e:	d427      	bmi.n	800dc90 <__sflush_r+0xb0>
 800dc40:	2200      	movs	r2, #0
 800dc42:	6062      	str	r2, [r4, #4]
 800dc44:	6922      	ldr	r2, [r4, #16]
 800dc46:	04d9      	lsls	r1, r3, #19
 800dc48:	6022      	str	r2, [r4, #0]
 800dc4a:	d504      	bpl.n	800dc56 <__sflush_r+0x76>
 800dc4c:	1c42      	adds	r2, r0, #1
 800dc4e:	d101      	bne.n	800dc54 <__sflush_r+0x74>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	b903      	cbnz	r3, 800dc56 <__sflush_r+0x76>
 800dc54:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc58:	602f      	str	r7, [r5, #0]
 800dc5a:	b1b9      	cbz	r1, 800dc8c <__sflush_r+0xac>
 800dc5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc60:	4299      	cmp	r1, r3
 800dc62:	d002      	beq.n	800dc6a <__sflush_r+0x8a>
 800dc64:	4628      	mov	r0, r5
 800dc66:	f7ff fa93 	bl	800d190 <_free_r>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc6e:	e00d      	b.n	800dc8c <__sflush_r+0xac>
 800dc70:	2301      	movs	r3, #1
 800dc72:	4628      	mov	r0, r5
 800dc74:	47b0      	blx	r6
 800dc76:	4602      	mov	r2, r0
 800dc78:	1c50      	adds	r0, r2, #1
 800dc7a:	d1c9      	bne.n	800dc10 <__sflush_r+0x30>
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d0c6      	beq.n	800dc10 <__sflush_r+0x30>
 800dc82:	2b1d      	cmp	r3, #29
 800dc84:	d001      	beq.n	800dc8a <__sflush_r+0xaa>
 800dc86:	2b16      	cmp	r3, #22
 800dc88:	d11d      	bne.n	800dcc6 <__sflush_r+0xe6>
 800dc8a:	602f      	str	r7, [r5, #0]
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	e021      	b.n	800dcd4 <__sflush_r+0xf4>
 800dc90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc94:	b21b      	sxth	r3, r3
 800dc96:	e01a      	b.n	800dcce <__sflush_r+0xee>
 800dc98:	690f      	ldr	r7, [r1, #16]
 800dc9a:	2f00      	cmp	r7, #0
 800dc9c:	d0f6      	beq.n	800dc8c <__sflush_r+0xac>
 800dc9e:	0793      	lsls	r3, r2, #30
 800dca0:	bf18      	it	ne
 800dca2:	2300      	movne	r3, #0
 800dca4:	680e      	ldr	r6, [r1, #0]
 800dca6:	bf08      	it	eq
 800dca8:	694b      	ldreq	r3, [r1, #20]
 800dcaa:	1bf6      	subs	r6, r6, r7
 800dcac:	600f      	str	r7, [r1, #0]
 800dcae:	608b      	str	r3, [r1, #8]
 800dcb0:	2e00      	cmp	r6, #0
 800dcb2:	ddeb      	ble.n	800dc8c <__sflush_r+0xac>
 800dcb4:	4633      	mov	r3, r6
 800dcb6:	463a      	mov	r2, r7
 800dcb8:	4628      	mov	r0, r5
 800dcba:	6a21      	ldr	r1, [r4, #32]
 800dcbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800dcc0:	47e0      	blx	ip
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	dc07      	bgt.n	800dcd6 <__sflush_r+0xf6>
 800dcc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcd2:	81a3      	strh	r3, [r4, #12]
 800dcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd6:	4407      	add	r7, r0
 800dcd8:	1a36      	subs	r6, r6, r0
 800dcda:	e7e9      	b.n	800dcb0 <__sflush_r+0xd0>
 800dcdc:	dfbffffe 	.word	0xdfbffffe

0800dce0 <_fflush_r>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	690b      	ldr	r3, [r1, #16]
 800dce4:	4605      	mov	r5, r0
 800dce6:	460c      	mov	r4, r1
 800dce8:	b913      	cbnz	r3, 800dcf0 <_fflush_r+0x10>
 800dcea:	2500      	movs	r5, #0
 800dcec:	4628      	mov	r0, r5
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	b118      	cbz	r0, 800dcfa <_fflush_r+0x1a>
 800dcf2:	6a03      	ldr	r3, [r0, #32]
 800dcf4:	b90b      	cbnz	r3, 800dcfa <_fflush_r+0x1a>
 800dcf6:	f7fe fa6f 	bl	800c1d8 <__sinit>
 800dcfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d0f3      	beq.n	800dcea <_fflush_r+0xa>
 800dd02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd04:	07d0      	lsls	r0, r2, #31
 800dd06:	d404      	bmi.n	800dd12 <_fflush_r+0x32>
 800dd08:	0599      	lsls	r1, r3, #22
 800dd0a:	d402      	bmi.n	800dd12 <_fflush_r+0x32>
 800dd0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd0e:	f7fe fbce 	bl	800c4ae <__retarget_lock_acquire_recursive>
 800dd12:	4628      	mov	r0, r5
 800dd14:	4621      	mov	r1, r4
 800dd16:	f7ff ff63 	bl	800dbe0 <__sflush_r>
 800dd1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	07da      	lsls	r2, r3, #31
 800dd20:	d4e4      	bmi.n	800dcec <_fflush_r+0xc>
 800dd22:	89a3      	ldrh	r3, [r4, #12]
 800dd24:	059b      	lsls	r3, r3, #22
 800dd26:	d4e1      	bmi.n	800dcec <_fflush_r+0xc>
 800dd28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd2a:	f7fe fbc1 	bl	800c4b0 <__retarget_lock_release_recursive>
 800dd2e:	e7dd      	b.n	800dcec <_fflush_r+0xc>

0800dd30 <memmove>:
 800dd30:	4288      	cmp	r0, r1
 800dd32:	b510      	push	{r4, lr}
 800dd34:	eb01 0402 	add.w	r4, r1, r2
 800dd38:	d902      	bls.n	800dd40 <memmove+0x10>
 800dd3a:	4284      	cmp	r4, r0
 800dd3c:	4623      	mov	r3, r4
 800dd3e:	d807      	bhi.n	800dd50 <memmove+0x20>
 800dd40:	1e43      	subs	r3, r0, #1
 800dd42:	42a1      	cmp	r1, r4
 800dd44:	d008      	beq.n	800dd58 <memmove+0x28>
 800dd46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd4e:	e7f8      	b.n	800dd42 <memmove+0x12>
 800dd50:	4601      	mov	r1, r0
 800dd52:	4402      	add	r2, r0
 800dd54:	428a      	cmp	r2, r1
 800dd56:	d100      	bne.n	800dd5a <memmove+0x2a>
 800dd58:	bd10      	pop	{r4, pc}
 800dd5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd62:	e7f7      	b.n	800dd54 <memmove+0x24>

0800dd64 <__assert_func>:
 800dd64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd66:	4614      	mov	r4, r2
 800dd68:	461a      	mov	r2, r3
 800dd6a:	4b09      	ldr	r3, [pc, #36]	@ (800dd90 <__assert_func+0x2c>)
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68d8      	ldr	r0, [r3, #12]
 800dd72:	b954      	cbnz	r4, 800dd8a <__assert_func+0x26>
 800dd74:	4b07      	ldr	r3, [pc, #28]	@ (800dd94 <__assert_func+0x30>)
 800dd76:	461c      	mov	r4, r3
 800dd78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd7c:	9100      	str	r1, [sp, #0]
 800dd7e:	462b      	mov	r3, r5
 800dd80:	4905      	ldr	r1, [pc, #20]	@ (800dd98 <__assert_func+0x34>)
 800dd82:	f000 f841 	bl	800de08 <fiprintf>
 800dd86:	f7fd fc43 	bl	800b610 <abort>
 800dd8a:	4b04      	ldr	r3, [pc, #16]	@ (800dd9c <__assert_func+0x38>)
 800dd8c:	e7f4      	b.n	800dd78 <__assert_func+0x14>
 800dd8e:	bf00      	nop
 800dd90:	2000004c 	.word	0x2000004c
 800dd94:	0800e996 	.word	0x0800e996
 800dd98:	0800e968 	.word	0x0800e968
 800dd9c:	0800e95b 	.word	0x0800e95b

0800dda0 <_calloc_r>:
 800dda0:	b570      	push	{r4, r5, r6, lr}
 800dda2:	fba1 5402 	umull	r5, r4, r1, r2
 800dda6:	b93c      	cbnz	r4, 800ddb8 <_calloc_r+0x18>
 800dda8:	4629      	mov	r1, r5
 800ddaa:	f7fd fc6b 	bl	800b684 <_malloc_r>
 800ddae:	4606      	mov	r6, r0
 800ddb0:	b928      	cbnz	r0, 800ddbe <_calloc_r+0x1e>
 800ddb2:	2600      	movs	r6, #0
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	bd70      	pop	{r4, r5, r6, pc}
 800ddb8:	220c      	movs	r2, #12
 800ddba:	6002      	str	r2, [r0, #0]
 800ddbc:	e7f9      	b.n	800ddb2 <_calloc_r+0x12>
 800ddbe:	462a      	mov	r2, r5
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	f7fe faa2 	bl	800c30a <memset>
 800ddc6:	e7f5      	b.n	800ddb4 <_calloc_r+0x14>

0800ddc8 <__ascii_mbtowc>:
 800ddc8:	b082      	sub	sp, #8
 800ddca:	b901      	cbnz	r1, 800ddce <__ascii_mbtowc+0x6>
 800ddcc:	a901      	add	r1, sp, #4
 800ddce:	b142      	cbz	r2, 800dde2 <__ascii_mbtowc+0x1a>
 800ddd0:	b14b      	cbz	r3, 800dde6 <__ascii_mbtowc+0x1e>
 800ddd2:	7813      	ldrb	r3, [r2, #0]
 800ddd4:	600b      	str	r3, [r1, #0]
 800ddd6:	7812      	ldrb	r2, [r2, #0]
 800ddd8:	1e10      	subs	r0, r2, #0
 800ddda:	bf18      	it	ne
 800dddc:	2001      	movne	r0, #1
 800ddde:	b002      	add	sp, #8
 800dde0:	4770      	bx	lr
 800dde2:	4610      	mov	r0, r2
 800dde4:	e7fb      	b.n	800ddde <__ascii_mbtowc+0x16>
 800dde6:	f06f 0001 	mvn.w	r0, #1
 800ddea:	e7f8      	b.n	800ddde <__ascii_mbtowc+0x16>

0800ddec <__ascii_wctomb>:
 800ddec:	4603      	mov	r3, r0
 800ddee:	4608      	mov	r0, r1
 800ddf0:	b141      	cbz	r1, 800de04 <__ascii_wctomb+0x18>
 800ddf2:	2aff      	cmp	r2, #255	@ 0xff
 800ddf4:	d904      	bls.n	800de00 <__ascii_wctomb+0x14>
 800ddf6:	228a      	movs	r2, #138	@ 0x8a
 800ddf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	4770      	bx	lr
 800de00:	2001      	movs	r0, #1
 800de02:	700a      	strb	r2, [r1, #0]
 800de04:	4770      	bx	lr
	...

0800de08 <fiprintf>:
 800de08:	b40e      	push	{r1, r2, r3}
 800de0a:	b503      	push	{r0, r1, lr}
 800de0c:	4601      	mov	r1, r0
 800de0e:	ab03      	add	r3, sp, #12
 800de10:	4805      	ldr	r0, [pc, #20]	@ (800de28 <fiprintf+0x20>)
 800de12:	f853 2b04 	ldr.w	r2, [r3], #4
 800de16:	6800      	ldr	r0, [r0, #0]
 800de18:	9301      	str	r3, [sp, #4]
 800de1a:	f000 f82f 	bl	800de7c <_vfiprintf_r>
 800de1e:	b002      	add	sp, #8
 800de20:	f85d eb04 	ldr.w	lr, [sp], #4
 800de24:	b003      	add	sp, #12
 800de26:	4770      	bx	lr
 800de28:	2000004c 	.word	0x2000004c

0800de2c <__sfputc_r>:
 800de2c:	6893      	ldr	r3, [r2, #8]
 800de2e:	b410      	push	{r4}
 800de30:	3b01      	subs	r3, #1
 800de32:	2b00      	cmp	r3, #0
 800de34:	6093      	str	r3, [r2, #8]
 800de36:	da07      	bge.n	800de48 <__sfputc_r+0x1c>
 800de38:	6994      	ldr	r4, [r2, #24]
 800de3a:	42a3      	cmp	r3, r4
 800de3c:	db01      	blt.n	800de42 <__sfputc_r+0x16>
 800de3e:	290a      	cmp	r1, #10
 800de40:	d102      	bne.n	800de48 <__sfputc_r+0x1c>
 800de42:	bc10      	pop	{r4}
 800de44:	f000 b932 	b.w	800e0ac <__swbuf_r>
 800de48:	6813      	ldr	r3, [r2, #0]
 800de4a:	1c58      	adds	r0, r3, #1
 800de4c:	6010      	str	r0, [r2, #0]
 800de4e:	7019      	strb	r1, [r3, #0]
 800de50:	4608      	mov	r0, r1
 800de52:	bc10      	pop	{r4}
 800de54:	4770      	bx	lr

0800de56 <__sfputs_r>:
 800de56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de58:	4606      	mov	r6, r0
 800de5a:	460f      	mov	r7, r1
 800de5c:	4614      	mov	r4, r2
 800de5e:	18d5      	adds	r5, r2, r3
 800de60:	42ac      	cmp	r4, r5
 800de62:	d101      	bne.n	800de68 <__sfputs_r+0x12>
 800de64:	2000      	movs	r0, #0
 800de66:	e007      	b.n	800de78 <__sfputs_r+0x22>
 800de68:	463a      	mov	r2, r7
 800de6a:	4630      	mov	r0, r6
 800de6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de70:	f7ff ffdc 	bl	800de2c <__sfputc_r>
 800de74:	1c43      	adds	r3, r0, #1
 800de76:	d1f3      	bne.n	800de60 <__sfputs_r+0xa>
 800de78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de7c <_vfiprintf_r>:
 800de7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de80:	460d      	mov	r5, r1
 800de82:	4614      	mov	r4, r2
 800de84:	4698      	mov	r8, r3
 800de86:	4606      	mov	r6, r0
 800de88:	b09d      	sub	sp, #116	@ 0x74
 800de8a:	b118      	cbz	r0, 800de94 <_vfiprintf_r+0x18>
 800de8c:	6a03      	ldr	r3, [r0, #32]
 800de8e:	b90b      	cbnz	r3, 800de94 <_vfiprintf_r+0x18>
 800de90:	f7fe f9a2 	bl	800c1d8 <__sinit>
 800de94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de96:	07d9      	lsls	r1, r3, #31
 800de98:	d405      	bmi.n	800dea6 <_vfiprintf_r+0x2a>
 800de9a:	89ab      	ldrh	r3, [r5, #12]
 800de9c:	059a      	lsls	r2, r3, #22
 800de9e:	d402      	bmi.n	800dea6 <_vfiprintf_r+0x2a>
 800dea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dea2:	f7fe fb04 	bl	800c4ae <__retarget_lock_acquire_recursive>
 800dea6:	89ab      	ldrh	r3, [r5, #12]
 800dea8:	071b      	lsls	r3, r3, #28
 800deaa:	d501      	bpl.n	800deb0 <_vfiprintf_r+0x34>
 800deac:	692b      	ldr	r3, [r5, #16]
 800deae:	b99b      	cbnz	r3, 800ded8 <_vfiprintf_r+0x5c>
 800deb0:	4629      	mov	r1, r5
 800deb2:	4630      	mov	r0, r6
 800deb4:	f000 f938 	bl	800e128 <__swsetup_r>
 800deb8:	b170      	cbz	r0, 800ded8 <_vfiprintf_r+0x5c>
 800deba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800debc:	07dc      	lsls	r4, r3, #31
 800debe:	d504      	bpl.n	800deca <_vfiprintf_r+0x4e>
 800dec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dec4:	b01d      	add	sp, #116	@ 0x74
 800dec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deca:	89ab      	ldrh	r3, [r5, #12]
 800decc:	0598      	lsls	r0, r3, #22
 800dece:	d4f7      	bmi.n	800dec0 <_vfiprintf_r+0x44>
 800ded0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ded2:	f7fe faed 	bl	800c4b0 <__retarget_lock_release_recursive>
 800ded6:	e7f3      	b.n	800dec0 <_vfiprintf_r+0x44>
 800ded8:	2300      	movs	r3, #0
 800deda:	9309      	str	r3, [sp, #36]	@ 0x24
 800dedc:	2320      	movs	r3, #32
 800dede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dee2:	2330      	movs	r3, #48	@ 0x30
 800dee4:	f04f 0901 	mov.w	r9, #1
 800dee8:	f8cd 800c 	str.w	r8, [sp, #12]
 800deec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e098 <_vfiprintf_r+0x21c>
 800def0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800def4:	4623      	mov	r3, r4
 800def6:	469a      	mov	sl, r3
 800def8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800defc:	b10a      	cbz	r2, 800df02 <_vfiprintf_r+0x86>
 800defe:	2a25      	cmp	r2, #37	@ 0x25
 800df00:	d1f9      	bne.n	800def6 <_vfiprintf_r+0x7a>
 800df02:	ebba 0b04 	subs.w	fp, sl, r4
 800df06:	d00b      	beq.n	800df20 <_vfiprintf_r+0xa4>
 800df08:	465b      	mov	r3, fp
 800df0a:	4622      	mov	r2, r4
 800df0c:	4629      	mov	r1, r5
 800df0e:	4630      	mov	r0, r6
 800df10:	f7ff ffa1 	bl	800de56 <__sfputs_r>
 800df14:	3001      	adds	r0, #1
 800df16:	f000 80a7 	beq.w	800e068 <_vfiprintf_r+0x1ec>
 800df1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df1c:	445a      	add	r2, fp
 800df1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800df20:	f89a 3000 	ldrb.w	r3, [sl]
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 809f 	beq.w	800e068 <_vfiprintf_r+0x1ec>
 800df2a:	2300      	movs	r3, #0
 800df2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df34:	f10a 0a01 	add.w	sl, sl, #1
 800df38:	9304      	str	r3, [sp, #16]
 800df3a:	9307      	str	r3, [sp, #28]
 800df3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df40:	931a      	str	r3, [sp, #104]	@ 0x68
 800df42:	4654      	mov	r4, sl
 800df44:	2205      	movs	r2, #5
 800df46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df4a:	4853      	ldr	r0, [pc, #332]	@ (800e098 <_vfiprintf_r+0x21c>)
 800df4c:	f7fe fab1 	bl	800c4b2 <memchr>
 800df50:	9a04      	ldr	r2, [sp, #16]
 800df52:	b9d8      	cbnz	r0, 800df8c <_vfiprintf_r+0x110>
 800df54:	06d1      	lsls	r1, r2, #27
 800df56:	bf44      	itt	mi
 800df58:	2320      	movmi	r3, #32
 800df5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df5e:	0713      	lsls	r3, r2, #28
 800df60:	bf44      	itt	mi
 800df62:	232b      	movmi	r3, #43	@ 0x2b
 800df64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df68:	f89a 3000 	ldrb.w	r3, [sl]
 800df6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800df6e:	d015      	beq.n	800df9c <_vfiprintf_r+0x120>
 800df70:	4654      	mov	r4, sl
 800df72:	2000      	movs	r0, #0
 800df74:	f04f 0c0a 	mov.w	ip, #10
 800df78:	9a07      	ldr	r2, [sp, #28]
 800df7a:	4621      	mov	r1, r4
 800df7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df80:	3b30      	subs	r3, #48	@ 0x30
 800df82:	2b09      	cmp	r3, #9
 800df84:	d94b      	bls.n	800e01e <_vfiprintf_r+0x1a2>
 800df86:	b1b0      	cbz	r0, 800dfb6 <_vfiprintf_r+0x13a>
 800df88:	9207      	str	r2, [sp, #28]
 800df8a:	e014      	b.n	800dfb6 <_vfiprintf_r+0x13a>
 800df8c:	eba0 0308 	sub.w	r3, r0, r8
 800df90:	fa09 f303 	lsl.w	r3, r9, r3
 800df94:	4313      	orrs	r3, r2
 800df96:	46a2      	mov	sl, r4
 800df98:	9304      	str	r3, [sp, #16]
 800df9a:	e7d2      	b.n	800df42 <_vfiprintf_r+0xc6>
 800df9c:	9b03      	ldr	r3, [sp, #12]
 800df9e:	1d19      	adds	r1, r3, #4
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	9103      	str	r1, [sp, #12]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	bfbb      	ittet	lt
 800dfa8:	425b      	neglt	r3, r3
 800dfaa:	f042 0202 	orrlt.w	r2, r2, #2
 800dfae:	9307      	strge	r3, [sp, #28]
 800dfb0:	9307      	strlt	r3, [sp, #28]
 800dfb2:	bfb8      	it	lt
 800dfb4:	9204      	strlt	r2, [sp, #16]
 800dfb6:	7823      	ldrb	r3, [r4, #0]
 800dfb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfba:	d10a      	bne.n	800dfd2 <_vfiprintf_r+0x156>
 800dfbc:	7863      	ldrb	r3, [r4, #1]
 800dfbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfc0:	d132      	bne.n	800e028 <_vfiprintf_r+0x1ac>
 800dfc2:	9b03      	ldr	r3, [sp, #12]
 800dfc4:	3402      	adds	r4, #2
 800dfc6:	1d1a      	adds	r2, r3, #4
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	9203      	str	r2, [sp, #12]
 800dfcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfd0:	9305      	str	r3, [sp, #20]
 800dfd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e09c <_vfiprintf_r+0x220>
 800dfd6:	2203      	movs	r2, #3
 800dfd8:	4650      	mov	r0, sl
 800dfda:	7821      	ldrb	r1, [r4, #0]
 800dfdc:	f7fe fa69 	bl	800c4b2 <memchr>
 800dfe0:	b138      	cbz	r0, 800dff2 <_vfiprintf_r+0x176>
 800dfe2:	2240      	movs	r2, #64	@ 0x40
 800dfe4:	9b04      	ldr	r3, [sp, #16]
 800dfe6:	eba0 000a 	sub.w	r0, r0, sl
 800dfea:	4082      	lsls	r2, r0
 800dfec:	4313      	orrs	r3, r2
 800dfee:	3401      	adds	r4, #1
 800dff0:	9304      	str	r3, [sp, #16]
 800dff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff6:	2206      	movs	r2, #6
 800dff8:	4829      	ldr	r0, [pc, #164]	@ (800e0a0 <_vfiprintf_r+0x224>)
 800dffa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dffe:	f7fe fa58 	bl	800c4b2 <memchr>
 800e002:	2800      	cmp	r0, #0
 800e004:	d03f      	beq.n	800e086 <_vfiprintf_r+0x20a>
 800e006:	4b27      	ldr	r3, [pc, #156]	@ (800e0a4 <_vfiprintf_r+0x228>)
 800e008:	bb1b      	cbnz	r3, 800e052 <_vfiprintf_r+0x1d6>
 800e00a:	9b03      	ldr	r3, [sp, #12]
 800e00c:	3307      	adds	r3, #7
 800e00e:	f023 0307 	bic.w	r3, r3, #7
 800e012:	3308      	adds	r3, #8
 800e014:	9303      	str	r3, [sp, #12]
 800e016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e018:	443b      	add	r3, r7
 800e01a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e01c:	e76a      	b.n	800def4 <_vfiprintf_r+0x78>
 800e01e:	460c      	mov	r4, r1
 800e020:	2001      	movs	r0, #1
 800e022:	fb0c 3202 	mla	r2, ip, r2, r3
 800e026:	e7a8      	b.n	800df7a <_vfiprintf_r+0xfe>
 800e028:	2300      	movs	r3, #0
 800e02a:	f04f 0c0a 	mov.w	ip, #10
 800e02e:	4619      	mov	r1, r3
 800e030:	3401      	adds	r4, #1
 800e032:	9305      	str	r3, [sp, #20]
 800e034:	4620      	mov	r0, r4
 800e036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e03a:	3a30      	subs	r2, #48	@ 0x30
 800e03c:	2a09      	cmp	r2, #9
 800e03e:	d903      	bls.n	800e048 <_vfiprintf_r+0x1cc>
 800e040:	2b00      	cmp	r3, #0
 800e042:	d0c6      	beq.n	800dfd2 <_vfiprintf_r+0x156>
 800e044:	9105      	str	r1, [sp, #20]
 800e046:	e7c4      	b.n	800dfd2 <_vfiprintf_r+0x156>
 800e048:	4604      	mov	r4, r0
 800e04a:	2301      	movs	r3, #1
 800e04c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e050:	e7f0      	b.n	800e034 <_vfiprintf_r+0x1b8>
 800e052:	ab03      	add	r3, sp, #12
 800e054:	9300      	str	r3, [sp, #0]
 800e056:	462a      	mov	r2, r5
 800e058:	4630      	mov	r0, r6
 800e05a:	4b13      	ldr	r3, [pc, #76]	@ (800e0a8 <_vfiprintf_r+0x22c>)
 800e05c:	a904      	add	r1, sp, #16
 800e05e:	f7fd fc71 	bl	800b944 <_printf_float>
 800e062:	4607      	mov	r7, r0
 800e064:	1c78      	adds	r0, r7, #1
 800e066:	d1d6      	bne.n	800e016 <_vfiprintf_r+0x19a>
 800e068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e06a:	07d9      	lsls	r1, r3, #31
 800e06c:	d405      	bmi.n	800e07a <_vfiprintf_r+0x1fe>
 800e06e:	89ab      	ldrh	r3, [r5, #12]
 800e070:	059a      	lsls	r2, r3, #22
 800e072:	d402      	bmi.n	800e07a <_vfiprintf_r+0x1fe>
 800e074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e076:	f7fe fa1b 	bl	800c4b0 <__retarget_lock_release_recursive>
 800e07a:	89ab      	ldrh	r3, [r5, #12]
 800e07c:	065b      	lsls	r3, r3, #25
 800e07e:	f53f af1f 	bmi.w	800dec0 <_vfiprintf_r+0x44>
 800e082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e084:	e71e      	b.n	800dec4 <_vfiprintf_r+0x48>
 800e086:	ab03      	add	r3, sp, #12
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	462a      	mov	r2, r5
 800e08c:	4630      	mov	r0, r6
 800e08e:	4b06      	ldr	r3, [pc, #24]	@ (800e0a8 <_vfiprintf_r+0x22c>)
 800e090:	a904      	add	r1, sp, #16
 800e092:	f7fd fef5 	bl	800be80 <_printf_i>
 800e096:	e7e4      	b.n	800e062 <_vfiprintf_r+0x1e6>
 800e098:	0800e940 	.word	0x0800e940
 800e09c:	0800e946 	.word	0x0800e946
 800e0a0:	0800e94a 	.word	0x0800e94a
 800e0a4:	0800b945 	.word	0x0800b945
 800e0a8:	0800de57 	.word	0x0800de57

0800e0ac <__swbuf_r>:
 800e0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ae:	460e      	mov	r6, r1
 800e0b0:	4614      	mov	r4, r2
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	b118      	cbz	r0, 800e0be <__swbuf_r+0x12>
 800e0b6:	6a03      	ldr	r3, [r0, #32]
 800e0b8:	b90b      	cbnz	r3, 800e0be <__swbuf_r+0x12>
 800e0ba:	f7fe f88d 	bl	800c1d8 <__sinit>
 800e0be:	69a3      	ldr	r3, [r4, #24]
 800e0c0:	60a3      	str	r3, [r4, #8]
 800e0c2:	89a3      	ldrh	r3, [r4, #12]
 800e0c4:	071a      	lsls	r2, r3, #28
 800e0c6:	d501      	bpl.n	800e0cc <__swbuf_r+0x20>
 800e0c8:	6923      	ldr	r3, [r4, #16]
 800e0ca:	b943      	cbnz	r3, 800e0de <__swbuf_r+0x32>
 800e0cc:	4621      	mov	r1, r4
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	f000 f82a 	bl	800e128 <__swsetup_r>
 800e0d4:	b118      	cbz	r0, 800e0de <__swbuf_r+0x32>
 800e0d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e0da:	4638      	mov	r0, r7
 800e0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	6922      	ldr	r2, [r4, #16]
 800e0e2:	b2f6      	uxtb	r6, r6
 800e0e4:	1a98      	subs	r0, r3, r2
 800e0e6:	6963      	ldr	r3, [r4, #20]
 800e0e8:	4637      	mov	r7, r6
 800e0ea:	4283      	cmp	r3, r0
 800e0ec:	dc05      	bgt.n	800e0fa <__swbuf_r+0x4e>
 800e0ee:	4621      	mov	r1, r4
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f7ff fdf5 	bl	800dce0 <_fflush_r>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d1ed      	bne.n	800e0d6 <__swbuf_r+0x2a>
 800e0fa:	68a3      	ldr	r3, [r4, #8]
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	60a3      	str	r3, [r4, #8]
 800e100:	6823      	ldr	r3, [r4, #0]
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	6022      	str	r2, [r4, #0]
 800e106:	701e      	strb	r6, [r3, #0]
 800e108:	6962      	ldr	r2, [r4, #20]
 800e10a:	1c43      	adds	r3, r0, #1
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d004      	beq.n	800e11a <__swbuf_r+0x6e>
 800e110:	89a3      	ldrh	r3, [r4, #12]
 800e112:	07db      	lsls	r3, r3, #31
 800e114:	d5e1      	bpl.n	800e0da <__swbuf_r+0x2e>
 800e116:	2e0a      	cmp	r6, #10
 800e118:	d1df      	bne.n	800e0da <__swbuf_r+0x2e>
 800e11a:	4621      	mov	r1, r4
 800e11c:	4628      	mov	r0, r5
 800e11e:	f7ff fddf 	bl	800dce0 <_fflush_r>
 800e122:	2800      	cmp	r0, #0
 800e124:	d0d9      	beq.n	800e0da <__swbuf_r+0x2e>
 800e126:	e7d6      	b.n	800e0d6 <__swbuf_r+0x2a>

0800e128 <__swsetup_r>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	4b29      	ldr	r3, [pc, #164]	@ (800e1d0 <__swsetup_r+0xa8>)
 800e12c:	4605      	mov	r5, r0
 800e12e:	6818      	ldr	r0, [r3, #0]
 800e130:	460c      	mov	r4, r1
 800e132:	b118      	cbz	r0, 800e13c <__swsetup_r+0x14>
 800e134:	6a03      	ldr	r3, [r0, #32]
 800e136:	b90b      	cbnz	r3, 800e13c <__swsetup_r+0x14>
 800e138:	f7fe f84e 	bl	800c1d8 <__sinit>
 800e13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e140:	0719      	lsls	r1, r3, #28
 800e142:	d422      	bmi.n	800e18a <__swsetup_r+0x62>
 800e144:	06da      	lsls	r2, r3, #27
 800e146:	d407      	bmi.n	800e158 <__swsetup_r+0x30>
 800e148:	2209      	movs	r2, #9
 800e14a:	602a      	str	r2, [r5, #0]
 800e14c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e150:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e154:	81a3      	strh	r3, [r4, #12]
 800e156:	e033      	b.n	800e1c0 <__swsetup_r+0x98>
 800e158:	0758      	lsls	r0, r3, #29
 800e15a:	d512      	bpl.n	800e182 <__swsetup_r+0x5a>
 800e15c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e15e:	b141      	cbz	r1, 800e172 <__swsetup_r+0x4a>
 800e160:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e164:	4299      	cmp	r1, r3
 800e166:	d002      	beq.n	800e16e <__swsetup_r+0x46>
 800e168:	4628      	mov	r0, r5
 800e16a:	f7ff f811 	bl	800d190 <_free_r>
 800e16e:	2300      	movs	r3, #0
 800e170:	6363      	str	r3, [r4, #52]	@ 0x34
 800e172:	89a3      	ldrh	r3, [r4, #12]
 800e174:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e178:	81a3      	strh	r3, [r4, #12]
 800e17a:	2300      	movs	r3, #0
 800e17c:	6063      	str	r3, [r4, #4]
 800e17e:	6923      	ldr	r3, [r4, #16]
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	89a3      	ldrh	r3, [r4, #12]
 800e184:	f043 0308 	orr.w	r3, r3, #8
 800e188:	81a3      	strh	r3, [r4, #12]
 800e18a:	6923      	ldr	r3, [r4, #16]
 800e18c:	b94b      	cbnz	r3, 800e1a2 <__swsetup_r+0x7a>
 800e18e:	89a3      	ldrh	r3, [r4, #12]
 800e190:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e198:	d003      	beq.n	800e1a2 <__swsetup_r+0x7a>
 800e19a:	4621      	mov	r1, r4
 800e19c:	4628      	mov	r0, r5
 800e19e:	f000 f83e 	bl	800e21e <__smakebuf_r>
 800e1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a6:	f013 0201 	ands.w	r2, r3, #1
 800e1aa:	d00a      	beq.n	800e1c2 <__swsetup_r+0x9a>
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	60a2      	str	r2, [r4, #8]
 800e1b0:	6962      	ldr	r2, [r4, #20]
 800e1b2:	4252      	negs	r2, r2
 800e1b4:	61a2      	str	r2, [r4, #24]
 800e1b6:	6922      	ldr	r2, [r4, #16]
 800e1b8:	b942      	cbnz	r2, 800e1cc <__swsetup_r+0xa4>
 800e1ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e1be:	d1c5      	bne.n	800e14c <__swsetup_r+0x24>
 800e1c0:	bd38      	pop	{r3, r4, r5, pc}
 800e1c2:	0799      	lsls	r1, r3, #30
 800e1c4:	bf58      	it	pl
 800e1c6:	6962      	ldrpl	r2, [r4, #20]
 800e1c8:	60a2      	str	r2, [r4, #8]
 800e1ca:	e7f4      	b.n	800e1b6 <__swsetup_r+0x8e>
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	e7f7      	b.n	800e1c0 <__swsetup_r+0x98>
 800e1d0:	2000004c 	.word	0x2000004c

0800e1d4 <__swhatbuf_r>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1dc:	4615      	mov	r5, r2
 800e1de:	2900      	cmp	r1, #0
 800e1e0:	461e      	mov	r6, r3
 800e1e2:	b096      	sub	sp, #88	@ 0x58
 800e1e4:	da0c      	bge.n	800e200 <__swhatbuf_r+0x2c>
 800e1e6:	89a3      	ldrh	r3, [r4, #12]
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e1ee:	bf14      	ite	ne
 800e1f0:	2340      	movne	r3, #64	@ 0x40
 800e1f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	6031      	str	r1, [r6, #0]
 800e1fa:	602b      	str	r3, [r5, #0]
 800e1fc:	b016      	add	sp, #88	@ 0x58
 800e1fe:	bd70      	pop	{r4, r5, r6, pc}
 800e200:	466a      	mov	r2, sp
 800e202:	f000 f849 	bl	800e298 <_fstat_r>
 800e206:	2800      	cmp	r0, #0
 800e208:	dbed      	blt.n	800e1e6 <__swhatbuf_r+0x12>
 800e20a:	9901      	ldr	r1, [sp, #4]
 800e20c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e210:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e214:	4259      	negs	r1, r3
 800e216:	4159      	adcs	r1, r3
 800e218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e21c:	e7eb      	b.n	800e1f6 <__swhatbuf_r+0x22>

0800e21e <__smakebuf_r>:
 800e21e:	898b      	ldrh	r3, [r1, #12]
 800e220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e222:	079d      	lsls	r5, r3, #30
 800e224:	4606      	mov	r6, r0
 800e226:	460c      	mov	r4, r1
 800e228:	d507      	bpl.n	800e23a <__smakebuf_r+0x1c>
 800e22a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e22e:	6023      	str	r3, [r4, #0]
 800e230:	6123      	str	r3, [r4, #16]
 800e232:	2301      	movs	r3, #1
 800e234:	6163      	str	r3, [r4, #20]
 800e236:	b003      	add	sp, #12
 800e238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e23a:	466a      	mov	r2, sp
 800e23c:	ab01      	add	r3, sp, #4
 800e23e:	f7ff ffc9 	bl	800e1d4 <__swhatbuf_r>
 800e242:	9f00      	ldr	r7, [sp, #0]
 800e244:	4605      	mov	r5, r0
 800e246:	4639      	mov	r1, r7
 800e248:	4630      	mov	r0, r6
 800e24a:	f7fd fa1b 	bl	800b684 <_malloc_r>
 800e24e:	b948      	cbnz	r0, 800e264 <__smakebuf_r+0x46>
 800e250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e254:	059a      	lsls	r2, r3, #22
 800e256:	d4ee      	bmi.n	800e236 <__smakebuf_r+0x18>
 800e258:	f023 0303 	bic.w	r3, r3, #3
 800e25c:	f043 0302 	orr.w	r3, r3, #2
 800e260:	81a3      	strh	r3, [r4, #12]
 800e262:	e7e2      	b.n	800e22a <__smakebuf_r+0xc>
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e26e:	81a3      	strh	r3, [r4, #12]
 800e270:	9b01      	ldr	r3, [sp, #4]
 800e272:	6020      	str	r0, [r4, #0]
 800e274:	b15b      	cbz	r3, 800e28e <__smakebuf_r+0x70>
 800e276:	4630      	mov	r0, r6
 800e278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e27c:	f000 f81e 	bl	800e2bc <_isatty_r>
 800e280:	b128      	cbz	r0, 800e28e <__smakebuf_r+0x70>
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	f023 0303 	bic.w	r3, r3, #3
 800e288:	f043 0301 	orr.w	r3, r3, #1
 800e28c:	81a3      	strh	r3, [r4, #12]
 800e28e:	89a3      	ldrh	r3, [r4, #12]
 800e290:	431d      	orrs	r5, r3
 800e292:	81a5      	strh	r5, [r4, #12]
 800e294:	e7cf      	b.n	800e236 <__smakebuf_r+0x18>
	...

0800e298 <_fstat_r>:
 800e298:	b538      	push	{r3, r4, r5, lr}
 800e29a:	2300      	movs	r3, #0
 800e29c:	4d06      	ldr	r5, [pc, #24]	@ (800e2b8 <_fstat_r+0x20>)
 800e29e:	4604      	mov	r4, r0
 800e2a0:	4608      	mov	r0, r1
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	602b      	str	r3, [r5, #0]
 800e2a6:	f7f5 fd49 	bl	8003d3c <_fstat>
 800e2aa:	1c43      	adds	r3, r0, #1
 800e2ac:	d102      	bne.n	800e2b4 <_fstat_r+0x1c>
 800e2ae:	682b      	ldr	r3, [r5, #0]
 800e2b0:	b103      	cbz	r3, 800e2b4 <_fstat_r+0x1c>
 800e2b2:	6023      	str	r3, [r4, #0]
 800e2b4:	bd38      	pop	{r3, r4, r5, pc}
 800e2b6:	bf00      	nop
 800e2b8:	20002768 	.word	0x20002768

0800e2bc <_isatty_r>:
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	2300      	movs	r3, #0
 800e2c0:	4d05      	ldr	r5, [pc, #20]	@ (800e2d8 <_isatty_r+0x1c>)
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	4608      	mov	r0, r1
 800e2c6:	602b      	str	r3, [r5, #0]
 800e2c8:	f7f5 fd47 	bl	8003d5a <_isatty>
 800e2cc:	1c43      	adds	r3, r0, #1
 800e2ce:	d102      	bne.n	800e2d6 <_isatty_r+0x1a>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	b103      	cbz	r3, 800e2d6 <_isatty_r+0x1a>
 800e2d4:	6023      	str	r3, [r4, #0]
 800e2d6:	bd38      	pop	{r3, r4, r5, pc}
 800e2d8:	20002768 	.word	0x20002768

0800e2dc <_init>:
 800e2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2de:	bf00      	nop
 800e2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2e2:	bc08      	pop	{r3}
 800e2e4:	469e      	mov	lr, r3
 800e2e6:	4770      	bx	lr

0800e2e8 <_fini>:
 800e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ea:	bf00      	nop
 800e2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ee:	bc08      	pop	{r3}
 800e2f0:	469e      	mov	lr, r3
 800e2f2:	4770      	bx	lr
